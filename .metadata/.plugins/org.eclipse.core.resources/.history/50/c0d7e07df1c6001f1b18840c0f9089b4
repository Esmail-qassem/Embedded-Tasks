#include "../inc/TrafficLightsControl_interface.h"
#include "../inc/TrafficLightsControl_config.h"
#include "../inc/TrafficLightsControl_private.h"
#include "../../../Services/Stack/Stack.h"

Stack TrafficStack;
int timer_counter=0;
StackEntry Local_Variable= HandleGreenState;
StackEntry x;


void test(void) {
	timer_counter++;

}

void TrafficLightInit(void)
{
	/*system initialization*/
	PORT_voidInit();
    CLCD_voidInit();
    GIE_Enable();
    TIMER1_voidInit();
	TIMER1_voidSetChannelACompMatch(31250);
	TIMER1_CTCASetCallBck(&test);
	/*stack initialization*/
			Stack_Creation(&TrafficStack);
//			Stack_Push(&TrafficStack,HandleRedState);
//			Stack_Push(&TrafficStack,HandleyellowState);
//			Stack_Push(&TrafficStack,HandleGreenState);

//			if (TrafficStack.top != NULL) {
//					Local_Variable = TrafficStack.top->entry;
//				}

}


void Traffic_Handler(void) {
    if (timer_counter <= GREEN_DURATION)
    {
    	Stack_Push(&TrafficStack,HandleGreenState);
        // State-specific function can be called here if needed
    }
    else if (timer_counter <= (GREEN_DURATION + YELLOW_DURATION))
    {
    	Stack_Push(&TrafficStack,HandleyellowState);
//        Local_Variable=HandleyellowState;
        // Pop the stack for the next state
        Stack_Pop(&TrafficStack, &x);
    }
    else if (timer_counter <= (GREEN_DURATION + YELLOW_DURATION + RED_DURATION))
    {
    	Stack_Push(&TrafficStack,HandleRedState);

        // Pop the stack for the next state
//        Local_Variable=HandleRedState;
    }
    else
    {
        // Reset timer and possibly reinitialize the stack
        timer_counter = 0;

        // Reinitialize the stack (optional, based on your system's design)
        Stack_Pop(&TrafficStack, &x);
        Stack_Pop(&TrafficStack, &x);
        Stack_Pop(&TrafficStack, &x);
    }
}


void TrafficLightMainFunction(void)
{
	Local_Variable();
	Traffic_Handler();

	/*display*/
	CLCD_voidGoToXY(0,0);
	CLCD_voidWriteNumber(timer_counter);


}


