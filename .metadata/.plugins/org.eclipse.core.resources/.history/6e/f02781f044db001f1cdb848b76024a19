#include "LCD_OLED/inc/OLED.h"

void SSD1306_Init(void)
{
    TWI_voidMasterInit();

    TWI_voidStartCondition();
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    TWI_voidSendData(0x00); // Command mode

    // Initialization sequence for SSD1306
    SSD1306_SendCommand(SSD1306_DISPLAY_OFF);
    SSD1306_SendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV);
    SSD1306_SendCommand(0x80); // Suggested ratio
    SSD1306_SendCommand(SSD1306_SET_MULTIPLEX);
    SSD1306_SendCommand(0x3F); // 1/64 duty
    SSD1306_SendCommand(SSD1306_SET_DISPLAY_OFFSET);
    SSD1306_SendCommand(0x00); // No offset
    SSD1306_SendCommand(SSD1306_SET_START_LINE | 0x00);
    SSD1306_SendCommand(SSD1306_CHARGE_PUMP);
    SSD1306_SendCommand(0x14); // Enable charge pump
    SSD1306_SendCommand(SSD1306_MEMORY_MODE);
    SSD1306_SendCommand(0x00); // Horizontal addressing mode
    SSD1306_SendCommand(SSD1306_SEG_REMAP);
    SSD1306_SendCommand(SSD1306_COM_SCAN_DEC);
    SSD1306_SendCommand(SSD1306_SET_COM_PINS);
    SSD1306_SendCommand(0x12);
    SSD1306_SendCommand(SSD1306_SET_CONTRAST);
    SSD1306_SendCommand(0xCF);
    SSD1306_SendCommand(SSD1306_SET_PRECHARGE);
    SSD1306_SendCommand(0xF1);
    SSD1306_SendCommand(SSD1306_SET_VCOM_DETECT);
    SSD1306_SendCommand(0x40);
    SSD1306_SendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
    SSD1306_SendCommand(SSD1306_NORMAL_DISPLAY);
    SSD1306_SendCommand(SSD1306_DISPLAY_ON);

    TWI_voidStopCondition();
}

void SSD1306_SendCommand(uint8 command)
{
    TWI_voidStartCondition();
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    TWI_voidSendData(0x00); // Command mode
    TWI_voidSendData(command);
    TWI_voidStopCondition();
}

void SSD1306_SendData(uint8 data)
{
    TWI_voidStartCondition();
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    TWI_voidSendData(0x40); // Data mode
    TWI_voidSendData(data);
    TWI_voidStopCondition();
}

void SSD1306_ClearDisplay(void)
{
    for (uint8_t page = 0; page < 8; page++)
    {
        SSD1306_SetCursor(page, 0); // Set cursor to the beginning of the page

        // Start a burst write for the entire row
        TWI_voidStartCondition();
        TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
        TWI_voidSendData(0x40); // Data mode

        for (uint8_t col = 0; col < 128; col++)
        {
            TWI_voidSendData(0x00); // Send blank data
        }

        TWI_voidStopCondition(); // Stop after writing the row
    }
}


void SSD1306_SetCursor(uint8 page, uint8 column)
{
    SSD1306_SendCommand(SSD1306_PAGE_ADDR);
    SSD1306_SendCommand(page);
    SSD1306_SendCommand(page);

    SSD1306_SendCommand(SSD1306_COLUMN_ADDR);
    SSD1306_SendCommand(column);
    SSD1306_SendCommand(127);
}

void SSD1306_DisplayNumber(int number, uint8_t page, uint8_t column)
{
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "%d", number);

    SSD1306_SetCursor(page, column);

    for (uint8_t i = 0; buffer[i] != '\0'; i++)
    {
        if (buffer[i] >= '0' && buffer[i] <= '9')
        {
            uint8_t digit = buffer[i] - '0'+16;
            for (uint8_t j = 0; j < 5; j++) // Each digit is 5 columns wide
            {
                SSD1306_SendData(Font_5x7[digit][j]);
            }
            SSD1306_SendData(0x00); // Add a column of spacing
        }
    }
}
