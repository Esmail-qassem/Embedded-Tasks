#include "../inc/TrafficLightsControl_interface.h"
#include "../inc/TrafficLightsControl_config.h"
#include "../inc/TrafficLightsControl_private.h"
#include "../../../Services/Stack/Stack.h"

Stack TrafficStack;
int timer_counter=0;
StackEntry Local_Variable;
StackEntry x;

void test(void) {
	timer_counter++;
	Local_Variable = TrafficStack.top->entry;

}

void TrafficLightInit(void)
{
	PORT_voidInit();
    CLCD_voidInit();
    GIE_Enable();
    TIMER1_voidInit();
	TIMER1_voidSetChannelACompMatch(31250);
	TIMER1_CTCASetCallBck(&test);
	/*stack initialization*/
    Stack_Creation(&TrafficStack);
    Stack_Push(&TrafficStack,HandleRedState);
    Stack_Push(&TrafficStack,HandleyellowState);
    Stack_Push(&TrafficStack,HandleGreenState);

    if (TrafficStack.top != NULL) {
            Local_Variable = TrafficStack.top->entry;
        }

}


void Traffic_Handler(void) {
    if (timer_counter <= GREEN_DURATION) {
        CLCD_voidGoToXY(1, 0);
        CLCD_voidSendString("A");
        // State-specific function can be called here if needed
    } else if (timer_counter <= (GREEN_DURATION + YELLOW_DURATION)) {
        CLCD_voidGoToXY(1, 0);
        CLCD_voidSendString("B");

        // Pop the stack for the next state
        Stack_Pop(&TrafficStack, &x);
    } else if (timer_counter <= (GREEN_DURATION + YELLOW_DURATION + RED_DURATION)) {
        CLCD_voidGoToXY(1, 0);
        CLCD_voidSendString("C");

        // Pop the stack for the next state
        Stack_Pop(&TrafficStack, &x);
    } else {
        // Reset timer and possibly reinitialize the stack
        timer_counter = 0;

        // Reinitialize the stack (optional, based on your system's design)
        Stack_Push(&TrafficStack, HandleRedState);
        Stack_Push(&TrafficStack, HandleyellowState);
        Stack_Push(&TrafficStack, HandleGreenState);
    }
}


void TrafficLightMainFunction(void)
{

	Traffic_Handler();
	Local_Variable();
	/*display*/
	CLCD_voidGoToXY(0,0);
	CLCD_voidWriteNumber(Local_Variable);


}


