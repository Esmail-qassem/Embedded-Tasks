#include "LCD_OLED/inc/OLED.h"

const uint8 Font_5x7[][5] =
 {
			0x00, 0x00, 0x00, 0x00, 0x00,
			0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
			0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
			0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
			0x18, 0x3C, 0x7E, 0x3C, 0x18,
			0x1C, 0x57, 0x7D, 0x57, 0x1C,
			0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
			0x00, 0x18, 0x3C, 0x18, 0x00,
			0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
			0x00, 0x18, 0x24, 0x18, 0x00,
			0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
			0x30, 0x48, 0x3A, 0x06, 0x0E,
			0x26, 0x29, 0x79, 0x29, 0x26,
			0x40, 0x7F, 0x05, 0x05, 0x07,
			0x40, 0x7F, 0x05, 0x25, 0x3F,
			0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
			0x7F, 0x3E, 0x1C, 0x1C, 0x08,
			0x08, 0x1C, 0x1C, 0x3E, 0x7F,
			0x14, 0x22, 0x7F, 0x22, 0x14,
			0x5F, 0x5F, 0x00, 0x5F, 0x5F,
			0x06, 0x09, 0x7F, 0x01, 0x7F,
			0x00, 0x66, 0x89, 0x95, 0x6A,
			0x60, 0x60, 0x60, 0x60, 0x60,
			0x94, 0xA2, 0xFF, 0xA2, 0x94,
			0x08, 0x04, 0x7E, 0x04, 0x08,
			0x10, 0x20, 0x7E, 0x20, 0x10,
			0x08, 0x08, 0x2A, 0x1C, 0x08,
			0x08, 0x1C, 0x2A, 0x08, 0x08,
			0x1E, 0x10, 0x10, 0x10, 0x10,
			0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
			0x30, 0x38, 0x3E, 0x38, 0x30,
			0x06, 0x0E, 0x3E, 0x0E, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00,   // Space
			0x00, 0x00, 0x5F, 0x00, 0x00,
			0x00, 0x07, 0x00, 0x07, 0x00,
			0x14, 0x7F, 0x14, 0x7F, 0x14,
			0x24, 0x2A, 0x7F, 0x2A, 0x12,
			0x23, 0x13, 0x08, 0x64, 0x62,
			0x36, 0x49, 0x56, 0x20, 0x50,
			0x00, 0x08, 0x07, 0x03, 0x00,
			0x00, 0x1C, 0x22, 0x41, 0x00,
			0x00, 0x41, 0x22, 0x1C, 0x00,
			0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
			0x08, 0x08, 0x3E, 0x08, 0x08,
			0x00, 0x80, 0x70, 0x30, 0x00,
			0x08, 0x08, 0x08, 0x08, 0x08,
			0x00, 0x00, 0x60, 0x60, 0x00,
			0x20, 0x10, 0x08, 0x04, 0x02,
			0x3E, 0x51, 0x49, 0x45, 0x3E,
			0x00, 0x42, 0x7F, 0x40, 0x00,
			0x72, 0x49, 0x49, 0x49, 0x46,
			0x21, 0x41, 0x49, 0x4D, 0x33,
			0x18, 0x14, 0x12, 0x7F, 0x10,
			0x27, 0x45, 0x45, 0x45, 0x39,
			0x3C, 0x4A, 0x49, 0x49, 0x31,
			0x41, 0x21, 0x11, 0x09, 0x07,
			0x36, 0x49, 0x49, 0x49, 0x36,
			0x46, 0x49, 0x49, 0x29, 0x1E,
			0x00, 0x00, 0x14, 0x00, 0x00,
			0x00, 0x40, 0x34, 0x00, 0x00,
			0x00, 0x08, 0x14, 0x22, 0x41,
			0x14, 0x14, 0x14, 0x14, 0x14,
			0x00, 0x41, 0x22, 0x14, 0x08,
			0x02, 0x01, 0x59, 0x09, 0x06,
			0x3E, 0x41, 0x5D, 0x59, 0x4E,
			0x7C, 0x12, 0x11, 0x12, 0x7C,
			0x7F, 0x49, 0x49, 0x49, 0x36,
			0x3E, 0x41, 0x41, 0x41, 0x22,
			0x7F, 0x41, 0x41, 0x41, 0x3E,
			0x7F, 0x49, 0x49, 0x49, 0x41,
			0x7F, 0x09, 0x09, 0x09, 0x01,
			0x3E, 0x41, 0x41, 0x51, 0x73,
			0x7F, 0x08, 0x08, 0x08, 0x7F,
			0x00, 0x41, 0x7F, 0x41, 0x00,
			0x20, 0x40, 0x41, 0x3F, 0x01,
			0x7F, 0x08, 0x14, 0x22, 0x41,
			0x7F, 0x40, 0x40, 0x40, 0x40,
			0x7F, 0x02, 0x1C, 0x02, 0x7F,
			0x7F, 0x04, 0x08, 0x10, 0x7F,
			0x3E, 0x41, 0x41, 0x41, 0x3E,
			0x7F, 0x09, 0x09, 0x09, 0x06,
			0x3E, 0x41, 0x51, 0x21, 0x5E,
			0x7F, 0x09, 0x19, 0x29, 0x46,
			0x26, 0x49, 0x49, 0x49, 0x32,
			0x03, 0x01, 0x7F, 0x01, 0x03,
			0x3F, 0x40, 0x40, 0x40, 0x3F,
			0x1F, 0x20, 0x40, 0x20, 0x1F,
			0x3F, 0x40, 0x38, 0x40, 0x3F,
			0x63, 0x14, 0x08, 0x14, 0x63,
			0x03, 0x04, 0x78, 0x04, 0x03,
			0x61, 0x59, 0x49, 0x4D, 0x43,
			0x00, 0x7F, 0x41, 0x41, 0x41,
			0x02, 0x04, 0x08, 0x10, 0x20,
			0x00, 0x41, 0x41, 0x41, 0x7F,
			0x04, 0x02, 0x01, 0x02, 0x04,
			0x40, 0x40, 0x40, 0x40, 0x40,
			0x00, 0x03, 0x07, 0x08, 0x00,
			0x20, 0x54, 0x54, 0x78, 0x40,
			0x7F, 0x28, 0x44, 0x44, 0x38,
			0x38, 0x44, 0x44, 0x44, 0x28,
			0x38, 0x44, 0x44, 0x28, 0x7F,
			0x38, 0x54, 0x54, 0x54, 0x18,
			0x00, 0x08, 0x7E, 0x09, 0x02,
			0x18, 0xA4, 0xA4, 0x9C, 0x78,
			0x7F, 0x08, 0x04, 0x04, 0x78,
			0x00, 0x44, 0x7D, 0x40, 0x00,
			0x20, 0x40, 0x40, 0x3D, 0x00,
			0x7F, 0x10, 0x28, 0x44, 0x00,
			0x00, 0x41, 0x7F, 0x40, 0x00,
			0x7C, 0x04, 0x78, 0x04, 0x78,
			0x7C, 0x08, 0x04, 0x04, 0x78,
			0x38, 0x44, 0x44, 0x44, 0x38,
			0xFC, 0x18, 0x24, 0x24, 0x18,
			0x18, 0x24, 0x24, 0x18, 0xFC,
			0x7C, 0x08, 0x04, 0x04, 0x08,
			0x48, 0x54, 0x54, 0x54, 0x24,
			0x04, 0x04, 0x3F, 0x44, 0x24,
			0x3C, 0x40, 0x40, 0x20, 0x7C,
			0x1C, 0x20, 0x40, 0x20, 0x1C,
			0x3C, 0x40, 0x30, 0x40, 0x3C,
			0x44, 0x28, 0x10, 0x28, 0x44,
			0x4C, 0x90, 0x90, 0x90, 0x7C,
			0x44, 0x64, 0x54, 0x4C, 0x44,
			0x00, 0x08, 0x36, 0x41, 0x00,
			0x00, 0x00, 0x77, 0x00, 0x00,
			0x00, 0x41, 0x36, 0x08, 0x00,
			0x02, 0x01, 0x02, 0x04, 0x02,
			0x3C, 0x26, 0x23, 0x26, 0x3C,
			0x1E, 0xA1, 0xA1, 0x61, 0x12,
			0x3A, 0x40, 0x40, 0x20, 0x7A,
			0x38, 0x54, 0x54, 0x55, 0x59,
			0x21, 0x55, 0x55, 0x79, 0x41,
			0x21, 0x54, 0x54, 0x78, 0x41,
			0x21, 0x55, 0x54, 0x78, 0x40,
			0x20, 0x54, 0x55, 0x79, 0x40,
			0x0C, 0x1E, 0x52, 0x72, 0x12,
			0x39, 0x55, 0x55, 0x55, 0x59,
			0x39, 0x54, 0x54, 0x54, 0x59,
			0x39, 0x55, 0x54, 0x54, 0x58,
			0x00, 0x00, 0x45, 0x7C, 0x41,
			0x00, 0x02, 0x45, 0x7D, 0x42,
			0x00, 0x01, 0x45, 0x7C, 0x40,
			0xF0, 0x29, 0x24, 0x29, 0xF0,
			0xF0, 0x28, 0x25, 0x28, 0xF0,
			0x7C, 0x54, 0x55, 0x45, 0x00,
			0x20, 0x54, 0x54, 0x7C, 0x54,
			0x7C, 0x0A, 0x09, 0x7F, 0x49,
			0x32, 0x49, 0x49, 0x49, 0x32,
			0x32, 0x48, 0x48, 0x48, 0x32,
			0x32, 0x4A, 0x48, 0x48, 0x30,
			0x3A, 0x41, 0x41, 0x21, 0x7A,
			0x3A, 0x42, 0x40, 0x20, 0x78,
			0x00, 0x9D, 0xA0, 0xA0, 0x7D,
			0x39, 0x44, 0x44, 0x44, 0x39,
			0x3D, 0x40, 0x40, 0x40, 0x3D,
			0x3C, 0x24, 0xFF, 0x24, 0x24,
			0x48, 0x7E, 0x49, 0x43, 0x66,
			0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
			0xFF, 0x09, 0x29, 0xF6, 0x20,
			0xC0, 0x88, 0x7E, 0x09, 0x03,
			0x20, 0x54, 0x54, 0x79, 0x41,
			0x00, 0x00, 0x44, 0x7D, 0x41,
			0x30, 0x48, 0x48, 0x4A, 0x32,
			0x38, 0x40, 0x40, 0x22, 0x7A,
			0x00, 0x7A, 0x0A, 0x0A, 0x72,
			0x7D, 0x0D, 0x19, 0x31, 0x7D,
			0x26, 0x29, 0x29, 0x2F, 0x28,
			0x26, 0x29, 0x29, 0x29, 0x26,
			0x30, 0x48, 0x4D, 0x40, 0x20,
			0x38, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x38,
			0x2F, 0x10, 0xC8, 0xAC, 0xBA,
			0x2F, 0x10, 0x28, 0x34, 0xFA,
			0x00, 0x00, 0x7B, 0x00, 0x00,
			0x08, 0x14, 0x2A, 0x14, 0x22,
			0x22, 0x14, 0x2A, 0x14, 0x08,
			0xAA, 0x00, 0x55, 0x00, 0xAA,
			0xAA, 0x55, 0xAA, 0x55, 0xAA,
			0x00, 0x00, 0x00, 0xFF, 0x00,
			0x10, 0x10, 0x10, 0xFF, 0x00,
			0x14, 0x14, 0x14, 0xFF, 0x00,
			0x10, 0x10, 0xFF, 0x00, 0xFF,
			0x10, 0x10, 0xF0, 0x10, 0xF0,
			0x14, 0x14, 0x14, 0xFC, 0x00,
			0x14, 0x14, 0xF7, 0x00, 0xFF,
			0x00, 0x00, 0xFF, 0x00, 0xFF,
			0x14, 0x14, 0xF4, 0x04, 0xFC,
			0x14, 0x14, 0x17, 0x10, 0x1F,
			0x10, 0x10, 0x1F, 0x10, 0x1F,
			0x14, 0x14, 0x14, 0x1F, 0x00,
			0x10, 0x10, 0x10, 0xF0, 0x00,
			0x00, 0x00, 0x00, 0x1F, 0x10,
			0x10, 0x10, 0x10, 0x1F, 0x10,
			0x10, 0x10, 0x10, 0xF0, 0x10,
			0x00, 0x00, 0x00, 0xFF, 0x10,
			0x10, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0xFF, 0x10,
			0x00, 0x00, 0x00, 0xFF, 0x14,
			0x00, 0x00, 0xFF, 0x00, 0xFF,
			0x00, 0x00, 0x1F, 0x10, 0x17,
			0x00, 0x00, 0xFC, 0x04, 0xF4,
			0x14, 0x14, 0x17, 0x10, 0x17,
			0x14, 0x14, 0xF4, 0x04, 0xF4,
			0x00, 0x00, 0xFF, 0x00, 0xF7,
			0x14, 0x14, 0x14, 0x14, 0x14,
			0x14, 0x14, 0xF7, 0x00, 0xF7,
			0x14, 0x14, 0x14, 0x17, 0x14,
			0x10, 0x10, 0x1F, 0x10, 0x1F,
			0x14, 0x14, 0x14, 0xF4, 0x14,
			0x10, 0x10, 0xF0, 0x10, 0xF0,
			0x00, 0x00, 0x1F, 0x10, 0x1F,
			0x00, 0x00, 0x00, 0x1F, 0x14,
			0x00, 0x00, 0x00, 0xFC, 0x14,
			0x00, 0x00, 0xF0, 0x10, 0xF0,
			0x10, 0x10, 0xFF, 0x10, 0xFF,
			0x14, 0x14, 0x14, 0xFF, 0x14,
			0x10, 0x10, 0x10, 0x1F, 0x00,
			0x00, 0x00, 0x00, 0xF0, 0x10,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
			0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
			0x38, 0x44, 0x44, 0x38, 0x44,
			0x7C, 0x2A, 0x2A, 0x3E, 0x14,
			0x7E, 0x02, 0x02, 0x06, 0x06,
			0x02, 0x7E, 0x02, 0x7E, 0x02,
			0x63, 0x55, 0x49, 0x41, 0x63,
			0x38, 0x44, 0x44, 0x3C, 0x04,
			0x40, 0x7E, 0x20, 0x1E, 0x20,
			0x06, 0x02, 0x7E, 0x02, 0x02,
			0x99, 0xA5, 0xE7, 0xA5, 0x99,
			0x1C, 0x2A, 0x49, 0x2A, 0x1C,
			0x4C, 0x72, 0x01, 0x72, 0x4C,
			0x30, 0x4A, 0x4D, 0x4D, 0x30,
			0x30, 0x48, 0x78, 0x48, 0x30,
			0xBC, 0x62, 0x5A, 0x46, 0x3D,
			0x3E, 0x49, 0x49, 0x49, 0x00,
			0x7E, 0x01, 0x01, 0x01, 0x7E,
			0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
			0x44, 0x44, 0x5F, 0x44, 0x44,
			0x40, 0x51, 0x4A, 0x44, 0x40,
			0x40, 0x44, 0x4A, 0x51, 0x40,
			0x00, 0x00, 0xFF, 0x01, 0x03,
			0xE0, 0x80, 0xFF, 0x00, 0x00,
			0x08, 0x08, 0x6B, 0x6B, 0x08,
			0x36, 0x12, 0x36, 0x24, 0x36,
			0x06, 0x0F, 0x09, 0x0F, 0x06,
			0x00, 0x00, 0x18, 0x18, 0x00,
			0x00, 0x00, 0x10, 0x10, 0x00,
			0x30, 0x40, 0xFF, 0x01, 0x01,
			0x00, 0x1F, 0x01, 0x01, 0x1E,
			0x00, 0x19, 0x1D, 0x17, 0x12,
			0x00, 0x3C, 0x3C, 0x3C, 0x3C,
			0x00, 0x00, 0x00, 0x00, 0x00,
		};

void SSD1306_Init(void)
{
    TWI_voidMasterInit();

    TWI_voidStartCondition();
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    TWI_voidSendData(0x00); // Command mode

    // Initialization sequence for SSD1306
    SSD1306_SendCommand(SSD1306_DISPLAY_OFF);
    SSD1306_SendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV);
    SSD1306_SendCommand(0x80); // Suggested ratio
    SSD1306_SendCommand(SSD1306_SET_MULTIPLEX);
    SSD1306_SendCommand(0x3F); // 1/64 duty
    SSD1306_SendCommand(SSD1306_SET_DISPLAY_OFFSET);
    SSD1306_SendCommand(0x00); // No offset
    SSD1306_SendCommand(SSD1306_SET_START_LINE | 0x00);
    SSD1306_SendCommand(SSD1306_CHARGE_PUMP);
    SSD1306_SendCommand(0x14); // Enable charge pump
    SSD1306_SendCommand(SSD1306_MEMORY_MODE);
    SSD1306_SendCommand(0x00); // Horizontal addressing mode
    SSD1306_SendCommand(SSD1306_SEG_REMAP);
    SSD1306_SendCommand(SSD1306_COM_SCAN_DEC);
    SSD1306_SendCommand(SSD1306_SET_COM_PINS);
    SSD1306_SendCommand(0x12);
    SSD1306_SendCommand(SSD1306_SET_CONTRAST);
    SSD1306_SendCommand(0xCF);
    SSD1306_SendCommand(SSD1306_SET_PRECHARGE);
    SSD1306_SendCommand(0xF1);
    SSD1306_SendCommand(SSD1306_SET_VCOM_DETECT);
    SSD1306_SendCommand(0x40);
    SSD1306_SendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
    SSD1306_SendCommand(SSD1306_NORMAL_DISPLAY);
    SSD1306_SendCommand(SSD1306_DISPLAY_ON);

    TWI_voidStopCondition();
}

void SSD1306_SendCommand(uint8 command)
{
    TWI_voidStartCondition();
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    TWI_voidSendData(0x00); // Command mode
    TWI_voidSendData(command);
    TWI_voidStopCondition();
}

void SSD1306_SendData(uint8 data)
{
    TWI_voidStartCondition();
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    TWI_voidSendData(0x40); // Data mode
    TWI_voidSendData(data);
    TWI_voidStopCondition();
}

void SSD1306_ClearDisplay(void)
{
    for (uint8 page = 0; page < 8; page++)
    {
        SSD1306_SetCursor(page, 0); // Set cursor to the beginning of the page

        // Start a burst write for the entire row
        TWI_voidStartCondition();
        TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
        TWI_voidSendData(0x40); // Data mode

        for (uint8 col = 0; col < 128; col++)
        {
            TWI_voidSendData(0x00); // Send blank data
        }

        TWI_voidStopCondition(); // Stop after writing the row
    }
}


void SSD1306_SetCursor(uint8 page, uint8 column)
{
    SSD1306_SendCommand(SSD1306_PAGE_ADDR);
    SSD1306_SendCommand(page);
    SSD1306_SendCommand(page);

    SSD1306_SendCommand(SSD1306_COLUMN_ADDR);
    SSD1306_SendCommand(column);
    SSD1306_SendCommand(127);
}

void SSD1306_DisplayNumber(int number, uint8 page, uint8 column)
{
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "%d", number);

    SSD1306_SetCursor(page, column);

    for (uint8 i = 0; buffer[i] != '\0'; i++)
    {
        if (buffer[i] >= '0' && buffer[i] <= '9')
        {
            uint8 digit = buffer[i] - '0'+16;
            for (uint8 j = 0; j < 5; j++) // Each digit is 5 columns wide
            {
                SSD1306_SendData(Font_5x7[digit][j]);
            }
            SSD1306_SendData(0x00); // Add a column of spacing
        }
    }
}


void SSD1306_DisplayChar(uint8 c,uint8 page, uint8 column)
{
    // Validate character range (only printable ASCII characters 32-126)

    	 SSD1306_SetCursor(page, column);

    	    // Get character index in the font array
    	    uint8 charIndex = c - 32;

    	    // Send each column of the character to the OLED
    	    for (uint8 i = 0; i < 5; i++)
    	    {
    	        SSD1306_SendData(Font_5x7[charIndex][i]);
    	    }

    	    // Add a column of spacing after the character
    	    SSD1306_SendData(0x00);



}

void SSD1306_DisplayString(const uint8 *str, uint8 page, uint8 column)
{

	uint8 Local_uint8Counter=0;
	while(str[Local_uint8Counter]!='\0')
    {
        // Check if there's space for the next character
        if (column >= 128)
        {
            page++;
            column = 0;
        }

        // Display the character
        SSD1306_DisplayChar(str[Local_uint8Counter], page, column);

        // Advance the column by the width of a character (5 pixels + 1 spacing)
        column += 6;

        // Move to the next character
        Local_uint8Counter++;
    }
}




