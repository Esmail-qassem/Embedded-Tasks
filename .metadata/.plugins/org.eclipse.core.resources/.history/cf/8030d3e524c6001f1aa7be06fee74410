
AT32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00003402  00003496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080008e  0080008e  000034c4  2**0
                  ALLOC
  3 .stab         00003ff0  00000000  00000000  000034c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000031fc  00000000  00000000  000074b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e244  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e631  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000edff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__vector_1>
       8:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_2>
       c:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_3>
      10:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_4>
      14:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_5>
      18:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_6>
      1c:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_7>
      20:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_8>
      24:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_9>
      28:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_10>
      2c:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <main>
      8a:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Stack_Full>:
#include "stdio.h"
#include "../../BSW/LIB/STD_TYPES.h"
#include "Stack.h"

uint8 static Stack_Full(Stack* My_Stack)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Stack_Full+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
    return 0;
     b54:	80 e0       	ldi	r24, 0x00	; 0
}
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <Stack_Empty>:
uint8 static Stack_Empty(Stack* My_Stack)
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	00 d0       	rcall	.+0      	; 0xb66 <Stack_Empty+0x6>
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	9a 83       	std	Y+2, r25	; 0x02
     b6e:	89 83       	std	Y+1, r24	; 0x01
    return (My_Stack->top==NULL);
     b70:	e9 81       	ldd	r30, Y+1	; 0x01
     b72:	fa 81       	ldd	r31, Y+2	; 0x02
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	1b 82       	std	Y+3, r1	; 0x03
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	11 f4       	brne	.+4      	; 0xb82 <Stack_Empty+0x22>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	8b 83       	std	Y+3, r24	; 0x03
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <Stack_Creation>:

Status Stack_Creation(Stack* My_Stack)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	00 d0       	rcall	.+0      	; 0xb96 <Stack_Creation+0x6>
     b96:	0f 92       	push	r0
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	9b 83       	std	Y+3, r25	; 0x03
     b9e:	8a 83       	std	Y+2, r24	; 0x02
    Status Local=E_NOT_OK;
     ba0:	19 82       	std	Y+1, r1	; 0x01
    
    if(NULL==My_Stack)
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	9b 81       	ldd	r25, Y+3	; 0x03
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	61 f0       	breq	.+24     	; 0xbc2 <Stack_Creation+0x32>
    {
        //do nothing
    }
    else
    {
        My_Stack->Size=0;
     baa:	ea 81       	ldd	r30, Y+2	; 0x02
     bac:	fb 81       	ldd	r31, Y+3	; 0x03
     bae:	12 82       	std	Z+2, r1	; 0x02
     bb0:	13 82       	std	Z+3, r1	; 0x03
     bb2:	14 82       	std	Z+4, r1	; 0x04
     bb4:	15 82       	std	Z+5, r1	; 0x05
        My_Stack->top=NULL;
     bb6:	ea 81       	ldd	r30, Y+2	; 0x02
     bb8:	fb 81       	ldd	r31, Y+3	; 0x03
     bba:	11 82       	std	Z+1, r1	; 0x01
     bbc:	10 82       	st	Z, r1
         Local=E_OK;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	89 83       	std	Y+1, r24	; 0x01

    }
return Local;
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <Stack_Push>:
Status Stack_Push(Stack* My_Stack,StackEnery Variable)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	29 97       	sbiw	r28, 0x09	; 9
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	9d 83       	std	Y+5, r25	; 0x05
     be6:	8c 83       	std	Y+4, r24	; 0x04
     be8:	4e 83       	std	Y+6, r20	; 0x06
     bea:	5f 83       	std	Y+7, r21	; 0x07
     bec:	68 87       	std	Y+8, r22	; 0x08
     bee:	79 87       	std	Y+9, r23	; 0x09
    Status Local=E_NOT_OK;
     bf0:	1b 82       	std	Y+3, r1	; 0x03
    StackNode * Local_Pointer=(StackNode*)malloc(sizeof(StackNode));
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <malloc>
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
    
    if(NULL==My_Stack|| Stack_Full(My_Stack))
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	9d 81       	ldd	r25, Y+5	; 0x05
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	79 f1       	breq	.+94     	; 0xc64 <Stack_Push+0x94>
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	9d 81       	ldd	r25, Y+5	; 0x05
     c0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Stack_Full>
     c0e:	88 23       	and	r24, r24
     c10:	49 f5       	brne	.+82     	; 0xc64 <Stack_Push+0x94>
        //do nothing
    }
    else
    {
        
        Local_Pointer->entry=Variable;
     c12:	e9 81       	ldd	r30, Y+1	; 0x01
     c14:	fa 81       	ldd	r31, Y+2	; 0x02
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	a8 85       	ldd	r26, Y+8	; 0x08
     c1c:	b9 85       	ldd	r27, Y+9	; 0x09
     c1e:	82 83       	std	Z+2, r24	; 0x02
     c20:	93 83       	std	Z+3, r25	; 0x03
     c22:	a4 83       	std	Z+4, r26	; 0x04
     c24:	b5 83       	std	Z+5, r27	; 0x05
        Local_Pointer->Next=My_Stack->top;
     c26:	ec 81       	ldd	r30, Y+4	; 0x04
     c28:	fd 81       	ldd	r31, Y+5	; 0x05
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	e9 81       	ldd	r30, Y+1	; 0x01
     c30:	fa 81       	ldd	r31, Y+2	; 0x02
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
        My_Stack->top=Local_Pointer;
     c36:	ec 81       	ldd	r30, Y+4	; 0x04
     c38:	fd 81       	ldd	r31, Y+5	; 0x05
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
     c3e:	91 83       	std	Z+1, r25	; 0x01
     c40:	80 83       	st	Z, r24
        My_Stack->Size++;
     c42:	ec 81       	ldd	r30, Y+4	; 0x04
     c44:	fd 81       	ldd	r31, Y+5	; 0x05
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	a4 81       	ldd	r26, Z+4	; 0x04
     c4c:	b5 81       	ldd	r27, Z+5	; 0x05
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	a1 1d       	adc	r26, r1
     c52:	b1 1d       	adc	r27, r1
     c54:	ec 81       	ldd	r30, Y+4	; 0x04
     c56:	fd 81       	ldd	r31, Y+5	; 0x05
     c58:	82 83       	std	Z+2, r24	; 0x02
     c5a:	93 83       	std	Z+3, r25	; 0x03
     c5c:	a4 83       	std	Z+4, r26	; 0x04
     c5e:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	8b 83       	std	Y+3, r24	; 0x03
    }
return Local;
     c64:	8b 81       	ldd	r24, Y+3	; 0x03

}
     c66:	29 96       	adiw	r28, 0x09	; 9
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <Stack_Pop>:
Status Stack_Pop(Stack* My_Stack,StackEnery* Variable)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	27 97       	sbiw	r28, 0x07	; 7
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	9d 83       	std	Y+5, r25	; 0x05
     c8e:	8c 83       	std	Y+4, r24	; 0x04
     c90:	7f 83       	std	Y+7, r23	; 0x07
     c92:	6e 83       	std	Y+6, r22	; 0x06
    StackNode* Local_Pointer= NULL;
     c94:	1b 82       	std	Y+3, r1	; 0x03
     c96:	1a 82       	std	Y+2, r1	; 0x02
    Status Local=E_NOT_OK;
     c98:	19 82       	std	Y+1, r1	; 0x01
    
    if(NULL==My_Stack || NULL == Variable|| Stack_Empty(My_Stack))
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	9d 81       	ldd	r25, Y+5	; 0x05
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	09 f4       	brne	.+2      	; 0xca4 <Stack_Pop+0x2c>
     ca2:	3f c0       	rjmp	.+126    	; 0xd22 <Stack_Pop+0xaa>
     ca4:	8e 81       	ldd	r24, Y+6	; 0x06
     ca6:	9f 81       	ldd	r25, Y+7	; 0x07
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	d9 f1       	breq	.+118    	; 0xd22 <Stack_Pop+0xaa>
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	0e 94 b0 05 	call	0xb60	; 0xb60 <Stack_Empty>
     cb4:	88 23       	and	r24, r24
     cb6:	a9 f5       	brne	.+106    	; 0xd22 <Stack_Pop+0xaa>
        //do nothing
    }
    else
    {
        
        *Variable=My_Stack->top->entry;
     cb8:	ec 81       	ldd	r30, Y+4	; 0x04
     cba:	fd 81       	ldd	r31, Y+5	; 0x05
     cbc:	01 90       	ld	r0, Z+
     cbe:	f0 81       	ld	r31, Z
     cc0:	e0 2d       	mov	r30, r0
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	a4 81       	ldd	r26, Z+4	; 0x04
     cc8:	b5 81       	ldd	r27, Z+5	; 0x05
     cca:	ee 81       	ldd	r30, Y+6	; 0x06
     ccc:	ff 81       	ldd	r31, Y+7	; 0x07
     cce:	80 83       	st	Z, r24
     cd0:	91 83       	std	Z+1, r25	; 0x01
     cd2:	a2 83       	std	Z+2, r26	; 0x02
     cd4:	b3 83       	std	Z+3, r27	; 0x03
        Local_Pointer= My_Stack->top;
     cd6:	ec 81       	ldd	r30, Y+4	; 0x04
     cd8:	fd 81       	ldd	r31, Y+5	; 0x05
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	9b 83       	std	Y+3, r25	; 0x03
     ce0:	8a 83       	std	Y+2, r24	; 0x02
        My_Stack->top=My_Stack->top->Next;
     ce2:	ec 81       	ldd	r30, Y+4	; 0x04
     ce4:	fd 81       	ldd	r31, Y+5	; 0x05
     ce6:	01 90       	ld	r0, Z+
     ce8:	f0 81       	ld	r31, Z
     cea:	e0 2d       	mov	r30, r0
     cec:	80 81       	ld	r24, Z
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	ec 81       	ldd	r30, Y+4	; 0x04
     cf2:	fd 81       	ldd	r31, Y+5	; 0x05
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24
        free(Local_Pointer);     
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	9b 81       	ldd	r25, Y+3	; 0x03
     cfc:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <free>
        My_Stack->Size--;
     d00:	ec 81       	ldd	r30, Y+4	; 0x04
     d02:	fd 81       	ldd	r31, Y+5	; 0x05
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	a4 81       	ldd	r26, Z+4	; 0x04
     d0a:	b5 81       	ldd	r27, Z+5	; 0x05
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	a1 09       	sbc	r26, r1
     d10:	b1 09       	sbc	r27, r1
     d12:	ec 81       	ldd	r30, Y+4	; 0x04
     d14:	fd 81       	ldd	r31, Y+5	; 0x05
     d16:	82 83       	std	Z+2, r24	; 0x02
     d18:	93 83       	std	Z+3, r25	; 0x03
     d1a:	a4 83       	std	Z+4, r26	; 0x04
     d1c:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	89 83       	std	Y+1, r24	; 0x01
    }
return Local;
     d22:	89 81       	ldd	r24, Y+1	; 0x01
}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <Stack_Display>:

Status Stack_Display(Stack* My_Stack) {
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <Stack_Display+0x6>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <Stack_Display+0x8>
     d3e:	0f 92       	push	r0
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	9d 83       	std	Y+5, r25	; 0x05
     d46:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     d48:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* temp = NULL;
     d4a:	1a 82       	std	Y+2, r1	; 0x02
     d4c:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == My_Stack) {
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	e1 f1       	breq	.+120    	; 0xdce <Stack_Display+0x98>
        // Do nothing
    } else {
        temp = My_Stack->top;
     d56:	ec 81       	ldd	r30, Y+4	; 0x04
     d58:	fd 81       	ldd	r31, Y+5	; 0x05
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	2f c0       	rjmp	.+94     	; 0xdc2 <Stack_Display+0x8c>
        while (temp != NULL) {
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	e9 81       	ldd	r30, Y+1	; 0x01
     d6e:	fa 81       	ldd	r31, Y+2	; 0x02
     d70:	22 81       	ldd	r18, Z+2	; 0x02
     d72:	33 81       	ldd	r19, Z+3	; 0x03
     d74:	44 81       	ldd	r20, Z+4	; 0x04
     d76:	55 81       	ldd	r21, Z+5	; 0x05
     d78:	8d b7       	in	r24, 0x3d	; 61
     d7a:	9e b7       	in	r25, 0x3e	; 62
     d7c:	08 97       	sbiw	r24, 0x08	; 8
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	9e bf       	out	0x3e, r25	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	8d bf       	out	0x3d, r24	; 61
     d88:	ed b7       	in	r30, 0x3d	; 61
     d8a:	fe b7       	in	r31, 0x3e	; 62
     d8c:	31 96       	adiw	r30, 0x01	; 1
     d8e:	80 e6       	ldi	r24, 0x60	; 96
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	73 83       	std	Z+3, r23	; 0x03
     d98:	62 83       	std	Z+2, r22	; 0x02
     d9a:	24 83       	std	Z+4, r18	; 0x04
     d9c:	35 83       	std	Z+5, r19	; 0x05
     d9e:	46 83       	std	Z+6, r20	; 0x06
     da0:	57 83       	std	Z+7, r21	; 0x07
     da2:	0e 94 6d 17 	call	0x2eda	; 0x2eda <printf>
     da6:	8d b7       	in	r24, 0x3d	; 61
     da8:	9e b7       	in	r25, 0x3e	; 62
     daa:	08 96       	adiw	r24, 0x08	; 8
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	9e bf       	out	0x3e, r25	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	8d bf       	out	0x3d, r24	; 61
            temp = temp->Next;
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	80 81       	ld	r24, Z
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	89 83       	std	Y+1, r24	; 0x01
    StackNode* temp = NULL;
    if (NULL == My_Stack) {
        // Do nothing
    } else {
        temp = My_Stack->top;
        while (temp != NULL) {
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	69 f6       	brne	.-102    	; 0xd64 <Stack_Display+0x2e>
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
            temp = temp->Next;
        }
        Local = E_OK;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <Clear_Stack>:
Status Clear_Stack(Stack* My_Stack)
{   
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <Clear_Stack+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <Clear_Stack+0x8>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9d 83       	std	Y+5, r25	; 0x05
     df0:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     df2:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* Local_pointer = NULL;
     df4:	1a 82       	std	Y+2, r1	; 0x02
     df6:	19 82       	std	Y+1, r1	; 0x01

   Local_pointer=My_Stack->top;
     df8:	ec 81       	ldd	r30, Y+4	; 0x04
     dfa:	fd 81       	ldd	r31, Y+5	; 0x05
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == My_Stack)
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	f9 f0       	breq	.+62     	; 0xe4a <Clear_Stack+0x6a>
     e0c:	12 c0       	rjmp	.+36     	; 0xe32 <Clear_Stack+0x52>
    } 
    else 
    {   
        while(Local_pointer)
        {
           Local_pointer= Local_pointer->Next;
     e0e:	e9 81       	ldd	r30, Y+1	; 0x01
     e10:	fa 81       	ldd	r31, Y+2	; 0x02
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
            free(My_Stack->top); 
     e1a:	ec 81       	ldd	r30, Y+4	; 0x04
     e1c:	fd 81       	ldd	r31, Y+5	; 0x05
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <free>
            My_Stack->top=Local_pointer;
     e26:	ec 81       	ldd	r30, Y+4	; 0x04
     e28:	fd 81       	ldd	r31, Y+5	; 0x05
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24
    {
        // Do nothing
    } 
    else 
    {   
        while(Local_pointer)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	51 f7       	brne	.-44     	; 0xe0e <Clear_Stack+0x2e>
        {
           Local_pointer= Local_pointer->Next;
            free(My_Stack->top); 
            My_Stack->top=Local_pointer;
        }
        My_Stack->Size=0;
     e3a:	ec 81       	ldd	r30, Y+4	; 0x04
     e3c:	fd 81       	ldd	r31, Y+5	; 0x05
     e3e:	12 82       	std	Z+2, r1	; 0x02
     e40:	13 82       	std	Z+3, r1	; 0x03
     e42:	14 82       	std	Z+4, r1	; 0x04
     e44:	15 82       	std	Z+5, r1	; 0x05
        Local = E_OK;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <Stack_Size>:
Status Stack_Size(Stack* My_Stack,StackEnery* Variable)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <Stack_Size+0x6>
     e62:	00 d0       	rcall	.+0      	; 0xe64 <Stack_Size+0x8>
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	9b 83       	std	Y+3, r25	; 0x03
     e6c:	8a 83       	std	Y+2, r24	; 0x02
     e6e:	7d 83       	std	Y+5, r23	; 0x05
     e70:	6c 83       	std	Y+4, r22	; 0x04
     Status Local = E_NOT_OK;
     e72:	19 82       	std	Y+1, r1	; 0x01
   
    if (NULL == My_Stack)
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	71 f0       	breq	.+28     	; 0xe98 <Stack_Size+0x3c>
    {
        // Do nothing
    } 
    else 
    {   
        *Variable  =My_Stack->Size;
     e7c:	ea 81       	ldd	r30, Y+2	; 0x02
     e7e:	fb 81       	ldd	r31, Y+3	; 0x03
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	a4 81       	ldd	r26, Z+4	; 0x04
     e86:	b5 81       	ldd	r27, Z+5	; 0x05
     e88:	ec 81       	ldd	r30, Y+4	; 0x04
     e8a:	fd 81       	ldd	r31, Y+5	; 0x05
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	a2 83       	std	Z+2, r26	; 0x02
     e92:	b3 83       	std	Z+3, r27	; 0x03
         Local = E_OK;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <TIMER2_DutyCycle>:
#include "../inc/TIMER2_interface.h"
#include "../inc/TIMER2_private.h"
#include "../inc/TIMER2_register.h"

void TIMER2_DutyCycle(uint8 Copy_uint8Duty)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <TIMER2_DutyCycle+0x6>
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
     eb8:	1a 82       	std	Y+2, r1	; 0x02
     eba:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	98 2f       	mov	r25, r24
     ec4:	88 27       	eor	r24, r24
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	24 e6       	ldi	r18, 0x64	; 100
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	b9 01       	movw	r22, r18
     ed4:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodhi4>
     ed8:	cb 01       	movw	r24, r22
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Local_VCalue;
     ede:	e3 e4       	ldi	r30, 0x43	; 67
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	80 83       	st	Z, r24
}
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <TIMER2_Delay>:


void TIMER2_Delay(uint16 Copy_uint16Delay)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <TIMER2_Delay+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <TIMER2_Delay+0x8>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
     f02:	1a 82       	std	Y+2, r1	; 0x02
     f04:	19 82       	std	Y+1, r1	; 0x01
     f06:	10 c0       	rjmp	.+32     	; 0xf28 <TIMER2_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIFR_Reg->OCF2 == 0);
     f08:	e8 e5       	ldi	r30, 0x58	; 88
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 78       	andi	r24, 0x80	; 128
     f10:	88 23       	and	r24, r24
     f12:	d1 f3       	breq	.-12     	; 0xf08 <TIMER2_Delay+0x16>
	TIFR_Reg->OCF2 =1;
     f14:	e8 e5       	ldi	r30, 0x58	; 88
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 68       	ori	r24, 0x80	; 128
     f1c:	80 83       	st	Z, r24
	Counter++;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
void TIMER2_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
     f28:	29 81       	ldd	r18, Y+1	; 0x01
     f2a:	3a 81       	ldd	r19, Y+2	; 0x02
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	48 f3       	brcs	.-46     	; 0xf08 <TIMER2_Delay+0x16>
	Counter++;


	}

}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Reg->CS2x= CLCK_SELECTION;
     f4c:	e5 e4       	ldi	r30, 0x45	; 69
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=DISABLE;
TCCR2_Reg->COM2x=CORRECT_PWM_OUTPUT_MODE;


#elif TIMER_MODE==CTC_MODE
TCCR2_Reg->WGM20=DISABLE;
     f58:	e5 e4       	ldi	r30, 0x45	; 69
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 7b       	andi	r24, 0xBF	; 191
     f60:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=ENABLE;
     f62:	e5 e4       	ldi	r30, 0x45	; 69
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 60       	ori	r24, 0x08	; 8
     f6a:	80 83       	st	Z, r24
TCCR2_Reg->COM2x=CTC_OUTPUT_MODE;
     f6c:	e5 e4       	ldi	r30, 0x45	; 69
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7c       	andi	r24, 0xCF	; 207
     f74:	80 61       	ori	r24, 0x10	; 16
     f76:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
TIMSK_Reg->TOIE2=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
TIMSK_Reg->OCIE2=ENABLE;
     f78:	e9 e5       	ldi	r30, 0x59	; 89
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	80 83       	st	Z, r24
#endif


}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <TIMER2_voiSetPreLoadValue>:


void TIMER2_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Reg=Copy_uint8Value;
     f94:	e4 e4       	ldi	r30, 0x44	; 68
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 83       	st	Z, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <TIMER2_voiSetCompareMatchValue>:


void TIMER2_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Copy_uint8Value;
     fb0:	e3 e4       	ldi	r30, 0x43	; 67
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	80 83       	st	Z, r24
}
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <Timer2_Timer2OVFCallBackFunc>:

Status_t Timer2_Timer2OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <Timer2_Timer2OVFCallBackFunc+0x6>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9b 83       	std	Y+3, r25	; 0x03
     fce:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
     fd0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	19 f4       	brne	.+6      	; 0xfe0 <Timer2_Timer2OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER2_POINTER_Err;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	06 c0       	rjmp	.+12     	; 0xfec <Timer2_Timer2OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	90 93 91 00 	sts	0x0091, r25
     fe8:	80 93 90 00 	sts	0x0090, r24
	}

	return Local_ErrorState;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <Timer2_Timer2CTCCallBackFunc>:

Status_t Timer2_Timer2CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <Timer2_Timer2CTCCallBackFunc+0x6>
    1000:	0f 92       	push	r0
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	9b 83       	std	Y+3, r25	; 0x03
    1008:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
    100a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	19 f4       	brne	.+6      	; 0x101a <Timer2_Timer2CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER2_POINTER_Err;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <Timer2_Timer2CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	90 93 8f 00 	sts	0x008F, r25
    1022:	80 93 8e 00 	sts	0x008E, r24
		}

	return Local_ErrorState;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <__vector_4>:




/*TIMER0 COMPARE MATCH*/
void __vector_4(void){
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    105e:	e0 91 8e 00 	lds	r30, 0x008E
    1062:	f0 91 8f 00 	lds	r31, 0x008F
    1066:	09 95       	icall
}
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_5>:

/*TIMER0 OVERFLOW*/
void __vector_5(void){
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    10b8:	e0 91 90 00 	lds	r30, 0x0090
    10bc:	f0 91 91 00 	lds	r31, 0x0091
    10c0:	09 95       	icall
}
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <TIMER1_voidInit>:
#include "../inc/TIMER1_register.h"
#include "../inc/TIMER1_config.h"


void TIMER1_voidInit(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	/*Clock selection*/
TCCR1B_Reg->CS1X= CLCK_SELECT;
    10f0:	ee e4       	ldi	r30, 0x4E	; 78
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 7f       	andi	r24, 0xF8	; 248
    10f8:	84 60       	ori	r24, 0x04	; 4
    10fa:	80 83       	st	Z, r24

/*Waveform generation mode*/
TCCR1A_Reg->WGM1X=WAVE_GEN & 0b0011;
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8c 7f       	andi	r24, 0xFC	; 252
    1104:	80 83       	st	Z, r24
TCCR1B_Reg->WGM1XX=(WAVE_GEN>>2) & 0b0011;
    1106:	ee e4       	ldi	r30, 0x4E	; 78
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	87 7e       	andi	r24, 0xE7	; 231
    110e:	88 60       	ori	r24, 0x08	; 8
    1110:	80 83       	st	Z, r24

#ifdef CHANNEL_A

#if TIMER1A_MODE == TIMER1_NON_PWM

TCCR1A_Reg->COM1AX=TIMER1A_OUT_MODE;
    1112:	ef e4       	ldi	r30, 0x4F	; 79
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 73       	andi	r24, 0x3F	; 63
    111a:	80 83       	st	Z, r24

#ifdef CHANNEL_B

#if TIMER1B_MODE == TIMER1_NON_PWM

		TCCR1A_Reg->COM1BX=TIMER1B_OUT_MODE;
    111c:	ef e4       	ldi	r30, 0x4F	; 79
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8f 7c       	andi	r24, 0xCF	; 207
    1124:	80 83       	st	Z, r24
#endif

/*INTERRUPT ENABLE*/
#ifdef TIMER1_COMPARE_MATCH_A_ISR_ENABLE

		TIMSK_Reg->OCIE1A=Enable;
    1126:	e9 e5       	ldi	r30, 0x59	; 89
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 61       	ori	r24, 0x10	; 16
    112e:	80 83       	st	Z, r24
#ifdef TIMER1_INPUT_CAPTURE_INTERRUPT
		TIMSK_Reg->TICIE1=Enable;
#endif


}
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <TIMER1_voidSetChannelACompMatch>:


void TIMER1_voidSetChannelACompMatch(uint16 Copy_uint16Data)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <TIMER1_voidSetChannelACompMatch+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Reg=Copy_uint16Data;
    1144:	ea e4       	ldi	r30, 0x4A	; 74
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(uint16 Copy_uint16Data)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <TIMER1_voidSetChannelBCompMatch+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Reg=Copy_uint16Data;
    1168:	e8 e4       	ldi	r30, 0x48	; 72
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	80 83       	st	Z, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(uint16 Copy_uint16ICR)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <TIMER1_voidSetICR+0x6>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Reg=Copy_uint16ICR;
    118c:	e6 e4       	ldi	r30, 0x46	; 70
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	80 83       	st	Z, r24
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <TIMER1_voidSetTimerValue>:
void TIMER1_voidSetTimerValue(uint16 Copy_uint16Value)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <TIMER1_voidSetTimerValue+0x6>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Reg=	Copy_uint16Value;
    11b0:	ec e4       	ldi	r30, 0x4C	; 76
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <TIMER1_uint16GetTimerValue>:
uint16 TIMER1_uint16GetTimerValue(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
return TCNT1_Reg;
    11ce:	ec e4       	ldi	r30, 0x4C	; 76
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <TIMER1_CTCASetCallBck>:


Timer1_status TIMER1_CTCASetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <TIMER1_CTCASetCallBck+0x6>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    11ec:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Copy_pvCallBackFunc)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	19 f4       	brne	.+6      	; 0x11fc <TIMER1_CTCASetCallBck+0x20>
	{
		Local_ErrorState=TIMER1_PONTER_ERR;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <TIMER1_CTCASetCallBck+0x2c>
	}
	else
	{
		TIMER1_pvCallBackFunc_CTC_A=Copy_pvCallBackFunc;
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	90 93 93 00 	sts	0x0093, r25
    1204:	80 93 92 00 	sts	0x0092, r24
	}
return Local_ErrorState;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <TIMER1_CTCBSetCallBck>:
Timer1_status TIMER1_CTCBSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <TIMER1_CTCBSetCallBck+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_status Local_ErrorState=TIMER1_OK;
    1226:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	9b 81       	ldd	r25, Y+3	; 0x03
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	19 f4       	brne	.+6      	; 0x1236 <TIMER1_CTCBSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <TIMER1_CTCBSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CTC_B=Copy_pvCallBackFunc;
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	90 93 95 00 	sts	0x0095, r25
    123e:	80 93 94 00 	sts	0x0094, r24
		}
	return Local_ErrorState;
    1242:	89 81       	ldd	r24, Y+1	; 0x01
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <TIMER1_OVSetCallBck>:


Timer1_status TIMER1_OVSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <TIMER1_OVSetCallBck+0x6>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	9b 83       	std	Y+3, r25	; 0x03
    125e:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    1260:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	19 f4       	brne	.+6      	; 0x1270 <TIMER1_OVSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	06 c0       	rjmp	.+12     	; 0x127c <TIMER1_OVSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_OV=Copy_pvCallBackFunc;
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	90 93 97 00 	sts	0x0097, r25
    1278:	80 93 96 00 	sts	0x0096, r24
		}
	return Local_ErrorState;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <TIMER1_CAPTURESetCallBck>:


Timer1_status TIMER1_CAPTURESetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <TIMER1_CAPTURESetCallBck+0x6>
    1290:	0f 92       	push	r0
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	9b 83       	std	Y+3, r25	; 0x03
    1298:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    129a:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	9b 81       	ldd	r25, Y+3	; 0x03
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	19 f4       	brne	.+6      	; 0x12aa <TIMER1_CAPTURESetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <TIMER1_CAPTURESetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CaptEvnt=Copy_pvCallBackFunc;
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	90 93 99 00 	sts	0x0099, r25
    12b2:	80 93 98 00 	sts	0x0098, r24
		}
	return Local_ErrorState;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <__vector_6>:



void __vector_6 (void)
{
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62

	TIMER1_pvCallBackFunc_CaptEvnt();
    12ee:	e0 91 98 00 	lds	r30, 0x0098
    12f2:	f0 91 99 00 	lds	r31, 0x0099
    12f6:	09 95       	icall
	TIFR_Reg->ICF1=Enable;
    12f8:	e8 e5       	ldi	r30, 0x58	; 88
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	80 83       	st	Z, r24
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_7>:

void __vector_7 (void)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_A();
    1352:	e0 91 92 00 	lds	r30, 0x0092
    1356:	f0 91 93 00 	lds	r31, 0x0093
    135a:	09 95       	icall
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <__vector_8>:

void __vector_8 (void)
{
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_B();
    13ac:	e0 91 94 00 	lds	r30, 0x0094
    13b0:	f0 91 95 00 	lds	r31, 0x0095
    13b4:	09 95       	icall
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	ff 91       	pop	r31
    13bc:	ef 91       	pop	r30
    13be:	bf 91       	pop	r27
    13c0:	af 91       	pop	r26
    13c2:	9f 91       	pop	r25
    13c4:	8f 91       	pop	r24
    13c6:	7f 91       	pop	r23
    13c8:	6f 91       	pop	r22
    13ca:	5f 91       	pop	r21
    13cc:	4f 91       	pop	r20
    13ce:	3f 91       	pop	r19
    13d0:	2f 91       	pop	r18
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	0f 90       	pop	r0
    13d8:	1f 90       	pop	r1
    13da:	18 95       	reti

000013dc <__vector_9>:


void __vector_9 (void)
{
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	4f 93       	push	r20
    13ec:	5f 93       	push	r21
    13ee:	6f 93       	push	r22
    13f0:	7f 93       	push	r23
    13f2:	8f 93       	push	r24
    13f4:	9f 93       	push	r25
    13f6:	af 93       	push	r26
    13f8:	bf 93       	push	r27
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_OV();
    1406:	e0 91 96 00 	lds	r30, 0x0096
    140a:	f0 91 97 00 	lds	r31, 0x0097
    140e:	09 95       	icall
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	bf 91       	pop	r27
    141a:	af 91       	pop	r26
    141c:	9f 91       	pop	r25
    141e:	8f 91       	pop	r24
    1420:	7f 91       	pop	r23
    1422:	6f 91       	pop	r22
    1424:	5f 91       	pop	r21
    1426:	4f 91       	pop	r20
    1428:	3f 91       	pop	r19
    142a:	2f 91       	pop	r18
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <TIMER0_DutyCycle>:
#include "../inc/TIMER0_private.h"
#include "../inc/TIMER0_register.h"
#include "../inc/TIMER0_config.h"

void TIMER0_DutyCycle(uint8 Copy_uint8Duty)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <TIMER0_DutyCycle+0x6>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
    1444:	1a 82       	std	Y+2, r1	; 0x02
    1446:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	98 2f       	mov	r25, r24
    1450:	88 27       	eor	r24, r24
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	24 e6       	ldi	r18, 0x64	; 100
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodhi4>
    1464:	cb 01       	movw	r24, r22
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Local_VCalue;
    146a:	ec e5       	ldi	r30, 0x5C	; 92
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	80 83       	st	Z, r24
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <TIMER0_Delay>:


void TIMER0_Delay(uint16 Copy_uint16Delay)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <TIMER0_Delay+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <TIMER0_Delay+0x8>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
    148e:	1a 82       	std	Y+2, r1	; 0x02
    1490:	19 82       	std	Y+1, r1	; 0x01
    1492:	10 c0       	rjmp	.+32     	; 0x14b4 <TIMER0_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIMER0_TIFR_Reg->OCF0 == 0);
    1494:	e8 e5       	ldi	r30, 0x58	; 88
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	82 70       	andi	r24, 0x02	; 2
    149c:	88 23       	and	r24, r24
    149e:	d1 f3       	breq	.-12     	; 0x1494 <TIMER0_Delay+0x16>
	TIMER0_TIFR_Reg->OCF0 =1;
    14a0:	e8 e5       	ldi	r30, 0x58	; 88
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	80 83       	st	Z, r24
	Counter++;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
    14b4:	29 81       	ldd	r18, Y+1	; 0x01
    14b6:	3a 81       	ldd	r19, Y+2	; 0x02
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	28 17       	cp	r18, r24
    14be:	39 07       	cpc	r19, r25
    14c0:	48 f3       	brcs	.-46     	; 0x1494 <TIMER0_Delay+0x16>
	Counter++;


	}

}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <TIMER0_voidInit>:
void TIMER0_voidInit(void)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
	/*clock selection*/
	TIMER0_TCCR0_Reg->CS0x= CLCK_SELECTION;
    14d8:	e3 e5       	ldi	r30, 0x53	; 83
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	88 7f       	andi	r24, 0xF8	; 248
    14e0:	82 60       	ori	r24, 0x02	; 2
    14e2:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM00=DISABLE;
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
	TIMER0_TCCR0_Reg->COM0=CTC_OUTPUT_MODE;

#elif TIMER_MODE==FAST_PWM_MODE
	TIMER0_TCCR0_Reg->WGM00=ENABLE;
    14e4:	e3 e5       	ldi	r30, 0x53	; 83
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 64       	ori	r24, 0x40	; 64
    14ec:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->COM0=FAST_PWM_OUTPUT_MODE;
    14f8:	e3 e5       	ldi	r30, 0x53	; 83
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8f 7c       	andi	r24, 0xCF	; 207
    1500:	80 62       	ori	r24, 0x20	; 32
    1502:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
	TIMER0_TIMSK_Reg->TOIE0=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
	TIMER0_TIMSK_Reg->OCIE0=ENABLE;
    1504:	e9 e5       	ldi	r30, 0x59	; 89
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 60       	ori	r24, 0x02	; 2
    150c:	80 83       	st	Z, r24
#endif


}
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <TIMER0_voiSetPreLoadValue>:


void TIMER0_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_Reg=Copy_uint8Value;
    1520:	e2 e5       	ldi	r30, 0x52	; 82
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	80 83       	st	Z, r24
}
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <TIMER0_voiSetCompareMatchValue>:


void TIMER0_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Copy_uint8Value;
    153c:	ec e5       	ldi	r30, 0x5C	; 92
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	80 83       	st	Z, r24
}
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <Timer0_Timer0OVFCallBackFunc>:

Status_t Timer0_Timer0OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <Timer0_Timer0OVFCallBackFunc+0x6>
    1552:	0f 92       	push	r0
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	9b 83       	std	Y+3, r25	; 0x03
    155a:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    155c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	19 f4       	brne	.+6      	; 0x156c <Timer0_Timer0OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER_POINTER_Err;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <Timer0_Timer0OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	90 93 9d 00 	sts	0x009D, r25
    1574:	80 93 9c 00 	sts	0x009C, r24
	}

	return Local_ErrorState;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <Timer0_Timer0CTCCallBackFunc>:

Status_t Timer0_Timer0CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <Timer0_Timer0CTCCallBackFunc+0x6>
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	9b 83       	std	Y+3, r25	; 0x03
    1594:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    1596:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	9b 81       	ldd	r25, Y+3	; 0x03
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	19 f4       	brne	.+6      	; 0x15a6 <Timer0_Timer0CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER_POINTER_Err;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <Timer0_Timer0CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	90 93 9b 00 	sts	0x009B, r25
    15ae:	80 93 9a 00 	sts	0x009A, r24
		}

	return Local_ErrorState;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <__vector_10>:




/*TIMER0 COMPARE MATCH*/
void __vector_10(void){
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    15ea:	e0 91 9a 00 	lds	r30, 0x009A
    15ee:	f0 91 9b 00 	lds	r31, 0x009B
    15f2:	09 95       	icall
}
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	bf 91       	pop	r27
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <__vector_11>:

/*TIMER0 OVERFLOW*/
void __vector_11(void){
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    1644:	e0 91 9c 00 	lds	r30, 0x009C
    1648:	f0 91 9d 00 	lds	r31, 0x009D
    164c:	09 95       	icall
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <PORT_voidInit>:
#include"../inc/PORT_config.h"



void PORT_voidInit(void)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62

DDRA=PORTA_DIR;
    167c:	ea e3       	ldi	r30, 0x3A	; 58
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	80 83       	st	Z, r24
DDRB=PORTB_DIR;
    1684:	e7 e3       	ldi	r30, 0x37	; 55
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	87 e0       	ldi	r24, 0x07	; 7
    168a:	80 83       	st	Z, r24
DDRC=PORTC_DIR;
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	87 e0       	ldi	r24, 0x07	; 7
    1692:	80 83       	st	Z, r24
DDRD=PORTD_DIR;
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1

PORTA=PORTA_INIT_VALUE;
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	10 82       	st	Z, r1
PORTB=PORTB_INIT_VALUE;
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	10 82       	st	Z, r1
PORTC=PORTC_INIT_VALUE;
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	10 82       	st	Z, r1
PORTD=PORTD_INIT_VALUE;
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	10 82       	st	Z, r1
}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <GIE_Enable>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/GIE_interface.h"
#include "../inc/GIE_register.h"

void GIE_Enable(void)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_I);
    16c0:	af e5       	ldi	r26, 0x5F	; 95
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ef e5       	ldi	r30, 0x5F	; 95
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	80 68       	ori	r24, 0x80	; 128
    16cc:	8c 93       	st	X, r24

}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <GIE_Disable>:
void GIE_Disable(void)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    16dc:	af e5       	ldi	r26, 0x5F	; 95
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ef e5       	ldi	r30, 0x5F	; 95
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8f 77       	andi	r24, 0x7F	; 127
    16e8:	8c 93       	st	X, r24
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <EXTI_voidInt0Init>:
#include "../inc/EXTI_interface.h"
#include "../inc/EXTI_config.h"
#include "../inc/EXTI_private.h"

void EXTI_voidInt0Init(void)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62

#if INT0_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    16f8:	a5 e5       	ldi	r26, 0x55	; 85
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e5       	ldi	r30, 0x55	; 85
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1706:	a5 e5       	ldi	r26, 0x55	; 85
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e5       	ldi	r30, 0x55	; 85
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8d 7f       	andi	r24, 0xFD	; 253
    1712:	8c 93       	st	X, r24
#else
#error "INT0 Wrong init"
#endif

#if INT0_STATE == INT0_ENABLE
	SET_BIT(GICR,GICR_INT0);
    1714:	ab e5       	ldi	r26, 0x5B	; 91
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	eb e5       	ldi	r30, 0x5B	; 91
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 64       	ori	r24, 0x40	; 64
    1720:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT0);
#else
#error "INT0 Wrong init"
#endif

}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
#if INT1_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC10);
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
    1730:	a5 e5       	ldi	r26, 0x55	; 85
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e5 e5       	ldi	r30, 0x55	; 85
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	84 60       	ori	r24, 0x04	; 4
    173c:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
    173e:	a5 e5       	ldi	r26, 0x55	; 85
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 e5       	ldi	r30, 0x55	; 85
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	87 7f       	andi	r24, 0xF7	; 247
    174a:	8c 93       	st	X, r24
#elif  INT1_STATE == INT1_DISABLE
	CLEAR_BIT(GICR,GICR_INT1);
#else
#warning "INT1 Wrong init"
#endif
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62

#if INT2_SENSE == FALLING_EDGE
	CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    175a:	a4 e5       	ldi	r26, 0x54	; 84
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e4 e5       	ldi	r30, 0x54	; 84
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8f 7b       	andi	r24, 0xBF	; 191
    1766:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT2);
#else
#warning "INT2 Wrong init"
#endif

}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <EXTI_uint8IntSetSenseControl>:

uint8 EXTI_uint8IntSetSenseControl(uint8 Copy_uint8IntNumber,uint8 Copy_uint8Sense)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	29 97       	sbiw	r28, 0x09	; 9
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState=0;
    1786:	19 82       	std	Y+1, r1	; 0x01
	if(INT0==Copy_uint8IntNumber)
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	09 f0       	breq	.+2      	; 0x1790 <EXTI_uint8IntSetSenseControl+0x22>
    178e:	5e c0       	rjmp	.+188    	; 0x184c <EXTI_uint8IntSetSenseControl+0xde>
	{
		switch(Copy_uint8Sense)
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	39 87       	std	Y+9, r19	; 0x09
    1798:	28 87       	std	Y+8, r18	; 0x08
    179a:	88 85       	ldd	r24, Y+8	; 0x08
    179c:	99 85       	ldd	r25, Y+9	; 0x09
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	21 f1       	breq	.+72     	; 0x17ec <EXTI_uint8IntSetSenseControl+0x7e>
    17a4:	28 85       	ldd	r18, Y+8	; 0x08
    17a6:	39 85       	ldd	r19, Y+9	; 0x09
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <EXTI_uint8IntSetSenseControl+0x4a>
    17ae:	88 85       	ldd	r24, Y+8	; 0x08
    17b0:	99 85       	ldd	r25, Y+9	; 0x09
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	61 f0       	breq	.+24     	; 0x17ce <EXTI_uint8IntSetSenseControl+0x60>
    17b6:	47 c0       	rjmp	.+142    	; 0x1846 <EXTI_uint8IntSetSenseControl+0xd8>
    17b8:	28 85       	ldd	r18, Y+8	; 0x08
    17ba:	39 85       	ldd	r19, Y+9	; 0x09
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	21 f1       	breq	.+72     	; 0x180a <EXTI_uint8IntSetSenseControl+0x9c>
    17c2:	88 85       	ldd	r24, Y+8	; 0x08
    17c4:	99 85       	ldd	r25, Y+9	; 0x09
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	71 f1       	breq	.+92     	; 0x1828 <EXTI_uint8IntSetSenseControl+0xba>
    17cc:	3c c0       	rjmp	.+120    	; 0x1846 <EXTI_uint8IntSetSenseControl+0xd8>
		{
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    17ce:	a5 e5       	ldi	r26, 0x55	; 85
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e5       	ldi	r30, 0x55	; 85
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8e 7f       	andi	r24, 0xFE	; 254
    17da:	8c 93       	st	X, r24
    17dc:	a5 e5       	ldi	r26, 0x55	; 85
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e5       	ldi	r30, 0x55	; 85
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8d 7f       	andi	r24, 0xFD	; 253
    17e8:	8c 93       	st	X, r24
    17ea:	ba c0       	rjmp	.+372    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    17ec:	a5 e5       	ldi	r26, 0x55	; 85
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e5       	ldi	r30, 0x55	; 85
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	81 60       	ori	r24, 0x01	; 1
    17f8:	8c 93       	st	X, r24
    17fa:	a5 e5       	ldi	r26, 0x55	; 85
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e5       	ldi	r30, 0x55	; 85
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8d 7f       	andi	r24, 0xFD	; 253
    1806:	8c 93       	st	X, r24
    1808:	ab c0       	rjmp	.+342    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    180a:	a5 e5       	ldi	r26, 0x55	; 85
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e5       	ldi	r30, 0x55	; 85
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8e 7f       	andi	r24, 0xFE	; 254
    1816:	8c 93       	st	X, r24
    1818:	a5 e5       	ldi	r26, 0x55	; 85
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e5 e5       	ldi	r30, 0x55	; 85
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	8c 93       	st	X, r24
    1826:	9c c0       	rjmp	.+312    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1828:	a5 e5       	ldi	r26, 0x55	; 85
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e5 e5       	ldi	r30, 0x55	; 85
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	81 60       	ori	r24, 0x01	; 1
    1834:	8c 93       	st	X, r24
    1836:	a5 e5       	ldi	r26, 0x55	; 85
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e5       	ldi	r30, 0x55	; 85
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	82 60       	ori	r24, 0x02	; 2
    1842:	8c 93       	st	X, r24
    1844:	8d c0       	rjmp	.+282    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
		default : Local_ErrorState=1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	8a c0       	rjmp	.+276    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
		}
	}
	else if(INT1==Copy_uint8IntNumber)
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	09 f0       	breq	.+2      	; 0x1854 <EXTI_uint8IntSetSenseControl+0xe6>
    1852:	5e c0       	rjmp	.+188    	; 0x1910 <EXTI_uint8IntSetSenseControl+0x1a2>
	{
		switch(Copy_uint8Sense)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3f 83       	std	Y+7, r19	; 0x07
    185c:	2e 83       	std	Y+6, r18	; 0x06
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	9f 81       	ldd	r25, Y+7	; 0x07
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	21 f1       	breq	.+72     	; 0x18b0 <EXTI_uint8IntSetSenseControl+0x142>
    1868:	2e 81       	ldd	r18, Y+6	; 0x06
    186a:	3f 81       	ldd	r19, Y+7	; 0x07
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <EXTI_uint8IntSetSenseControl+0x10e>
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	61 f0       	breq	.+24     	; 0x1892 <EXTI_uint8IntSetSenseControl+0x124>
    187a:	47 c0       	rjmp	.+142    	; 0x190a <EXTI_uint8IntSetSenseControl+0x19c>
    187c:	2e 81       	ldd	r18, Y+6	; 0x06
    187e:	3f 81       	ldd	r19, Y+7	; 0x07
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	21 f1       	breq	.+72     	; 0x18ce <EXTI_uint8IntSetSenseControl+0x160>
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	9f 81       	ldd	r25, Y+7	; 0x07
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	71 f1       	breq	.+92     	; 0x18ec <EXTI_uint8IntSetSenseControl+0x17e>
    1890:	3c c0       	rjmp	.+120    	; 0x190a <EXTI_uint8IntSetSenseControl+0x19c>
	  {
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    1892:	a5 e5       	ldi	r26, 0x55	; 85
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e5 e5       	ldi	r30, 0x55	; 85
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8b 7f       	andi	r24, 0xFB	; 251
    189e:	8c 93       	st	X, r24
    18a0:	a5 e5       	ldi	r26, 0x55	; 85
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e5 e5       	ldi	r30, 0x55	; 85
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	87 7f       	andi	r24, 0xF7	; 247
    18ac:	8c 93       	st	X, r24
    18ae:	58 c0       	rjmp	.+176    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    18b0:	a5 e5       	ldi	r26, 0x55	; 85
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e5       	ldi	r30, 0x55	; 85
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	84 60       	ori	r24, 0x04	; 4
    18bc:	8c 93       	st	X, r24
    18be:	a5 e5       	ldi	r26, 0x55	; 85
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e5 e5       	ldi	r30, 0x55	; 85
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	87 7f       	andi	r24, 0xF7	; 247
    18ca:	8c 93       	st	X, r24
    18cc:	49 c0       	rjmp	.+146    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    18ce:	a5 e5       	ldi	r26, 0x55	; 85
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e5 e5       	ldi	r30, 0x55	; 85
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8b 7f       	andi	r24, 0xFB	; 251
    18da:	8c 93       	st	X, r24
    18dc:	a5 e5       	ldi	r26, 0x55	; 85
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e5       	ldi	r30, 0x55	; 85
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	88 60       	ori	r24, 0x08	; 8
    18e8:	8c 93       	st	X, r24
    18ea:	3a c0       	rjmp	.+116    	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    18ec:	a5 e5       	ldi	r26, 0x55	; 85
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e5       	ldi	r30, 0x55	; 85
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	84 60       	ori	r24, 0x04	; 4
    18f8:	8c 93       	st	X, r24
    18fa:	a5 e5       	ldi	r26, 0x55	; 85
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e5       	ldi	r30, 0x55	; 85
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 60       	ori	r24, 0x08	; 8
    1906:	8c 93       	st	X, r24
    1908:	2b c0       	rjmp	.+86     	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	28 c0       	rjmp	.+80     	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else if(INT2==Copy_uint8IntNumber)
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	19 f5       	brne	.+70     	; 0x195c <EXTI_uint8IntSetSenseControl+0x1ee>
	{switch(Copy_uint8Sense)
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	3d 83       	std	Y+5, r19	; 0x05
    191e:	2c 83       	std	Y+4, r18	; 0x04
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	82 30       	cpi	r24, 0x02	; 2
    1926:	91 05       	cpc	r25, r1
    1928:	31 f0       	breq	.+12     	; 0x1936 <EXTI_uint8IntSetSenseControl+0x1c8>
    192a:	2c 81       	ldd	r18, Y+4	; 0x04
    192c:	3d 81       	ldd	r19, Y+5	; 0x05
    192e:	23 30       	cpi	r18, 0x03	; 3
    1930:	31 05       	cpc	r19, r1
    1932:	49 f0       	breq	.+18     	; 0x1946 <EXTI_uint8IntSetSenseControl+0x1d8>
    1934:	10 c0       	rjmp	.+32     	; 0x1956 <EXTI_uint8IntSetSenseControl+0x1e8>
	  {
	   case EXTI_FALLING:CLEAR_BIT(MCUCSR,MCUCSR_ISC2);break;
    1936:	a4 e5       	ldi	r26, 0x54	; 84
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e4 e5       	ldi	r30, 0x54	; 84
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 7b       	andi	r24, 0xBF	; 191
    1942:	8c 93       	st	X, r24
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
    1946:	a4 e5       	ldi	r26, 0x54	; 84
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e4 e5       	ldi	r30, 0x54	; 84
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	80 64       	ori	r24, 0x40	; 64
    1952:	8c 93       	st	X, r24
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else
	{
		Local_ErrorState=1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_ErrorState;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
}
    1962:	29 96       	adiw	r28, 0x09	; 9
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <EXTI_uint8IntEnable>:

uint8 EXTI_uint8IntEnable(uint8 Copy_uint8IntNumber)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <EXTI_uint8IntEnable+0x6>
    197a:	00 d0       	rcall	.+0      	; 0x197c <EXTI_uint8IntEnable+0x8>
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    1982:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3c 83       	std	Y+4, r19	; 0x04
    198c:	2b 83       	std	Y+3, r18	; 0x03
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	91 05       	cpc	r25, r1
    1996:	91 f0       	breq	.+36     	; 0x19bc <EXTI_uint8IntEnable+0x48>
    1998:	2b 81       	ldd	r18, Y+3	; 0x03
    199a:	3c 81       	ldd	r19, Y+4	; 0x04
    199c:	23 30       	cpi	r18, 0x03	; 3
    199e:	31 05       	cpc	r19, r1
    19a0:	a9 f0       	breq	.+42     	; 0x19cc <EXTI_uint8IntEnable+0x58>
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	91 05       	cpc	r25, r1
    19aa:	c1 f4       	brne	.+48     	; 0x19dc <EXTI_uint8IntEnable+0x68>
	case INT0:SET_BIT(GICR,GICR_INT0);break;
    19ac:	ab e5       	ldi	r26, 0x5B	; 91
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	eb e5       	ldi	r30, 0x5B	; 91
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 64       	ori	r24, 0x40	; 64
    19b8:	8c 93       	st	X, r24
    19ba:	12 c0       	rjmp	.+36     	; 0x19e0 <EXTI_uint8IntEnable+0x6c>
	case INT1:SET_BIT(GICR,GICR_INT1);break;
    19bc:	ab e5       	ldi	r26, 0x5B	; 91
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	eb e5       	ldi	r30, 0x5B	; 91
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 68       	ori	r24, 0x80	; 128
    19c8:	8c 93       	st	X, r24
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <EXTI_uint8IntEnable+0x6c>
	case INT2:SET_BIT(GICR,GICR_INT2);break;
    19cc:	ab e5       	ldi	r26, 0x5B	; 91
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	eb e5       	ldi	r30, 0x5B	; 91
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	80 62       	ori	r24, 0x20	; 32
    19d8:	8c 93       	st	X, r24
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <EXTI_uint8IntEnable+0x6c>
    default  : Local_ErrorState=1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <EXTI_uint8IntDisable>:


uint8 EXTI_uint8IntDisable(uint8 Copy_uint8IntNumber)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <EXTI_uint8IntDisable+0x6>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <EXTI_uint8IntDisable+0x8>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    19fe:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3c 83       	std	Y+4, r19	; 0x04
    1a08:	2b 83       	std	Y+3, r18	; 0x03
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	91 05       	cpc	r25, r1
    1a12:	91 f0       	breq	.+36     	; 0x1a38 <EXTI_uint8IntDisable+0x48>
    1a14:	2b 81       	ldd	r18, Y+3	; 0x03
    1a16:	3c 81       	ldd	r19, Y+4	; 0x04
    1a18:	23 30       	cpi	r18, 0x03	; 3
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	a9 f0       	breq	.+42     	; 0x1a48 <EXTI_uint8IntDisable+0x58>
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	91 05       	cpc	r25, r1
    1a26:	c1 f4       	brne	.+48     	; 0x1a58 <EXTI_uint8IntDisable+0x68>
	case INT0:CLEAR_BIT(GICR,GICR_INT0);break;
    1a28:	ab e5       	ldi	r26, 0x5B	; 91
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	eb e5       	ldi	r30, 0x5B	; 91
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8f 7b       	andi	r24, 0xBF	; 191
    1a34:	8c 93       	st	X, r24
    1a36:	12 c0       	rjmp	.+36     	; 0x1a5c <EXTI_uint8IntDisable+0x6c>
	case INT1:CLEAR_BIT(GICR,GICR_INT1);break;
    1a38:	ab e5       	ldi	r26, 0x5B	; 91
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	eb e5       	ldi	r30, 0x5B	; 91
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 77       	andi	r24, 0x7F	; 127
    1a44:	8c 93       	st	X, r24
    1a46:	0a c0       	rjmp	.+20     	; 0x1a5c <EXTI_uint8IntDisable+0x6c>
	case INT2:CLEAR_BIT(GICR,GICR_INT2);break;
    1a48:	ab e5       	ldi	r26, 0x5B	; 91
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e5       	ldi	r30, 0x5B	; 91
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 7d       	andi	r24, 0xDF	; 223
    1a54:	8c 93       	st	X, r24
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <EXTI_uint8IntDisable+0x6c>
    default  : Local_ErrorState=1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <EXTI_uint8Int0SetCallBack>:

uint8 EXTI_uint8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <EXTI_uint8Int0SetCallBack+0x6>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	9b 83       	std	Y+3, r25	; 0x03
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	39 f0       	breq	.+14     	; 0x1a94 <EXTI_uint8Int0SetCallBack+0x28>
	{
		Global_EXTI_pvInt0Func=Copy_pvInt0Func;
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	90 93 9f 00 	sts	0x009F, r25
    1a8e:	80 93 9e 00 	sts	0x009E, r24
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <EXTI_uint8Int0SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <EXTI_uint8Int1SetCallBack>:



uint8 EXTI_uint8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <EXTI_uint8Int1SetCallBack+0x6>
    1aac:	0f 92       	push	r0
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	9b 83       	std	Y+3, r25	; 0x03
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1ab6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL)
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	9b 81       	ldd	r25, Y+3	; 0x03
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	39 f0       	breq	.+14     	; 0x1ace <EXTI_uint8Int1SetCallBack+0x28>
	{
		Global_EXTI_pvInt1Func=Copy_pvInt1Func;
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac4:	90 93 a1 00 	sts	0x00A1, r25
    1ac8:	80 93 a0 00 	sts	0x00A0, r24
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <EXTI_uint8Int1SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <EXTI_uint8Int2SetCallBack>:



uint8 EXTI_uint8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <EXTI_uint8Int2SetCallBack+0x6>
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	9b 83       	std	Y+3, r25	; 0x03
    1aee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1af0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL)
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	39 f0       	breq	.+14     	; 0x1b08 <EXTI_uint8Int2SetCallBack+0x28>
	{
		Global_EXTI_pvInt2Func=Copy_pvInt2Func;
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	90 93 a3 00 	sts	0x00A3, r25
    1b02:	80 93 a2 00 	sts	0x00A2, r24
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <EXTI_uint8Int2SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <__vector_1>:


/*ISR of INT0*/

void __vector_1(void)
{
    1b1a:	1f 92       	push	r1
    1b1c:	0f 92       	push	r0
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	0f 92       	push	r0
    1b22:	11 24       	eor	r1, r1
    1b24:	2f 93       	push	r18
    1b26:	3f 93       	push	r19
    1b28:	4f 93       	push	r20
    1b2a:	5f 93       	push	r21
    1b2c:	6f 93       	push	r22
    1b2e:	7f 93       	push	r23
    1b30:	8f 93       	push	r24
    1b32:	9f 93       	push	r25
    1b34:	af 93       	push	r26
    1b36:	bf 93       	push	r27
    1b38:	ef 93       	push	r30
    1b3a:	ff 93       	push	r31
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt0Func!=NULL)
    1b44:	80 91 9e 00 	lds	r24, 0x009E
    1b48:	90 91 9f 00 	lds	r25, 0x009F
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	29 f0       	breq	.+10     	; 0x1b5a <__vector_1+0x40>
	{
		Global_EXTI_pvInt0Func();
    1b50:	e0 91 9e 00 	lds	r30, 0x009E
    1b54:	f0 91 9f 00 	lds	r31, 0x009F
    1b58:	09 95       	icall
	else
	{
		//do nothing

	}
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	ff 91       	pop	r31
    1b60:	ef 91       	pop	r30
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	7f 91       	pop	r23
    1b6c:	6f 91       	pop	r22
    1b6e:	5f 91       	pop	r21
    1b70:	4f 91       	pop	r20
    1b72:	3f 91       	pop	r19
    1b74:	2f 91       	pop	r18
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <__vector_2>:

/*ISR of INT1*/

void __vector_2(void)
{
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	2f 93       	push	r18
    1b8c:	3f 93       	push	r19
    1b8e:	4f 93       	push	r20
    1b90:	5f 93       	push	r21
    1b92:	6f 93       	push	r22
    1b94:	7f 93       	push	r23
    1b96:	8f 93       	push	r24
    1b98:	9f 93       	push	r25
    1b9a:	af 93       	push	r26
    1b9c:	bf 93       	push	r27
    1b9e:	ef 93       	push	r30
    1ba0:	ff 93       	push	r31
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt1Func!=NULL)
    1baa:	80 91 a0 00 	lds	r24, 0x00A0
    1bae:	90 91 a1 00 	lds	r25, 0x00A1
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <__vector_2+0x40>
		{
		Global_EXTI_pvInt1Func();
    1bb6:	e0 91 a0 00 	lds	r30, 0x00A0
    1bba:	f0 91 a1 00 	lds	r31, 0x00A1
    1bbe:	09 95       	icall
		{
			//do nothing

		}

	}
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	ff 91       	pop	r31
    1bc6:	ef 91       	pop	r30
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	0f 90       	pop	r0
    1be2:	1f 90       	pop	r1
    1be4:	18 95       	reti

00001be6 <__vector_3>:


/*ISR of INT2*/

void __vector_3(void)
{
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62

	if(Global_EXTI_pvInt2Func!=NULL)
    1c10:	80 91 a2 00 	lds	r24, 0x00A2
    1c14:	90 91 a3 00 	lds	r25, 0x00A3
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	29 f0       	breq	.+10     	; 0x1c26 <__vector_3+0x40>
		{
		Global_EXTI_pvInt2Func();
    1c1c:	e0 91 a2 00 	lds	r30, 0x00A2
    1c20:	f0 91 a3 00 	lds	r31, 0x00A3
    1c24:	09 95       	icall
		{
			//do nothing

		}

}
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	ff 91       	pop	r31
    1c2c:	ef 91       	pop	r30
    1c2e:	bf 91       	pop	r27
    1c30:	af 91       	pop	r26
    1c32:	9f 91       	pop	r25
    1c34:	8f 91       	pop	r24
    1c36:	7f 91       	pop	r23
    1c38:	6f 91       	pop	r22
    1c3a:	5f 91       	pop	r21
    1c3c:	4f 91       	pop	r20
    1c3e:	3f 91       	pop	r19
    1c40:	2f 91       	pop	r18
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	0f 90       	pop	r0
    1c48:	1f 90       	pop	r1
    1c4a:	18 95       	reti

00001c4c <DIO_SetPortVal>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/DIO_interface.h"
#include  "../inc/DIO_private.h"
#include "../inc/DIO_register.h"

status_t DIO_SetPortVal(Port_t Copy_Port, uint8 Copy_uint8Value) {
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DIO_SetPortVal+0x6>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <DIO_SetPortVal+0x8>
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
    1c5c:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	84 30       	cpi	r24, 0x04	; 4
    1c64:	18 f0       	brcs	.+6      	; 0x1c6c <DIO_SetPortVal+0x20>
		Local_uint8ErrorState = DIO_SetErr;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	32 c0       	rjmp	.+100    	; 0x1cd0 <DIO_SetPortVal+0x84>
	} else {
		switch (Copy_Port) {
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3d 83       	std	Y+5, r19	; 0x05
    1c74:	2c 83       	std	Y+4, r18	; 0x04
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	d1 f0       	breq	.+52     	; 0x1cb4 <DIO_SetPortVal+0x68>
    1c80:	2c 81       	ldd	r18, Y+4	; 0x04
    1c82:	3d 81       	ldd	r19, Y+5	; 0x05
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <DIO_SetPortVal+0x48>
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 f0       	breq	.+24     	; 0x1caa <DIO_SetPortVal+0x5e>
    1c92:	1e c0       	rjmp	.+60     	; 0x1cd0 <DIO_SetPortVal+0x84>
    1c94:	2c 81       	ldd	r18, Y+4	; 0x04
    1c96:	3d 81       	ldd	r19, Y+5	; 0x05
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	81 f0       	breq	.+32     	; 0x1cbe <DIO_SetPortVal+0x72>
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	81 f0       	breq	.+32     	; 0x1cc8 <DIO_SetPortVal+0x7c>
    1ca8:	13 c0       	rjmp	.+38     	; 0x1cd0 <DIO_SetPortVal+0x84>
		case DIO_PORTA:
			PORTA = Copy_uint8Value;
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	80 83       	st	Z, r24
    1cb2:	0e c0       	rjmp	.+28     	; 0x1cd0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTB:
			PORTB = Copy_uint8Value;
    1cb4:	e8 e3       	ldi	r30, 0x38	; 56
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	80 83       	st	Z, r24
    1cbc:	09 c0       	rjmp	.+18     	; 0x1cd0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTC:
			PORTC = Copy_uint8Value;
    1cbe:	e5 e3       	ldi	r30, 0x35	; 53
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	80 83       	st	Z, r24
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTD:
			PORTD = Copy_uint8Value;
    1cc8:	e2 e3       	ldi	r30, 0x32	; 50
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	80 83       	st	Z, r24
			break;
		}
	}

	return Local_uint8ErrorState;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <DIO_SetPinVal>:

status_t DIO_SetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8 Copy_uint8Value) {
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	28 97       	sbiw	r28, 0x08	; 8
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
    1cf8:	6b 83       	std	Y+3, r22	; 0x03
    1cfa:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    1cfc:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	18 f0       	brcs	.+6      	; 0x1d0a <DIO_SetPinVal+0x28>
		Local_uint8ErrorState = DIO_SetErr;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	f0 c0       	rjmp	.+480    	; 0x1eea <DIO_SetPinVal+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	88 30       	cpi	r24, 0x08	; 8
    1d0e:	18 f0       	brcs	.+6      	; 0x1d16 <DIO_SetPinVal+0x34>
		Local_uint8ErrorState = DIO_SetErr;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	ea c0       	rjmp	.+468    	; 0x1eea <DIO_SetPinVal+0x208>
	} else {
		if (DIO_HIGH == Copy_uint8Value) {
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <DIO_SetPinVal+0x3c>
    1d1c:	6f c0       	rjmp	.+222    	; 0x1dfc <DIO_SetPinVal+0x11a>
			switch (Copy_Port) {
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	38 87       	std	Y+8, r19	; 0x08
    1d26:	2f 83       	std	Y+7, r18	; 0x07
    1d28:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2a:	98 85       	ldd	r25, Y+8	; 0x08
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	49 f1       	breq	.+82     	; 0x1d84 <DIO_SetPinVal+0xa2>
    1d32:	2f 81       	ldd	r18, Y+7	; 0x07
    1d34:	38 85       	ldd	r19, Y+8	; 0x08
    1d36:	22 30       	cpi	r18, 0x02	; 2
    1d38:	31 05       	cpc	r19, r1
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <DIO_SetPinVal+0x64>
    1d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3e:	98 85       	ldd	r25, Y+8	; 0x08
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	61 f0       	breq	.+24     	; 0x1d5c <DIO_SetPinVal+0x7a>
    1d44:	d2 c0       	rjmp	.+420    	; 0x1eea <DIO_SetPinVal+0x208>
    1d46:	2f 81       	ldd	r18, Y+7	; 0x07
    1d48:	38 85       	ldd	r19, Y+8	; 0x08
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	71 f1       	breq	.+92     	; 0x1dac <DIO_SetPinVal+0xca>
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	e9 f1       	breq	.+122    	; 0x1dd4 <DIO_SetPinVal+0xf2>
    1d5a:	c7 c0       	rjmp	.+398    	; 0x1eea <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				SET_BIT(PORTA, Copy_Pin);
    1d5c:	ab e3       	ldi	r26, 0x3B	; 59
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	eb e3       	ldi	r30, 0x3B	; 59
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_SetPinVal+0x98>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_SetPinVal+0x94>
    1d7e:	84 2b       	or	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	b3 c0       	rjmp	.+358    	; 0x1eea <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB, Copy_Pin);
    1d84:	a8 e3       	ldi	r26, 0x38	; 56
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e8 e3       	ldi	r30, 0x38	; 56
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_SetPinVal+0xc0>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <DIO_SetPinVal+0xbc>
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	9f c0       	rjmp	.+318    	; 0x1eea <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC, Copy_Pin);
    1dac:	a5 e3       	ldi	r26, 0x35	; 53
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e3       	ldi	r30, 0x35	; 53
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <DIO_SetPinVal+0xe8>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <DIO_SetPinVal+0xe4>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	8b c0       	rjmp	.+278    	; 0x1eea <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD, Copy_Pin);
    1dd4:	a2 e3       	ldi	r26, 0x32	; 50
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e2 e3       	ldi	r30, 0x32	; 50
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_SetPinVal+0x110>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_SetPinVal+0x10c>
    1df6:	84 2b       	or	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	77 c0       	rjmp	.+238    	; 0x1eea <DIO_SetPinVal+0x208>
				break;
			}
		} else if (DIO_LOW == Copy_uint8Value) {
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <DIO_SetPinVal+0x122>
    1e02:	73 c0       	rjmp	.+230    	; 0x1eea <DIO_SetPinVal+0x208>
			switch (Copy_Port) {
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	3e 83       	std	Y+6, r19	; 0x06
    1e0c:	2d 83       	std	Y+5, r18	; 0x05
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	91 05       	cpc	r25, r1
    1e16:	59 f1       	breq	.+86     	; 0x1e6e <DIO_SetPinVal+0x18c>
    1e18:	2d 81       	ldd	r18, Y+5	; 0x05
    1e1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e1c:	22 30       	cpi	r18, 0x02	; 2
    1e1e:	31 05       	cpc	r19, r1
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <DIO_SetPinVal+0x14a>
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f0       	breq	.+26     	; 0x1e44 <DIO_SetPinVal+0x162>
    1e2a:	5f c0       	rjmp	.+190    	; 0x1eea <DIO_SetPinVal+0x208>
    1e2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e30:	22 30       	cpi	r18, 0x02	; 2
    1e32:	31 05       	cpc	r19, r1
    1e34:	89 f1       	breq	.+98     	; 0x1e98 <DIO_SetPinVal+0x1b6>
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	83 30       	cpi	r24, 0x03	; 3
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <DIO_SetPinVal+0x160>
    1e40:	40 c0       	rjmp	.+128    	; 0x1ec2 <DIO_SetPinVal+0x1e0>
    1e42:	53 c0       	rjmp	.+166    	; 0x1eea <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				CLEAR_BIT(PORTA, Copy_Pin);
    1e44:	ab e3       	ldi	r26, 0x3B	; 59
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	eb e3       	ldi	r30, 0x3B	; 59
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <DIO_SetPinVal+0x180>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <DIO_SetPinVal+0x17c>
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	8c 93       	st	X, r24
    1e6c:	3e c0       	rjmp	.+124    	; 0x1eea <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB, Copy_Pin);
    1e6e:	a8 e3       	ldi	r26, 0x38	; 56
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e8 e3       	ldi	r30, 0x38	; 56
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	48 2f       	mov	r20, r24
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 2e       	mov	r0, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <DIO_SetPinVal+0x1aa>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <DIO_SetPinVal+0x1a6>
    1e90:	80 95       	com	r24
    1e92:	84 23       	and	r24, r20
    1e94:	8c 93       	st	X, r24
    1e96:	29 c0       	rjmp	.+82     	; 0x1eea <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC, Copy_Pin);
    1e98:	a5 e3       	ldi	r26, 0x35	; 53
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e5 e3       	ldi	r30, 0x35	; 53
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_SetPinVal+0x1d4>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_SetPinVal+0x1d0>
    1eba:	80 95       	com	r24
    1ebc:	84 23       	and	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD, Copy_Pin);
    1ec2:	a2 e3       	ldi	r26, 0x32	; 50
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e2 e3       	ldi	r30, 0x32	; 50
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_SetPinVal+0x1fe>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <DIO_SetPinVal+0x1fa>
    1ee4:	80 95       	com	r24
    1ee6:	84 23       	and	r24, r20
    1ee8:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Local_uint8ErrorState;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eec:	28 96       	adiw	r28, 0x08	; 8
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <DIO_SetPortDir>:

status_t DIO_SetPortDir(Port_t Copy_Port, uint8 Copy_uint8Direction) {
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DIO_SetPortDir+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DIO_SetPortDir+0x8>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    1f10:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	18 f0       	brcs	.+6      	; 0x1f1e <DIO_SetPortDir+0x20>
		Local_uint8ErrorState = DIO_DirErr;
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	32 c0       	rjmp	.+100    	; 0x1f82 <DIO_SetPortDir+0x84>
	} else {
		switch (Copy_Port) {
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	d1 f0       	breq	.+52     	; 0x1f66 <DIO_SetPortDir+0x68>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <DIO_SetPortDir+0x48>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <DIO_SetPortDir+0x5e>
    1f44:	1e c0       	rjmp	.+60     	; 0x1f82 <DIO_SetPortDir+0x84>
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	81 f0       	breq	.+32     	; 0x1f70 <DIO_SetPortDir+0x72>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	91 05       	cpc	r25, r1
    1f58:	81 f0       	breq	.+32     	; 0x1f7a <DIO_SetPortDir+0x7c>
    1f5a:	13 c0       	rjmp	.+38     	; 0x1f82 <DIO_SetPortDir+0x84>
		case DIO_PORTA:
			DDRA = Copy_uint8Direction;
    1f5c:	ea e3       	ldi	r30, 0x3A	; 58
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	80 83       	st	Z, r24
    1f64:	0e c0       	rjmp	.+28     	; 0x1f82 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTB:
			DDRB = Copy_uint8Direction;
    1f66:	e7 e3       	ldi	r30, 0x37	; 55
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	80 83       	st	Z, r24
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTC:
			DDRC = Copy_uint8Direction;
    1f70:	e4 e3       	ldi	r30, 0x34	; 52
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	80 83       	st	Z, r24
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTD:
			DDRD = Copy_uint8Direction;
    1f7a:	e1 e3       	ldi	r30, 0x31	; 49
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_uint8ErrorState;
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <DIO_SetPinDir>:

status_t DIO_SetPinDir(Port_t Copy_Port, Pin_t Copy_Pin, Dir_t Copy_Direction) {
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	28 97       	sbiw	r28, 0x08	; 8
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	6b 83       	std	Y+3, r22	; 0x03
    1fac:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    1fae:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	18 f0       	brcs	.+6      	; 0x1fbc <DIO_SetPinDir+0x28>
		Local_uint8ErrorState = DIO_DirErr;
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	f0 c0       	rjmp	.+480    	; 0x219c <DIO_SetPinDir+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	88 30       	cpi	r24, 0x08	; 8
    1fc0:	18 f0       	brcs	.+6      	; 0x1fc8 <DIO_SetPinDir+0x34>
		Local_uint8ErrorState = DIO_DirErr;
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	ea c0       	rjmp	.+468    	; 0x219c <DIO_SetPinDir+0x208>
	} else {
		if (DIO_INPUT == Copy_Direction) {
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <DIO_SetPinDir+0x3c>
    1fce:	74 c0       	rjmp	.+232    	; 0x20b8 <DIO_SetPinDir+0x124>
			switch (Copy_Port) {
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	38 87       	std	Y+8, r19	; 0x08
    1fd8:	2f 83       	std	Y+7, r18	; 0x07
    1fda:	8f 81       	ldd	r24, Y+7	; 0x07
    1fdc:	98 85       	ldd	r25, Y+8	; 0x08
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	59 f1       	breq	.+86     	; 0x203a <DIO_SetPinDir+0xa6>
    1fe4:	2f 81       	ldd	r18, Y+7	; 0x07
    1fe6:	38 85       	ldd	r19, Y+8	; 0x08
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <DIO_SetPinDir+0x64>
    1fee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff0:	98 85       	ldd	r25, Y+8	; 0x08
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f0       	breq	.+26     	; 0x2010 <DIO_SetPinDir+0x7c>
    1ff6:	d2 c0       	rjmp	.+420    	; 0x219c <DIO_SetPinDir+0x208>
    1ff8:	2f 81       	ldd	r18, Y+7	; 0x07
    1ffa:	38 85       	ldd	r19, Y+8	; 0x08
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	89 f1       	breq	.+98     	; 0x2064 <DIO_SetPinDir+0xd0>
    2002:	8f 81       	ldd	r24, Y+7	; 0x07
    2004:	98 85       	ldd	r25, Y+8	; 0x08
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	91 05       	cpc	r25, r1
    200a:	09 f4       	brne	.+2      	; 0x200e <DIO_SetPinDir+0x7a>
    200c:	40 c0       	rjmp	.+128    	; 0x208e <DIO_SetPinDir+0xfa>
    200e:	c6 c0       	rjmp	.+396    	; 0x219c <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				CLEAR_BIT(DDRA, Copy_Pin);
    2010:	aa e3       	ldi	r26, 0x3A	; 58
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ea e3       	ldi	r30, 0x3A	; 58
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_SetPinDir+0x9a>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_SetPinDir+0x96>
    2032:	80 95       	com	r24
    2034:	84 23       	and	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	b1 c0       	rjmp	.+354    	; 0x219c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB, Copy_Pin);
    203a:	a7 e3       	ldi	r26, 0x37	; 55
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e7 e3       	ldi	r30, 0x37	; 55
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_SetPinDir+0xc4>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_SetPinDir+0xc0>
    205c:	80 95       	com	r24
    205e:	84 23       	and	r24, r20
    2060:	8c 93       	st	X, r24
    2062:	9c c0       	rjmp	.+312    	; 0x219c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC, Copy_Pin);
    2064:	a4 e3       	ldi	r26, 0x34	; 52
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e4 e3       	ldi	r30, 0x34	; 52
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_SetPinDir+0xee>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_SetPinDir+0xea>
    2086:	80 95       	com	r24
    2088:	84 23       	and	r24, r20
    208a:	8c 93       	st	X, r24
    208c:	87 c0       	rjmp	.+270    	; 0x219c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD, Copy_Pin);
    208e:	a1 e3       	ldi	r26, 0x31	; 49
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e1 e3       	ldi	r30, 0x31	; 49
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	48 2f       	mov	r20, r24
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	02 2e       	mov	r0, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_SetPinDir+0x118>
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	0a 94       	dec	r0
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_SetPinDir+0x114>
    20b0:	80 95       	com	r24
    20b2:	84 23       	and	r24, r20
    20b4:	8c 93       	st	X, r24
    20b6:	72 c0       	rjmp	.+228    	; 0x219c <DIO_SetPinDir+0x208>
				break;
			}
		} else if (DIO_OUTPUT == Copy_Direction) {
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <DIO_SetPinDir+0x12c>
    20be:	6e c0       	rjmp	.+220    	; 0x219c <DIO_SetPinDir+0x208>
			switch (Copy_Port) {
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3e 83       	std	Y+6, r19	; 0x06
    20c8:	2d 83       	std	Y+5, r18	; 0x05
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	49 f1       	breq	.+82     	; 0x2126 <DIO_SetPinDir+0x192>
    20d4:	2d 81       	ldd	r18, Y+5	; 0x05
    20d6:	3e 81       	ldd	r19, Y+6	; 0x06
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <DIO_SetPinDir+0x154>
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 f0       	breq	.+24     	; 0x20fe <DIO_SetPinDir+0x16a>
    20e6:	5a c0       	rjmp	.+180    	; 0x219c <DIO_SetPinDir+0x208>
    20e8:	2d 81       	ldd	r18, Y+5	; 0x05
    20ea:	3e 81       	ldd	r19, Y+6	; 0x06
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	71 f1       	breq	.+92     	; 0x214e <DIO_SetPinDir+0x1ba>
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	e9 f1       	breq	.+122    	; 0x2176 <DIO_SetPinDir+0x1e2>
    20fc:	4f c0       	rjmp	.+158    	; 0x219c <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				SET_BIT(DDRA, Copy_Pin);
    20fe:	aa e3       	ldi	r26, 0x3A	; 58
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	ea e3       	ldi	r30, 0x3A	; 58
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <DIO_SetPinDir+0x188>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <DIO_SetPinDir+0x184>
    2120:	84 2b       	or	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	3b c0       	rjmp	.+118    	; 0x219c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB, Copy_Pin);
    2126:	a7 e3       	ldi	r26, 0x37	; 55
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e7 e3       	ldi	r30, 0x37	; 55
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <DIO_SetPinDir+0x1b0>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <DIO_SetPinDir+0x1ac>
    2148:	84 2b       	or	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	27 c0       	rjmp	.+78     	; 0x219c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC, Copy_Pin);
    214e:	a4 e3       	ldi	r26, 0x34	; 52
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e4 e3       	ldi	r30, 0x34	; 52
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	48 2f       	mov	r20, r24
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	02 2e       	mov	r0, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <DIO_SetPinDir+0x1d8>
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	0a 94       	dec	r0
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <DIO_SetPinDir+0x1d4>
    2170:	84 2b       	or	r24, r20
    2172:	8c 93       	st	X, r24
    2174:	13 c0       	rjmp	.+38     	; 0x219c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD, Copy_Pin);
    2176:	a1 e3       	ldi	r26, 0x31	; 49
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e1 e3       	ldi	r30, 0x31	; 49
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	48 2f       	mov	r20, r24
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 2e       	mov	r0, r18
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <DIO_SetPinDir+0x200>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <DIO_SetPinDir+0x1fc>
    2198:	84 2b       	or	r24, r20
    219a:	8c 93       	st	X, r24
				break;
			}
		}
	}
	return Local_uint8ErrorState;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
}
    219e:	28 96       	adiw	r28, 0x08	; 8
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <DIO_GetPinVal>:


status_t DIO_GetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8* Copy_pvValue)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	27 97       	sbiw	r28, 0x07	; 7
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	8a 83       	std	Y+2, r24	; 0x02
    21c6:	6b 83       	std	Y+3, r22	; 0x03
    21c8:	5d 83       	std	Y+5, r21	; 0x05
    21ca:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    21cc:	19 82       	std	Y+1, r1	; 0x01

		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	84 30       	cpi	r24, 0x04	; 4
    21d2:	18 f0       	brcs	.+6      	; 0x21da <DIO_GetPinVal+0x2a>
			Local_uint8ErrorState = DIO_GetErr;
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	76 c0       	rjmp	.+236    	; 0x22c6 <DIO_GetPinVal+0x116>
		} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	88 30       	cpi	r24, 0x08	; 8
    21de:	18 f0       	brcs	.+6      	; 0x21e6 <DIO_GetPinVal+0x36>
			Local_uint8ErrorState = DIO_GetErr;
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	70 c0       	rjmp	.+224    	; 0x22c6 <DIO_GetPinVal+0x116>
		} else {
			switch (Copy_Port)
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	3f 83       	std	Y+7, r19	; 0x07
    21ee:	2e 83       	std	Y+6, r18	; 0x06
    21f0:	4e 81       	ldd	r20, Y+6	; 0x06
    21f2:	5f 81       	ldd	r21, Y+7	; 0x07
    21f4:	41 30       	cpi	r20, 0x01	; 1
    21f6:	51 05       	cpc	r21, r1
    21f8:	59 f1       	breq	.+86     	; 0x2250 <DIO_GetPinVal+0xa0>
    21fa:	8e 81       	ldd	r24, Y+6	; 0x06
    21fc:	9f 81       	ldd	r25, Y+7	; 0x07
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	91 05       	cpc	r25, r1
    2202:	34 f4       	brge	.+12     	; 0x2210 <DIO_GetPinVal+0x60>
    2204:	2e 81       	ldd	r18, Y+6	; 0x06
    2206:	3f 81       	ldd	r19, Y+7	; 0x07
    2208:	21 15       	cp	r18, r1
    220a:	31 05       	cpc	r19, r1
    220c:	69 f0       	breq	.+26     	; 0x2228 <DIO_GetPinVal+0x78>
    220e:	5b c0       	rjmp	.+182    	; 0x22c6 <DIO_GetPinVal+0x116>
    2210:	4e 81       	ldd	r20, Y+6	; 0x06
    2212:	5f 81       	ldd	r21, Y+7	; 0x07
    2214:	42 30       	cpi	r20, 0x02	; 2
    2216:	51 05       	cpc	r21, r1
    2218:	79 f1       	breq	.+94     	; 0x2278 <DIO_GetPinVal+0xc8>
    221a:	8e 81       	ldd	r24, Y+6	; 0x06
    221c:	9f 81       	ldd	r25, Y+7	; 0x07
    221e:	83 30       	cpi	r24, 0x03	; 3
    2220:	91 05       	cpc	r25, r1
    2222:	09 f4       	brne	.+2      	; 0x2226 <DIO_GetPinVal+0x76>
    2224:	3d c0       	rjmp	.+122    	; 0x22a0 <DIO_GetPinVal+0xf0>
    2226:	4f c0       	rjmp	.+158    	; 0x22c6 <DIO_GetPinVal+0x116>
			{case DIO_PORTA : *Copy_pvValue=GET_BIT(PINA,Copy_Pin);break;
    2228:	e9 e3       	ldi	r30, 0x39	; 57
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a9 01       	movw	r20, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_GetPinVal+0x90>
    223c:	55 95       	asr	r21
    223e:	47 95       	ror	r20
    2240:	8a 95       	dec	r24
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_GetPinVal+0x8c>
    2244:	ca 01       	movw	r24, r20
    2246:	81 70       	andi	r24, 0x01	; 1
    2248:	ec 81       	ldd	r30, Y+4	; 0x04
    224a:	fd 81       	ldd	r31, Y+5	; 0x05
    224c:	80 83       	st	Z, r24
    224e:	3b c0       	rjmp	.+118    	; 0x22c6 <DIO_GetPinVal+0x116>
			case DIO_PORTB : *Copy_pvValue=GET_BIT(PINB,Copy_Pin);break;
    2250:	e6 e3       	ldi	r30, 0x36	; 54
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a9 01       	movw	r20, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <DIO_GetPinVal+0xb8>
    2264:	55 95       	asr	r21
    2266:	47 95       	ror	r20
    2268:	8a 95       	dec	r24
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <DIO_GetPinVal+0xb4>
    226c:	ca 01       	movw	r24, r20
    226e:	81 70       	andi	r24, 0x01	; 1
    2270:	ec 81       	ldd	r30, Y+4	; 0x04
    2272:	fd 81       	ldd	r31, Y+5	; 0x05
    2274:	80 83       	st	Z, r24
    2276:	27 c0       	rjmp	.+78     	; 0x22c6 <DIO_GetPinVal+0x116>
			case DIO_PORTC : *Copy_pvValue=GET_BIT(PINC,Copy_Pin);break;
    2278:	e3 e3       	ldi	r30, 0x33	; 51
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a9 01       	movw	r20, r18
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <DIO_GetPinVal+0xe0>
    228c:	55 95       	asr	r21
    228e:	47 95       	ror	r20
    2290:	8a 95       	dec	r24
    2292:	e2 f7       	brpl	.-8      	; 0x228c <DIO_GetPinVal+0xdc>
    2294:	ca 01       	movw	r24, r20
    2296:	81 70       	andi	r24, 0x01	; 1
    2298:	ec 81       	ldd	r30, Y+4	; 0x04
    229a:	fd 81       	ldd	r31, Y+5	; 0x05
    229c:	80 83       	st	Z, r24
    229e:	13 c0       	rjmp	.+38     	; 0x22c6 <DIO_GetPinVal+0x116>
			case DIO_PORTD : *Copy_pvValue=GET_BIT(PIND,Copy_Pin);break;
    22a0:	e0 e3       	ldi	r30, 0x30	; 48
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a9 01       	movw	r20, r18
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <DIO_GetPinVal+0x108>
    22b4:	55 95       	asr	r21
    22b6:	47 95       	ror	r20
    22b8:	8a 95       	dec	r24
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <DIO_GetPinVal+0x104>
    22bc:	ca 01       	movw	r24, r20
    22be:	81 70       	andi	r24, 0x01	; 1
    22c0:	ec 81       	ldd	r30, Y+4	; 0x04
    22c2:	fd 81       	ldd	r31, Y+5	; 0x05
    22c4:	80 83       	st	Z, r24

			}
		}
return Local_uint8ErrorState;
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c8:	27 96       	adiw	r28, 0x07	; 7
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <DIO_GetPortVal>:


uint8 DIO_GetPortVal(Port_t Copy_Port,uint8* Copy_pvValue)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <DIO_GetPortVal+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <DIO_GetPortVal+0x8>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <DIO_GetPortVal+0xa>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	8a 83       	std	Y+2, r24	; 0x02
    22ea:	7c 83       	std	Y+4, r23	; 0x04
    22ec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8ErrorState = 0;
    22ee:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	84 30       	cpi	r24, 0x04	; 4
    22f4:	18 f0       	brcs	.+6      	; 0x22fc <DIO_GetPortVal+0x22>
			Local_uint8ErrorState = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	3a c0       	rjmp	.+116    	; 0x2370 <DIO_GetPortVal+0x96>
		} else {
			switch(Copy_Port)
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	3e 83       	std	Y+6, r19	; 0x06
    2304:	2d 83       	std	Y+5, r18	; 0x05
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	91 05       	cpc	r25, r1
    230e:	e1 f0       	breq	.+56     	; 0x2348 <DIO_GetPortVal+0x6e>
    2310:	2d 81       	ldd	r18, Y+5	; 0x05
    2312:	3e 81       	ldd	r19, Y+6	; 0x06
    2314:	22 30       	cpi	r18, 0x02	; 2
    2316:	31 05       	cpc	r19, r1
    2318:	2c f4       	brge	.+10     	; 0x2324 <DIO_GetPortVal+0x4a>
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	61 f0       	breq	.+24     	; 0x233a <DIO_GetPortVal+0x60>
    2322:	26 c0       	rjmp	.+76     	; 0x2370 <DIO_GetPortVal+0x96>
    2324:	2d 81       	ldd	r18, Y+5	; 0x05
    2326:	3e 81       	ldd	r19, Y+6	; 0x06
    2328:	22 30       	cpi	r18, 0x02	; 2
    232a:	31 05       	cpc	r19, r1
    232c:	a1 f0       	breq	.+40     	; 0x2356 <DIO_GetPortVal+0x7c>
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	83 30       	cpi	r24, 0x03	; 3
    2334:	91 05       	cpc	r25, r1
    2336:	b1 f0       	breq	.+44     	; 0x2364 <DIO_GetPortVal+0x8a>
    2338:	1b c0       	rjmp	.+54     	; 0x2370 <DIO_GetPortVal+0x96>
			{case DIO_PORTA:*Copy_pvValue=PINA;break;
    233a:	e9 e3       	ldi	r30, 0x39	; 57
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	80 83       	st	Z, r24
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <DIO_GetPortVal+0x96>
			case DIO_PORTB:*Copy_pvValue=PINB;break;
    2348:	e6 e3       	ldi	r30, 0x36	; 54
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	eb 81       	ldd	r30, Y+3	; 0x03
    2350:	fc 81       	ldd	r31, Y+4	; 0x04
    2352:	80 83       	st	Z, r24
    2354:	0d c0       	rjmp	.+26     	; 0x2370 <DIO_GetPortVal+0x96>
			case DIO_PORTC:*Copy_pvValue=PINC;break;
    2356:	e3 e3       	ldi	r30, 0x33	; 51
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	eb 81       	ldd	r30, Y+3	; 0x03
    235e:	fc 81       	ldd	r31, Y+4	; 0x04
    2360:	80 83       	st	Z, r24
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <DIO_GetPortVal+0x96>
			case DIO_PORTD:*Copy_pvValue=PIND;break;
    2364:	e0 e3       	ldi	r30, 0x30	; 48
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	eb 81       	ldd	r30, Y+3	; 0x03
    236c:	fc 81       	ldd	r31, Y+4	; 0x04
    236e:	80 83       	st	Z, r24
			}
		}

return Local_uint8ErrorState;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
}
    2372:	26 96       	adiw	r28, 0x06	; 6
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <ADC_voidInit>:
#include "../inc/ADC_interface.h"
#include "../inc/ADC_register.h"
#include "../inc/ADC_config.h"
#include "../inc/ADC_private.h"

void ADC_voidInit(void) {
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
	/*PRE-SCALER SELECTION*/
	ADCSRA_Reg->ADPS = DESIRED_PRE_SCALER;
    238c:	e6 e2       	ldi	r30, 0x26	; 38
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	88 7f       	andi	r24, 0xF8	; 248
    2394:	83 60       	ori	r24, 0x03	; 3
    2396:	80 83       	st	Z, r24

	/*Choosing the voltage reference*/
	ADMUX_Reg->REFS = DESIRED_VOLTAGE_REF;
    2398:	e7 e2       	ldi	r30, 0x27	; 39
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8f 73       	andi	r24, 0x3F	; 63
    23a0:	80 64       	ori	r24, 0x40	; 64
    23a2:	80 83       	st	Z, r24
	/*choose the Resolution*/
	ADMUX_Reg->ADLAR = RIGHT;
    23a4:	e7 e2       	ldi	r30, 0x27	; 39
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	8f 7d       	andi	r24, 0xDF	; 223
    23ac:	80 83       	st	Z, r24

#ifdef AUTO_TREGERED

	ADCSRA_Reg->ADATE=ENABLE;
    23ae:	e6 e2       	ldi	r30, 0x26	; 38
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	80 62       	ori	r24, 0x20	; 32
    23b6:	80 83       	st	Z, r24

	ADC_SFIOR_Reg->ADTS  =  AUTO_TRIGER_SOURCE;
    23b8:	e0 e5       	ldi	r30, 0x50	; 80
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8f 71       	andi	r24, 0x1F	; 31
    23c0:	80 68       	ori	r24, 0x80	; 128
    23c2:	80 83       	st	Z, r24

#endif
	/*ENABLE THE ADC*/
	ADCSRA_Reg->ADEN = ENABLE;
    23c4:	e6 e2       	ldi	r30, 0x26	; 38
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	80 68       	ori	r24, 0x80	; 128
    23cc:	80 83       	st	Z, r24

}
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <ADC_uint8StartConversionSynchronus>:
ADC_Status_t ADC_uint8StartConversionSynchronus(Channel_t Copy_uint8channel,uint16* copy_uint16PuReading) {
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	28 97       	sbiw	r28, 0x08	; 8
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	8e 83       	std	Y+6, r24	; 0x06
    23ea:	78 87       	std	Y+8, r23	; 0x08
    23ec:	6f 83       	std	Y+7, r22	; 0x07
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    23ee:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_uint32Counter = 0;
    23f0:	19 82       	std	Y+1, r1	; 0x01
    23f2:	1a 82       	std	Y+2, r1	; 0x02
    23f4:	1b 82       	std	Y+3, r1	; 0x03
    23f6:	1c 82       	std	Y+4, r1	; 0x04
	if (NULL == copy_uint16PuReading) {
    23f8:	8f 81       	ldd	r24, Y+7	; 0x07
    23fa:	98 85       	ldd	r25, Y+8	; 0x08
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	19 f4       	brne	.+6      	; 0x2406 <ADC_uint8StartConversionSynchronus+0x32>
		Local_ErrorStatus = ADC_POINTER_Err;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	4a c0       	rjmp	.+148    	; 0x249a <ADC_uint8StartConversionSynchronus+0xc6>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    2406:	8e 81       	ldd	r24, Y+6	; 0x06
    2408:	88 30       	cpi	r24, 0x08	; 8
    240a:	18 f0       	brcs	.+6      	; 0x2412 <ADC_uint8StartConversionSynchronus+0x3e>
		Local_ErrorStatus = ADC_ChannelErr;
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	44 c0       	rjmp	.+136    	; 0x249a <ADC_uint8StartConversionSynchronus+0xc6>
	} else {
		/*Select the Channel*/
		ADMUX_Reg->MUX = Copy_uint8channel;
    2412:	e7 e2       	ldi	r30, 0x27	; 39
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	8e 81       	ldd	r24, Y+6	; 0x06
    2418:	8f 71       	andi	r24, 0x1F	; 31
    241a:	98 2f       	mov	r25, r24
    241c:	9f 71       	andi	r25, 0x1F	; 31
    241e:	80 81       	ld	r24, Z
    2420:	80 7e       	andi	r24, 0xE0	; 224
    2422:	89 2b       	or	r24, r25
    2424:	80 83       	st	Z, r24
    2426:	0b c0       	rjmp	.+22     	; 0x243e <ADC_uint8StartConversionSynchronus+0x6a>
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
			Local_uint32Counter++;
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	ab 81       	ldd	r26, Y+3	; 0x03
    242e:	bc 81       	ldd	r27, Y+4	; 0x04
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	a1 1d       	adc	r26, r1
    2434:	b1 1d       	adc	r27, r1
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	ab 83       	std	Y+3, r26	; 0x03
    243c:	bc 83       	std	Y+4, r27	; 0x04
#ifndef AUTO_TREGERED
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
    243e:	e6 e2       	ldi	r30, 0x26	; 38
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	80 71       	andi	r24, 0x10	; 16
    2446:	88 23       	and	r24, r24
    2448:	61 f4       	brne	.+24     	; 0x2462 <ADC_uint8StartConversionSynchronus+0x8e>
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	ab 81       	ldd	r26, Y+3	; 0x03
    2450:	bc 81       	ldd	r27, Y+4	; 0x04
    2452:	84 3f       	cpi	r24, 0xF4	; 244
    2454:	21 e0       	ldi	r18, 0x01	; 1
    2456:	92 07       	cpc	r25, r18
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	a2 07       	cpc	r26, r18
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	b2 07       	cpc	r27, r18
    2460:	18 f3       	brcs	.-58     	; 0x2428 <ADC_uint8StartConversionSynchronus+0x54>
			Local_uint32Counter++;
		}
		if (Local_uint32Counter == TIME_OUT) {
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	ab 81       	ldd	r26, Y+3	; 0x03
    2468:	bc 81       	ldd	r27, Y+4	; 0x04
    246a:	84 3f       	cpi	r24, 0xF4	; 244
    246c:	21 e0       	ldi	r18, 0x01	; 1
    246e:	92 07       	cpc	r25, r18
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	a2 07       	cpc	r26, r18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	b2 07       	cpc	r27, r18
    2478:	19 f4       	brne	.+6      	; 0x2480 <ADC_uint8StartConversionSynchronus+0xac>
			Local_ErrorStatus = ADC_TIME_OUTErr;
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	0d c0       	rjmp	.+26     	; 0x249a <ADC_uint8StartConversionSynchronus+0xc6>
		} else {
			/*Clear the valg*/
			ADCSRA_Reg->ADIF = ENABLE;
    2480:	e6 e2       	ldi	r30, 0x26	; 38
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	80 61       	ori	r24, 0x10	; 16
    2488:	80 83       	st	Z, r24

#if     DATA_SIZE == BIT_10_MACRO
			*copy_uint16PuReading=ADC;
    248a:	e4 e2       	ldi	r30, 0x24	; 36
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	ef 81       	ldd	r30, Y+7	; 0x07
    2494:	f8 85       	ldd	r31, Y+8	; 0x08
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	80 83       	st	Z, r24

		}

	}

	return Local_ErrorStatus;
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    249c:	28 96       	adiw	r28, 0x08	; 8
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <ADC_uint8StartConversionASynchronus>:

ADC_Status_t ADC_uint8StartConversionASynchronus(Channel_t Copy_uint8channel,void (*copy_PvNotifacation)(void), uint16* copy_uint16PuReading) {
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <ADC_uint8StartConversionASynchronus+0x6>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <ADC_uint8StartConversionASynchronus+0x8>
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <ADC_uint8StartConversionASynchronus+0xa>
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	8a 83       	std	Y+2, r24	; 0x02
    24be:	7c 83       	std	Y+4, r23	; 0x04
    24c0:	6b 83       	std	Y+3, r22	; 0x03
    24c2:	5e 83       	std	Y+6, r21	; 0x06
    24c4:	4d 83       	std	Y+5, r20	; 0x05
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    24c6:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == copy_uint16PuReading) {
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <ADC_uint8StartConversionASynchronus+0x28>
		Local_ErrorStatus = ADC_POINTER_Err;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	1e c0       	rjmp	.+60     	; 0x2512 <ADC_uint8StartConversionASynchronus+0x64>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	88 30       	cpi	r24, 0x08	; 8
    24da:	18 f0       	brcs	.+6      	; 0x24e2 <ADC_uint8StartConversionASynchronus+0x34>
		Local_ErrorStatus = ADC_ChannelErr;
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	18 c0       	rjmp	.+48     	; 0x2512 <ADC_uint8StartConversionASynchronus+0x64>
	} else if (NULL == copy_PvNotifacation) {
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	19 f4       	brne	.+6      	; 0x24f0 <ADC_uint8StartConversionASynchronus+0x42>
		Local_ErrorStatus = ADC_POINTER_Err;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	11 c0       	rjmp	.+34     	; 0x2512 <ADC_uint8StartConversionASynchronus+0x64>
	} else {

		Global_PvNotifacation = copy_PvNotifacation;
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	90 93 a5 00 	sts	0x00A5, r25
    24f8:	80 93 a4 00 	sts	0x00A4, r24

		/*Assign Address of Receive Variable in Global Pointer to be used in ISR*/
		Global_uint16PuReading = copy_uint16PuReading;
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	90 93 a7 00 	sts	0x00A7, r25
    2504:	80 93 a6 00 	sts	0x00A6, r24


		/* ADC Conversion Complete Interrupt Enable*/
		ADCSRA_Reg->ADIE = ENABLE;
    2508:	e6 e2       	ldi	r30, 0x26	; 38
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	88 60       	ori	r24, 0x08	; 8
    2510:	80 83       	st	Z, r24
#ifndef AUTO_TREGERED
		/*ADC Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
	}
	return Local_ErrorStatus;
    2512:	89 81       	ldd	r24, Y+1	; 0x01
}
    2514:	26 96       	adiw	r28, 0x06	; 6
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <__vector_16>:



void __vector_16(void) {
    2526:	1f 92       	push	r1
    2528:	0f 92       	push	r0
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	0f 92       	push	r0
    252e:	11 24       	eor	r1, r1
    2530:	2f 93       	push	r18
    2532:	3f 93       	push	r19
    2534:	4f 93       	push	r20
    2536:	5f 93       	push	r21
    2538:	6f 93       	push	r22
    253a:	7f 93       	push	r23
    253c:	8f 93       	push	r24
    253e:	9f 93       	push	r25
    2540:	af 93       	push	r26
    2542:	bf 93       	push	r27
    2544:	ef 93       	push	r30
    2546:	ff 93       	push	r31
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
#if     DATA_SIZE == BIT_10_MACRO
	*Global_uint16PuReading=ADC;
    2550:	a0 91 a6 00 	lds	r26, 0x00A6
    2554:	b0 91 a7 00 	lds	r27, 0x00A7
    2558:	e4 e2       	ldi	r30, 0x24	; 36
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	8d 93       	st	X+, r24
    2562:	9c 93       	st	X, r25
#elif  DATA_SIZE == BIT_8_MACRO
	*Global_uint16PuReading = ADC >> 2;
#endif

	/*Execute Notification Function*/
	Global_PvNotifacation();
    2564:	e0 91 a4 00 	lds	r30, 0x00A4
    2568:	f0 91 a5 00 	lds	r31, 0x00A5
    256c:	09 95       	icall
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	ff 91       	pop	r31
    2574:	ef 91       	pop	r30
    2576:	bf 91       	pop	r27
    2578:	af 91       	pop	r26
    257a:	9f 91       	pop	r25
    257c:	8f 91       	pop	r24
    257e:	7f 91       	pop	r23
    2580:	6f 91       	pop	r22
    2582:	5f 91       	pop	r21
    2584:	4f 91       	pop	r20
    2586:	3f 91       	pop	r19
    2588:	2f 91       	pop	r18
    258a:	0f 90       	pop	r0
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	0f 90       	pop	r0
    2590:	1f 90       	pop	r1
    2592:	18 95       	reti

00002594 <CLCD_voidSendCommand>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/CLCD_interface.h"
#include "../../../MCAL/DIO/inc/DIO_INTERFACE.h"
#include <util/delay.h>
void CLCD_voidSendCommand(uint8 copy_uint8Command)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	2f 97       	sbiw	r28, 0x0f	; 15
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	8f 87       	std	Y+15, r24	; 0x0f
	/*Setting RS pin to low*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>
/*Setting RW pin low for write*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>

/*Set command data pins*/
DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Command);
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    25c2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DIO_SetPortVal>

/*Send Enable pulse*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	62 e0       	ldi	r22, 0x02	; 2
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e0       	ldi	r26, 0x00	; 0
    25d6:	b0 e4       	ldi	r27, 0x40	; 64
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <CLCD_voidSendCommand+0xee>
    2664:	88 ec       	ldi	r24, 0xC8	; 200
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <CLCD_voidSendCommand+0xdc>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <CLCD_voidSendCommand+0xd0>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <CLCD_voidSendCommand+0x118>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	62 e0       	ldi	r22, 0x02	; 2
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>
}
    26be:	2f 96       	adiw	r28, 0x0f	; 15
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	2e 97       	sbiw	r28, 0x0e	; 14
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e2       	ldi	r26, 0x20	; 32
    26ea:	b2 e4       	ldi	r27, 0x42	; 66
    26ec:	8b 87       	std	Y+11, r24	; 0x0b
    26ee:	9c 87       	std	Y+12, r25	; 0x0c
    26f0:	ad 87       	std	Y+13, r26	; 0x0d
    26f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8f 83       	std	Y+7, r24	; 0x07
    270e:	98 87       	std	Y+8, r25	; 0x08
    2710:	a9 87       	std	Y+9, r26	; 0x09
    2712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <CLCD_voidInit+0x66>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2750:	7c 85       	ldd	r23, Y+12	; 0x0c
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <CLCD_voidInit+0xc6>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	9c 81       	ldd	r25, Y+4	; 0x04
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <CLCD_voidInit+0xb4>
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <CLCD_voidInit+0xa8>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <CLCD_voidInit+0xf0>
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
	/*Wait more that 30 ms*/
	_delay_ms(40);

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
    27c8:	88 e3       	ldi	r24, 0x38	; 56
    27ca:	0e 94 ca 12 	call	0x2594	; 0x2594 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
    27ce:	8c e0       	ldi	r24, 0x0C	; 12
    27d0:	0e 94 ca 12 	call	0x2594	; 0x2594 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(1);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	0e 94 ca 12 	call	0x2594	; 0x2594 <CLCD_voidSendCommand>



}
    27da:	2e 96       	adiw	r28, 0x0e	; 14
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <CLCD_voidSendData>:


void CLCD_voidSendData(uint8 copy_uint8Data)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	2f 97       	sbiw	r28, 0x0f	; 15
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	8f 87       	std	Y+15, r24	; 0x0f

	/*Setting RS pin to HIGH*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>
	/*Setting RW pin low for write*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>

	/*Set data pins*/
	DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Data);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	6f 85       	ldd	r22, Y+15	; 0x0f
    281a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DIO_SetPortVal>

	/*Send Enable pulse*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	62 e0       	ldi	r22, 0x02	; 2
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e0       	ldi	r26, 0x00	; 0
    282e:	b0 e4       	ldi	r27, 0x40	; 64
    2830:	8b 87       	std	Y+11, r24	; 0x0b
    2832:	9c 87       	std	Y+12, r25	; 0x0c
    2834:	ad 87       	std	Y+13, r26	; 0x0d
    2836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6b 85       	ldd	r22, Y+11	; 0x0b
    283a:	7c 85       	ldd	r23, Y+12	; 0x0c
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8f 83       	std	Y+7, r24	; 0x07
    2852:	98 87       	std	Y+8, r25	; 0x08
    2854:	a9 87       	std	Y+9, r26	; 0x09
    2856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2858:	6f 81       	ldd	r22, Y+7	; 0x07
    285a:	78 85       	ldd	r23, Y+8	; 0x08
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <CLCD_voidSendData+0x8e>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6b 85       	ldd	r22, Y+11	; 0x0b
    2894:	7c 85       	ldd	r23, Y+12	; 0x0c
    2896:	8d 85       	ldd	r24, Y+13	; 0x0d
    2898:	9e 85       	ldd	r25, Y+14	; 0x0e
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <CLCD_voidSendData+0xee>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <CLCD_voidSendData+0xdc>
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <CLCD_voidSendData+0xd0>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6f 81       	ldd	r22, Y+7	; 0x07
    28e6:	78 85       	ldd	r23, Y+8	; 0x08
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <CLCD_voidSendData+0x118>
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinVal>


}
    2916:	2f 96       	adiw	r28, 0x0f	; 15
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <CLCD_voidSendString>:

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <CLCD_voidSendString+0x6>
    292e:	0f 92       	push	r0
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	9b 83       	std	Y+3, r25	; 0x03
    2936:	8a 83       	std	Y+2, r24	; 0x02
uint8 Local_uint8Counter=0;
    2938:	19 82       	std	Y+1, r1	; 0x01
    293a:	0e c0       	rjmp	.+28     	; 0x2958 <CLCD_voidSendString+0x30>
while(Copy_uint8String[Local_uint8Counter]!='\0')
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	fc 01       	movw	r30, r24
    2948:	e2 0f       	add	r30, r18
    294a:	f3 1f       	adc	r31, r19
    294c:	80 81       	ld	r24, Z
    294e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <CLCD_voidSendData>
    Local_uint8Counter++;
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	8f 5f       	subi	r24, 0xFF	; 255
    2956:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
uint8 Local_uint8Counter=0;
while(Copy_uint8String[Local_uint8Counter]!='\0')
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	9b 81       	ldd	r25, Y+3	; 0x03
    2962:	fc 01       	movw	r30, r24
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
    2968:	80 81       	ld	r24, Z
    296a:	88 23       	and	r24, r24
    296c:	39 f7       	brne	.-50     	; 0x293c <CLCD_voidSendString+0x14>
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    Local_uint8Counter++;
}

}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	00 d0       	rcall	.+0      	; 0x2980 <CLCD_voidGoToXY+0x6>
    2980:	0f 92       	push	r0
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	8a 83       	std	Y+2, r24	; 0x02
    2988:	6b 83       	std	Y+3, r22	; 0x03
  uint8 Local_uint8Address;

  if(Copy_uint8Xposition==0)
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	88 23       	and	r24, r24
    298e:	19 f4       	brne	.+6      	; 0x2996 <CLCD_voidGoToXY+0x1c>
  {
	  Local_uint8Address=Copy_uint8Yposition;
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	06 c0       	rjmp	.+12     	; 0x29a2 <CLCD_voidGoToXY+0x28>
  }
  else if(Copy_uint8Xposition==1)
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	81 30       	cpi	r24, 0x01	; 1
    299a:	19 f4       	brne	.+6      	; 0x29a2 <CLCD_voidGoToXY+0x28>

  {
	  Local_uint8Address=Copy_uint8Yposition+0x40;
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	80 5c       	subi	r24, 0xC0	; 192
    29a0:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_voidSendCommand(Local_uint8Address|(1<<7));
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	80 68       	ori	r24, 0x80	; 128
    29a6:	0e 94 ca 12 	call	0x2594	; 0x2594 <CLCD_voidSendCommand>
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(sint32 copy_uint32Number)
{
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	60 97       	sbiw	r28, 0x10	; 16
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	6d 87       	std	Y+13, r22	; 0x0d
    29d0:	7e 87       	std	Y+14, r23	; 0x0e
    29d2:	8f 87       	std	Y+15, r24	; 0x0f
    29d4:	98 8b       	std	Y+16, r25	; 0x10
	if(copy_uint32Number<0)
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	af 85       	ldd	r26, Y+15	; 0x0f
    29dc:	b8 89       	ldd	r27, Y+16	; 0x10
    29de:	bb 23       	and	r27, r27
    29e0:	94 f4       	brge	.+36     	; 0x2a06 <CLCD_voidWriteNumber+0x50>
	{
		CLCD_voidSendData('-');
    29e2:	8d e2       	ldi	r24, 0x2D	; 45
    29e4:	0e 94 f6 13 	call	0x27ec	; 0x27ec <CLCD_voidSendData>
		copy_uint32Number= -copy_uint32Number;
    29e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ec:	af 85       	ldd	r26, Y+15	; 0x0f
    29ee:	b8 89       	ldd	r27, Y+16	; 0x10
    29f0:	b0 95       	com	r27
    29f2:	a0 95       	com	r26
    29f4:	90 95       	com	r25
    29f6:	81 95       	neg	r24
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	af 4f       	sbci	r26, 0xFF	; 255
    29fc:	bf 4f       	sbci	r27, 0xFF	; 255
    29fe:	8d 87       	std	Y+13, r24	; 0x0d
    2a00:	9e 87       	std	Y+14, r25	; 0x0e
    2a02:	af 87       	std	Y+15, r26	; 0x0f
    2a04:	b8 8b       	std	Y+16, r27	; 0x10
	}
	if(copy_uint32Number==0)
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0a:	af 85       	ldd	r26, Y+15	; 0x0f
    2a0c:	b8 89       	ldd	r27, Y+16	; 0x10
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	a1 05       	cpc	r26, r1
    2a12:	b1 05       	cpc	r27, r1
    2a14:	21 f4       	brne	.+8      	; 0x2a1e <CLCD_voidWriteNumber+0x68>
	{
		CLCD_voidSendData('0');
    2a16:	80 e3       	ldi	r24, 0x30	; 48
    2a18:	0e 94 f6 13 	call	0x27ec	; 0x27ec <CLCD_voidSendData>
    2a1c:	50 c0       	rjmp	.+160    	; 0x2abe <CLCD_voidWriteNumber+0x108>
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
    2a1e:	1a 82       	std	Y+2, r1	; 0x02
    2a20:	2e c0       	rjmp	.+92     	; 0x2a7e <CLCD_voidWriteNumber+0xc8>
while(copy_uint32Number>0)
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	08 2f       	mov	r16, r24
    2a26:	10 e0       	ldi	r17, 0x00	; 0
    2a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2c:	af 85       	ldd	r26, Y+15	; 0x0f
    2a2e:	b8 89       	ldd	r27, Y+16	; 0x10
    2a30:	2a e0       	ldi	r18, 0x0A	; 10
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodsi4>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	28 2f       	mov	r18, r24
    2a46:	20 5d       	subi	r18, 0xD0	; 208
    2a48:	ce 01       	movw	r24, r28
    2a4a:	03 96       	adiw	r24, 0x03	; 3
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	e0 0f       	add	r30, r16
    2a50:	f1 1f       	adc	r31, r17
    2a52:	20 83       	st	Z, r18
    2a54:	8a 81       	ldd	r24, Y+2	; 0x02
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	8a 83       	std	Y+2, r24	; 0x02
	copy_uint32Number/=10;
    2a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5e:	af 85       	ldd	r26, Y+15	; 0x0f
    2a60:	b8 89       	ldd	r27, Y+16	; 0x10
    2a62:	2a e0       	ldi	r18, 0x0A	; 10
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodsi4>
    2a72:	da 01       	movw	r26, r20
    2a74:	c9 01       	movw	r24, r18
    2a76:	8d 87       	std	Y+13, r24	; 0x0d
    2a78:	9e 87       	std	Y+14, r25	; 0x0e
    2a7a:	af 87       	std	Y+15, r26	; 0x0f
    2a7c:	b8 8b       	std	Y+16, r27	; 0x10
		CLCD_voidSendData('0');
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
while(copy_uint32Number>0)
    2a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a82:	af 85       	ldd	r26, Y+15	; 0x0f
    2a84:	b8 89       	ldd	r27, Y+16	; 0x10
    2a86:	18 16       	cp	r1, r24
    2a88:	19 06       	cpc	r1, r25
    2a8a:	1a 06       	cpc	r1, r26
    2a8c:	1b 06       	cpc	r1, r27
    2a8e:	4c f2       	brlt	.-110    	; 0x2a22 <CLCD_voidWriteNumber+0x6c>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	11 c0       	rjmp	.+34     	; 0x2ab8 <CLCD_voidWriteNumber+0x102>
{
	CLCD_voidSendData(NUM[i-1]);
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9c 01       	movw	r18, r24
    2a9e:	21 50       	subi	r18, 0x01	; 1
    2aa0:	30 40       	sbci	r19, 0x00	; 0
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	03 96       	adiw	r24, 0x03	; 3
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e2 0f       	add	r30, r18
    2aaa:	f3 1f       	adc	r31, r19
    2aac:	80 81       	ld	r24, Z
    2aae:	0e 94 f6 13 	call	0x27ec	; 0x27ec <CLCD_voidSendData>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	81 50       	subi	r24, 0x01	; 1
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	88 23       	and	r24, r24
    2abc:	61 f7       	brne	.-40     	; 0x2a96 <CLCD_voidWriteNumber+0xe0>
{
	CLCD_voidSendData(NUM[i-1]);
}
}
    2abe:	60 96       	adiw	r28, 0x10	; 16
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <CLCD_voidWriteSpecialChar>:
void CLCD_voidWriteSpecialChar(uint8* copy_puint8Pattern,uint8 copy_uint8PatternNumber,uint8 copy_uint8Xposition,uint8 copy_uint8Yposition)
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	27 97       	sbiw	r28, 0x07	; 7
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
    2aec:	6d 83       	std	Y+5, r22	; 0x05
    2aee:	4e 83       	std	Y+6, r20	; 0x06
    2af0:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_uint8CGRAM_Address=0;
    2af2:	1a 82       	std	Y+2, r1	; 0x02
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	8a 83       	std	Y+2, r24	; 0x02
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	80 64       	ori	r24, 0x40	; 64
    2b0c:	0e 94 ca 12 	call	0x2594	; 0x2594 <CLCD_voidSendCommand>

for(uint8 i=0;i<8;i++)
    2b10:	19 82       	std	Y+1, r1	; 0x01
    2b12:	0e c0       	rjmp	.+28     	; 0x2b30 <CLCD_voidWriteSpecialChar+0x5c>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e2 0f       	add	r30, r18
    2b22:	f3 1f       	adc	r31, r19
    2b24:	80 81       	ld	r24, Z
    2b26:	0e 94 f6 13 	call	0x27ec	; 0x27ec <CLCD_voidSendData>
	uint8 Local_uint8CGRAM_Address=0;
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));

for(uint8 i=0;i<8;i++)
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	88 30       	cpi	r24, 0x08	; 8
    2b34:	78 f3       	brcs	.-34     	; 0x2b14 <CLCD_voidWriteSpecialChar+0x40>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
}
/*go back to DDRAM to display the Arr*/
 CLCD_voidGoToXY(copy_uint8Xposition,copy_uint8Yposition);
    2b36:	8e 81       	ldd	r24, Y+6	; 0x06
    2b38:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3a:	0e 94 bd 14 	call	0x297a	; 0x297a <CLCD_voidGoToXY>

CLCD_voidSendData(copy_uint8PatternNumber);
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	0e 94 f6 13 	call	0x27ec	; 0x27ec <CLCD_voidSendData>

}
    2b44:	27 96       	adiw	r28, 0x07	; 7
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <A7A>:
#include "../BSW/HAL/CLCD/inc/CLCD_interface.h"
#include "../BSW/MCAL/TIMER1/inc/TIMER1_interface.h"

int global=0;
void A7A (void)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
	global++;
    2b5e:	80 91 a8 00 	lds	r24, 0x00A8
    2b62:	90 91 a9 00 	lds	r25, 0x00A9
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	90 93 a9 00 	sts	0x00A9, r25
    2b6c:	80 93 a8 00 	sts	0x00A8, r24
}
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <main>:
int main()
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    2b7e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PORT_voidInit>
	CLCD_voidInit();
    2b82:	0e 94 68 13 	call	0x26d0	; 0x26d0 <CLCD_voidInit>
	GIE_Enable();
    2b86:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <GIE_Enable>
	TIMER1_voidInit();
    2b8a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <TIMER1_voidInit>

	TIMER1_voidSetChannelACompMatch(31250);
    2b8e:	82 e1       	ldi	r24, 0x12	; 18
    2b90:	9a e7       	ldi	r25, 0x7A	; 122
    2b92:	0e 94 9b 08 	call	0x1136	; 0x1136 <TIMER1_voidSetChannelACompMatch>
	TIMER1_CTCASetCallBck(&A7A);
    2b96:	8b ea       	ldi	r24, 0xAB	; 171
    2b98:	95 e1       	ldi	r25, 0x15	; 21
    2b9a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TIMER1_CTCASetCallBck>

	while(1)
	{
		CLCD_voidGoToXY(0,0);
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	0e 94 bd 14 	call	0x297a	; 0x297a <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(global);
    2ba6:	80 91 a8 00 	lds	r24, 0x00A8
    2baa:	90 91 a9 00 	lds	r25, 0x00A9
    2bae:	aa 27       	eor	r26, r26
    2bb0:	97 fd       	sbrc	r25, 7
    2bb2:	a0 95       	com	r26
    2bb4:	ba 2f       	mov	r27, r26
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 db 14 	call	0x29b6	; 0x29b6 <CLCD_voidWriteNumber>
    2bbe:	ef cf       	rjmp	.-34     	; 0x2b9e <main+0x28>

00002bc0 <__udivmodhi4>:
    2bc0:	aa 1b       	sub	r26, r26
    2bc2:	bb 1b       	sub	r27, r27
    2bc4:	51 e1       	ldi	r21, 0x11	; 17
    2bc6:	07 c0       	rjmp	.+14     	; 0x2bd6 <__udivmodhi4_ep>

00002bc8 <__udivmodhi4_loop>:
    2bc8:	aa 1f       	adc	r26, r26
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	a6 17       	cp	r26, r22
    2bce:	b7 07       	cpc	r27, r23
    2bd0:	10 f0       	brcs	.+4      	; 0x2bd6 <__udivmodhi4_ep>
    2bd2:	a6 1b       	sub	r26, r22
    2bd4:	b7 0b       	sbc	r27, r23

00002bd6 <__udivmodhi4_ep>:
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	5a 95       	dec	r21
    2bdc:	a9 f7       	brne	.-22     	; 0x2bc8 <__udivmodhi4_loop>
    2bde:	80 95       	com	r24
    2be0:	90 95       	com	r25
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	08 95       	ret

00002be8 <__divmodsi4>:
    2be8:	97 fb       	bst	r25, 7
    2bea:	09 2e       	mov	r0, r25
    2bec:	05 26       	eor	r0, r21
    2bee:	0e d0       	rcall	.+28     	; 0x2c0c <__divmodsi4_neg1>
    2bf0:	57 fd       	sbrc	r21, 7
    2bf2:	04 d0       	rcall	.+8      	; 0x2bfc <__divmodsi4_neg2>
    2bf4:	14 d0       	rcall	.+40     	; 0x2c1e <__udivmodsi4>
    2bf6:	0a d0       	rcall	.+20     	; 0x2c0c <__divmodsi4_neg1>
    2bf8:	00 1c       	adc	r0, r0
    2bfa:	38 f4       	brcc	.+14     	; 0x2c0a <__divmodsi4_exit>

00002bfc <__divmodsi4_neg2>:
    2bfc:	50 95       	com	r21
    2bfe:	40 95       	com	r20
    2c00:	30 95       	com	r19
    2c02:	21 95       	neg	r18
    2c04:	3f 4f       	sbci	r19, 0xFF	; 255
    2c06:	4f 4f       	sbci	r20, 0xFF	; 255
    2c08:	5f 4f       	sbci	r21, 0xFF	; 255

00002c0a <__divmodsi4_exit>:
    2c0a:	08 95       	ret

00002c0c <__divmodsi4_neg1>:
    2c0c:	f6 f7       	brtc	.-4      	; 0x2c0a <__divmodsi4_exit>
    2c0e:	90 95       	com	r25
    2c10:	80 95       	com	r24
    2c12:	70 95       	com	r23
    2c14:	61 95       	neg	r22
    2c16:	7f 4f       	sbci	r23, 0xFF	; 255
    2c18:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1c:	08 95       	ret

00002c1e <__udivmodsi4>:
    2c1e:	a1 e2       	ldi	r26, 0x21	; 33
    2c20:	1a 2e       	mov	r1, r26
    2c22:	aa 1b       	sub	r26, r26
    2c24:	bb 1b       	sub	r27, r27
    2c26:	fd 01       	movw	r30, r26
    2c28:	0d c0       	rjmp	.+26     	; 0x2c44 <__udivmodsi4_ep>

00002c2a <__udivmodsi4_loop>:
    2c2a:	aa 1f       	adc	r26, r26
    2c2c:	bb 1f       	adc	r27, r27
    2c2e:	ee 1f       	adc	r30, r30
    2c30:	ff 1f       	adc	r31, r31
    2c32:	a2 17       	cp	r26, r18
    2c34:	b3 07       	cpc	r27, r19
    2c36:	e4 07       	cpc	r30, r20
    2c38:	f5 07       	cpc	r31, r21
    2c3a:	20 f0       	brcs	.+8      	; 0x2c44 <__udivmodsi4_ep>
    2c3c:	a2 1b       	sub	r26, r18
    2c3e:	b3 0b       	sbc	r27, r19
    2c40:	e4 0b       	sbc	r30, r20
    2c42:	f5 0b       	sbc	r31, r21

00002c44 <__udivmodsi4_ep>:
    2c44:	66 1f       	adc	r22, r22
    2c46:	77 1f       	adc	r23, r23
    2c48:	88 1f       	adc	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	1a 94       	dec	r1
    2c4e:	69 f7       	brne	.-38     	; 0x2c2a <__udivmodsi4_loop>
    2c50:	60 95       	com	r22
    2c52:	70 95       	com	r23
    2c54:	80 95       	com	r24
    2c56:	90 95       	com	r25
    2c58:	9b 01       	movw	r18, r22
    2c5a:	ac 01       	movw	r20, r24
    2c5c:	bd 01       	movw	r22, r26
    2c5e:	cf 01       	movw	r24, r30
    2c60:	08 95       	ret

00002c62 <__prologue_saves__>:
    2c62:	2f 92       	push	r2
    2c64:	3f 92       	push	r3
    2c66:	4f 92       	push	r4
    2c68:	5f 92       	push	r5
    2c6a:	6f 92       	push	r6
    2c6c:	7f 92       	push	r7
    2c6e:	8f 92       	push	r8
    2c70:	9f 92       	push	r9
    2c72:	af 92       	push	r10
    2c74:	bf 92       	push	r11
    2c76:	cf 92       	push	r12
    2c78:	df 92       	push	r13
    2c7a:	ef 92       	push	r14
    2c7c:	ff 92       	push	r15
    2c7e:	0f 93       	push	r16
    2c80:	1f 93       	push	r17
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	ca 1b       	sub	r28, r26
    2c8c:	db 0b       	sbc	r29, r27
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	09 94       	ijmp

00002c9a <__epilogue_restores__>:
    2c9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2c9c:	39 88       	ldd	r3, Y+17	; 0x11
    2c9e:	48 88       	ldd	r4, Y+16	; 0x10
    2ca0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ca2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ca4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ca6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ca8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2caa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cac:	b9 84       	ldd	r11, Y+9	; 0x09
    2cae:	c8 84       	ldd	r12, Y+8	; 0x08
    2cb0:	df 80       	ldd	r13, Y+7	; 0x07
    2cb2:	ee 80       	ldd	r14, Y+6	; 0x06
    2cb4:	fd 80       	ldd	r15, Y+5	; 0x05
    2cb6:	0c 81       	ldd	r16, Y+4	; 0x04
    2cb8:	1b 81       	ldd	r17, Y+3	; 0x03
    2cba:	aa 81       	ldd	r26, Y+2	; 0x02
    2cbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2cbe:	ce 0f       	add	r28, r30
    2cc0:	d1 1d       	adc	r29, r1
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	ed 01       	movw	r28, r26
    2cce:	08 95       	ret

00002cd0 <malloc>:
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	82 30       	cpi	r24, 0x02	; 2
    2cd8:	91 05       	cpc	r25, r1
    2cda:	10 f4       	brcc	.+4      	; 0x2ce0 <malloc+0x10>
    2cdc:	62 e0       	ldi	r22, 0x02	; 2
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	a0 91 ac 00 	lds	r26, 0x00AC
    2ce4:	b0 91 ad 00 	lds	r27, 0x00AD
    2ce8:	ed 01       	movw	r28, r26
    2cea:	e0 e0       	ldi	r30, 0x00	; 0
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	21 c0       	rjmp	.+66     	; 0x2d36 <malloc+0x66>
    2cf4:	88 81       	ld	r24, Y
    2cf6:	99 81       	ldd	r25, Y+1	; 0x01
    2cf8:	86 17       	cp	r24, r22
    2cfa:	97 07       	cpc	r25, r23
    2cfc:	69 f4       	brne	.+26     	; 0x2d18 <malloc+0x48>
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	30 97       	sbiw	r30, 0x00	; 0
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <malloc+0x3c>
    2d06:	93 83       	std	Z+3, r25	; 0x03
    2d08:	82 83       	std	Z+2, r24	; 0x02
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <malloc+0x44>
    2d0c:	90 93 ad 00 	sts	0x00AD, r25
    2d10:	80 93 ac 00 	sts	0x00AC, r24
    2d14:	fe 01       	movw	r30, r28
    2d16:	34 c0       	rjmp	.+104    	; 0x2d80 <malloc+0xb0>
    2d18:	68 17       	cp	r22, r24
    2d1a:	79 07       	cpc	r23, r25
    2d1c:	38 f4       	brcc	.+14     	; 0x2d2c <malloc+0x5c>
    2d1e:	41 15       	cp	r20, r1
    2d20:	51 05       	cpc	r21, r1
    2d22:	19 f0       	breq	.+6      	; 0x2d2a <malloc+0x5a>
    2d24:	84 17       	cp	r24, r20
    2d26:	95 07       	cpc	r25, r21
    2d28:	08 f4       	brcc	.+2      	; 0x2d2c <malloc+0x5c>
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	9b 81       	ldd	r25, Y+3	; 0x03
    2d32:	9c 01       	movw	r18, r24
    2d34:	e9 01       	movw	r28, r18
    2d36:	20 97       	sbiw	r28, 0x00	; 0
    2d38:	e9 f6       	brne	.-70     	; 0x2cf4 <malloc+0x24>
    2d3a:	41 15       	cp	r20, r1
    2d3c:	51 05       	cpc	r21, r1
    2d3e:	a9 f1       	breq	.+106    	; 0x2daa <malloc+0xda>
    2d40:	ca 01       	movw	r24, r20
    2d42:	86 1b       	sub	r24, r22
    2d44:	97 0b       	sbc	r25, r23
    2d46:	04 97       	sbiw	r24, 0x04	; 4
    2d48:	08 f4       	brcc	.+2      	; 0x2d4c <malloc+0x7c>
    2d4a:	ba 01       	movw	r22, r20
    2d4c:	e0 e0       	ldi	r30, 0x00	; 0
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	2a c0       	rjmp	.+84     	; 0x2da6 <malloc+0xd6>
    2d52:	8d 91       	ld	r24, X+
    2d54:	9c 91       	ld	r25, X
    2d56:	11 97       	sbiw	r26, 0x01	; 1
    2d58:	84 17       	cp	r24, r20
    2d5a:	95 07       	cpc	r25, r21
    2d5c:	f9 f4       	brne	.+62     	; 0x2d9c <malloc+0xcc>
    2d5e:	64 17       	cp	r22, r20
    2d60:	75 07       	cpc	r23, r21
    2d62:	81 f4       	brne	.+32     	; 0x2d84 <malloc+0xb4>
    2d64:	12 96       	adiw	r26, 0x02	; 2
    2d66:	8d 91       	ld	r24, X+
    2d68:	9c 91       	ld	r25, X
    2d6a:	13 97       	sbiw	r26, 0x03	; 3
    2d6c:	30 97       	sbiw	r30, 0x00	; 0
    2d6e:	19 f0       	breq	.+6      	; 0x2d76 <malloc+0xa6>
    2d70:	93 83       	std	Z+3, r25	; 0x03
    2d72:	82 83       	std	Z+2, r24	; 0x02
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <malloc+0xae>
    2d76:	90 93 ad 00 	sts	0x00AD, r25
    2d7a:	80 93 ac 00 	sts	0x00AC, r24
    2d7e:	fd 01       	movw	r30, r26
    2d80:	32 96       	adiw	r30, 0x02	; 2
    2d82:	4f c0       	rjmp	.+158    	; 0x2e22 <malloc+0x152>
    2d84:	ca 01       	movw	r24, r20
    2d86:	86 1b       	sub	r24, r22
    2d88:	97 0b       	sbc	r25, r23
    2d8a:	fd 01       	movw	r30, r26
    2d8c:	e8 0f       	add	r30, r24
    2d8e:	f9 1f       	adc	r31, r25
    2d90:	61 93       	st	Z+, r22
    2d92:	71 93       	st	Z+, r23
    2d94:	02 97       	sbiw	r24, 0x02	; 2
    2d96:	8d 93       	st	X+, r24
    2d98:	9c 93       	st	X, r25
    2d9a:	43 c0       	rjmp	.+134    	; 0x2e22 <malloc+0x152>
    2d9c:	fd 01       	movw	r30, r26
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	9c 01       	movw	r18, r24
    2da4:	d9 01       	movw	r26, r18
    2da6:	10 97       	sbiw	r26, 0x00	; 0
    2da8:	a1 f6       	brne	.-88     	; 0x2d52 <malloc+0x82>
    2daa:	80 91 aa 00 	lds	r24, 0x00AA
    2dae:	90 91 ab 00 	lds	r25, 0x00AB
    2db2:	89 2b       	or	r24, r25
    2db4:	41 f4       	brne	.+16     	; 0x2dc6 <malloc+0xf6>
    2db6:	80 91 8a 00 	lds	r24, 0x008A
    2dba:	90 91 8b 00 	lds	r25, 0x008B
    2dbe:	90 93 ab 00 	sts	0x00AB, r25
    2dc2:	80 93 aa 00 	sts	0x00AA, r24
    2dc6:	40 91 8c 00 	lds	r20, 0x008C
    2dca:	50 91 8d 00 	lds	r21, 0x008D
    2dce:	41 15       	cp	r20, r1
    2dd0:	51 05       	cpc	r21, r1
    2dd2:	41 f4       	brne	.+16     	; 0x2de4 <malloc+0x114>
    2dd4:	4d b7       	in	r20, 0x3d	; 61
    2dd6:	5e b7       	in	r21, 0x3e	; 62
    2dd8:	80 91 88 00 	lds	r24, 0x0088
    2ddc:	90 91 89 00 	lds	r25, 0x0089
    2de0:	48 1b       	sub	r20, r24
    2de2:	59 0b       	sbc	r21, r25
    2de4:	20 91 aa 00 	lds	r18, 0x00AA
    2de8:	30 91 ab 00 	lds	r19, 0x00AB
    2dec:	24 17       	cp	r18, r20
    2dee:	35 07       	cpc	r19, r21
    2df0:	b0 f4       	brcc	.+44     	; 0x2e1e <malloc+0x14e>
    2df2:	ca 01       	movw	r24, r20
    2df4:	82 1b       	sub	r24, r18
    2df6:	93 0b       	sbc	r25, r19
    2df8:	86 17       	cp	r24, r22
    2dfa:	97 07       	cpc	r25, r23
    2dfc:	80 f0       	brcs	.+32     	; 0x2e1e <malloc+0x14e>
    2dfe:	ab 01       	movw	r20, r22
    2e00:	4e 5f       	subi	r20, 0xFE	; 254
    2e02:	5f 4f       	sbci	r21, 0xFF	; 255
    2e04:	84 17       	cp	r24, r20
    2e06:	95 07       	cpc	r25, r21
    2e08:	50 f0       	brcs	.+20     	; 0x2e1e <malloc+0x14e>
    2e0a:	42 0f       	add	r20, r18
    2e0c:	53 1f       	adc	r21, r19
    2e0e:	50 93 ab 00 	sts	0x00AB, r21
    2e12:	40 93 aa 00 	sts	0x00AA, r20
    2e16:	f9 01       	movw	r30, r18
    2e18:	61 93       	st	Z+, r22
    2e1a:	71 93       	st	Z+, r23
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <malloc+0x152>
    2e1e:	e0 e0       	ldi	r30, 0x00	; 0
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	cf 01       	movw	r24, r30
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	08 95       	ret

00002e2a <free>:
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <free+0xa>
    2e32:	50 c0       	rjmp	.+160    	; 0x2ed4 <free+0xaa>
    2e34:	ec 01       	movw	r28, r24
    2e36:	22 97       	sbiw	r28, 0x02	; 2
    2e38:	1b 82       	std	Y+3, r1	; 0x03
    2e3a:	1a 82       	std	Y+2, r1	; 0x02
    2e3c:	a0 91 ac 00 	lds	r26, 0x00AC
    2e40:	b0 91 ad 00 	lds	r27, 0x00AD
    2e44:	10 97       	sbiw	r26, 0x00	; 0
    2e46:	09 f1       	breq	.+66     	; 0x2e8a <free+0x60>
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	50 e0       	ldi	r21, 0x00	; 0
    2e4c:	ac 17       	cp	r26, r28
    2e4e:	bd 07       	cpc	r27, r29
    2e50:	08 f1       	brcs	.+66     	; 0x2e94 <free+0x6a>
    2e52:	bb 83       	std	Y+3, r27	; 0x03
    2e54:	aa 83       	std	Y+2, r26	; 0x02
    2e56:	fe 01       	movw	r30, r28
    2e58:	21 91       	ld	r18, Z+
    2e5a:	31 91       	ld	r19, Z+
    2e5c:	e2 0f       	add	r30, r18
    2e5e:	f3 1f       	adc	r31, r19
    2e60:	ae 17       	cp	r26, r30
    2e62:	bf 07       	cpc	r27, r31
    2e64:	79 f4       	brne	.+30     	; 0x2e84 <free+0x5a>
    2e66:	8d 91       	ld	r24, X+
    2e68:	9c 91       	ld	r25, X
    2e6a:	11 97       	sbiw	r26, 0x01	; 1
    2e6c:	28 0f       	add	r18, r24
    2e6e:	39 1f       	adc	r19, r25
    2e70:	2e 5f       	subi	r18, 0xFE	; 254
    2e72:	3f 4f       	sbci	r19, 0xFF	; 255
    2e74:	39 83       	std	Y+1, r19	; 0x01
    2e76:	28 83       	st	Y, r18
    2e78:	12 96       	adiw	r26, 0x02	; 2
    2e7a:	8d 91       	ld	r24, X+
    2e7c:	9c 91       	ld	r25, X
    2e7e:	13 97       	sbiw	r26, 0x03	; 3
    2e80:	9b 83       	std	Y+3, r25	; 0x03
    2e82:	8a 83       	std	Y+2, r24	; 0x02
    2e84:	41 15       	cp	r20, r1
    2e86:	51 05       	cpc	r21, r1
    2e88:	71 f4       	brne	.+28     	; 0x2ea6 <free+0x7c>
    2e8a:	d0 93 ad 00 	sts	0x00AD, r29
    2e8e:	c0 93 ac 00 	sts	0x00AC, r28
    2e92:	20 c0       	rjmp	.+64     	; 0x2ed4 <free+0xaa>
    2e94:	12 96       	adiw	r26, 0x02	; 2
    2e96:	8d 91       	ld	r24, X+
    2e98:	9c 91       	ld	r25, X
    2e9a:	13 97       	sbiw	r26, 0x03	; 3
    2e9c:	ad 01       	movw	r20, r26
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	11 f0       	breq	.+4      	; 0x2ea6 <free+0x7c>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	d3 cf       	rjmp	.-90     	; 0x2e4c <free+0x22>
    2ea6:	fa 01       	movw	r30, r20
    2ea8:	d3 83       	std	Z+3, r29	; 0x03
    2eaa:	c2 83       	std	Z+2, r28	; 0x02
    2eac:	21 91       	ld	r18, Z+
    2eae:	31 91       	ld	r19, Z+
    2eb0:	e2 0f       	add	r30, r18
    2eb2:	f3 1f       	adc	r31, r19
    2eb4:	ce 17       	cp	r28, r30
    2eb6:	df 07       	cpc	r29, r31
    2eb8:	69 f4       	brne	.+26     	; 0x2ed4 <free+0xaa>
    2eba:	88 81       	ld	r24, Y
    2ebc:	99 81       	ldd	r25, Y+1	; 0x01
    2ebe:	28 0f       	add	r18, r24
    2ec0:	39 1f       	adc	r19, r25
    2ec2:	2e 5f       	subi	r18, 0xFE	; 254
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	fa 01       	movw	r30, r20
    2ec8:	31 83       	std	Z+1, r19	; 0x01
    2eca:	20 83       	st	Z, r18
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed0:	93 83       	std	Z+3, r25	; 0x03
    2ed2:	82 83       	std	Z+2, r24	; 0x02
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	08 95       	ret

00002eda <printf>:
    2eda:	a0 e0       	ldi	r26, 0x00	; 0
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	e3 e7       	ldi	r30, 0x73	; 115
    2ee0:	f7 e1       	ldi	r31, 0x17	; 23
    2ee2:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__prologue_saves__+0x20>
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	35 96       	adiw	r30, 0x05	; 5
    2eea:	61 91       	ld	r22, Z+
    2eec:	71 91       	ld	r23, Z+
    2eee:	80 91 b0 00 	lds	r24, 0x00B0
    2ef2:	90 91 b1 00 	lds	r25, 0x00B1
    2ef6:	af 01       	movw	r20, r30
    2ef8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <vfprintf>
    2efc:	20 96       	adiw	r28, 0x00	; 0
    2efe:	e2 e0       	ldi	r30, 0x02	; 2
    2f00:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__epilogue_restores__+0x20>

00002f04 <vfprintf>:
    2f04:	ab e0       	ldi	r26, 0x0B	; 11
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e8 e8       	ldi	r30, 0x88	; 136
    2f0a:	f7 e1       	ldi	r31, 0x17	; 23
    2f0c:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__>
    2f10:	3c 01       	movw	r6, r24
    2f12:	2b 01       	movw	r4, r22
    2f14:	5a 01       	movw	r10, r20
    2f16:	fc 01       	movw	r30, r24
    2f18:	17 82       	std	Z+7, r1	; 0x07
    2f1a:	16 82       	std	Z+6, r1	; 0x06
    2f1c:	83 81       	ldd	r24, Z+3	; 0x03
    2f1e:	81 fd       	sbrc	r24, 1
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <vfprintf+0x24>
    2f22:	6f ef       	ldi	r22, 0xFF	; 255
    2f24:	7f ef       	ldi	r23, 0xFF	; 255
    2f26:	c6 c1       	rjmp	.+908    	; 0x32b4 <vfprintf+0x3b0>
    2f28:	9a e0       	ldi	r25, 0x0A	; 10
    2f2a:	89 2e       	mov	r8, r25
    2f2c:	1e 01       	movw	r2, r28
    2f2e:	08 94       	sec
    2f30:	21 1c       	adc	r2, r1
    2f32:	31 1c       	adc	r3, r1
    2f34:	f3 01       	movw	r30, r6
    2f36:	23 81       	ldd	r18, Z+3	; 0x03
    2f38:	f2 01       	movw	r30, r4
    2f3a:	23 fd       	sbrc	r18, 3
    2f3c:	85 91       	lpm	r24, Z+
    2f3e:	23 ff       	sbrs	r18, 3
    2f40:	81 91       	ld	r24, Z+
    2f42:	2f 01       	movw	r4, r30
    2f44:	88 23       	and	r24, r24
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <vfprintf+0x46>
    2f48:	b2 c1       	rjmp	.+868    	; 0x32ae <vfprintf+0x3aa>
    2f4a:	85 32       	cpi	r24, 0x25	; 37
    2f4c:	39 f4       	brne	.+14     	; 0x2f5c <vfprintf+0x58>
    2f4e:	23 fd       	sbrc	r18, 3
    2f50:	85 91       	lpm	r24, Z+
    2f52:	23 ff       	sbrs	r18, 3
    2f54:	81 91       	ld	r24, Z+
    2f56:	2f 01       	movw	r4, r30
    2f58:	85 32       	cpi	r24, 0x25	; 37
    2f5a:	29 f4       	brne	.+10     	; 0x2f66 <vfprintf+0x62>
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	b3 01       	movw	r22, r6
    2f60:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    2f64:	e7 cf       	rjmp	.-50     	; 0x2f34 <vfprintf+0x30>
    2f66:	98 2f       	mov	r25, r24
    2f68:	ff 24       	eor	r15, r15
    2f6a:	ee 24       	eor	r14, r14
    2f6c:	99 24       	eor	r9, r9
    2f6e:	ff e1       	ldi	r31, 0x1F	; 31
    2f70:	ff 15       	cp	r31, r15
    2f72:	d0 f0       	brcs	.+52     	; 0x2fa8 <vfprintf+0xa4>
    2f74:	9b 32       	cpi	r25, 0x2B	; 43
    2f76:	69 f0       	breq	.+26     	; 0x2f92 <vfprintf+0x8e>
    2f78:	9c 32       	cpi	r25, 0x2C	; 44
    2f7a:	28 f4       	brcc	.+10     	; 0x2f86 <vfprintf+0x82>
    2f7c:	90 32       	cpi	r25, 0x20	; 32
    2f7e:	59 f0       	breq	.+22     	; 0x2f96 <vfprintf+0x92>
    2f80:	93 32       	cpi	r25, 0x23	; 35
    2f82:	91 f4       	brne	.+36     	; 0x2fa8 <vfprintf+0xa4>
    2f84:	0e c0       	rjmp	.+28     	; 0x2fa2 <vfprintf+0x9e>
    2f86:	9d 32       	cpi	r25, 0x2D	; 45
    2f88:	49 f0       	breq	.+18     	; 0x2f9c <vfprintf+0x98>
    2f8a:	90 33       	cpi	r25, 0x30	; 48
    2f8c:	69 f4       	brne	.+26     	; 0x2fa8 <vfprintf+0xa4>
    2f8e:	41 e0       	ldi	r20, 0x01	; 1
    2f90:	24 c0       	rjmp	.+72     	; 0x2fda <vfprintf+0xd6>
    2f92:	52 e0       	ldi	r21, 0x02	; 2
    2f94:	f5 2a       	or	r15, r21
    2f96:	84 e0       	ldi	r24, 0x04	; 4
    2f98:	f8 2a       	or	r15, r24
    2f9a:	28 c0       	rjmp	.+80     	; 0x2fec <vfprintf+0xe8>
    2f9c:	98 e0       	ldi	r25, 0x08	; 8
    2f9e:	f9 2a       	or	r15, r25
    2fa0:	25 c0       	rjmp	.+74     	; 0x2fec <vfprintf+0xe8>
    2fa2:	e0 e1       	ldi	r30, 0x10	; 16
    2fa4:	fe 2a       	or	r15, r30
    2fa6:	22 c0       	rjmp	.+68     	; 0x2fec <vfprintf+0xe8>
    2fa8:	f7 fc       	sbrc	r15, 7
    2faa:	29 c0       	rjmp	.+82     	; 0x2ffe <vfprintf+0xfa>
    2fac:	89 2f       	mov	r24, r25
    2fae:	80 53       	subi	r24, 0x30	; 48
    2fb0:	8a 30       	cpi	r24, 0x0A	; 10
    2fb2:	70 f4       	brcc	.+28     	; 0x2fd0 <vfprintf+0xcc>
    2fb4:	f6 fe       	sbrs	r15, 6
    2fb6:	05 c0       	rjmp	.+10     	; 0x2fc2 <vfprintf+0xbe>
    2fb8:	98 9c       	mul	r9, r8
    2fba:	90 2c       	mov	r9, r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	98 0e       	add	r9, r24
    2fc0:	15 c0       	rjmp	.+42     	; 0x2fec <vfprintf+0xe8>
    2fc2:	e8 9c       	mul	r14, r8
    2fc4:	e0 2c       	mov	r14, r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	e8 0e       	add	r14, r24
    2fca:	f0 e2       	ldi	r31, 0x20	; 32
    2fcc:	ff 2a       	or	r15, r31
    2fce:	0e c0       	rjmp	.+28     	; 0x2fec <vfprintf+0xe8>
    2fd0:	9e 32       	cpi	r25, 0x2E	; 46
    2fd2:	29 f4       	brne	.+10     	; 0x2fde <vfprintf+0xda>
    2fd4:	f6 fc       	sbrc	r15, 6
    2fd6:	6b c1       	rjmp	.+726    	; 0x32ae <vfprintf+0x3aa>
    2fd8:	40 e4       	ldi	r20, 0x40	; 64
    2fda:	f4 2a       	or	r15, r20
    2fdc:	07 c0       	rjmp	.+14     	; 0x2fec <vfprintf+0xe8>
    2fde:	9c 36       	cpi	r25, 0x6C	; 108
    2fe0:	19 f4       	brne	.+6      	; 0x2fe8 <vfprintf+0xe4>
    2fe2:	50 e8       	ldi	r21, 0x80	; 128
    2fe4:	f5 2a       	or	r15, r21
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <vfprintf+0xe8>
    2fe8:	98 36       	cpi	r25, 0x68	; 104
    2fea:	49 f4       	brne	.+18     	; 0x2ffe <vfprintf+0xfa>
    2fec:	f2 01       	movw	r30, r4
    2fee:	23 fd       	sbrc	r18, 3
    2ff0:	95 91       	lpm	r25, Z+
    2ff2:	23 ff       	sbrs	r18, 3
    2ff4:	91 91       	ld	r25, Z+
    2ff6:	2f 01       	movw	r4, r30
    2ff8:	99 23       	and	r25, r25
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <vfprintf+0xfa>
    2ffc:	b8 cf       	rjmp	.-144    	; 0x2f6e <vfprintf+0x6a>
    2ffe:	89 2f       	mov	r24, r25
    3000:	85 54       	subi	r24, 0x45	; 69
    3002:	83 30       	cpi	r24, 0x03	; 3
    3004:	18 f0       	brcs	.+6      	; 0x300c <vfprintf+0x108>
    3006:	80 52       	subi	r24, 0x20	; 32
    3008:	83 30       	cpi	r24, 0x03	; 3
    300a:	38 f4       	brcc	.+14     	; 0x301a <vfprintf+0x116>
    300c:	44 e0       	ldi	r20, 0x04	; 4
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	a4 0e       	add	r10, r20
    3012:	b5 1e       	adc	r11, r21
    3014:	5f e3       	ldi	r21, 0x3F	; 63
    3016:	59 83       	std	Y+1, r21	; 0x01
    3018:	0f c0       	rjmp	.+30     	; 0x3038 <vfprintf+0x134>
    301a:	93 36       	cpi	r25, 0x63	; 99
    301c:	31 f0       	breq	.+12     	; 0x302a <vfprintf+0x126>
    301e:	93 37       	cpi	r25, 0x73	; 115
    3020:	79 f0       	breq	.+30     	; 0x3040 <vfprintf+0x13c>
    3022:	93 35       	cpi	r25, 0x53	; 83
    3024:	09 f0       	breq	.+2      	; 0x3028 <vfprintf+0x124>
    3026:	56 c0       	rjmp	.+172    	; 0x30d4 <vfprintf+0x1d0>
    3028:	20 c0       	rjmp	.+64     	; 0x306a <vfprintf+0x166>
    302a:	f5 01       	movw	r30, r10
    302c:	80 81       	ld	r24, Z
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	42 e0       	ldi	r20, 0x02	; 2
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	a4 0e       	add	r10, r20
    3036:	b5 1e       	adc	r11, r21
    3038:	61 01       	movw	r12, r2
    303a:	01 e0       	ldi	r16, 0x01	; 1
    303c:	10 e0       	ldi	r17, 0x00	; 0
    303e:	12 c0       	rjmp	.+36     	; 0x3064 <vfprintf+0x160>
    3040:	f5 01       	movw	r30, r10
    3042:	c0 80       	ld	r12, Z
    3044:	d1 80       	ldd	r13, Z+1	; 0x01
    3046:	f6 fc       	sbrc	r15, 6
    3048:	03 c0       	rjmp	.+6      	; 0x3050 <vfprintf+0x14c>
    304a:	6f ef       	ldi	r22, 0xFF	; 255
    304c:	7f ef       	ldi	r23, 0xFF	; 255
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <vfprintf+0x150>
    3050:	69 2d       	mov	r22, r9
    3052:	70 e0       	ldi	r23, 0x00	; 0
    3054:	42 e0       	ldi	r20, 0x02	; 2
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	a4 0e       	add	r10, r20
    305a:	b5 1e       	adc	r11, r21
    305c:	c6 01       	movw	r24, r12
    305e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <strnlen>
    3062:	8c 01       	movw	r16, r24
    3064:	5f e7       	ldi	r21, 0x7F	; 127
    3066:	f5 22       	and	r15, r21
    3068:	14 c0       	rjmp	.+40     	; 0x3092 <vfprintf+0x18e>
    306a:	f5 01       	movw	r30, r10
    306c:	c0 80       	ld	r12, Z
    306e:	d1 80       	ldd	r13, Z+1	; 0x01
    3070:	f6 fc       	sbrc	r15, 6
    3072:	03 c0       	rjmp	.+6      	; 0x307a <vfprintf+0x176>
    3074:	6f ef       	ldi	r22, 0xFF	; 255
    3076:	7f ef       	ldi	r23, 0xFF	; 255
    3078:	02 c0       	rjmp	.+4      	; 0x307e <vfprintf+0x17a>
    307a:	69 2d       	mov	r22, r9
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	42 e0       	ldi	r20, 0x02	; 2
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	a4 0e       	add	r10, r20
    3084:	b5 1e       	adc	r11, r21
    3086:	c6 01       	movw	r24, r12
    3088:	0e 94 5f 19 	call	0x32be	; 0x32be <strnlen_P>
    308c:	8c 01       	movw	r16, r24
    308e:	50 e8       	ldi	r21, 0x80	; 128
    3090:	f5 2a       	or	r15, r21
    3092:	f3 fe       	sbrs	r15, 3
    3094:	07 c0       	rjmp	.+14     	; 0x30a4 <vfprintf+0x1a0>
    3096:	1a c0       	rjmp	.+52     	; 0x30cc <vfprintf+0x1c8>
    3098:	80 e2       	ldi	r24, 0x20	; 32
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	b3 01       	movw	r22, r6
    309e:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    30a2:	ea 94       	dec	r14
    30a4:	8e 2d       	mov	r24, r14
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	08 17       	cp	r16, r24
    30aa:	19 07       	cpc	r17, r25
    30ac:	a8 f3       	brcs	.-22     	; 0x3098 <vfprintf+0x194>
    30ae:	0e c0       	rjmp	.+28     	; 0x30cc <vfprintf+0x1c8>
    30b0:	f6 01       	movw	r30, r12
    30b2:	f7 fc       	sbrc	r15, 7
    30b4:	85 91       	lpm	r24, Z+
    30b6:	f7 fe       	sbrs	r15, 7
    30b8:	81 91       	ld	r24, Z+
    30ba:	6f 01       	movw	r12, r30
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	b3 01       	movw	r22, r6
    30c0:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    30c4:	e1 10       	cpse	r14, r1
    30c6:	ea 94       	dec	r14
    30c8:	01 50       	subi	r16, 0x01	; 1
    30ca:	10 40       	sbci	r17, 0x00	; 0
    30cc:	01 15       	cp	r16, r1
    30ce:	11 05       	cpc	r17, r1
    30d0:	79 f7       	brne	.-34     	; 0x30b0 <vfprintf+0x1ac>
    30d2:	ea c0       	rjmp	.+468    	; 0x32a8 <vfprintf+0x3a4>
    30d4:	94 36       	cpi	r25, 0x64	; 100
    30d6:	11 f0       	breq	.+4      	; 0x30dc <vfprintf+0x1d8>
    30d8:	99 36       	cpi	r25, 0x69	; 105
    30da:	69 f5       	brne	.+90     	; 0x3136 <vfprintf+0x232>
    30dc:	f7 fe       	sbrs	r15, 7
    30de:	08 c0       	rjmp	.+16     	; 0x30f0 <vfprintf+0x1ec>
    30e0:	f5 01       	movw	r30, r10
    30e2:	20 81       	ld	r18, Z
    30e4:	31 81       	ldd	r19, Z+1	; 0x01
    30e6:	42 81       	ldd	r20, Z+2	; 0x02
    30e8:	53 81       	ldd	r21, Z+3	; 0x03
    30ea:	84 e0       	ldi	r24, 0x04	; 4
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0a c0       	rjmp	.+20     	; 0x3104 <vfprintf+0x200>
    30f0:	f5 01       	movw	r30, r10
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	9c 01       	movw	r18, r24
    30f8:	44 27       	eor	r20, r20
    30fa:	37 fd       	sbrc	r19, 7
    30fc:	40 95       	com	r20
    30fe:	54 2f       	mov	r21, r20
    3100:	82 e0       	ldi	r24, 0x02	; 2
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	a8 0e       	add	r10, r24
    3106:	b9 1e       	adc	r11, r25
    3108:	9f e6       	ldi	r25, 0x6F	; 111
    310a:	f9 22       	and	r15, r25
    310c:	57 ff       	sbrs	r21, 7
    310e:	09 c0       	rjmp	.+18     	; 0x3122 <vfprintf+0x21e>
    3110:	50 95       	com	r21
    3112:	40 95       	com	r20
    3114:	30 95       	com	r19
    3116:	21 95       	neg	r18
    3118:	3f 4f       	sbci	r19, 0xFF	; 255
    311a:	4f 4f       	sbci	r20, 0xFF	; 255
    311c:	5f 4f       	sbci	r21, 0xFF	; 255
    311e:	e0 e8       	ldi	r30, 0x80	; 128
    3120:	fe 2a       	or	r15, r30
    3122:	ca 01       	movw	r24, r20
    3124:	b9 01       	movw	r22, r18
    3126:	a1 01       	movw	r20, r2
    3128:	2a e0       	ldi	r18, 0x0A	; 10
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	0e 94 a1 19 	call	0x3342	; 0x3342 <__ultoa_invert>
    3130:	d8 2e       	mov	r13, r24
    3132:	d2 18       	sub	r13, r2
    3134:	40 c0       	rjmp	.+128    	; 0x31b6 <vfprintf+0x2b2>
    3136:	95 37       	cpi	r25, 0x75	; 117
    3138:	29 f4       	brne	.+10     	; 0x3144 <vfprintf+0x240>
    313a:	1f 2d       	mov	r17, r15
    313c:	1f 7e       	andi	r17, 0xEF	; 239
    313e:	2a e0       	ldi	r18, 0x0A	; 10
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	1d c0       	rjmp	.+58     	; 0x317e <vfprintf+0x27a>
    3144:	1f 2d       	mov	r17, r15
    3146:	19 7f       	andi	r17, 0xF9	; 249
    3148:	9f 36       	cpi	r25, 0x6F	; 111
    314a:	61 f0       	breq	.+24     	; 0x3164 <vfprintf+0x260>
    314c:	90 37       	cpi	r25, 0x70	; 112
    314e:	20 f4       	brcc	.+8      	; 0x3158 <vfprintf+0x254>
    3150:	98 35       	cpi	r25, 0x58	; 88
    3152:	09 f0       	breq	.+2      	; 0x3156 <vfprintf+0x252>
    3154:	ac c0       	rjmp	.+344    	; 0x32ae <vfprintf+0x3aa>
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <vfprintf+0x272>
    3158:	90 37       	cpi	r25, 0x70	; 112
    315a:	39 f0       	breq	.+14     	; 0x316a <vfprintf+0x266>
    315c:	98 37       	cpi	r25, 0x78	; 120
    315e:	09 f0       	breq	.+2      	; 0x3162 <vfprintf+0x25e>
    3160:	a6 c0       	rjmp	.+332    	; 0x32ae <vfprintf+0x3aa>
    3162:	04 c0       	rjmp	.+8      	; 0x316c <vfprintf+0x268>
    3164:	28 e0       	ldi	r18, 0x08	; 8
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	0a c0       	rjmp	.+20     	; 0x317e <vfprintf+0x27a>
    316a:	10 61       	ori	r17, 0x10	; 16
    316c:	14 fd       	sbrc	r17, 4
    316e:	14 60       	ori	r17, 0x04	; 4
    3170:	20 e1       	ldi	r18, 0x10	; 16
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	04 c0       	rjmp	.+8      	; 0x317e <vfprintf+0x27a>
    3176:	14 fd       	sbrc	r17, 4
    3178:	16 60       	ori	r17, 0x06	; 6
    317a:	20 e1       	ldi	r18, 0x10	; 16
    317c:	32 e0       	ldi	r19, 0x02	; 2
    317e:	17 ff       	sbrs	r17, 7
    3180:	08 c0       	rjmp	.+16     	; 0x3192 <vfprintf+0x28e>
    3182:	f5 01       	movw	r30, r10
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	44 e0       	ldi	r20, 0x04	; 4
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	08 c0       	rjmp	.+16     	; 0x31a2 <vfprintf+0x29e>
    3192:	f5 01       	movw	r30, r10
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	bc 01       	movw	r22, r24
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	42 e0       	ldi	r20, 0x02	; 2
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	a4 0e       	add	r10, r20
    31a4:	b5 1e       	adc	r11, r21
    31a6:	a1 01       	movw	r20, r2
    31a8:	0e 94 a1 19 	call	0x3342	; 0x3342 <__ultoa_invert>
    31ac:	d8 2e       	mov	r13, r24
    31ae:	d2 18       	sub	r13, r2
    31b0:	8f e7       	ldi	r24, 0x7F	; 127
    31b2:	f8 2e       	mov	r15, r24
    31b4:	f1 22       	and	r15, r17
    31b6:	f6 fe       	sbrs	r15, 6
    31b8:	0b c0       	rjmp	.+22     	; 0x31d0 <vfprintf+0x2cc>
    31ba:	5e ef       	ldi	r21, 0xFE	; 254
    31bc:	f5 22       	and	r15, r21
    31be:	d9 14       	cp	r13, r9
    31c0:	38 f4       	brcc	.+14     	; 0x31d0 <vfprintf+0x2cc>
    31c2:	f4 fe       	sbrs	r15, 4
    31c4:	07 c0       	rjmp	.+14     	; 0x31d4 <vfprintf+0x2d0>
    31c6:	f2 fc       	sbrc	r15, 2
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <vfprintf+0x2d0>
    31ca:	8f ee       	ldi	r24, 0xEF	; 239
    31cc:	f8 22       	and	r15, r24
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <vfprintf+0x2d0>
    31d0:	1d 2d       	mov	r17, r13
    31d2:	01 c0       	rjmp	.+2      	; 0x31d6 <vfprintf+0x2d2>
    31d4:	19 2d       	mov	r17, r9
    31d6:	f4 fe       	sbrs	r15, 4
    31d8:	0d c0       	rjmp	.+26     	; 0x31f4 <vfprintf+0x2f0>
    31da:	fe 01       	movw	r30, r28
    31dc:	ed 0d       	add	r30, r13
    31de:	f1 1d       	adc	r31, r1
    31e0:	80 81       	ld	r24, Z
    31e2:	80 33       	cpi	r24, 0x30	; 48
    31e4:	19 f4       	brne	.+6      	; 0x31ec <vfprintf+0x2e8>
    31e6:	99 ee       	ldi	r25, 0xE9	; 233
    31e8:	f9 22       	and	r15, r25
    31ea:	08 c0       	rjmp	.+16     	; 0x31fc <vfprintf+0x2f8>
    31ec:	1f 5f       	subi	r17, 0xFF	; 255
    31ee:	f2 fe       	sbrs	r15, 2
    31f0:	05 c0       	rjmp	.+10     	; 0x31fc <vfprintf+0x2f8>
    31f2:	03 c0       	rjmp	.+6      	; 0x31fa <vfprintf+0x2f6>
    31f4:	8f 2d       	mov	r24, r15
    31f6:	86 78       	andi	r24, 0x86	; 134
    31f8:	09 f0       	breq	.+2      	; 0x31fc <vfprintf+0x2f8>
    31fa:	1f 5f       	subi	r17, 0xFF	; 255
    31fc:	0f 2d       	mov	r16, r15
    31fe:	f3 fc       	sbrc	r15, 3
    3200:	14 c0       	rjmp	.+40     	; 0x322a <vfprintf+0x326>
    3202:	f0 fe       	sbrs	r15, 0
    3204:	0f c0       	rjmp	.+30     	; 0x3224 <vfprintf+0x320>
    3206:	1e 15       	cp	r17, r14
    3208:	10 f0       	brcs	.+4      	; 0x320e <vfprintf+0x30a>
    320a:	9d 2c       	mov	r9, r13
    320c:	0b c0       	rjmp	.+22     	; 0x3224 <vfprintf+0x320>
    320e:	9d 2c       	mov	r9, r13
    3210:	9e 0c       	add	r9, r14
    3212:	91 1a       	sub	r9, r17
    3214:	1e 2d       	mov	r17, r14
    3216:	06 c0       	rjmp	.+12     	; 0x3224 <vfprintf+0x320>
    3218:	80 e2       	ldi	r24, 0x20	; 32
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	b3 01       	movw	r22, r6
    321e:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3222:	1f 5f       	subi	r17, 0xFF	; 255
    3224:	1e 15       	cp	r17, r14
    3226:	c0 f3       	brcs	.-16     	; 0x3218 <vfprintf+0x314>
    3228:	04 c0       	rjmp	.+8      	; 0x3232 <vfprintf+0x32e>
    322a:	1e 15       	cp	r17, r14
    322c:	10 f4       	brcc	.+4      	; 0x3232 <vfprintf+0x32e>
    322e:	e1 1a       	sub	r14, r17
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <vfprintf+0x330>
    3232:	ee 24       	eor	r14, r14
    3234:	04 ff       	sbrs	r16, 4
    3236:	0f c0       	rjmp	.+30     	; 0x3256 <vfprintf+0x352>
    3238:	80 e3       	ldi	r24, 0x30	; 48
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	b3 01       	movw	r22, r6
    323e:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3242:	02 ff       	sbrs	r16, 2
    3244:	1d c0       	rjmp	.+58     	; 0x3280 <vfprintf+0x37c>
    3246:	01 fd       	sbrc	r16, 1
    3248:	03 c0       	rjmp	.+6      	; 0x3250 <vfprintf+0x34c>
    324a:	88 e7       	ldi	r24, 0x78	; 120
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	0e c0       	rjmp	.+28     	; 0x326c <vfprintf+0x368>
    3250:	88 e5       	ldi	r24, 0x58	; 88
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0b c0       	rjmp	.+22     	; 0x326c <vfprintf+0x368>
    3256:	80 2f       	mov	r24, r16
    3258:	86 78       	andi	r24, 0x86	; 134
    325a:	91 f0       	breq	.+36     	; 0x3280 <vfprintf+0x37c>
    325c:	01 ff       	sbrs	r16, 1
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <vfprintf+0x360>
    3260:	8b e2       	ldi	r24, 0x2B	; 43
    3262:	01 c0       	rjmp	.+2      	; 0x3266 <vfprintf+0x362>
    3264:	80 e2       	ldi	r24, 0x20	; 32
    3266:	f7 fc       	sbrc	r15, 7
    3268:	8d e2       	ldi	r24, 0x2D	; 45
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	b3 01       	movw	r22, r6
    326e:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3272:	06 c0       	rjmp	.+12     	; 0x3280 <vfprintf+0x37c>
    3274:	80 e3       	ldi	r24, 0x30	; 48
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	b3 01       	movw	r22, r6
    327a:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    327e:	9a 94       	dec	r9
    3280:	d9 14       	cp	r13, r9
    3282:	c0 f3       	brcs	.-16     	; 0x3274 <vfprintf+0x370>
    3284:	da 94       	dec	r13
    3286:	f1 01       	movw	r30, r2
    3288:	ed 0d       	add	r30, r13
    328a:	f1 1d       	adc	r31, r1
    328c:	80 81       	ld	r24, Z
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	b3 01       	movw	r22, r6
    3292:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3296:	dd 20       	and	r13, r13
    3298:	a9 f7       	brne	.-22     	; 0x3284 <vfprintf+0x380>
    329a:	06 c0       	rjmp	.+12     	; 0x32a8 <vfprintf+0x3a4>
    329c:	80 e2       	ldi	r24, 0x20	; 32
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	b3 01       	movw	r22, r6
    32a2:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    32a6:	ea 94       	dec	r14
    32a8:	ee 20       	and	r14, r14
    32aa:	c1 f7       	brne	.-16     	; 0x329c <vfprintf+0x398>
    32ac:	43 ce       	rjmp	.-890    	; 0x2f34 <vfprintf+0x30>
    32ae:	f3 01       	movw	r30, r6
    32b0:	66 81       	ldd	r22, Z+6	; 0x06
    32b2:	77 81       	ldd	r23, Z+7	; 0x07
    32b4:	cb 01       	movw	r24, r22
    32b6:	2b 96       	adiw	r28, 0x0b	; 11
    32b8:	e2 e1       	ldi	r30, 0x12	; 18
    32ba:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__>

000032be <strnlen_P>:
    32be:	fc 01       	movw	r30, r24
    32c0:	05 90       	lpm	r0, Z+
    32c2:	61 50       	subi	r22, 0x01	; 1
    32c4:	70 40       	sbci	r23, 0x00	; 0
    32c6:	01 10       	cpse	r0, r1
    32c8:	d8 f7       	brcc	.-10     	; 0x32c0 <strnlen_P+0x2>
    32ca:	80 95       	com	r24
    32cc:	90 95       	com	r25
    32ce:	8e 0f       	add	r24, r30
    32d0:	9f 1f       	adc	r25, r31
    32d2:	08 95       	ret

000032d4 <strnlen>:
    32d4:	fc 01       	movw	r30, r24
    32d6:	61 50       	subi	r22, 0x01	; 1
    32d8:	70 40       	sbci	r23, 0x00	; 0
    32da:	01 90       	ld	r0, Z+
    32dc:	01 10       	cpse	r0, r1
    32de:	d8 f7       	brcc	.-10     	; 0x32d6 <strnlen+0x2>
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	8e 0f       	add	r24, r30
    32e6:	9f 1f       	adc	r25, r31
    32e8:	08 95       	ret

000032ea <fputc>:
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	8c 01       	movw	r16, r24
    32f4:	eb 01       	movw	r28, r22
    32f6:	8b 81       	ldd	r24, Y+3	; 0x03
    32f8:	81 ff       	sbrs	r24, 1
    32fa:	1b c0       	rjmp	.+54     	; 0x3332 <fputc+0x48>
    32fc:	82 ff       	sbrs	r24, 2
    32fe:	0d c0       	rjmp	.+26     	; 0x331a <fputc+0x30>
    3300:	2e 81       	ldd	r18, Y+6	; 0x06
    3302:	3f 81       	ldd	r19, Y+7	; 0x07
    3304:	8c 81       	ldd	r24, Y+4	; 0x04
    3306:	9d 81       	ldd	r25, Y+5	; 0x05
    3308:	28 17       	cp	r18, r24
    330a:	39 07       	cpc	r19, r25
    330c:	64 f4       	brge	.+24     	; 0x3326 <fputc+0x3c>
    330e:	e8 81       	ld	r30, Y
    3310:	f9 81       	ldd	r31, Y+1	; 0x01
    3312:	01 93       	st	Z+, r16
    3314:	f9 83       	std	Y+1, r31	; 0x01
    3316:	e8 83       	st	Y, r30
    3318:	06 c0       	rjmp	.+12     	; 0x3326 <fputc+0x3c>
    331a:	e8 85       	ldd	r30, Y+8	; 0x08
    331c:	f9 85       	ldd	r31, Y+9	; 0x09
    331e:	80 2f       	mov	r24, r16
    3320:	09 95       	icall
    3322:	89 2b       	or	r24, r25
    3324:	31 f4       	brne	.+12     	; 0x3332 <fputc+0x48>
    3326:	8e 81       	ldd	r24, Y+6	; 0x06
    3328:	9f 81       	ldd	r25, Y+7	; 0x07
    332a:	01 96       	adiw	r24, 0x01	; 1
    332c:	9f 83       	std	Y+7, r25	; 0x07
    332e:	8e 83       	std	Y+6, r24	; 0x06
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <fputc+0x4c>
    3332:	0f ef       	ldi	r16, 0xFF	; 255
    3334:	1f ef       	ldi	r17, 0xFF	; 255
    3336:	c8 01       	movw	r24, r16
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	1f 91       	pop	r17
    333e:	0f 91       	pop	r16
    3340:	08 95       	ret

00003342 <__ultoa_invert>:
    3342:	fa 01       	movw	r30, r20
    3344:	aa 27       	eor	r26, r26
    3346:	28 30       	cpi	r18, 0x08	; 8
    3348:	51 f1       	breq	.+84     	; 0x339e <__ultoa_invert+0x5c>
    334a:	20 31       	cpi	r18, 0x10	; 16
    334c:	81 f1       	breq	.+96     	; 0x33ae <__ultoa_invert+0x6c>
    334e:	e8 94       	clt
    3350:	6f 93       	push	r22
    3352:	6e 7f       	andi	r22, 0xFE	; 254
    3354:	6e 5f       	subi	r22, 0xFE	; 254
    3356:	7f 4f       	sbci	r23, 0xFF	; 255
    3358:	8f 4f       	sbci	r24, 0xFF	; 255
    335a:	9f 4f       	sbci	r25, 0xFF	; 255
    335c:	af 4f       	sbci	r26, 0xFF	; 255
    335e:	b1 e0       	ldi	r27, 0x01	; 1
    3360:	3e d0       	rcall	.+124    	; 0x33de <__ultoa_invert+0x9c>
    3362:	b4 e0       	ldi	r27, 0x04	; 4
    3364:	3c d0       	rcall	.+120    	; 0x33de <__ultoa_invert+0x9c>
    3366:	67 0f       	add	r22, r23
    3368:	78 1f       	adc	r23, r24
    336a:	89 1f       	adc	r24, r25
    336c:	9a 1f       	adc	r25, r26
    336e:	a1 1d       	adc	r26, r1
    3370:	68 0f       	add	r22, r24
    3372:	79 1f       	adc	r23, r25
    3374:	8a 1f       	adc	r24, r26
    3376:	91 1d       	adc	r25, r1
    3378:	a1 1d       	adc	r26, r1
    337a:	6a 0f       	add	r22, r26
    337c:	71 1d       	adc	r23, r1
    337e:	81 1d       	adc	r24, r1
    3380:	91 1d       	adc	r25, r1
    3382:	a1 1d       	adc	r26, r1
    3384:	20 d0       	rcall	.+64     	; 0x33c6 <__ultoa_invert+0x84>
    3386:	09 f4       	brne	.+2      	; 0x338a <__ultoa_invert+0x48>
    3388:	68 94       	set
    338a:	3f 91       	pop	r19
    338c:	2a e0       	ldi	r18, 0x0A	; 10
    338e:	26 9f       	mul	r18, r22
    3390:	11 24       	eor	r1, r1
    3392:	30 19       	sub	r19, r0
    3394:	30 5d       	subi	r19, 0xD0	; 208
    3396:	31 93       	st	Z+, r19
    3398:	de f6       	brtc	.-74     	; 0x3350 <__ultoa_invert+0xe>
    339a:	cf 01       	movw	r24, r30
    339c:	08 95       	ret
    339e:	46 2f       	mov	r20, r22
    33a0:	47 70       	andi	r20, 0x07	; 7
    33a2:	40 5d       	subi	r20, 0xD0	; 208
    33a4:	41 93       	st	Z+, r20
    33a6:	b3 e0       	ldi	r27, 0x03	; 3
    33a8:	0f d0       	rcall	.+30     	; 0x33c8 <__ultoa_invert+0x86>
    33aa:	c9 f7       	brne	.-14     	; 0x339e <__ultoa_invert+0x5c>
    33ac:	f6 cf       	rjmp	.-20     	; 0x339a <__ultoa_invert+0x58>
    33ae:	46 2f       	mov	r20, r22
    33b0:	4f 70       	andi	r20, 0x0F	; 15
    33b2:	40 5d       	subi	r20, 0xD0	; 208
    33b4:	4a 33       	cpi	r20, 0x3A	; 58
    33b6:	18 f0       	brcs	.+6      	; 0x33be <__ultoa_invert+0x7c>
    33b8:	49 5d       	subi	r20, 0xD9	; 217
    33ba:	31 fd       	sbrc	r19, 1
    33bc:	40 52       	subi	r20, 0x20	; 32
    33be:	41 93       	st	Z+, r20
    33c0:	02 d0       	rcall	.+4      	; 0x33c6 <__ultoa_invert+0x84>
    33c2:	a9 f7       	brne	.-22     	; 0x33ae <__ultoa_invert+0x6c>
    33c4:	ea cf       	rjmp	.-44     	; 0x339a <__ultoa_invert+0x58>
    33c6:	b4 e0       	ldi	r27, 0x04	; 4
    33c8:	a6 95       	lsr	r26
    33ca:	97 95       	ror	r25
    33cc:	87 95       	ror	r24
    33ce:	77 95       	ror	r23
    33d0:	67 95       	ror	r22
    33d2:	ba 95       	dec	r27
    33d4:	c9 f7       	brne	.-14     	; 0x33c8 <__ultoa_invert+0x86>
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	61 05       	cpc	r22, r1
    33da:	71 05       	cpc	r23, r1
    33dc:	08 95       	ret
    33de:	9b 01       	movw	r18, r22
    33e0:	ac 01       	movw	r20, r24
    33e2:	0a 2e       	mov	r0, r26
    33e4:	06 94       	lsr	r0
    33e6:	57 95       	ror	r21
    33e8:	47 95       	ror	r20
    33ea:	37 95       	ror	r19
    33ec:	27 95       	ror	r18
    33ee:	ba 95       	dec	r27
    33f0:	c9 f7       	brne	.-14     	; 0x33e4 <__ultoa_invert+0xa2>
    33f2:	62 0f       	add	r22, r18
    33f4:	73 1f       	adc	r23, r19
    33f6:	84 1f       	adc	r24, r20
    33f8:	95 1f       	adc	r25, r21
    33fa:	a0 1d       	adc	r26, r0
    33fc:	08 95       	ret

000033fe <_exit>:
    33fe:	f8 94       	cli

00003400 <__stop_program>:
    3400:	ff cf       	rjmp	.-2      	; 0x3400 <__stop_program>
