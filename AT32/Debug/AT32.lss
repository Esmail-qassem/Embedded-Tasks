
AT32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000037c0  00003854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800190  00800190  00003984  2**0
                  ALLOC
  3 .stab         00004674  00000000  00000000  00003984  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003a5e  00000000  00000000  00007ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000ba56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000bbb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000bd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000dc79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000ed4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000fd7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000fefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  000101e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010ad8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__vector_1>
       8:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__vector_2>
       c:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__vector_3>
      10:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_4>
      14:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_5>
      18:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_6>
      1c:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_7>
      20:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_8>
      24:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_9>
      28:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_10>
      2c:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <main>
      8a:	0c 94 de 1b 	jmp	0x37bc	; 0x37bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 57       	subi	r30, 0x78	; 120
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <Stack_Full>:
#include "stdio.h"
#include "../../BSW/LIB/STD_TYPES.h"
#include "Stack.h"

uint8 static Stack_Full(Stack* My_Stack)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <Stack_Full+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01
    return 0;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <Stack_Empty>:
uint8 static Stack_Empty(Stack* My_Stack)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <Stack_Empty+0x6>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
    return (My_Stack->top==NULL);
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	1b 82       	std	Y+3, r1	; 0x03
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	11 f4       	brne	.+4      	; 0xdaa <Stack_Empty+0x22>
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <Stack_Creation>:

Status Stack_Creation(Stack* My_Stack)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <Stack_Creation+0x6>
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	9b 83       	std	Y+3, r25	; 0x03
     dc6:	8a 83       	std	Y+2, r24	; 0x02
    Status Local=E_NOT_OK;
     dc8:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack)
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	9b 81       	ldd	r25, Y+3	; 0x03
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	61 f0       	breq	.+24     	; 0xdea <Stack_Creation+0x32>
    {
        //do nothing
    }
    else
    {
        My_Stack->Size=0;
     dd2:	ea 81       	ldd	r30, Y+2	; 0x02
     dd4:	fb 81       	ldd	r31, Y+3	; 0x03
     dd6:	12 82       	std	Z+2, r1	; 0x02
     dd8:	13 82       	std	Z+3, r1	; 0x03
     dda:	14 82       	std	Z+4, r1	; 0x04
     ddc:	15 82       	std	Z+5, r1	; 0x05
        My_Stack->top=NULL;
     dde:	ea 81       	ldd	r30, Y+2	; 0x02
     de0:	fb 81       	ldd	r31, Y+3	; 0x03
     de2:	11 82       	std	Z+1, r1	; 0x01
     de4:	10 82       	st	Z, r1
         Local=E_OK;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	89 83       	std	Y+1, r24	; 0x01

    }
return Local;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <Stack_Push>:
Status Stack_Push(Stack* My_Stack,StackEntry Variable)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	27 97       	sbiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	9d 83       	std	Y+5, r25	; 0x05
     e0e:	8c 83       	std	Y+4, r24	; 0x04
     e10:	7f 83       	std	Y+7, r23	; 0x07
     e12:	6e 83       	std	Y+6, r22	; 0x06
    Status Local=E_NOT_OK;
     e14:	1b 82       	std	Y+3, r1	; 0x03
    StackNode * Local_Pointer=(StackNode*)malloc(sizeof(StackNode));
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 47 18 	call	0x308e	; 0x308e <malloc>
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01

    if(NULL==My_Stack|| Stack_Full(My_Stack))
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	9d 81       	ldd	r25, Y+5	; 0x05
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	59 f1       	breq	.+86     	; 0xe80 <Stack_Push+0x88>
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Stack_Full>
     e32:	88 23       	and	r24, r24
     e34:	29 f5       	brne	.+74     	; 0xe80 <Stack_Push+0x88>
        //do nothing
    }
    else
    {

        Local_Pointer->entry=Variable;
     e36:	e9 81       	ldd	r30, Y+1	; 0x01
     e38:	fa 81       	ldd	r31, Y+2	; 0x02
     e3a:	8e 81       	ldd	r24, Y+6	; 0x06
     e3c:	9f 81       	ldd	r25, Y+7	; 0x07
     e3e:	93 83       	std	Z+3, r25	; 0x03
     e40:	82 83       	std	Z+2, r24	; 0x02
        Local_Pointer->Next=My_Stack->top;
     e42:	ec 81       	ldd	r30, Y+4	; 0x04
     e44:	fd 81       	ldd	r31, Y+5	; 0x05
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
        My_Stack->top=Local_Pointer;
     e52:	ec 81       	ldd	r30, Y+4	; 0x04
     e54:	fd 81       	ldd	r31, Y+5	; 0x05
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	91 83       	std	Z+1, r25	; 0x01
     e5c:	80 83       	st	Z, r24
        My_Stack->Size++;
     e5e:	ec 81       	ldd	r30, Y+4	; 0x04
     e60:	fd 81       	ldd	r31, Y+5	; 0x05
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	a4 81       	ldd	r26, Z+4	; 0x04
     e68:	b5 81       	ldd	r27, Z+5	; 0x05
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	a1 1d       	adc	r26, r1
     e6e:	b1 1d       	adc	r27, r1
     e70:	ec 81       	ldd	r30, Y+4	; 0x04
     e72:	fd 81       	ldd	r31, Y+5	; 0x05
     e74:	82 83       	std	Z+2, r24	; 0x02
     e76:	93 83       	std	Z+3, r25	; 0x03
     e78:	a4 83       	std	Z+4, r26	; 0x04
     e7a:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	8b 83       	std	Y+3, r24	; 0x03
    }
return Local;
     e80:	8b 81       	ldd	r24, Y+3	; 0x03

}
     e82:	27 96       	adiw	r28, 0x07	; 7
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <Stack_Pop>:
Status Stack_Pop(Stack* My_Stack,StackEntry* Variable)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	27 97       	sbiw	r28, 0x07	; 7
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	9d 83       	std	Y+5, r25	; 0x05
     eaa:	8c 83       	std	Y+4, r24	; 0x04
     eac:	7f 83       	std	Y+7, r23	; 0x07
     eae:	6e 83       	std	Y+6, r22	; 0x06
    StackNode* Local_Pointer= NULL;
     eb0:	1b 82       	std	Y+3, r1	; 0x03
     eb2:	1a 82       	std	Y+2, r1	; 0x02
    Status Local=E_NOT_OK;
     eb4:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack || NULL == Variable|| Stack_Empty(My_Stack))
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	d9 f1       	breq	.+118    	; 0xf34 <Stack_Pop+0xa0>
     ebe:	8e 81       	ldd	r24, Y+6	; 0x06
     ec0:	9f 81       	ldd	r25, Y+7	; 0x07
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	b9 f1       	breq	.+110    	; 0xf34 <Stack_Pop+0xa0>
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	0e 94 c4 06 	call	0xd88	; 0xd88 <Stack_Empty>
     ece:	88 23       	and	r24, r24
     ed0:	89 f5       	brne	.+98     	; 0xf34 <Stack_Pop+0xa0>
        //do nothing
    }
    else
    {

        *Variable=My_Stack->top->entry;
     ed2:	ec 81       	ldd	r30, Y+4	; 0x04
     ed4:	fd 81       	ldd	r31, Y+5	; 0x05
     ed6:	01 90       	ld	r0, Z+
     ed8:	f0 81       	ld	r31, Z
     eda:	e0 2d       	mov	r30, r0
     edc:	82 81       	ldd	r24, Z+2	; 0x02
     ede:	93 81       	ldd	r25, Z+3	; 0x03
     ee0:	ee 81       	ldd	r30, Y+6	; 0x06
     ee2:	ff 81       	ldd	r31, Y+7	; 0x07
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
        Local_Pointer= My_Stack->top;
     ee8:	ec 81       	ldd	r30, Y+4	; 0x04
     eea:	fd 81       	ldd	r31, Y+5	; 0x05
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	9b 83       	std	Y+3, r25	; 0x03
     ef2:	8a 83       	std	Y+2, r24	; 0x02
        My_Stack->top=My_Stack->top->Next;
     ef4:	ec 81       	ldd	r30, Y+4	; 0x04
     ef6:	fd 81       	ldd	r31, Y+5	; 0x05
     ef8:	01 90       	ld	r0, Z+
     efa:	f0 81       	ld	r31, Z
     efc:	e0 2d       	mov	r30, r0
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	ec 81       	ldd	r30, Y+4	; 0x04
     f04:	fd 81       	ldd	r31, Y+5	; 0x05
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
        free(Local_Pointer);
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <free>
        My_Stack->Size--;
     f12:	ec 81       	ldd	r30, Y+4	; 0x04
     f14:	fd 81       	ldd	r31, Y+5	; 0x05
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	a4 81       	ldd	r26, Z+4	; 0x04
     f1c:	b5 81       	ldd	r27, Z+5	; 0x05
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	a1 09       	sbc	r26, r1
     f22:	b1 09       	sbc	r27, r1
     f24:	ec 81       	ldd	r30, Y+4	; 0x04
     f26:	fd 81       	ldd	r31, Y+5	; 0x05
     f28:	82 83       	std	Z+2, r24	; 0x02
     f2a:	93 83       	std	Z+3, r25	; 0x03
     f2c:	a4 83       	std	Z+4, r26	; 0x04
     f2e:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	89 83       	std	Y+1, r24	; 0x01
    }
return Local;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
}
     f36:	27 96       	adiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <Stack_Display>:

Status Stack_Display(Stack* My_Stack) {
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <Stack_Display+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <Stack_Display+0x8>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	9d 83       	std	Y+5, r25	; 0x05
     f58:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     f5a:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* temp = NULL;
     f5c:	1a 82       	std	Y+2, r1	; 0x02
     f5e:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == My_Stack) {
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	99 f1       	breq	.+102    	; 0xfce <Stack_Display+0x86>
        // Do nothing
    } else {
        temp = My_Stack->top;
     f68:	ec 81       	ldd	r30, Y+4	; 0x04
     f6a:	fd 81       	ldd	r31, Y+5	; 0x05
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	26 c0       	rjmp	.+76     	; 0xfc2 <Stack_Display+0x7a>
        while (temp != NULL) {
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
     f76:	e9 81       	ldd	r30, Y+1	; 0x01
     f78:	fa 81       	ldd	r31, Y+2	; 0x02
     f7a:	40 81       	ld	r20, Z
     f7c:	51 81       	ldd	r21, Z+1	; 0x01
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	22 81       	ldd	r18, Z+2	; 0x02
     f84:	33 81       	ldd	r19, Z+3	; 0x03
     f86:	00 d0       	rcall	.+0      	; 0xf88 <Stack_Display+0x40>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <Stack_Display+0x42>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <Stack_Display+0x44>
     f8c:	ed b7       	in	r30, 0x3d	; 61
     f8e:	fe b7       	in	r31, 0x3e	; 62
     f90:	31 96       	adiw	r30, 0x01	; 1
     f92:	80 e6       	ldi	r24, 0x60	; 96
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
     f9a:	53 83       	std	Z+3, r21	; 0x03
     f9c:	42 83       	std	Z+2, r20	; 0x02
     f9e:	35 83       	std	Z+5, r19	; 0x05
     fa0:	24 83       	std	Z+4, r18	; 0x04
     fa2:	0e 94 4c 19 	call	0x3298	; 0x3298 <printf>
     fa6:	8d b7       	in	r24, 0x3d	; 61
     fa8:	9e b7       	in	r25, 0x3e	; 62
     faa:	06 96       	adiw	r24, 0x06	; 6
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	9e bf       	out	0x3e, r25	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	8d bf       	out	0x3d, r24	; 61
            temp = temp->Next;
     fb6:	e9 81       	ldd	r30, Y+1	; 0x01
     fb8:	fa 81       	ldd	r31, Y+2	; 0x02
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
    StackNode* temp = NULL;
    if (NULL == My_Stack) {
        // Do nothing
    } else {
        temp = My_Stack->top;
        while (temp != NULL) {
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	b1 f6       	brne	.-84     	; 0xf76 <Stack_Display+0x2e>
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
            temp = temp->Next;
        }
        Local = E_OK;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <Clear_Stack>:
Status Clear_Stack(Stack* My_Stack)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <Clear_Stack+0x6>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <Clear_Stack+0x8>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9d 83       	std	Y+5, r25	; 0x05
     ff0:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     ff2:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* Local_pointer = NULL;
     ff4:	1a 82       	std	Y+2, r1	; 0x02
     ff6:	19 82       	std	Y+1, r1	; 0x01

   Local_pointer=My_Stack->top;
     ff8:	ec 81       	ldd	r30, Y+4	; 0x04
     ffa:	fd 81       	ldd	r31, Y+5	; 0x05
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == My_Stack)
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	f9 f0       	breq	.+62     	; 0x104a <Clear_Stack+0x6a>
    100c:	12 c0       	rjmp	.+36     	; 0x1032 <Clear_Stack+0x52>
    }
    else
    {
        while(Local_pointer)
        {
           Local_pointer= Local_pointer->Next;
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	fa 81       	ldd	r31, Y+2	; 0x02
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
            free(My_Stack->top);
    101a:	ec 81       	ldd	r30, Y+4	; 0x04
    101c:	fd 81       	ldd	r31, Y+5	; 0x05
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <free>
            My_Stack->top=Local_pointer;
    1026:	ec 81       	ldd	r30, Y+4	; 0x04
    1028:	fd 81       	ldd	r31, Y+5	; 0x05
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
    {
        // Do nothing
    }
    else
    {
        while(Local_pointer)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	51 f7       	brne	.-44     	; 0x100e <Clear_Stack+0x2e>
        {
           Local_pointer= Local_pointer->Next;
            free(My_Stack->top);
            My_Stack->top=Local_pointer;
        }
        My_Stack->Size=0;
    103a:	ec 81       	ldd	r30, Y+4	; 0x04
    103c:	fd 81       	ldd	r31, Y+5	; 0x05
    103e:	12 82       	std	Z+2, r1	; 0x02
    1040:	13 82       	std	Z+3, r1	; 0x03
    1042:	14 82       	std	Z+4, r1	; 0x04
    1044:	15 82       	std	Z+5, r1	; 0x05
        Local = E_OK;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <Stack_Size>:
Status Stack_Size(Stack* My_Stack,StackEntry* Variable)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <Stack_Size+0x6>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <Stack_Size+0x8>
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9b 83       	std	Y+3, r25	; 0x03
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	7d 83       	std	Y+5, r23	; 0x05
    1070:	6c 83       	std	Y+4, r22	; 0x04
     Status Local = E_NOT_OK;
    1072:	19 82       	std	Y+1, r1	; 0x01

    if (NULL == My_Stack)
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	61 f0       	breq	.+24     	; 0x1094 <Stack_Size+0x38>
    {
        // Do nothing
    }
    else
    {
        *Variable  =My_Stack->Size;
    107c:	ea 81       	ldd	r30, Y+2	; 0x02
    107e:	fb 81       	ldd	r31, Y+3	; 0x03
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	a4 81       	ldd	r26, Z+4	; 0x04
    1086:	b5 81       	ldd	r27, Z+5	; 0x05
    1088:	ec 81       	ldd	r30, Y+4	; 0x04
    108a:	fd 81       	ldd	r31, Y+5	; 0x05
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
         Local = E_OK;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <TIMER2_DutyCycle>:
#include "../inc/TIMER2_interface.h"
#include "../inc/TIMER2_private.h"
#include "../inc/TIMER2_register.h"

void TIMER2_DutyCycle(uint8 Copy_uint8Duty)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <TIMER2_DutyCycle+0x6>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
    10b4:	1a 82       	std	Y+2, r1	; 0x02
    10b6:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	98 2f       	mov	r25, r24
    10c0:	88 27       	eor	r24, r24
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	24 e6       	ldi	r18, 0x64	; 100
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	b9 01       	movw	r22, r18
    10d0:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__udivmodhi4>
    10d4:	cb 01       	movw	r24, r22
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Local_VCalue;
    10da:	e3 e4       	ldi	r30, 0x43	; 67
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	80 83       	st	Z, r24
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <TIMER2_Delay>:


void TIMER2_Delay(uint16 Copy_uint16Delay)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <TIMER2_Delay+0x6>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <TIMER2_Delay+0x8>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
    10fe:	1a 82       	std	Y+2, r1	; 0x02
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	10 c0       	rjmp	.+32     	; 0x1124 <TIMER2_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIFR_Reg->OCF2 == 0);
    1104:	e8 e5       	ldi	r30, 0x58	; 88
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 78       	andi	r24, 0x80	; 128
    110c:	88 23       	and	r24, r24
    110e:	d1 f3       	breq	.-12     	; 0x1104 <TIMER2_Delay+0x16>
	TIFR_Reg->OCF2 =1;
    1110:	e8 e5       	ldi	r30, 0x58	; 88
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	80 83       	st	Z, r24
	Counter++;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
void TIMER2_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
    1124:	29 81       	ldd	r18, Y+1	; 0x01
    1126:	3a 81       	ldd	r19, Y+2	; 0x02
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	28 17       	cp	r18, r24
    112e:	39 07       	cpc	r19, r25
    1130:	48 f3       	brcs	.-46     	; 0x1104 <TIMER2_Delay+0x16>
	Counter++;


	}

}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Reg->CS2x= CLCK_SELECTION;
    1148:	e5 e4       	ldi	r30, 0x45	; 69
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 7f       	andi	r24, 0xF8	; 248
    1150:	84 60       	ori	r24, 0x04	; 4
    1152:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=DISABLE;
TCCR2_Reg->COM2x=CORRECT_PWM_OUTPUT_MODE;


#elif TIMER_MODE==CTC_MODE
TCCR2_Reg->WGM20=DISABLE;
    1154:	e5 e4       	ldi	r30, 0x45	; 69
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 7b       	andi	r24, 0xBF	; 191
    115c:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=ENABLE;
    115e:	e5 e4       	ldi	r30, 0x45	; 69
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	88 60       	ori	r24, 0x08	; 8
    1166:	80 83       	st	Z, r24
TCCR2_Reg->COM2x=CTC_OUTPUT_MODE;
    1168:	e5 e4       	ldi	r30, 0x45	; 69
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7c       	andi	r24, 0xCF	; 207
    1170:	80 61       	ori	r24, 0x10	; 16
    1172:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
TIMSK_Reg->TOIE2=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
TIMSK_Reg->OCIE2=ENABLE;
    1174:	e9 e5       	ldi	r30, 0x59	; 89
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	80 83       	st	Z, r24
#endif


}
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <TIMER2_voiSetPreLoadValue>:


void TIMER2_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Reg=Copy_uint8Value;
    1190:	e4 e4       	ldi	r30, 0x44	; 68
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	80 83       	st	Z, r24
}
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <TIMER2_voiSetCompareMatchValue>:


void TIMER2_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Copy_uint8Value;
    11ac:	e3 e4       	ldi	r30, 0x43	; 67
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 83       	st	Z, r24
}
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Timer2_Timer2OVFCallBackFunc>:

Status_t Timer2_Timer2OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <Timer2_Timer2OVFCallBackFunc+0x6>
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9b 83       	std	Y+3, r25	; 0x03
    11ca:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
    11cc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	19 f4       	brne	.+6      	; 0x11dc <Timer2_Timer2OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER2_POINTER_Err;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <Timer2_Timer2OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	90 93 93 01 	sts	0x0193, r25
    11e4:	80 93 92 01 	sts	0x0192, r24
	}

	return Local_ErrorState;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <Timer2_Timer2CTCCallBackFunc>:

Status_t Timer2_Timer2CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <Timer2_Timer2CTCCallBackFunc+0x6>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9b 83       	std	Y+3, r25	; 0x03
    1204:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
    1206:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	9b 81       	ldd	r25, Y+3	; 0x03
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	19 f4       	brne	.+6      	; 0x1216 <Timer2_Timer2CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER2_POINTER_Err;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <Timer2_Timer2CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	9b 81       	ldd	r25, Y+3	; 0x03
    121a:	90 93 91 01 	sts	0x0191, r25
    121e:	80 93 90 01 	sts	0x0190, r24
		}

	return Local_ErrorState;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <__vector_4>:




/*TIMER0 COMPARE MATCH*/
void __vector_4(void){
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    125a:	e0 91 90 01 	lds	r30, 0x0190
    125e:	f0 91 91 01 	lds	r31, 0x0191
    1262:	09 95       	icall
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	ff 91       	pop	r31
    126a:	ef 91       	pop	r30
    126c:	bf 91       	pop	r27
    126e:	af 91       	pop	r26
    1270:	9f 91       	pop	r25
    1272:	8f 91       	pop	r24
    1274:	7f 91       	pop	r23
    1276:	6f 91       	pop	r22
    1278:	5f 91       	pop	r21
    127a:	4f 91       	pop	r20
    127c:	3f 91       	pop	r19
    127e:	2f 91       	pop	r18
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_5>:

/*TIMER0 OVERFLOW*/
void __vector_5(void){
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    12b4:	e0 91 92 01 	lds	r30, 0x0192
    12b8:	f0 91 93 01 	lds	r31, 0x0193
    12bc:	09 95       	icall
}
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	ff 91       	pop	r31
    12c4:	ef 91       	pop	r30
    12c6:	bf 91       	pop	r27
    12c8:	af 91       	pop	r26
    12ca:	9f 91       	pop	r25
    12cc:	8f 91       	pop	r24
    12ce:	7f 91       	pop	r23
    12d0:	6f 91       	pop	r22
    12d2:	5f 91       	pop	r21
    12d4:	4f 91       	pop	r20
    12d6:	3f 91       	pop	r19
    12d8:	2f 91       	pop	r18
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <TIMER1_voidInit>:
#include "../inc/TIMER1_register.h"
#include "../inc/TIMER1_config.h"


void TIMER1_voidInit(void)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	/*Clock selection*/
TCCR1B_Reg->CS1X= CLCK_SELECT;
    12ec:	ee e4       	ldi	r30, 0x4E	; 78
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	88 7f       	andi	r24, 0xF8	; 248
    12f4:	84 60       	ori	r24, 0x04	; 4
    12f6:	80 83       	st	Z, r24

/*Waveform generation mode*/
TCCR1A_Reg->WGM1X=WAVE_GEN & 0b0011;
    12f8:	ef e4       	ldi	r30, 0x4F	; 79
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8c 7f       	andi	r24, 0xFC	; 252
    1300:	80 83       	st	Z, r24
TCCR1B_Reg->WGM1XX=(WAVE_GEN>>2) & 0b0011;
    1302:	ee e4       	ldi	r30, 0x4E	; 78
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	87 7e       	andi	r24, 0xE7	; 231
    130a:	88 60       	ori	r24, 0x08	; 8
    130c:	80 83       	st	Z, r24

#ifdef CHANNEL_A

#if TIMER1A_MODE == TIMER1_NON_PWM

TCCR1A_Reg->COM1AX=TIMER1A_OUT_MODE;
    130e:	ef e4       	ldi	r30, 0x4F	; 79
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8f 73       	andi	r24, 0x3F	; 63
    1316:	80 83       	st	Z, r24

#ifdef CHANNEL_B

#if TIMER1B_MODE == TIMER1_NON_PWM

		TCCR1A_Reg->COM1BX=TIMER1B_OUT_MODE;
    1318:	ef e4       	ldi	r30, 0x4F	; 79
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8f 7c       	andi	r24, 0xCF	; 207
    1320:	80 83       	st	Z, r24
#endif

/*INTERRUPT ENABLE*/
#ifdef TIMER1_COMPARE_MATCH_A_ISR_ENABLE

		TIMSK_Reg->OCIE1A=Enable;
    1322:	e9 e5       	ldi	r30, 0x59	; 89
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 61       	ori	r24, 0x10	; 16
    132a:	80 83       	st	Z, r24
#ifdef TIMER1_INPUT_CAPTURE_INTERRUPT
		TIMSK_Reg->TICIE1=Enable;
#endif


}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TIMER1_voidSetChannelACompMatch>:


void TIMER1_voidSetChannelACompMatch(uint16 Copy_uint16Data)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TIMER1_voidSetChannelACompMatch+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Reg=Copy_uint16Data;
    1340:	ea e4       	ldi	r30, 0x4A	; 74
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(uint16 Copy_uint16Data)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <TIMER1_voidSetChannelBCompMatch+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Reg=Copy_uint16Data;
    1364:	e8 e4       	ldi	r30, 0x48	; 72
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(uint16 Copy_uint16ICR)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <TIMER1_voidSetICR+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Reg=Copy_uint16ICR;
    1388:	e6 e4       	ldi	r30, 0x46	; 70
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	91 83       	std	Z+1, r25	; 0x01
    1392:	80 83       	st	Z, r24
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <TIMER1_voidSetTimerValue>:
void TIMER1_voidSetTimerValue(uint16 Copy_uint16Value)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <TIMER1_voidSetTimerValue+0x6>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Reg=	Copy_uint16Value;
    13ac:	ec e4       	ldi	r30, 0x4C	; 76
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	80 83       	st	Z, r24
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <TIMER1_uint16GetTimerValue>:
uint16 TIMER1_uint16GetTimerValue(void)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
return TCNT1_Reg;
    13ca:	ec e4       	ldi	r30, 0x4C	; 76
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
}
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <TIMER1_CTCASetCallBck>:


Timer1_status TIMER1_CTCASetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <TIMER1_CTCASetCallBck+0x6>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9b 83       	std	Y+3, r25	; 0x03
    13e6:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    13e8:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Copy_pvCallBackFunc)
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	19 f4       	brne	.+6      	; 0x13f8 <TIMER1_CTCASetCallBck+0x20>
	{
		Local_ErrorState=TIMER1_PONTER_ERR;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <TIMER1_CTCASetCallBck+0x2c>
	}
	else
	{
		TIMER1_pvCallBackFunc_CTC_A=Copy_pvCallBackFunc;
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	90 93 95 01 	sts	0x0195, r25
    1400:	80 93 94 01 	sts	0x0194, r24
	}
return Local_ErrorState;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <TIMER1_CTCBSetCallBck>:
Timer1_status TIMER1_CTCBSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <TIMER1_CTCBSetCallBck+0x6>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	9b 83       	std	Y+3, r25	; 0x03
    1420:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_status Local_ErrorState=TIMER1_OK;
    1422:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	9b 81       	ldd	r25, Y+3	; 0x03
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	19 f4       	brne	.+6      	; 0x1432 <TIMER1_CTCBSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	06 c0       	rjmp	.+12     	; 0x143e <TIMER1_CTCBSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CTC_B=Copy_pvCallBackFunc;
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	9b 81       	ldd	r25, Y+3	; 0x03
    1436:	90 93 97 01 	sts	0x0197, r25
    143a:	80 93 96 01 	sts	0x0196, r24
		}
	return Local_ErrorState;
    143e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <TIMER1_OVSetCallBck>:


Timer1_status TIMER1_OVSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <TIMER1_OVSetCallBck+0x6>
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	9b 83       	std	Y+3, r25	; 0x03
    145a:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    145c:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	9b 81       	ldd	r25, Y+3	; 0x03
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	19 f4       	brne	.+6      	; 0x146c <TIMER1_OVSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <TIMER1_OVSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_OV=Copy_pvCallBackFunc;
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	9b 81       	ldd	r25, Y+3	; 0x03
    1470:	90 93 99 01 	sts	0x0199, r25
    1474:	80 93 98 01 	sts	0x0198, r24
		}
	return Local_ErrorState;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <TIMER1_CAPTURESetCallBck>:


Timer1_status TIMER1_CAPTURESetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <TIMER1_CAPTURESetCallBck+0x6>
    148c:	0f 92       	push	r0
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	9b 83       	std	Y+3, r25	; 0x03
    1494:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    1496:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	9b 81       	ldd	r25, Y+3	; 0x03
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	19 f4       	brne	.+6      	; 0x14a6 <TIMER1_CAPTURESetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <TIMER1_CAPTURESetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CaptEvnt=Copy_pvCallBackFunc;
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	90 93 9b 01 	sts	0x019B, r25
    14ae:	80 93 9a 01 	sts	0x019A, r24
		}
	return Local_ErrorState;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <__vector_6>:



void __vector_6 (void)
{
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62

	TIMER1_pvCallBackFunc_CaptEvnt();
    14ea:	e0 91 9a 01 	lds	r30, 0x019A
    14ee:	f0 91 9b 01 	lds	r31, 0x019B
    14f2:	09 95       	icall
	TIFR_Reg->ICF1=Enable;
    14f4:	e8 e5       	ldi	r30, 0x58	; 88
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	80 62       	ori	r24, 0x20	; 32
    14fc:	80 83       	st	Z, r24
}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_7>:

void __vector_7 (void)
{
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_A();
    154e:	e0 91 94 01 	lds	r30, 0x0194
    1552:	f0 91 95 01 	lds	r31, 0x0195
    1556:	09 95       	icall
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_8>:

void __vector_8 (void)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_B();
    15a8:	e0 91 96 01 	lds	r30, 0x0196
    15ac:	f0 91 97 01 	lds	r31, 0x0197
    15b0:	09 95       	icall
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_9>:


void __vector_9 (void)
{
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	2f 93       	push	r18
    15e4:	3f 93       	push	r19
    15e6:	4f 93       	push	r20
    15e8:	5f 93       	push	r21
    15ea:	6f 93       	push	r22
    15ec:	7f 93       	push	r23
    15ee:	8f 93       	push	r24
    15f0:	9f 93       	push	r25
    15f2:	af 93       	push	r26
    15f4:	bf 93       	push	r27
    15f6:	ef 93       	push	r30
    15f8:	ff 93       	push	r31
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_OV();
    1602:	e0 91 98 01 	lds	r30, 0x0198
    1606:	f0 91 99 01 	lds	r31, 0x0199
    160a:	09 95       	icall
}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	ff 91       	pop	r31
    1612:	ef 91       	pop	r30
    1614:	bf 91       	pop	r27
    1616:	af 91       	pop	r26
    1618:	9f 91       	pop	r25
    161a:	8f 91       	pop	r24
    161c:	7f 91       	pop	r23
    161e:	6f 91       	pop	r22
    1620:	5f 91       	pop	r21
    1622:	4f 91       	pop	r20
    1624:	3f 91       	pop	r19
    1626:	2f 91       	pop	r18
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	0f 90       	pop	r0
    162e:	1f 90       	pop	r1
    1630:	18 95       	reti

00001632 <TIMER0_DutyCycle>:
#include "../inc/TIMER0_private.h"
#include "../inc/TIMER0_register.h"
#include "../inc/TIMER0_config.h"

void TIMER0_DutyCycle(uint8 Copy_uint8Duty)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <TIMER0_DutyCycle+0x6>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
    1640:	1a 82       	std	Y+2, r1	; 0x02
    1642:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	98 2f       	mov	r25, r24
    164c:	88 27       	eor	r24, r24
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	24 e6       	ldi	r18, 0x64	; 100
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	b9 01       	movw	r22, r18
    165c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__udivmodhi4>
    1660:	cb 01       	movw	r24, r22
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Local_VCalue;
    1666:	ec e5       	ldi	r30, 0x5C	; 92
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	80 83       	st	Z, r24
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <TIMER0_Delay>:


void TIMER0_Delay(uint16 Copy_uint16Delay)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <TIMER0_Delay+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <TIMER0_Delay+0x8>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
    168a:	1a 82       	std	Y+2, r1	; 0x02
    168c:	19 82       	std	Y+1, r1	; 0x01
    168e:	10 c0       	rjmp	.+32     	; 0x16b0 <TIMER0_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIMER0_TIFR_Reg->OCF0 == 0);
    1690:	e8 e5       	ldi	r30, 0x58	; 88
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	82 70       	andi	r24, 0x02	; 2
    1698:	88 23       	and	r24, r24
    169a:	d1 f3       	breq	.-12     	; 0x1690 <TIMER0_Delay+0x16>
	TIMER0_TIFR_Reg->OCF0 =1;
    169c:	e8 e5       	ldi	r30, 0x58	; 88
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	82 60       	ori	r24, 0x02	; 2
    16a4:	80 83       	st	Z, r24
	Counter++;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
    16b0:	29 81       	ldd	r18, Y+1	; 0x01
    16b2:	3a 81       	ldd	r19, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	28 17       	cp	r18, r24
    16ba:	39 07       	cpc	r19, r25
    16bc:	48 f3       	brcs	.-46     	; 0x1690 <TIMER0_Delay+0x16>
	Counter++;


	}

}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <TIMER0_voidInit>:
void TIMER0_voidInit(void)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	/*clock selection*/
	TIMER0_TCCR0_Reg->CS0x= CLCK_SELECTION;
    16d4:	e3 e5       	ldi	r30, 0x53	; 83
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 7f       	andi	r24, 0xF8	; 248
    16dc:	82 60       	ori	r24, 0x02	; 2
    16de:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM00=DISABLE;
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
	TIMER0_TCCR0_Reg->COM0=CTC_OUTPUT_MODE;

#elif TIMER_MODE==FAST_PWM_MODE
	TIMER0_TCCR0_Reg->WGM00=ENABLE;
    16e0:	e3 e5       	ldi	r30, 0x53	; 83
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 64       	ori	r24, 0x40	; 64
    16e8:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
    16ea:	e3 e5       	ldi	r30, 0x53	; 83
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 60       	ori	r24, 0x08	; 8
    16f2:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->COM0=FAST_PWM_OUTPUT_MODE;
    16f4:	e3 e5       	ldi	r30, 0x53	; 83
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 7c       	andi	r24, 0xCF	; 207
    16fc:	80 62       	ori	r24, 0x20	; 32
    16fe:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
	TIMER0_TIMSK_Reg->TOIE0=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
	TIMER0_TIMSK_Reg->OCIE0=ENABLE;
    1700:	e9 e5       	ldi	r30, 0x59	; 89
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	82 60       	ori	r24, 0x02	; 2
    1708:	80 83       	st	Z, r24
#endif


}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <TIMER0_voiSetPreLoadValue>:


void TIMER0_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_Reg=Copy_uint8Value;
    171c:	e2 e5       	ldi	r30, 0x52	; 82
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	80 83       	st	Z, r24
}
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <TIMER0_voiSetCompareMatchValue>:


void TIMER0_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	0f 92       	push	r0
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Copy_uint8Value;
    1738:	ec e5       	ldi	r30, 0x5C	; 92
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	80 83       	st	Z, r24
}
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <Timer0_Timer0OVFCallBackFunc>:

Status_t Timer0_Timer0OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <Timer0_Timer0OVFCallBackFunc+0x6>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	9b 83       	std	Y+3, r25	; 0x03
    1756:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    1758:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	19 f4       	brne	.+6      	; 0x1768 <Timer0_Timer0OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER_POINTER_Err;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	06 c0       	rjmp	.+12     	; 0x1774 <Timer0_Timer0OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	9b 81       	ldd	r25, Y+3	; 0x03
    176c:	90 93 9f 01 	sts	0x019F, r25
    1770:	80 93 9e 01 	sts	0x019E, r24
	}

	return Local_ErrorState;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <Timer0_Timer0CTCCallBackFunc>:

Status_t Timer0_Timer0CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <Timer0_Timer0CTCCallBackFunc+0x6>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	9b 83       	std	Y+3, r25	; 0x03
    1790:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    1792:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	19 f4       	brne	.+6      	; 0x17a2 <Timer0_Timer0CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER_POINTER_Err;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <Timer0_Timer0CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	9b 81       	ldd	r25, Y+3	; 0x03
    17a6:	90 93 9d 01 	sts	0x019D, r25
    17aa:	80 93 9c 01 	sts	0x019C, r24
		}

	return Local_ErrorState;
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <__vector_10>:




/*TIMER0 COMPARE MATCH*/
void __vector_10(void){
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	11 24       	eor	r1, r1
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	ef 93       	push	r30
    17dc:	ff 93       	push	r31
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    17e6:	e0 91 9c 01 	lds	r30, 0x019C
    17ea:	f0 91 9d 01 	lds	r31, 0x019D
    17ee:	09 95       	icall
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	ff 91       	pop	r31
    17f6:	ef 91       	pop	r30
    17f8:	bf 91       	pop	r27
    17fa:	af 91       	pop	r26
    17fc:	9f 91       	pop	r25
    17fe:	8f 91       	pop	r24
    1800:	7f 91       	pop	r23
    1802:	6f 91       	pop	r22
    1804:	5f 91       	pop	r21
    1806:	4f 91       	pop	r20
    1808:	3f 91       	pop	r19
    180a:	2f 91       	pop	r18
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	0f 90       	pop	r0
    1812:	1f 90       	pop	r1
    1814:	18 95       	reti

00001816 <__vector_11>:

/*TIMER0 OVERFLOW*/
void __vector_11(void){
    1816:	1f 92       	push	r1
    1818:	0f 92       	push	r0
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	0f 92       	push	r0
    181e:	11 24       	eor	r1, r1
    1820:	2f 93       	push	r18
    1822:	3f 93       	push	r19
    1824:	4f 93       	push	r20
    1826:	5f 93       	push	r21
    1828:	6f 93       	push	r22
    182a:	7f 93       	push	r23
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	ef 93       	push	r30
    1836:	ff 93       	push	r31
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    1840:	e0 91 9e 01 	lds	r30, 0x019E
    1844:	f0 91 9f 01 	lds	r31, 0x019F
    1848:	09 95       	icall
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <PORT_voidInit>:
#include"../inc/PORT_config.h"



void PORT_voidInit(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62

DDRA=PORTA_DIR;
    1878:	ea e3       	ldi	r30, 0x3A	; 58
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	8f ef       	ldi	r24, 0xFF	; 255
    187e:	80 83       	st	Z, r24
DDRB=PORTB_DIR;
    1880:	e7 e3       	ldi	r30, 0x37	; 55
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	87 e0       	ldi	r24, 0x07	; 7
    1886:	80 83       	st	Z, r24
DDRC=PORTC_DIR;
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	87 e0       	ldi	r24, 0x07	; 7
    188e:	80 83       	st	Z, r24
DDRD=PORTD_DIR;
    1890:	e1 e3       	ldi	r30, 0x31	; 49
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	10 82       	st	Z, r1

PORTA=PORTA_INIT_VALUE;
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	10 82       	st	Z, r1
PORTB=PORTB_INIT_VALUE;
    189c:	e8 e3       	ldi	r30, 0x38	; 56
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	10 82       	st	Z, r1
PORTC=PORTC_INIT_VALUE;
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	10 82       	st	Z, r1
PORTD=PORTD_INIT_VALUE;
    18a8:	e2 e3       	ldi	r30, 0x32	; 50
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	10 82       	st	Z, r1
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <GIE_Enable>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/GIE_interface.h"
#include "../inc/GIE_register.h"

void GIE_Enable(void)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_I);
    18bc:	af e5       	ldi	r26, 0x5F	; 95
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ef e5       	ldi	r30, 0x5F	; 95
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 68       	ori	r24, 0x80	; 128
    18c8:	8c 93       	st	X, r24

}
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <GIE_Disable>:
void GIE_Disable(void)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    18d8:	af e5       	ldi	r26, 0x5F	; 95
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ef e5       	ldi	r30, 0x5F	; 95
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8f 77       	andi	r24, 0x7F	; 127
    18e4:	8c 93       	st	X, r24
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <EXTI_voidInt0Init>:
#include "../inc/EXTI_interface.h"
#include "../inc/EXTI_config.h"
#include "../inc/EXTI_private.h"

void EXTI_voidInt0Init(void)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62

#if INT0_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    18f4:	a5 e5       	ldi	r26, 0x55	; 85
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e5       	ldi	r30, 0x55	; 85
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	81 60       	ori	r24, 0x01	; 1
    1900:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1902:	a5 e5       	ldi	r26, 0x55	; 85
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e5       	ldi	r30, 0x55	; 85
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	8d 7f       	andi	r24, 0xFD	; 253
    190e:	8c 93       	st	X, r24
#else
#error "INT0 Wrong init"
#endif

#if INT0_STATE == INT0_ENABLE
	SET_BIT(GICR,GICR_INT0);
    1910:	ab e5       	ldi	r26, 0x5B	; 91
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e5       	ldi	r30, 0x5B	; 91
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 64       	ori	r24, 0x40	; 64
    191c:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT0);
#else
#error "INT0 Wrong init"
#endif

}
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
#if INT1_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC10);
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
    192c:	a5 e5       	ldi	r26, 0x55	; 85
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e5 e5       	ldi	r30, 0x55	; 85
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	84 60       	ori	r24, 0x04	; 4
    1938:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
    193a:	a5 e5       	ldi	r26, 0x55	; 85
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e5       	ldi	r30, 0x55	; 85
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	87 7f       	andi	r24, 0xF7	; 247
    1946:	8c 93       	st	X, r24
#elif  INT1_STATE == INT1_DISABLE
	CLEAR_BIT(GICR,GICR_INT1);
#else
#warning "INT1 Wrong init"
#endif
}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62

#if INT2_SENSE == FALLING_EDGE
	CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    1956:	a4 e5       	ldi	r26, 0x54	; 84
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e4 e5       	ldi	r30, 0x54	; 84
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8f 7b       	andi	r24, 0xBF	; 191
    1962:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT2);
#else
#warning "INT2 Wrong init"
#endif

}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <EXTI_uint8IntSetSenseControl>:

uint8 EXTI_uint8IntSetSenseControl(uint8 Copy_uint8IntNumber,uint8 Copy_uint8Sense)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	29 97       	sbiw	r28, 0x09	; 9
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	8a 83       	std	Y+2, r24	; 0x02
    1980:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState=0;
    1982:	19 82       	std	Y+1, r1	; 0x01
	if(INT0==Copy_uint8IntNumber)
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	09 f0       	breq	.+2      	; 0x198c <EXTI_uint8IntSetSenseControl+0x22>
    198a:	5e c0       	rjmp	.+188    	; 0x1a48 <EXTI_uint8IntSetSenseControl+0xde>
	{
		switch(Copy_uint8Sense)
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	39 87       	std	Y+9, r19	; 0x09
    1994:	28 87       	std	Y+8, r18	; 0x08
    1996:	88 85       	ldd	r24, Y+8	; 0x08
    1998:	99 85       	ldd	r25, Y+9	; 0x09
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	21 f1       	breq	.+72     	; 0x19e8 <EXTI_uint8IntSetSenseControl+0x7e>
    19a0:	28 85       	ldd	r18, Y+8	; 0x08
    19a2:	39 85       	ldd	r19, Y+9	; 0x09
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <EXTI_uint8IntSetSenseControl+0x4a>
    19aa:	88 85       	ldd	r24, Y+8	; 0x08
    19ac:	99 85       	ldd	r25, Y+9	; 0x09
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	61 f0       	breq	.+24     	; 0x19ca <EXTI_uint8IntSetSenseControl+0x60>
    19b2:	47 c0       	rjmp	.+142    	; 0x1a42 <EXTI_uint8IntSetSenseControl+0xd8>
    19b4:	28 85       	ldd	r18, Y+8	; 0x08
    19b6:	39 85       	ldd	r19, Y+9	; 0x09
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	21 f1       	breq	.+72     	; 0x1a06 <EXTI_uint8IntSetSenseControl+0x9c>
    19be:	88 85       	ldd	r24, Y+8	; 0x08
    19c0:	99 85       	ldd	r25, Y+9	; 0x09
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	71 f1       	breq	.+92     	; 0x1a24 <EXTI_uint8IntSetSenseControl+0xba>
    19c8:	3c c0       	rjmp	.+120    	; 0x1a42 <EXTI_uint8IntSetSenseControl+0xd8>
		{
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    19ca:	a5 e5       	ldi	r26, 0x55	; 85
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e5 e5       	ldi	r30, 0x55	; 85
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8e 7f       	andi	r24, 0xFE	; 254
    19d6:	8c 93       	st	X, r24
    19d8:	a5 e5       	ldi	r26, 0x55	; 85
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e5       	ldi	r30, 0x55	; 85
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8d 7f       	andi	r24, 0xFD	; 253
    19e4:	8c 93       	st	X, r24
    19e6:	ba c0       	rjmp	.+372    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    19e8:	a5 e5       	ldi	r26, 0x55	; 85
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e5 e5       	ldi	r30, 0x55	; 85
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	81 60       	ori	r24, 0x01	; 1
    19f4:	8c 93       	st	X, r24
    19f6:	a5 e5       	ldi	r26, 0x55	; 85
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e5 e5       	ldi	r30, 0x55	; 85
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8d 7f       	andi	r24, 0xFD	; 253
    1a02:	8c 93       	st	X, r24
    1a04:	ab c0       	rjmp	.+342    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1a06:	a5 e5       	ldi	r26, 0x55	; 85
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e5 e5       	ldi	r30, 0x55	; 85
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8e 7f       	andi	r24, 0xFE	; 254
    1a12:	8c 93       	st	X, r24
    1a14:	a5 e5       	ldi	r26, 0x55	; 85
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e5 e5       	ldi	r30, 0x55	; 85
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	8c 93       	st	X, r24
    1a22:	9c c0       	rjmp	.+312    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1a24:	a5 e5       	ldi	r26, 0x55	; 85
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e5 e5       	ldi	r30, 0x55	; 85
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	81 60       	ori	r24, 0x01	; 1
    1a30:	8c 93       	st	X, r24
    1a32:	a5 e5       	ldi	r26, 0x55	; 85
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e5 e5       	ldi	r30, 0x55	; 85
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 60       	ori	r24, 0x02	; 2
    1a3e:	8c 93       	st	X, r24
    1a40:	8d c0       	rjmp	.+282    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
		default : Local_ErrorState=1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	8a c0       	rjmp	.+276    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
		}
	}
	else if(INT1==Copy_uint8IntNumber)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <EXTI_uint8IntSetSenseControl+0xe6>
    1a4e:	5e c0       	rjmp	.+188    	; 0x1b0c <EXTI_uint8IntSetSenseControl+0x1a2>
	{
		switch(Copy_uint8Sense)
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	3f 83       	std	Y+7, r19	; 0x07
    1a58:	2e 83       	std	Y+6, r18	; 0x06
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	91 05       	cpc	r25, r1
    1a62:	21 f1       	breq	.+72     	; 0x1aac <EXTI_uint8IntSetSenseControl+0x142>
    1a64:	2e 81       	ldd	r18, Y+6	; 0x06
    1a66:	3f 81       	ldd	r19, Y+7	; 0x07
    1a68:	22 30       	cpi	r18, 0x02	; 2
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <EXTI_uint8IntSetSenseControl+0x10e>
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	61 f0       	breq	.+24     	; 0x1a8e <EXTI_uint8IntSetSenseControl+0x124>
    1a76:	47 c0       	rjmp	.+142    	; 0x1b06 <EXTI_uint8IntSetSenseControl+0x19c>
    1a78:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7c:	22 30       	cpi	r18, 0x02	; 2
    1a7e:	31 05       	cpc	r19, r1
    1a80:	21 f1       	breq	.+72     	; 0x1aca <EXTI_uint8IntSetSenseControl+0x160>
    1a82:	8e 81       	ldd	r24, Y+6	; 0x06
    1a84:	9f 81       	ldd	r25, Y+7	; 0x07
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	91 05       	cpc	r25, r1
    1a8a:	71 f1       	breq	.+92     	; 0x1ae8 <EXTI_uint8IntSetSenseControl+0x17e>
    1a8c:	3c c0       	rjmp	.+120    	; 0x1b06 <EXTI_uint8IntSetSenseControl+0x19c>
	  {
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    1a8e:	a5 e5       	ldi	r26, 0x55	; 85
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e5       	ldi	r30, 0x55	; 85
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8b 7f       	andi	r24, 0xFB	; 251
    1a9a:	8c 93       	st	X, r24
    1a9c:	a5 e5       	ldi	r26, 0x55	; 85
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e5 e5       	ldi	r30, 0x55	; 85
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	87 7f       	andi	r24, 0xF7	; 247
    1aa8:	8c 93       	st	X, r24
    1aaa:	58 c0       	rjmp	.+176    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    1aac:	a5 e5       	ldi	r26, 0x55	; 85
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e5       	ldi	r30, 0x55	; 85
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	8c 93       	st	X, r24
    1aba:	a5 e5       	ldi	r26, 0x55	; 85
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e5       	ldi	r30, 0x55	; 85
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	87 7f       	andi	r24, 0xF7	; 247
    1ac6:	8c 93       	st	X, r24
    1ac8:	49 c0       	rjmp	.+146    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1aca:	a5 e5       	ldi	r26, 0x55	; 85
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e5       	ldi	r30, 0x55	; 85
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8b 7f       	andi	r24, 0xFB	; 251
    1ad6:	8c 93       	st	X, r24
    1ad8:	a5 e5       	ldi	r26, 0x55	; 85
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e5       	ldi	r30, 0x55	; 85
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 60       	ori	r24, 0x08	; 8
    1ae4:	8c 93       	st	X, r24
    1ae6:	3a c0       	rjmp	.+116    	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1ae8:	a5 e5       	ldi	r26, 0x55	; 85
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e5       	ldi	r30, 0x55	; 85
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	84 60       	ori	r24, 0x04	; 4
    1af4:	8c 93       	st	X, r24
    1af6:	a5 e5       	ldi	r26, 0x55	; 85
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e5       	ldi	r30, 0x55	; 85
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	88 60       	ori	r24, 0x08	; 8
    1b02:	8c 93       	st	X, r24
    1b04:	2b c0       	rjmp	.+86     	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	28 c0       	rjmp	.+80     	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else if(INT2==Copy_uint8IntNumber)
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	19 f5       	brne	.+70     	; 0x1b58 <EXTI_uint8IntSetSenseControl+0x1ee>
	{switch(Copy_uint8Sense)
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	3d 83       	std	Y+5, r19	; 0x05
    1b1a:	2c 83       	std	Y+4, r18	; 0x04
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	91 05       	cpc	r25, r1
    1b24:	31 f0       	breq	.+12     	; 0x1b32 <EXTI_uint8IntSetSenseControl+0x1c8>
    1b26:	2c 81       	ldd	r18, Y+4	; 0x04
    1b28:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2a:	23 30       	cpi	r18, 0x03	; 3
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	49 f0       	breq	.+18     	; 0x1b42 <EXTI_uint8IntSetSenseControl+0x1d8>
    1b30:	10 c0       	rjmp	.+32     	; 0x1b52 <EXTI_uint8IntSetSenseControl+0x1e8>
	  {
	   case EXTI_FALLING:CLEAR_BIT(MCUCSR,MCUCSR_ISC2);break;
    1b32:	a4 e5       	ldi	r26, 0x54	; 84
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e4 e5       	ldi	r30, 0x54	; 84
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f 7b       	andi	r24, 0xBF	; 191
    1b3e:	8c 93       	st	X, r24
    1b40:	0d c0       	rjmp	.+26     	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
    1b42:	a4 e5       	ldi	r26, 0x54	; 84
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e4 e5       	ldi	r30, 0x54	; 84
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	80 64       	ori	r24, 0x40	; 64
    1b4e:	8c 93       	st	X, r24
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else
	{
		Local_ErrorState=1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_ErrorState;
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5e:	29 96       	adiw	r28, 0x09	; 9
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <EXTI_uint8IntEnable>:

uint8 EXTI_uint8IntEnable(uint8 Copy_uint8IntNumber)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <EXTI_uint8IntEnable+0x6>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <EXTI_uint8IntEnable+0x8>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    1b7e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	3c 83       	std	Y+4, r19	; 0x04
    1b88:	2b 83       	std	Y+3, r18	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	82 30       	cpi	r24, 0x02	; 2
    1b90:	91 05       	cpc	r25, r1
    1b92:	91 f0       	breq	.+36     	; 0x1bb8 <EXTI_uint8IntEnable+0x48>
    1b94:	2b 81       	ldd	r18, Y+3	; 0x03
    1b96:	3c 81       	ldd	r19, Y+4	; 0x04
    1b98:	23 30       	cpi	r18, 0x03	; 3
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	a9 f0       	breq	.+42     	; 0x1bc8 <EXTI_uint8IntEnable+0x58>
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	c1 f4       	brne	.+48     	; 0x1bd8 <EXTI_uint8IntEnable+0x68>
	case INT0:SET_BIT(GICR,GICR_INT0);break;
    1ba8:	ab e5       	ldi	r26, 0x5B	; 91
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	eb e5       	ldi	r30, 0x5B	; 91
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 64       	ori	r24, 0x40	; 64
    1bb4:	8c 93       	st	X, r24
    1bb6:	12 c0       	rjmp	.+36     	; 0x1bdc <EXTI_uint8IntEnable+0x6c>
	case INT1:SET_BIT(GICR,GICR_INT1);break;
    1bb8:	ab e5       	ldi	r26, 0x5B	; 91
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	eb e5       	ldi	r30, 0x5B	; 91
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	80 68       	ori	r24, 0x80	; 128
    1bc4:	8c 93       	st	X, r24
    1bc6:	0a c0       	rjmp	.+20     	; 0x1bdc <EXTI_uint8IntEnable+0x6c>
	case INT2:SET_BIT(GICR,GICR_INT2);break;
    1bc8:	ab e5       	ldi	r26, 0x5B	; 91
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	eb e5       	ldi	r30, 0x5B	; 91
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 62       	ori	r24, 0x20	; 32
    1bd4:	8c 93       	st	X, r24
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <EXTI_uint8IntEnable+0x6c>
    default  : Local_ErrorState=1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <EXTI_uint8IntDisable>:


uint8 EXTI_uint8IntDisable(uint8 Copy_uint8IntNumber)
{
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <EXTI_uint8IntDisable+0x6>
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <EXTI_uint8IntDisable+0x8>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	3c 83       	std	Y+4, r19	; 0x04
    1c04:	2b 83       	std	Y+3, r18	; 0x03
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	91 f0       	breq	.+36     	; 0x1c34 <EXTI_uint8IntDisable+0x48>
    1c10:	2b 81       	ldd	r18, Y+3	; 0x03
    1c12:	3c 81       	ldd	r19, Y+4	; 0x04
    1c14:	23 30       	cpi	r18, 0x03	; 3
    1c16:	31 05       	cpc	r19, r1
    1c18:	a9 f0       	breq	.+42     	; 0x1c44 <EXTI_uint8IntDisable+0x58>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	91 05       	cpc	r25, r1
    1c22:	c1 f4       	brne	.+48     	; 0x1c54 <EXTI_uint8IntDisable+0x68>
	case INT0:CLEAR_BIT(GICR,GICR_INT0);break;
    1c24:	ab e5       	ldi	r26, 0x5B	; 91
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	eb e5       	ldi	r30, 0x5B	; 91
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8f 7b       	andi	r24, 0xBF	; 191
    1c30:	8c 93       	st	X, r24
    1c32:	12 c0       	rjmp	.+36     	; 0x1c58 <EXTI_uint8IntDisable+0x6c>
	case INT1:CLEAR_BIT(GICR,GICR_INT1);break;
    1c34:	ab e5       	ldi	r26, 0x5B	; 91
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	eb e5       	ldi	r30, 0x5B	; 91
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 77       	andi	r24, 0x7F	; 127
    1c40:	8c 93       	st	X, r24
    1c42:	0a c0       	rjmp	.+20     	; 0x1c58 <EXTI_uint8IntDisable+0x6c>
	case INT2:CLEAR_BIT(GICR,GICR_INT2);break;
    1c44:	ab e5       	ldi	r26, 0x5B	; 91
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	eb e5       	ldi	r30, 0x5B	; 91
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 7d       	andi	r24, 0xDF	; 223
    1c50:	8c 93       	st	X, r24
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <EXTI_uint8IntDisable+0x6c>
    default  : Local_ErrorState=1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <EXTI_uint8Int0SetCallBack>:

uint8 EXTI_uint8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <EXTI_uint8Int0SetCallBack+0x6>
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	9b 83       	std	Y+3, r25	; 0x03
    1c76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1c78:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	39 f0       	breq	.+14     	; 0x1c90 <EXTI_uint8Int0SetCallBack+0x28>
	{
		Global_EXTI_pvInt0Func=Copy_pvInt0Func;
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	90 93 a1 01 	sts	0x01A1, r25
    1c8a:	80 93 a0 01 	sts	0x01A0, r24
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <EXTI_uint8Int0SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <EXTI_uint8Int1SetCallBack>:



uint8 EXTI_uint8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <EXTI_uint8Int1SetCallBack+0x6>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1cb2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL)
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	39 f0       	breq	.+14     	; 0x1cca <EXTI_uint8Int1SetCallBack+0x28>
	{
		Global_EXTI_pvInt1Func=Copy_pvInt1Func;
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	90 93 a3 01 	sts	0x01A3, r25
    1cc4:	80 93 a2 01 	sts	0x01A2, r24
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <EXTI_uint8Int1SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <EXTI_uint8Int2SetCallBack>:



uint8 EXTI_uint8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <EXTI_uint8Int2SetCallBack+0x6>
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	9b 83       	std	Y+3, r25	; 0x03
    1cea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1cec:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL)
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	39 f0       	breq	.+14     	; 0x1d04 <EXTI_uint8Int2SetCallBack+0x28>
	{
		Global_EXTI_pvInt2Func=Copy_pvInt2Func;
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	90 93 a5 01 	sts	0x01A5, r25
    1cfe:	80 93 a4 01 	sts	0x01A4, r24
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <EXTI_uint8Int2SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <__vector_1>:


/*ISR of INT0*/

void __vector_1(void)
{
    1d16:	1f 92       	push	r1
    1d18:	0f 92       	push	r0
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	0f 92       	push	r0
    1d1e:	11 24       	eor	r1, r1
    1d20:	2f 93       	push	r18
    1d22:	3f 93       	push	r19
    1d24:	4f 93       	push	r20
    1d26:	5f 93       	push	r21
    1d28:	6f 93       	push	r22
    1d2a:	7f 93       	push	r23
    1d2c:	8f 93       	push	r24
    1d2e:	9f 93       	push	r25
    1d30:	af 93       	push	r26
    1d32:	bf 93       	push	r27
    1d34:	ef 93       	push	r30
    1d36:	ff 93       	push	r31
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt0Func!=NULL)
    1d40:	80 91 a0 01 	lds	r24, 0x01A0
    1d44:	90 91 a1 01 	lds	r25, 0x01A1
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	29 f0       	breq	.+10     	; 0x1d56 <__vector_1+0x40>
	{
		Global_EXTI_pvInt0Func();
    1d4c:	e0 91 a0 01 	lds	r30, 0x01A0
    1d50:	f0 91 a1 01 	lds	r31, 0x01A1
    1d54:	09 95       	icall
	else
	{
		//do nothing

	}
}
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	ff 91       	pop	r31
    1d5c:	ef 91       	pop	r30
    1d5e:	bf 91       	pop	r27
    1d60:	af 91       	pop	r26
    1d62:	9f 91       	pop	r25
    1d64:	8f 91       	pop	r24
    1d66:	7f 91       	pop	r23
    1d68:	6f 91       	pop	r22
    1d6a:	5f 91       	pop	r21
    1d6c:	4f 91       	pop	r20
    1d6e:	3f 91       	pop	r19
    1d70:	2f 91       	pop	r18
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <__vector_2>:

/*ISR of INT1*/

void __vector_2(void)
{
    1d7c:	1f 92       	push	r1
    1d7e:	0f 92       	push	r0
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt1Func!=NULL)
    1da6:	80 91 a2 01 	lds	r24, 0x01A2
    1daa:	90 91 a3 01 	lds	r25, 0x01A3
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	29 f0       	breq	.+10     	; 0x1dbc <__vector_2+0x40>
		{
		Global_EXTI_pvInt1Func();
    1db2:	e0 91 a2 01 	lds	r30, 0x01A2
    1db6:	f0 91 a3 01 	lds	r31, 0x01A3
    1dba:	09 95       	icall
		{
			//do nothing

		}

	}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	7f 91       	pop	r23
    1dce:	6f 91       	pop	r22
    1dd0:	5f 91       	pop	r21
    1dd2:	4f 91       	pop	r20
    1dd4:	3f 91       	pop	r19
    1dd6:	2f 91       	pop	r18
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	0f 90       	pop	r0
    1dde:	1f 90       	pop	r1
    1de0:	18 95       	reti

00001de2 <__vector_3>:


/*ISR of INT2*/

void __vector_3(void)
{
    1de2:	1f 92       	push	r1
    1de4:	0f 92       	push	r0
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	0f 92       	push	r0
    1dea:	11 24       	eor	r1, r1
    1dec:	2f 93       	push	r18
    1dee:	3f 93       	push	r19
    1df0:	4f 93       	push	r20
    1df2:	5f 93       	push	r21
    1df4:	6f 93       	push	r22
    1df6:	7f 93       	push	r23
    1df8:	8f 93       	push	r24
    1dfa:	9f 93       	push	r25
    1dfc:	af 93       	push	r26
    1dfe:	bf 93       	push	r27
    1e00:	ef 93       	push	r30
    1e02:	ff 93       	push	r31
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62

	if(Global_EXTI_pvInt2Func!=NULL)
    1e0c:	80 91 a4 01 	lds	r24, 0x01A4
    1e10:	90 91 a5 01 	lds	r25, 0x01A5
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	29 f0       	breq	.+10     	; 0x1e22 <__vector_3+0x40>
		{
		Global_EXTI_pvInt2Func();
    1e18:	e0 91 a4 01 	lds	r30, 0x01A4
    1e1c:	f0 91 a5 01 	lds	r31, 0x01A5
    1e20:	09 95       	icall
		{
			//do nothing

		}

}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	ff 91       	pop	r31
    1e28:	ef 91       	pop	r30
    1e2a:	bf 91       	pop	r27
    1e2c:	af 91       	pop	r26
    1e2e:	9f 91       	pop	r25
    1e30:	8f 91       	pop	r24
    1e32:	7f 91       	pop	r23
    1e34:	6f 91       	pop	r22
    1e36:	5f 91       	pop	r21
    1e38:	4f 91       	pop	r20
    1e3a:	3f 91       	pop	r19
    1e3c:	2f 91       	pop	r18
    1e3e:	0f 90       	pop	r0
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	0f 90       	pop	r0
    1e44:	1f 90       	pop	r1
    1e46:	18 95       	reti

00001e48 <DIO_SetPortVal>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/DIO_interface.h"
#include  "../inc/DIO_private.h"
#include "../inc/DIO_register.h"

status_t DIO_SetPortVal(Port_t Copy_Port, uint8 Copy_uint8Value) {
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <DIO_SetPortVal+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <DIO_SetPortVal+0x8>
    1e50:	0f 92       	push	r0
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	8a 83       	std	Y+2, r24	; 0x02
    1e58:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    1e5a:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	84 30       	cpi	r24, 0x04	; 4
    1e60:	18 f0       	brcs	.+6      	; 0x1e68 <DIO_SetPortVal+0x20>
		Local_uint8ErrorState = DIO_SetErr;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	32 c0       	rjmp	.+100    	; 0x1ecc <DIO_SetPortVal+0x84>
	} else {
		switch (Copy_Port) {
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3d 83       	std	Y+5, r19	; 0x05
    1e70:	2c 83       	std	Y+4, r18	; 0x04
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	91 05       	cpc	r25, r1
    1e7a:	d1 f0       	breq	.+52     	; 0x1eb0 <DIO_SetPortVal+0x68>
    1e7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <DIO_SetPortVal+0x48>
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <DIO_SetPortVal+0x5e>
    1e8e:	1e c0       	rjmp	.+60     	; 0x1ecc <DIO_SetPortVal+0x84>
    1e90:	2c 81       	ldd	r18, Y+4	; 0x04
    1e92:	3d 81       	ldd	r19, Y+5	; 0x05
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	81 f0       	breq	.+32     	; 0x1eba <DIO_SetPortVal+0x72>
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <DIO_SetPortVal+0x7c>
    1ea4:	13 c0       	rjmp	.+38     	; 0x1ecc <DIO_SetPortVal+0x84>
		case DIO_PORTA:
			PORTA = Copy_uint8Value;
    1ea6:	eb e3       	ldi	r30, 0x3B	; 59
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	80 83       	st	Z, r24
    1eae:	0e c0       	rjmp	.+28     	; 0x1ecc <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTB:
			PORTB = Copy_uint8Value;
    1eb0:	e8 e3       	ldi	r30, 0x38	; 56
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	80 83       	st	Z, r24
    1eb8:	09 c0       	rjmp	.+18     	; 0x1ecc <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTC:
			PORTC = Copy_uint8Value;
    1eba:	e5 e3       	ldi	r30, 0x35	; 53
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	80 83       	st	Z, r24
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTD:
			PORTD = Copy_uint8Value;
    1ec4:	e2 e3       	ldi	r30, 0x32	; 50
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	80 83       	st	Z, r24
			break;
		}
	}

	return Local_uint8ErrorState;
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <DIO_SetPinVal>:

status_t DIO_SetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8 Copy_uint8Value) {
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	28 97       	sbiw	r28, 0x08	; 8
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
    1ef4:	6b 83       	std	Y+3, r22	; 0x03
    1ef6:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    1ef8:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	84 30       	cpi	r24, 0x04	; 4
    1efe:	18 f0       	brcs	.+6      	; 0x1f06 <DIO_SetPinVal+0x28>
		Local_uint8ErrorState = DIO_SetErr;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	f0 c0       	rjmp	.+480    	; 0x20e6 <DIO_SetPinVal+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	88 30       	cpi	r24, 0x08	; 8
    1f0a:	18 f0       	brcs	.+6      	; 0x1f12 <DIO_SetPinVal+0x34>
		Local_uint8ErrorState = DIO_SetErr;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	ea c0       	rjmp	.+468    	; 0x20e6 <DIO_SetPinVal+0x208>
	} else {
		if (DIO_HIGH == Copy_uint8Value) {
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <DIO_SetPinVal+0x3c>
    1f18:	6f c0       	rjmp	.+222    	; 0x1ff8 <DIO_SetPinVal+0x11a>
			switch (Copy_Port) {
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	38 87       	std	Y+8, r19	; 0x08
    1f22:	2f 83       	std	Y+7, r18	; 0x07
    1f24:	8f 81       	ldd	r24, Y+7	; 0x07
    1f26:	98 85       	ldd	r25, Y+8	; 0x08
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	49 f1       	breq	.+82     	; 0x1f80 <DIO_SetPinVal+0xa2>
    1f2e:	2f 81       	ldd	r18, Y+7	; 0x07
    1f30:	38 85       	ldd	r19, Y+8	; 0x08
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <DIO_SetPinVal+0x64>
    1f38:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3a:	98 85       	ldd	r25, Y+8	; 0x08
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <DIO_SetPinVal+0x7a>
    1f40:	d2 c0       	rjmp	.+420    	; 0x20e6 <DIO_SetPinVal+0x208>
    1f42:	2f 81       	ldd	r18, Y+7	; 0x07
    1f44:	38 85       	ldd	r19, Y+8	; 0x08
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	71 f1       	breq	.+92     	; 0x1fa8 <DIO_SetPinVal+0xca>
    1f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4e:	98 85       	ldd	r25, Y+8	; 0x08
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	91 05       	cpc	r25, r1
    1f54:	e9 f1       	breq	.+122    	; 0x1fd0 <DIO_SetPinVal+0xf2>
    1f56:	c7 c0       	rjmp	.+398    	; 0x20e6 <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				SET_BIT(PORTA, Copy_Pin);
    1f58:	ab e3       	ldi	r26, 0x3B	; 59
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e3       	ldi	r30, 0x3B	; 59
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_SetPinVal+0x98>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <DIO_SetPinVal+0x94>
    1f7a:	84 2b       	or	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	b3 c0       	rjmp	.+358    	; 0x20e6 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB, Copy_Pin);
    1f80:	a8 e3       	ldi	r26, 0x38	; 56
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e8 e3       	ldi	r30, 0x38	; 56
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <DIO_SetPinVal+0xc0>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <DIO_SetPinVal+0xbc>
    1fa2:	84 2b       	or	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	9f c0       	rjmp	.+318    	; 0x20e6 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC, Copy_Pin);
    1fa8:	a5 e3       	ldi	r26, 0x35	; 53
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e5 e3       	ldi	r30, 0x35	; 53
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <DIO_SetPinVal+0xe8>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <DIO_SetPinVal+0xe4>
    1fca:	84 2b       	or	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	8b c0       	rjmp	.+278    	; 0x20e6 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD, Copy_Pin);
    1fd0:	a2 e3       	ldi	r26, 0x32	; 50
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e2 e3       	ldi	r30, 0x32	; 50
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <DIO_SetPinVal+0x110>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <DIO_SetPinVal+0x10c>
    1ff2:	84 2b       	or	r24, r20
    1ff4:	8c 93       	st	X, r24
    1ff6:	77 c0       	rjmp	.+238    	; 0x20e6 <DIO_SetPinVal+0x208>
				break;
			}
		} else if (DIO_LOW == Copy_uint8Value) {
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <DIO_SetPinVal+0x122>
    1ffe:	73 c0       	rjmp	.+230    	; 0x20e6 <DIO_SetPinVal+0x208>
			switch (Copy_Port) {
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3e 83       	std	Y+6, r19	; 0x06
    2008:	2d 83       	std	Y+5, r18	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	91 05       	cpc	r25, r1
    2012:	59 f1       	breq	.+86     	; 0x206a <DIO_SetPinVal+0x18c>
    2014:	2d 81       	ldd	r18, Y+5	; 0x05
    2016:	3e 81       	ldd	r19, Y+6	; 0x06
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	2c f4       	brge	.+10     	; 0x2028 <DIO_SetPinVal+0x14a>
    201e:	8d 81       	ldd	r24, Y+5	; 0x05
    2020:	9e 81       	ldd	r25, Y+6	; 0x06
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f0       	breq	.+26     	; 0x2040 <DIO_SetPinVal+0x162>
    2026:	5f c0       	rjmp	.+190    	; 0x20e6 <DIO_SetPinVal+0x208>
    2028:	2d 81       	ldd	r18, Y+5	; 0x05
    202a:	3e 81       	ldd	r19, Y+6	; 0x06
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	89 f1       	breq	.+98     	; 0x2094 <DIO_SetPinVal+0x1b6>
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	83 30       	cpi	r24, 0x03	; 3
    2038:	91 05       	cpc	r25, r1
    203a:	09 f4       	brne	.+2      	; 0x203e <DIO_SetPinVal+0x160>
    203c:	40 c0       	rjmp	.+128    	; 0x20be <DIO_SetPinVal+0x1e0>
    203e:	53 c0       	rjmp	.+166    	; 0x20e6 <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				CLEAR_BIT(PORTA, Copy_Pin);
    2040:	ab e3       	ldi	r26, 0x3B	; 59
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	eb e3       	ldi	r30, 0x3B	; 59
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	48 2f       	mov	r20, r24
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 2e       	mov	r0, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <DIO_SetPinVal+0x180>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	0a 94       	dec	r0
    2060:	e2 f7       	brpl	.-8      	; 0x205a <DIO_SetPinVal+0x17c>
    2062:	80 95       	com	r24
    2064:	84 23       	and	r24, r20
    2066:	8c 93       	st	X, r24
    2068:	3e c0       	rjmp	.+124    	; 0x20e6 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB, Copy_Pin);
    206a:	a8 e3       	ldi	r26, 0x38	; 56
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e8 e3       	ldi	r30, 0x38	; 56
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	48 2f       	mov	r20, r24
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <DIO_SetPinVal+0x1aa>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <DIO_SetPinVal+0x1a6>
    208c:	80 95       	com	r24
    208e:	84 23       	and	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	29 c0       	rjmp	.+82     	; 0x20e6 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC, Copy_Pin);
    2094:	a5 e3       	ldi	r26, 0x35	; 53
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e5 e3       	ldi	r30, 0x35	; 53
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <DIO_SetPinVal+0x1d4>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <DIO_SetPinVal+0x1d0>
    20b6:	80 95       	com	r24
    20b8:	84 23       	and	r24, r20
    20ba:	8c 93       	st	X, r24
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD, Copy_Pin);
    20be:	a2 e3       	ldi	r26, 0x32	; 50
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e2 e3       	ldi	r30, 0x32	; 50
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	48 2f       	mov	r20, r24
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_SetPinVal+0x1fe>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <DIO_SetPinVal+0x1fa>
    20e0:	80 95       	com	r24
    20e2:	84 23       	and	r24, r20
    20e4:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Local_uint8ErrorState;
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e8:	28 96       	adiw	r28, 0x08	; 8
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <DIO_SetPortDir>:

status_t DIO_SetPortDir(Port_t Copy_Port, uint8 Copy_uint8Direction) {
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <DIO_SetPortDir+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <DIO_SetPortDir+0x8>
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	8a 83       	std	Y+2, r24	; 0x02
    210a:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    210c:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	84 30       	cpi	r24, 0x04	; 4
    2112:	18 f0       	brcs	.+6      	; 0x211a <DIO_SetPortDir+0x20>
		Local_uint8ErrorState = DIO_DirErr;
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	32 c0       	rjmp	.+100    	; 0x217e <DIO_SetPortDir+0x84>
	} else {
		switch (Copy_Port) {
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	3d 83       	std	Y+5, r19	; 0x05
    2122:	2c 83       	std	Y+4, r18	; 0x04
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	9d 81       	ldd	r25, Y+5	; 0x05
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	91 05       	cpc	r25, r1
    212c:	d1 f0       	breq	.+52     	; 0x2162 <DIO_SetPortDir+0x68>
    212e:	2c 81       	ldd	r18, Y+4	; 0x04
    2130:	3d 81       	ldd	r19, Y+5	; 0x05
    2132:	22 30       	cpi	r18, 0x02	; 2
    2134:	31 05       	cpc	r19, r1
    2136:	2c f4       	brge	.+10     	; 0x2142 <DIO_SetPortDir+0x48>
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	61 f0       	breq	.+24     	; 0x2158 <DIO_SetPortDir+0x5e>
    2140:	1e c0       	rjmp	.+60     	; 0x217e <DIO_SetPortDir+0x84>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	22 30       	cpi	r18, 0x02	; 2
    2148:	31 05       	cpc	r19, r1
    214a:	81 f0       	breq	.+32     	; 0x216c <DIO_SetPortDir+0x72>
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	83 30       	cpi	r24, 0x03	; 3
    2152:	91 05       	cpc	r25, r1
    2154:	81 f0       	breq	.+32     	; 0x2176 <DIO_SetPortDir+0x7c>
    2156:	13 c0       	rjmp	.+38     	; 0x217e <DIO_SetPortDir+0x84>
		case DIO_PORTA:
			DDRA = Copy_uint8Direction;
    2158:	ea e3       	ldi	r30, 0x3A	; 58
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	80 83       	st	Z, r24
    2160:	0e c0       	rjmp	.+28     	; 0x217e <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTB:
			DDRB = Copy_uint8Direction;
    2162:	e7 e3       	ldi	r30, 0x37	; 55
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	80 83       	st	Z, r24
    216a:	09 c0       	rjmp	.+18     	; 0x217e <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTC:
			DDRC = Copy_uint8Direction;
    216c:	e4 e3       	ldi	r30, 0x34	; 52
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	80 83       	st	Z, r24
    2174:	04 c0       	rjmp	.+8      	; 0x217e <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTD:
			DDRD = Copy_uint8Direction;
    2176:	e1 e3       	ldi	r30, 0x31	; 49
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_uint8ErrorState;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <DIO_SetPinDir>:

status_t DIO_SetPinDir(Port_t Copy_Port, Pin_t Copy_Pin, Dir_t Copy_Direction) {
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	28 97       	sbiw	r28, 0x08	; 8
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	6b 83       	std	Y+3, r22	; 0x03
    21a8:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    21aa:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	84 30       	cpi	r24, 0x04	; 4
    21b0:	18 f0       	brcs	.+6      	; 0x21b8 <DIO_SetPinDir+0x28>
		Local_uint8ErrorState = DIO_DirErr;
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	89 83       	std	Y+1, r24	; 0x01
    21b6:	f0 c0       	rjmp	.+480    	; 0x2398 <DIO_SetPinDir+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	88 30       	cpi	r24, 0x08	; 8
    21bc:	18 f0       	brcs	.+6      	; 0x21c4 <DIO_SetPinDir+0x34>
		Local_uint8ErrorState = DIO_DirErr;
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	ea c0       	rjmp	.+468    	; 0x2398 <DIO_SetPinDir+0x208>
	} else {
		if (DIO_INPUT == Copy_Direction) {
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	88 23       	and	r24, r24
    21c8:	09 f0       	breq	.+2      	; 0x21cc <DIO_SetPinDir+0x3c>
    21ca:	74 c0       	rjmp	.+232    	; 0x22b4 <DIO_SetPinDir+0x124>
			switch (Copy_Port) {
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	38 87       	std	Y+8, r19	; 0x08
    21d4:	2f 83       	std	Y+7, r18	; 0x07
    21d6:	8f 81       	ldd	r24, Y+7	; 0x07
    21d8:	98 85       	ldd	r25, Y+8	; 0x08
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	91 05       	cpc	r25, r1
    21de:	59 f1       	breq	.+86     	; 0x2236 <DIO_SetPinDir+0xa6>
    21e0:	2f 81       	ldd	r18, Y+7	; 0x07
    21e2:	38 85       	ldd	r19, Y+8	; 0x08
    21e4:	22 30       	cpi	r18, 0x02	; 2
    21e6:	31 05       	cpc	r19, r1
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <DIO_SetPinDir+0x64>
    21ea:	8f 81       	ldd	r24, Y+7	; 0x07
    21ec:	98 85       	ldd	r25, Y+8	; 0x08
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f0       	breq	.+26     	; 0x220c <DIO_SetPinDir+0x7c>
    21f2:	d2 c0       	rjmp	.+420    	; 0x2398 <DIO_SetPinDir+0x208>
    21f4:	2f 81       	ldd	r18, Y+7	; 0x07
    21f6:	38 85       	ldd	r19, Y+8	; 0x08
    21f8:	22 30       	cpi	r18, 0x02	; 2
    21fa:	31 05       	cpc	r19, r1
    21fc:	89 f1       	breq	.+98     	; 0x2260 <DIO_SetPinDir+0xd0>
    21fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2200:	98 85       	ldd	r25, Y+8	; 0x08
    2202:	83 30       	cpi	r24, 0x03	; 3
    2204:	91 05       	cpc	r25, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <DIO_SetPinDir+0x7a>
    2208:	40 c0       	rjmp	.+128    	; 0x228a <DIO_SetPinDir+0xfa>
    220a:	c6 c0       	rjmp	.+396    	; 0x2398 <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				CLEAR_BIT(DDRA, Copy_Pin);
    220c:	aa e3       	ldi	r26, 0x3A	; 58
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ea e3       	ldi	r30, 0x3A	; 58
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	48 2f       	mov	r20, r24
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 2e       	mov	r0, r18
    2224:	02 c0       	rjmp	.+4      	; 0x222a <DIO_SetPinDir+0x9a>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	0a 94       	dec	r0
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <DIO_SetPinDir+0x96>
    222e:	80 95       	com	r24
    2230:	84 23       	and	r24, r20
    2232:	8c 93       	st	X, r24
    2234:	b1 c0       	rjmp	.+354    	; 0x2398 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB, Copy_Pin);
    2236:	a7 e3       	ldi	r26, 0x37	; 55
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e7 e3       	ldi	r30, 0x37	; 55
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	48 2f       	mov	r20, r24
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 2e       	mov	r0, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <DIO_SetPinDir+0xc4>
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <DIO_SetPinDir+0xc0>
    2258:	80 95       	com	r24
    225a:	84 23       	and	r24, r20
    225c:	8c 93       	st	X, r24
    225e:	9c c0       	rjmp	.+312    	; 0x2398 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC, Copy_Pin);
    2260:	a4 e3       	ldi	r26, 0x34	; 52
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e4 e3       	ldi	r30, 0x34	; 52
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	48 2f       	mov	r20, r24
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 2e       	mov	r0, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_SetPinDir+0xee>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	0a 94       	dec	r0
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_SetPinDir+0xea>
    2282:	80 95       	com	r24
    2284:	84 23       	and	r24, r20
    2286:	8c 93       	st	X, r24
    2288:	87 c0       	rjmp	.+270    	; 0x2398 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD, Copy_Pin);
    228a:	a1 e3       	ldi	r26, 0x31	; 49
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e1 e3       	ldi	r30, 0x31	; 49
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	48 2f       	mov	r20, r24
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 2e       	mov	r0, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <DIO_SetPinDir+0x118>
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	0a 94       	dec	r0
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <DIO_SetPinDir+0x114>
    22ac:	80 95       	com	r24
    22ae:	84 23       	and	r24, r20
    22b0:	8c 93       	st	X, r24
    22b2:	72 c0       	rjmp	.+228    	; 0x2398 <DIO_SetPinDir+0x208>
				break;
			}
		} else if (DIO_OUTPUT == Copy_Direction) {
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	09 f0       	breq	.+2      	; 0x22bc <DIO_SetPinDir+0x12c>
    22ba:	6e c0       	rjmp	.+220    	; 0x2398 <DIO_SetPinDir+0x208>
			switch (Copy_Port) {
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	3e 83       	std	Y+6, r19	; 0x06
    22c4:	2d 83       	std	Y+5, r18	; 0x05
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	91 05       	cpc	r25, r1
    22ce:	49 f1       	breq	.+82     	; 0x2322 <DIO_SetPinDir+0x192>
    22d0:	2d 81       	ldd	r18, Y+5	; 0x05
    22d2:	3e 81       	ldd	r19, Y+6	; 0x06
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <DIO_SetPinDir+0x154>
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	61 f0       	breq	.+24     	; 0x22fa <DIO_SetPinDir+0x16a>
    22e2:	5a c0       	rjmp	.+180    	; 0x2398 <DIO_SetPinDir+0x208>
    22e4:	2d 81       	ldd	r18, Y+5	; 0x05
    22e6:	3e 81       	ldd	r19, Y+6	; 0x06
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	71 f1       	breq	.+92     	; 0x234a <DIO_SetPinDir+0x1ba>
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	91 05       	cpc	r25, r1
    22f6:	e9 f1       	breq	.+122    	; 0x2372 <DIO_SetPinDir+0x1e2>
    22f8:	4f c0       	rjmp	.+158    	; 0x2398 <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				SET_BIT(DDRA, Copy_Pin);
    22fa:	aa e3       	ldi	r26, 0x3A	; 58
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	ea e3       	ldi	r30, 0x3A	; 58
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <DIO_SetPinDir+0x188>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <DIO_SetPinDir+0x184>
    231c:	84 2b       	or	r24, r20
    231e:	8c 93       	st	X, r24
    2320:	3b c0       	rjmp	.+118    	; 0x2398 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB, Copy_Pin);
    2322:	a7 e3       	ldi	r26, 0x37	; 55
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e7 e3       	ldi	r30, 0x37	; 55
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	48 2f       	mov	r20, r24
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	02 2e       	mov	r0, r18
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DIO_SetPinDir+0x1b0>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	0a 94       	dec	r0
    2342:	e2 f7       	brpl	.-8      	; 0x233c <DIO_SetPinDir+0x1ac>
    2344:	84 2b       	or	r24, r20
    2346:	8c 93       	st	X, r24
    2348:	27 c0       	rjmp	.+78     	; 0x2398 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC, Copy_Pin);
    234a:	a4 e3       	ldi	r26, 0x34	; 52
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e4 e3       	ldi	r30, 0x34	; 52
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 2e       	mov	r0, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_SetPinDir+0x1d8>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	0a 94       	dec	r0
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_SetPinDir+0x1d4>
    236c:	84 2b       	or	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	13 c0       	rjmp	.+38     	; 0x2398 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD, Copy_Pin);
    2372:	a1 e3       	ldi	r26, 0x31	; 49
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e1 e3       	ldi	r30, 0x31	; 49
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	48 2f       	mov	r20, r24
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <DIO_SetPinDir+0x200>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <DIO_SetPinDir+0x1fc>
    2394:	84 2b       	or	r24, r20
    2396:	8c 93       	st	X, r24
				break;
			}
		}
	}
	return Local_uint8ErrorState;
    2398:	89 81       	ldd	r24, Y+1	; 0x01
}
    239a:	28 96       	adiw	r28, 0x08	; 8
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <DIO_GetPinVal>:


status_t DIO_GetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8* Copy_pvValue)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	27 97       	sbiw	r28, 0x07	; 7
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	8a 83       	std	Y+2, r24	; 0x02
    23c2:	6b 83       	std	Y+3, r22	; 0x03
    23c4:	5d 83       	std	Y+5, r21	; 0x05
    23c6:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    23c8:	19 82       	std	Y+1, r1	; 0x01

		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	84 30       	cpi	r24, 0x04	; 4
    23ce:	18 f0       	brcs	.+6      	; 0x23d6 <DIO_GetPinVal+0x2a>
			Local_uint8ErrorState = DIO_GetErr;
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	76 c0       	rjmp	.+236    	; 0x24c2 <DIO_GetPinVal+0x116>
		} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	88 30       	cpi	r24, 0x08	; 8
    23da:	18 f0       	brcs	.+6      	; 0x23e2 <DIO_GetPinVal+0x36>
			Local_uint8ErrorState = DIO_GetErr;
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	70 c0       	rjmp	.+224    	; 0x24c2 <DIO_GetPinVal+0x116>
		} else {
			switch (Copy_Port)
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	3f 83       	std	Y+7, r19	; 0x07
    23ea:	2e 83       	std	Y+6, r18	; 0x06
    23ec:	4e 81       	ldd	r20, Y+6	; 0x06
    23ee:	5f 81       	ldd	r21, Y+7	; 0x07
    23f0:	41 30       	cpi	r20, 0x01	; 1
    23f2:	51 05       	cpc	r21, r1
    23f4:	59 f1       	breq	.+86     	; 0x244c <DIO_GetPinVal+0xa0>
    23f6:	8e 81       	ldd	r24, Y+6	; 0x06
    23f8:	9f 81       	ldd	r25, Y+7	; 0x07
    23fa:	82 30       	cpi	r24, 0x02	; 2
    23fc:	91 05       	cpc	r25, r1
    23fe:	34 f4       	brge	.+12     	; 0x240c <DIO_GetPinVal+0x60>
    2400:	2e 81       	ldd	r18, Y+6	; 0x06
    2402:	3f 81       	ldd	r19, Y+7	; 0x07
    2404:	21 15       	cp	r18, r1
    2406:	31 05       	cpc	r19, r1
    2408:	69 f0       	breq	.+26     	; 0x2424 <DIO_GetPinVal+0x78>
    240a:	5b c0       	rjmp	.+182    	; 0x24c2 <DIO_GetPinVal+0x116>
    240c:	4e 81       	ldd	r20, Y+6	; 0x06
    240e:	5f 81       	ldd	r21, Y+7	; 0x07
    2410:	42 30       	cpi	r20, 0x02	; 2
    2412:	51 05       	cpc	r21, r1
    2414:	79 f1       	breq	.+94     	; 0x2474 <DIO_GetPinVal+0xc8>
    2416:	8e 81       	ldd	r24, Y+6	; 0x06
    2418:	9f 81       	ldd	r25, Y+7	; 0x07
    241a:	83 30       	cpi	r24, 0x03	; 3
    241c:	91 05       	cpc	r25, r1
    241e:	09 f4       	brne	.+2      	; 0x2422 <DIO_GetPinVal+0x76>
    2420:	3d c0       	rjmp	.+122    	; 0x249c <DIO_GetPinVal+0xf0>
    2422:	4f c0       	rjmp	.+158    	; 0x24c2 <DIO_GetPinVal+0x116>
			{case DIO_PORTA : *Copy_pvValue=GET_BIT(PINA,Copy_Pin);break;
    2424:	e9 e3       	ldi	r30, 0x39	; 57
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a9 01       	movw	r20, r18
    2436:	02 c0       	rjmp	.+4      	; 0x243c <DIO_GetPinVal+0x90>
    2438:	55 95       	asr	r21
    243a:	47 95       	ror	r20
    243c:	8a 95       	dec	r24
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <DIO_GetPinVal+0x8c>
    2440:	ca 01       	movw	r24, r20
    2442:	81 70       	andi	r24, 0x01	; 1
    2444:	ec 81       	ldd	r30, Y+4	; 0x04
    2446:	fd 81       	ldd	r31, Y+5	; 0x05
    2448:	80 83       	st	Z, r24
    244a:	3b c0       	rjmp	.+118    	; 0x24c2 <DIO_GetPinVal+0x116>
			case DIO_PORTB : *Copy_pvValue=GET_BIT(PINB,Copy_Pin);break;
    244c:	e6 e3       	ldi	r30, 0x36	; 54
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a9 01       	movw	r20, r18
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <DIO_GetPinVal+0xb8>
    2460:	55 95       	asr	r21
    2462:	47 95       	ror	r20
    2464:	8a 95       	dec	r24
    2466:	e2 f7       	brpl	.-8      	; 0x2460 <DIO_GetPinVal+0xb4>
    2468:	ca 01       	movw	r24, r20
    246a:	81 70       	andi	r24, 0x01	; 1
    246c:	ec 81       	ldd	r30, Y+4	; 0x04
    246e:	fd 81       	ldd	r31, Y+5	; 0x05
    2470:	80 83       	st	Z, r24
    2472:	27 c0       	rjmp	.+78     	; 0x24c2 <DIO_GetPinVal+0x116>
			case DIO_PORTC : *Copy_pvValue=GET_BIT(PINC,Copy_Pin);break;
    2474:	e3 e3       	ldi	r30, 0x33	; 51
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a9 01       	movw	r20, r18
    2486:	02 c0       	rjmp	.+4      	; 0x248c <DIO_GetPinVal+0xe0>
    2488:	55 95       	asr	r21
    248a:	47 95       	ror	r20
    248c:	8a 95       	dec	r24
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <DIO_GetPinVal+0xdc>
    2490:	ca 01       	movw	r24, r20
    2492:	81 70       	andi	r24, 0x01	; 1
    2494:	ec 81       	ldd	r30, Y+4	; 0x04
    2496:	fd 81       	ldd	r31, Y+5	; 0x05
    2498:	80 83       	st	Z, r24
    249a:	13 c0       	rjmp	.+38     	; 0x24c2 <DIO_GetPinVal+0x116>
			case DIO_PORTD : *Copy_pvValue=GET_BIT(PIND,Copy_Pin);break;
    249c:	e0 e3       	ldi	r30, 0x30	; 48
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a9 01       	movw	r20, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <DIO_GetPinVal+0x108>
    24b0:	55 95       	asr	r21
    24b2:	47 95       	ror	r20
    24b4:	8a 95       	dec	r24
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <DIO_GetPinVal+0x104>
    24b8:	ca 01       	movw	r24, r20
    24ba:	81 70       	andi	r24, 0x01	; 1
    24bc:	ec 81       	ldd	r30, Y+4	; 0x04
    24be:	fd 81       	ldd	r31, Y+5	; 0x05
    24c0:	80 83       	st	Z, r24

			}
		}
return Local_uint8ErrorState;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c4:	27 96       	adiw	r28, 0x07	; 7
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <DIO_GetPortVal>:


uint8 DIO_GetPortVal(Port_t Copy_Port,uint8* Copy_pvValue)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <DIO_GetPortVal+0x6>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <DIO_GetPortVal+0x8>
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <DIO_GetPortVal+0xa>
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	8a 83       	std	Y+2, r24	; 0x02
    24e6:	7c 83       	std	Y+4, r23	; 0x04
    24e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8ErrorState = 0;
    24ea:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	18 f0       	brcs	.+6      	; 0x24f8 <DIO_GetPortVal+0x22>
			Local_uint8ErrorState = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	3a c0       	rjmp	.+116    	; 0x256c <DIO_GetPortVal+0x96>
		} else {
			switch(Copy_Port)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	3e 83       	std	Y+6, r19	; 0x06
    2500:	2d 83       	std	Y+5, r18	; 0x05
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	91 05       	cpc	r25, r1
    250a:	e1 f0       	breq	.+56     	; 0x2544 <DIO_GetPortVal+0x6e>
    250c:	2d 81       	ldd	r18, Y+5	; 0x05
    250e:	3e 81       	ldd	r19, Y+6	; 0x06
    2510:	22 30       	cpi	r18, 0x02	; 2
    2512:	31 05       	cpc	r19, r1
    2514:	2c f4       	brge	.+10     	; 0x2520 <DIO_GetPortVal+0x4a>
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	61 f0       	breq	.+24     	; 0x2536 <DIO_GetPortVal+0x60>
    251e:	26 c0       	rjmp	.+76     	; 0x256c <DIO_GetPortVal+0x96>
    2520:	2d 81       	ldd	r18, Y+5	; 0x05
    2522:	3e 81       	ldd	r19, Y+6	; 0x06
    2524:	22 30       	cpi	r18, 0x02	; 2
    2526:	31 05       	cpc	r19, r1
    2528:	a1 f0       	breq	.+40     	; 0x2552 <DIO_GetPortVal+0x7c>
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	83 30       	cpi	r24, 0x03	; 3
    2530:	91 05       	cpc	r25, r1
    2532:	b1 f0       	breq	.+44     	; 0x2560 <DIO_GetPortVal+0x8a>
    2534:	1b c0       	rjmp	.+54     	; 0x256c <DIO_GetPortVal+0x96>
			{case DIO_PORTA:*Copy_pvValue=PINA;break;
    2536:	e9 e3       	ldi	r30, 0x39	; 57
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	eb 81       	ldd	r30, Y+3	; 0x03
    253e:	fc 81       	ldd	r31, Y+4	; 0x04
    2540:	80 83       	st	Z, r24
    2542:	14 c0       	rjmp	.+40     	; 0x256c <DIO_GetPortVal+0x96>
			case DIO_PORTB:*Copy_pvValue=PINB;break;
    2544:	e6 e3       	ldi	r30, 0x36	; 54
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	eb 81       	ldd	r30, Y+3	; 0x03
    254c:	fc 81       	ldd	r31, Y+4	; 0x04
    254e:	80 83       	st	Z, r24
    2550:	0d c0       	rjmp	.+26     	; 0x256c <DIO_GetPortVal+0x96>
			case DIO_PORTC:*Copy_pvValue=PINC;break;
    2552:	e3 e3       	ldi	r30, 0x33	; 51
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	eb 81       	ldd	r30, Y+3	; 0x03
    255a:	fc 81       	ldd	r31, Y+4	; 0x04
    255c:	80 83       	st	Z, r24
    255e:	06 c0       	rjmp	.+12     	; 0x256c <DIO_GetPortVal+0x96>
			case DIO_PORTD:*Copy_pvValue=PIND;break;
    2560:	e0 e3       	ldi	r30, 0x30	; 48
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	eb 81       	ldd	r30, Y+3	; 0x03
    2568:	fc 81       	ldd	r31, Y+4	; 0x04
    256a:	80 83       	st	Z, r24
			}
		}

return Local_uint8ErrorState;
    256c:	89 81       	ldd	r24, Y+1	; 0x01
}
    256e:	26 96       	adiw	r28, 0x06	; 6
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <ADC_voidInit>:
#include "../inc/ADC_interface.h"
#include "../inc/ADC_register.h"
#include "../inc/ADC_config.h"
#include "../inc/ADC_private.h"

void ADC_voidInit(void) {
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	/*PRE-SCALER SELECTION*/
	ADCSRA_Reg->ADPS = DESIRED_PRE_SCALER;
    2588:	e6 e2       	ldi	r30, 0x26	; 38
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	88 7f       	andi	r24, 0xF8	; 248
    2590:	83 60       	ori	r24, 0x03	; 3
    2592:	80 83       	st	Z, r24

	/*Choosing the voltage reference*/
	ADMUX_Reg->REFS = DESIRED_VOLTAGE_REF;
    2594:	e7 e2       	ldi	r30, 0x27	; 39
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8f 73       	andi	r24, 0x3F	; 63
    259c:	80 64       	ori	r24, 0x40	; 64
    259e:	80 83       	st	Z, r24
	/*choose the Resolution*/
	ADMUX_Reg->ADLAR = RIGHT;
    25a0:	e7 e2       	ldi	r30, 0x27	; 39
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	8f 7d       	andi	r24, 0xDF	; 223
    25a8:	80 83       	st	Z, r24

#ifdef AUTO_TREGERED

	ADCSRA_Reg->ADATE=ENABLE;
    25aa:	e6 e2       	ldi	r30, 0x26	; 38
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	80 62       	ori	r24, 0x20	; 32
    25b2:	80 83       	st	Z, r24

	ADC_SFIOR_Reg->ADTS  =  AUTO_TRIGER_SOURCE;
    25b4:	e0 e5       	ldi	r30, 0x50	; 80
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	8f 71       	andi	r24, 0x1F	; 31
    25bc:	80 68       	ori	r24, 0x80	; 128
    25be:	80 83       	st	Z, r24

#endif
	/*ENABLE THE ADC*/
	ADCSRA_Reg->ADEN = ENABLE;
    25c0:	e6 e2       	ldi	r30, 0x26	; 38
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 68       	ori	r24, 0x80	; 128
    25c8:	80 83       	st	Z, r24

}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <ADC_uint8StartConversionSynchronus>:
ADC_Status_t ADC_uint8StartConversionSynchronus(Channel_t Copy_uint8channel,uint16* copy_uint16PuReading) {
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	28 97       	sbiw	r28, 0x08	; 8
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	8e 83       	std	Y+6, r24	; 0x06
    25e6:	78 87       	std	Y+8, r23	; 0x08
    25e8:	6f 83       	std	Y+7, r22	; 0x07
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    25ea:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_uint32Counter = 0;
    25ec:	19 82       	std	Y+1, r1	; 0x01
    25ee:	1a 82       	std	Y+2, r1	; 0x02
    25f0:	1b 82       	std	Y+3, r1	; 0x03
    25f2:	1c 82       	std	Y+4, r1	; 0x04
	if (NULL == copy_uint16PuReading) {
    25f4:	8f 81       	ldd	r24, Y+7	; 0x07
    25f6:	98 85       	ldd	r25, Y+8	; 0x08
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	19 f4       	brne	.+6      	; 0x2602 <ADC_uint8StartConversionSynchronus+0x32>
		Local_ErrorStatus = ADC_POINTER_Err;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	4a c0       	rjmp	.+148    	; 0x2696 <ADC_uint8StartConversionSynchronus+0xc6>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    2602:	8e 81       	ldd	r24, Y+6	; 0x06
    2604:	88 30       	cpi	r24, 0x08	; 8
    2606:	18 f0       	brcs	.+6      	; 0x260e <ADC_uint8StartConversionSynchronus+0x3e>
		Local_ErrorStatus = ADC_ChannelErr;
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	44 c0       	rjmp	.+136    	; 0x2696 <ADC_uint8StartConversionSynchronus+0xc6>
	} else {
		/*Select the Channel*/
		ADMUX_Reg->MUX = Copy_uint8channel;
    260e:	e7 e2       	ldi	r30, 0x27	; 39
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	8e 81       	ldd	r24, Y+6	; 0x06
    2614:	8f 71       	andi	r24, 0x1F	; 31
    2616:	98 2f       	mov	r25, r24
    2618:	9f 71       	andi	r25, 0x1F	; 31
    261a:	80 81       	ld	r24, Z
    261c:	80 7e       	andi	r24, 0xE0	; 224
    261e:	89 2b       	or	r24, r25
    2620:	80 83       	st	Z, r24
    2622:	0b c0       	rjmp	.+22     	; 0x263a <ADC_uint8StartConversionSynchronus+0x6a>
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
			Local_uint32Counter++;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	ab 81       	ldd	r26, Y+3	; 0x03
    262a:	bc 81       	ldd	r27, Y+4	; 0x04
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	a1 1d       	adc	r26, r1
    2630:	b1 1d       	adc	r27, r1
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	ab 83       	std	Y+3, r26	; 0x03
    2638:	bc 83       	std	Y+4, r27	; 0x04
#ifndef AUTO_TREGERED
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
    263a:	e6 e2       	ldi	r30, 0x26	; 38
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	80 71       	andi	r24, 0x10	; 16
    2642:	88 23       	and	r24, r24
    2644:	61 f4       	brne	.+24     	; 0x265e <ADC_uint8StartConversionSynchronus+0x8e>
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	ab 81       	ldd	r26, Y+3	; 0x03
    264c:	bc 81       	ldd	r27, Y+4	; 0x04
    264e:	84 3f       	cpi	r24, 0xF4	; 244
    2650:	21 e0       	ldi	r18, 0x01	; 1
    2652:	92 07       	cpc	r25, r18
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	a2 07       	cpc	r26, r18
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	b2 07       	cpc	r27, r18
    265c:	18 f3       	brcs	.-58     	; 0x2624 <ADC_uint8StartConversionSynchronus+0x54>
			Local_uint32Counter++;
		}
		if (Local_uint32Counter == TIME_OUT) {
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02
    2662:	ab 81       	ldd	r26, Y+3	; 0x03
    2664:	bc 81       	ldd	r27, Y+4	; 0x04
    2666:	84 3f       	cpi	r24, 0xF4	; 244
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	92 07       	cpc	r25, r18
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	a2 07       	cpc	r26, r18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	b2 07       	cpc	r27, r18
    2674:	19 f4       	brne	.+6      	; 0x267c <ADC_uint8StartConversionSynchronus+0xac>
			Local_ErrorStatus = ADC_TIME_OUTErr;
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	8d 83       	std	Y+5, r24	; 0x05
    267a:	0d c0       	rjmp	.+26     	; 0x2696 <ADC_uint8StartConversionSynchronus+0xc6>
		} else {
			/*Clear the valg*/
			ADCSRA_Reg->ADIF = ENABLE;
    267c:	e6 e2       	ldi	r30, 0x26	; 38
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	80 61       	ori	r24, 0x10	; 16
    2684:	80 83       	st	Z, r24

#if     DATA_SIZE == BIT_10_MACRO
			*copy_uint16PuReading=ADC;
    2686:	e4 e2       	ldi	r30, 0x24	; 36
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	ef 81       	ldd	r30, Y+7	; 0x07
    2690:	f8 85       	ldd	r31, Y+8	; 0x08
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24

		}

	}

	return Local_ErrorStatus;
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2698:	28 96       	adiw	r28, 0x08	; 8
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <ADC_uint8StartConversionASynchronus>:

ADC_Status_t ADC_uint8StartConversionASynchronus(Channel_t Copy_uint8channel,void (*copy_PvNotifacation)(void), uint16* copy_uint16PuReading) {
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <ADC_uint8StartConversionASynchronus+0x6>
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <ADC_uint8StartConversionASynchronus+0x8>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <ADC_uint8StartConversionASynchronus+0xa>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	8a 83       	std	Y+2, r24	; 0x02
    26ba:	7c 83       	std	Y+4, r23	; 0x04
    26bc:	6b 83       	std	Y+3, r22	; 0x03
    26be:	5e 83       	std	Y+6, r21	; 0x06
    26c0:	4d 83       	std	Y+5, r20	; 0x05
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    26c2:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == copy_uint16PuReading) {
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	19 f4       	brne	.+6      	; 0x26d2 <ADC_uint8StartConversionASynchronus+0x28>
		Local_ErrorStatus = ADC_POINTER_Err;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	1e c0       	rjmp	.+60     	; 0x270e <ADC_uint8StartConversionASynchronus+0x64>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	88 30       	cpi	r24, 0x08	; 8
    26d6:	18 f0       	brcs	.+6      	; 0x26de <ADC_uint8StartConversionASynchronus+0x34>
		Local_ErrorStatus = ADC_ChannelErr;
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	18 c0       	rjmp	.+48     	; 0x270e <ADC_uint8StartConversionASynchronus+0x64>
	} else if (NULL == copy_PvNotifacation) {
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	19 f4       	brne	.+6      	; 0x26ec <ADC_uint8StartConversionASynchronus+0x42>
		Local_ErrorStatus = ADC_POINTER_Err;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	11 c0       	rjmp	.+34     	; 0x270e <ADC_uint8StartConversionASynchronus+0x64>
	} else {

		Global_PvNotifacation = copy_PvNotifacation;
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	90 93 a7 01 	sts	0x01A7, r25
    26f4:	80 93 a6 01 	sts	0x01A6, r24

		/*Assign Address of Receive Variable in Global Pointer to be used in ISR*/
		Global_uint16PuReading = copy_uint16PuReading;
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	90 93 a9 01 	sts	0x01A9, r25
    2700:	80 93 a8 01 	sts	0x01A8, r24


		/* ADC Conversion Complete Interrupt Enable*/
		ADCSRA_Reg->ADIE = ENABLE;
    2704:	e6 e2       	ldi	r30, 0x26	; 38
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	88 60       	ori	r24, 0x08	; 8
    270c:	80 83       	st	Z, r24
#ifndef AUTO_TREGERED
		/*ADC Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
	}
	return Local_ErrorStatus;
    270e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2710:	26 96       	adiw	r28, 0x06	; 6
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <__vector_16>:



void __vector_16(void) {
    2722:	1f 92       	push	r1
    2724:	0f 92       	push	r0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	0f 92       	push	r0
    272a:	11 24       	eor	r1, r1
    272c:	2f 93       	push	r18
    272e:	3f 93       	push	r19
    2730:	4f 93       	push	r20
    2732:	5f 93       	push	r21
    2734:	6f 93       	push	r22
    2736:	7f 93       	push	r23
    2738:	8f 93       	push	r24
    273a:	9f 93       	push	r25
    273c:	af 93       	push	r26
    273e:	bf 93       	push	r27
    2740:	ef 93       	push	r30
    2742:	ff 93       	push	r31
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
#if     DATA_SIZE == BIT_10_MACRO
	*Global_uint16PuReading=ADC;
    274c:	a0 91 a8 01 	lds	r26, 0x01A8
    2750:	b0 91 a9 01 	lds	r27, 0x01A9
    2754:	e4 e2       	ldi	r30, 0x24	; 36
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	8d 93       	st	X+, r24
    275e:	9c 93       	st	X, r25
#elif  DATA_SIZE == BIT_8_MACRO
	*Global_uint16PuReading = ADC >> 2;
#endif

	/*Execute Notification Function*/
	Global_PvNotifacation();
    2760:	e0 91 a6 01 	lds	r30, 0x01A6
    2764:	f0 91 a7 01 	lds	r31, 0x01A7
    2768:	09 95       	icall
}
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	ff 91       	pop	r31
    2770:	ef 91       	pop	r30
    2772:	bf 91       	pop	r27
    2774:	af 91       	pop	r26
    2776:	9f 91       	pop	r25
    2778:	8f 91       	pop	r24
    277a:	7f 91       	pop	r23
    277c:	6f 91       	pop	r22
    277e:	5f 91       	pop	r21
    2780:	4f 91       	pop	r20
    2782:	3f 91       	pop	r19
    2784:	2f 91       	pop	r18
    2786:	0f 90       	pop	r0
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	0f 90       	pop	r0
    278c:	1f 90       	pop	r1
    278e:	18 95       	reti

00002790 <delay_ms>:
#include "../../../LIB/STD_TYPES.h"
#include "../../../LIB/BIT_MATH.h"
#include "../inc/CLCD_interface.h"
#include "../../../MCAL/DIO/inc/DIO_INTERFACE.h"

void delay_ms(uint16 milliseconds) {
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	2c 97       	sbiw	r28, 0x0c	; 12
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	9c 87       	std	Y+12, r25	; 0x0c
    27a6:	8b 87       	std	Y+11, r24	; 0x0b
    // Assuming 4 cycles per loop iteration for an 8 MHz clock
    const uint16 cycles_per_ms = 100; // Calculated for 1 ms delay
    27a8:	84 e6       	ldi	r24, 0x64	; 100
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9e 83       	std	Y+6, r25	; 0x06
    27ae:	8d 83       	std	Y+5, r24	; 0x05
    uint32 total_iterations = milliseconds * cycles_per_ms;
    27b0:	2b 85       	ldd	r18, Y+11	; 0x0b
    27b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	ac 01       	movw	r20, r24
    27ba:	24 9f       	mul	r18, r20
    27bc:	c0 01       	movw	r24, r0
    27be:	25 9f       	mul	r18, r21
    27c0:	90 0d       	add	r25, r0
    27c2:	34 9f       	mul	r19, r20
    27c4:	90 0d       	add	r25, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	cc 01       	movw	r24, r24
    27ca:	a0 e0       	ldi	r26, 0x00	; 0
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	ab 83       	std	Y+3, r26	; 0x03
    27d4:	bc 83       	std	Y+4, r27	; 0x04

    // Loop for the calculated number of iterations
    for (volatile uint32 i = 0; i < total_iterations; i++) {
    27d6:	1f 82       	std	Y+7, r1	; 0x07
    27d8:	18 86       	std	Y+8, r1	; 0x08
    27da:	19 86       	std	Y+9, r1	; 0x09
    27dc:	1a 86       	std	Y+10, r1	; 0x0a
    27de:	0b c0       	rjmp	.+22     	; 0x27f6 <delay_ms+0x66>
    27e0:	8f 81       	ldd	r24, Y+7	; 0x07
    27e2:	98 85       	ldd	r25, Y+8	; 0x08
    27e4:	a9 85       	ldd	r26, Y+9	; 0x09
    27e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	a1 1d       	adc	r26, r1
    27ec:	b1 1d       	adc	r27, r1
    27ee:	8f 83       	std	Y+7, r24	; 0x07
    27f0:	98 87       	std	Y+8, r25	; 0x08
    27f2:	a9 87       	std	Y+9, r26	; 0x09
    27f4:	ba 87       	std	Y+10, r27	; 0x0a
    27f6:	2f 81       	ldd	r18, Y+7	; 0x07
    27f8:	38 85       	ldd	r19, Y+8	; 0x08
    27fa:	49 85       	ldd	r20, Y+9	; 0x09
    27fc:	5a 85       	ldd	r21, Y+10	; 0x0a
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	ab 81       	ldd	r26, Y+3	; 0x03
    2804:	bc 81       	ldd	r27, Y+4	; 0x04
    2806:	28 17       	cp	r18, r24
    2808:	39 07       	cpc	r19, r25
    280a:	4a 07       	cpc	r20, r26
    280c:	5b 07       	cpc	r21, r27
    280e:	40 f3       	brcs	.-48     	; 0x27e0 <delay_ms+0x50>
        // Empty loop to create the delay
    }
}
    2810:	2c 96       	adiw	r28, 0x0c	; 12
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(uint8 copy_uint8Command)
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	0f 92       	push	r0
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	89 83       	std	Y+1, r24	; 0x01
	/*Setting RS pin to low*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
/*Setting RW pin low for write*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>

/*Set command data pins*/
DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Command);
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	69 81       	ldd	r22, Y+1	; 0x01
    2846:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_SetPortVal>

/*Send Enable pulse*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	62 e0       	ldi	r22, 0x02	; 2
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
delay_ms(2);
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 c8 13 	call	0x2790	; 0x2790 <delay_ms>
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	62 e0       	ldi	r22, 0x02	; 2
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
}
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
	/*Wait more that 30 ms*/
	delay_ms(40);
    2876:	88 e2       	ldi	r24, 0x28	; 40
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 c8 13 	call	0x2790	; 0x2790 <delay_ms>

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
    287e:	88 e3       	ldi	r24, 0x38	; 56
    2880:	0e 94 11 14 	call	0x2822	; 0x2822 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
    2884:	8c e0       	ldi	r24, 0x0C	; 12
    2886:	0e 94 11 14 	call	0x2822	; 0x2822 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(0b1);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	0e 94 11 14 	call	0x2822	; 0x2822 <CLCD_voidSendCommand>



}
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <CLCD_voidSendData>:


void CLCD_voidSendData(uint8 copy_uint8Data)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	0f 92       	push	r0
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	89 83       	std	Y+1, r24	; 0x01

	/*Setting RS pin to HIGH*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
	/*Setting RW pin low for write*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>

	/*Set data pins*/
	DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Data);
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	69 81       	ldd	r22, Y+1	; 0x01
    28ba:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_SetPortVal>

	/*Send Enable pulse*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
	delay_ms(2);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 c8 13 	call	0x2790	; 0x2790 <delay_ms>
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	62 e0       	ldi	r22, 0x02	; 2
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>


}
    28da:	0f 90       	pop	r0
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <CLCD_voidSendString>:

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <CLCD_voidSendString+0x6>
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	9b 83       	std	Y+3, r25	; 0x03
    28f0:	8a 83       	std	Y+2, r24	; 0x02
uint8 Local_uint8Counter=0;
    28f2:	19 82       	std	Y+1, r1	; 0x01
    28f4:	0e c0       	rjmp	.+28     	; 0x2912 <CLCD_voidSendString+0x30>
while(Copy_uint8String[Local_uint8Counter]!='\0')
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	80 81       	ld	r24, Z
    2908:	0e 94 4b 14 	call	0x2896	; 0x2896 <CLCD_voidSendData>
    Local_uint8Counter++;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
uint8 Local_uint8Counter=0;
while(Copy_uint8String[Local_uint8Counter]!='\0')
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	80 81       	ld	r24, Z
    2924:	88 23       	and	r24, r24
    2926:	39 f7       	brne	.-50     	; 0x28f6 <CLCD_voidSendString+0x14>
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    Local_uint8Counter++;
}

}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <CLCD_voidGoToXY+0x6>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	6b 83       	std	Y+3, r22	; 0x03
  uint8 Local_uint8Address;

  if(Copy_uint8Xposition==0)
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	88 23       	and	r24, r24
    2948:	19 f4       	brne	.+6      	; 0x2950 <CLCD_voidGoToXY+0x1c>
  {
	  Local_uint8Address=Copy_uint8Yposition;
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	06 c0       	rjmp	.+12     	; 0x295c <CLCD_voidGoToXY+0x28>
  }
  else if(Copy_uint8Xposition==1)
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	19 f4       	brne	.+6      	; 0x295c <CLCD_voidGoToXY+0x28>

  {
	  Local_uint8Address=Copy_uint8Yposition+0x40;
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	80 5c       	subi	r24, 0xC0	; 192
    295a:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_voidSendCommand(Local_uint8Address|(1<<7));
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	80 68       	ori	r24, 0x80	; 128
    2960:	0e 94 11 14 	call	0x2822	; 0x2822 <CLCD_voidSendCommand>
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(sint32 copy_uint32Number)
{
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	60 97       	sbiw	r28, 0x10	; 16
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	6d 87       	std	Y+13, r22	; 0x0d
    298a:	7e 87       	std	Y+14, r23	; 0x0e
    298c:	8f 87       	std	Y+15, r24	; 0x0f
    298e:	98 8b       	std	Y+16, r25	; 0x10
	if(copy_uint32Number<0)
    2990:	8d 85       	ldd	r24, Y+13	; 0x0d
    2992:	9e 85       	ldd	r25, Y+14	; 0x0e
    2994:	af 85       	ldd	r26, Y+15	; 0x0f
    2996:	b8 89       	ldd	r27, Y+16	; 0x10
    2998:	bb 23       	and	r27, r27
    299a:	94 f4       	brge	.+36     	; 0x29c0 <CLCD_voidWriteNumber+0x50>
	{
		CLCD_voidSendData('-');
    299c:	8d e2       	ldi	r24, 0x2D	; 45
    299e:	0e 94 4b 14 	call	0x2896	; 0x2896 <CLCD_voidSendData>
		copy_uint32Number= -copy_uint32Number;
    29a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a6:	af 85       	ldd	r26, Y+15	; 0x0f
    29a8:	b8 89       	ldd	r27, Y+16	; 0x10
    29aa:	b0 95       	com	r27
    29ac:	a0 95       	com	r26
    29ae:	90 95       	com	r25
    29b0:	81 95       	neg	r24
    29b2:	9f 4f       	sbci	r25, 0xFF	; 255
    29b4:	af 4f       	sbci	r26, 0xFF	; 255
    29b6:	bf 4f       	sbci	r27, 0xFF	; 255
    29b8:	8d 87       	std	Y+13, r24	; 0x0d
    29ba:	9e 87       	std	Y+14, r25	; 0x0e
    29bc:	af 87       	std	Y+15, r26	; 0x0f
    29be:	b8 8b       	std	Y+16, r27	; 0x10
	}
	if(copy_uint32Number==0)
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	af 85       	ldd	r26, Y+15	; 0x0f
    29c6:	b8 89       	ldd	r27, Y+16	; 0x10
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	a1 05       	cpc	r26, r1
    29cc:	b1 05       	cpc	r27, r1
    29ce:	21 f4       	brne	.+8      	; 0x29d8 <CLCD_voidWriteNumber+0x68>
	{
		CLCD_voidSendData('0');
    29d0:	80 e3       	ldi	r24, 0x30	; 48
    29d2:	0e 94 4b 14 	call	0x2896	; 0x2896 <CLCD_voidSendData>
    29d6:	50 c0       	rjmp	.+160    	; 0x2a78 <CLCD_voidWriteNumber+0x108>
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
    29d8:	1a 82       	std	Y+2, r1	; 0x02
    29da:	2e c0       	rjmp	.+92     	; 0x2a38 <CLCD_voidWriteNumber+0xc8>
while(copy_uint32Number>0)
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	08 2f       	mov	r16, r24
    29e0:	10 e0       	ldi	r17, 0x00	; 0
    29e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e6:	af 85       	ldd	r26, Y+15	; 0x0f
    29e8:	b8 89       	ldd	r27, Y+16	; 0x10
    29ea:	2a e0       	ldi	r18, 0x0A	; 10
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__divmodsi4>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	28 2f       	mov	r18, r24
    2a00:	20 5d       	subi	r18, 0xD0	; 208
    2a02:	ce 01       	movw	r24, r28
    2a04:	03 96       	adiw	r24, 0x03	; 3
    2a06:	fc 01       	movw	r30, r24
    2a08:	e0 0f       	add	r30, r16
    2a0a:	f1 1f       	adc	r31, r17
    2a0c:	20 83       	st	Z, r18
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	8f 5f       	subi	r24, 0xFF	; 255
    2a12:	8a 83       	std	Y+2, r24	; 0x02
	copy_uint32Number/=10;
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	af 85       	ldd	r26, Y+15	; 0x0f
    2a1a:	b8 89       	ldd	r27, Y+16	; 0x10
    2a1c:	2a e0       	ldi	r18, 0x0A	; 10
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__divmodsi4>
    2a2c:	da 01       	movw	r26, r20
    2a2e:	c9 01       	movw	r24, r18
    2a30:	8d 87       	std	Y+13, r24	; 0x0d
    2a32:	9e 87       	std	Y+14, r25	; 0x0e
    2a34:	af 87       	std	Y+15, r26	; 0x0f
    2a36:	b8 8b       	std	Y+16, r27	; 0x10
		CLCD_voidSendData('0');
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
while(copy_uint32Number>0)
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3c:	af 85       	ldd	r26, Y+15	; 0x0f
    2a3e:	b8 89       	ldd	r27, Y+16	; 0x10
    2a40:	18 16       	cp	r1, r24
    2a42:	19 06       	cpc	r1, r25
    2a44:	1a 06       	cpc	r1, r26
    2a46:	1b 06       	cpc	r1, r27
    2a48:	4c f2       	brlt	.-110    	; 0x29dc <CLCD_voidWriteNumber+0x6c>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	11 c0       	rjmp	.+34     	; 0x2a72 <CLCD_voidWriteNumber+0x102>
{
	CLCD_voidSendData(NUM[i-1]);
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9c 01       	movw	r18, r24
    2a58:	21 50       	subi	r18, 0x01	; 1
    2a5a:	30 40       	sbci	r19, 0x00	; 0
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	03 96       	adiw	r24, 0x03	; 3
    2a60:	fc 01       	movw	r30, r24
    2a62:	e2 0f       	add	r30, r18
    2a64:	f3 1f       	adc	r31, r19
    2a66:	80 81       	ld	r24, Z
    2a68:	0e 94 4b 14 	call	0x2896	; 0x2896 <CLCD_voidSendData>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	81 50       	subi	r24, 0x01	; 1
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	88 23       	and	r24, r24
    2a76:	61 f7       	brne	.-40     	; 0x2a50 <CLCD_voidWriteNumber+0xe0>
{
	CLCD_voidSendData(NUM[i-1]);
}
}
    2a78:	60 96       	adiw	r28, 0x10	; 16
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	08 95       	ret

00002a8e <CLCD_voidWriteSpecialChar>:
void CLCD_voidWriteSpecialChar(uint8* copy_puint8Pattern,uint8 copy_uint8PatternNumber,uint8 copy_uint8Xposition,uint8 copy_uint8Yposition)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	27 97       	sbiw	r28, 0x07	; 7
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	6d 83       	std	Y+5, r22	; 0x05
    2aa8:	4e 83       	std	Y+6, r20	; 0x06
    2aaa:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_uint8CGRAM_Address=0;
    2aac:	1a 82       	std	Y+2, r1	; 0x02
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	8a 83       	std	Y+2, r24	; 0x02
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	80 64       	ori	r24, 0x40	; 64
    2ac6:	0e 94 11 14 	call	0x2822	; 0x2822 <CLCD_voidSendCommand>

for(uint8 i=0;i<8;i++)
    2aca:	19 82       	std	Y+1, r1	; 0x01
    2acc:	0e c0       	rjmp	.+28     	; 0x2aea <CLCD_voidWriteSpecialChar+0x5c>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e2 0f       	add	r30, r18
    2adc:	f3 1f       	adc	r31, r19
    2ade:	80 81       	ld	r24, Z
    2ae0:	0e 94 4b 14 	call	0x2896	; 0x2896 <CLCD_voidSendData>
	uint8 Local_uint8CGRAM_Address=0;
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));

for(uint8 i=0;i<8;i++)
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	8f 5f       	subi	r24, 0xFF	; 255
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	88 30       	cpi	r24, 0x08	; 8
    2aee:	78 f3       	brcs	.-34     	; 0x2ace <CLCD_voidWriteSpecialChar+0x40>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
}
/*go back to DDRAM to display the Arr*/
 CLCD_voidGoToXY(copy_uint8Xposition,copy_uint8Yposition);
    2af0:	8e 81       	ldd	r24, Y+6	; 0x06
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	0e 94 9a 14 	call	0x2934	; 0x2934 <CLCD_voidGoToXY>

CLCD_voidSendData(copy_uint8PatternNumber);
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	0e 94 4b 14 	call	0x2896	; 0x2896 <CLCD_voidSendData>

}
    2afe:	27 96       	adiw	r28, 0x07	; 7
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <HandleGreenState>:
#define GREEN_DURATION  5
#define YELLOW_DURATION 5
#define RED_DURATION    5

static void HandleGreenState(void)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    2b18:	82 e0       	ldi	r24, 0x02	; 2
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_HIGH);
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
}
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <HandleRedState>:
static void HandleRedState(void)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	62 e0       	ldi	r22, 0x02	; 2
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_LOW);
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_HIGH);
    2b4e:	82 e0       	ldi	r24, 0x02	; 2
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	41 e0       	ldi	r20, 0x01	; 1
    2b54:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
}
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <HandleyellowState>:
static void HandleyellowState(void)
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	62 e0       	ldi	r22, 0x02	; 2
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_HIGH);
    2b7a:	82 e0       	ldi	r24, 0x02	; 2
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	41 e0       	ldi	r20, 0x01	; 1
    2b80:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <DIO_SetPinVal>
}
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <TimerISR>:
StackEntry Local_Variable;     // Current state function
int last_handled_time = -1;    // Tracks the last time the state was handled

/* ISR Function */
void TimerISR(void)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    timer_counter++; // Increment timer counter every second
    2b92:	80 91 aa 01 	lds	r24, 0x01AA
    2b96:	90 91 ab 01 	lds	r25, 0x01AB
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	90 93 ab 01 	sts	0x01AB, r25
    2ba0:	80 93 aa 01 	sts	0x01AA, r24
}
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <TrafficLightInit>:

/* Traffic Light Initialization */
void TrafficLightInit(void)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    /* System initialization */
    PORT_voidInit();
    2bb2:	0e 94 38 0c 	call	0x1870	; 0x1870 <PORT_voidInit>
    CLCD_voidInit();
    2bb6:	0e 94 37 14 	call	0x286e	; 0x286e <CLCD_voidInit>
    GIE_Enable();
    2bba:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GIE_Enable>
    TIMER1_voidInit();
    2bbe:	0e 94 72 09 	call	0x12e4	; 0x12e4 <TIMER1_voidInit>
    TIMER1_voidSetChannelACompMatch(31250); // Configure Timer1 for 1-second intervals
    2bc2:	82 e1       	ldi	r24, 0x12	; 18
    2bc4:	9a e7       	ldi	r25, 0x7A	; 122
    2bc6:	0e 94 99 09 	call	0x1332	; 0x1332 <TIMER1_voidSetChannelACompMatch>
    TIMER1_CTCASetCallBck(&TimerISR);
    2bca:	85 ec       	ldi	r24, 0xC5	; 197
    2bcc:	95 e1       	ldi	r25, 0x15	; 21
    2bce:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TIMER1_CTCASetCallBck>

    /* Stack initialization */
    Stack_Creation(&TrafficStack);
    2bd2:	8e ea       	ldi	r24, 0xAE	; 174
    2bd4:	91 e0       	ldi	r25, 0x01	; 1
    2bd6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <Stack_Creation>
    Stack_Push(&TrafficStack, HandleGreenState); // Start with the green state
    2bda:	8e ea       	ldi	r24, 0xAE	; 174
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	28 e8       	ldi	r18, 0x88	; 136
    2be0:	35 e1       	ldi	r19, 0x15	; 21
    2be2:	b9 01       	movw	r22, r18
    2be4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Stack_Push>
}
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <Traffic_Handler>:

/* Traffic Light State Handler */
void Traffic_Handler(void)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    if (timer_counter == GREEN_DURATION && last_handled_time != GREEN_DURATION)
    2bf6:	80 91 aa 01 	lds	r24, 0x01AA
    2bfa:	90 91 ab 01 	lds	r25, 0x01AB
    2bfe:	85 30       	cpi	r24, 0x05	; 5
    2c00:	91 05       	cpc	r25, r1
    2c02:	a9 f4       	brne	.+42     	; 0x2c2e <Traffic_Handler+0x40>
    2c04:	80 91 8e 01 	lds	r24, 0x018E
    2c08:	90 91 8f 01 	lds	r25, 0x018F
    2c0c:	85 30       	cpi	r24, 0x05	; 5
    2c0e:	91 05       	cpc	r25, r1
    2c10:	71 f0       	breq	.+28     	; 0x2c2e <Traffic_Handler+0x40>
    {
        Stack_Push(&TrafficStack, HandleyellowState);
    2c12:	8e ea       	ldi	r24, 0xAE	; 174
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	2f ea       	ldi	r18, 0xAF	; 175
    2c18:	35 e1       	ldi	r19, 0x15	; 21
    2c1a:	b9 01       	movw	r22, r18
    2c1c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Stack_Push>
        last_handled_time = GREEN_DURATION; // Mark the transition as handled
    2c20:	85 e0       	ldi	r24, 0x05	; 5
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	90 93 8f 01 	sts	0x018F, r25
    2c28:	80 93 8e 01 	sts	0x018E, r24
    2c2c:	45 c0       	rjmp	.+138    	; 0x2cb8 <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION)
    2c2e:	80 91 aa 01 	lds	r24, 0x01AA
    2c32:	90 91 ab 01 	lds	r25, 0x01AB
    2c36:	8a 30       	cpi	r24, 0x0A	; 10
    2c38:	91 05       	cpc	r25, r1
    2c3a:	a9 f4       	brne	.+42     	; 0x2c66 <Traffic_Handler+0x78>
    2c3c:	80 91 8e 01 	lds	r24, 0x018E
    2c40:	90 91 8f 01 	lds	r25, 0x018F
    2c44:	8a 30       	cpi	r24, 0x0A	; 10
    2c46:	91 05       	cpc	r25, r1
    2c48:	71 f0       	breq	.+28     	; 0x2c66 <Traffic_Handler+0x78>
    {
        Stack_Push(&TrafficStack, HandleRedState);
    2c4a:	8e ea       	ldi	r24, 0xAE	; 174
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	29 e9       	ldi	r18, 0x99	; 153
    2c50:	35 e1       	ldi	r19, 0x15	; 21
    2c52:	b9 01       	movw	r22, r18
    2c54:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Stack_Push>
        last_handled_time = GREEN_DURATION + YELLOW_DURATION; // Mark the transition as handled
    2c58:	8a e0       	ldi	r24, 0x0A	; 10
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	90 93 8f 01 	sts	0x018F, r25
    2c60:	80 93 8e 01 	sts	0x018E, r24
    2c64:	29 c0       	rjmp	.+82     	; 0x2cb8 <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION + RED_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION + RED_DURATION)
    2c66:	80 91 aa 01 	lds	r24, 0x01AA
    2c6a:	90 91 ab 01 	lds	r25, 0x01AB
    2c6e:	8f 30       	cpi	r24, 0x0F	; 15
    2c70:	91 05       	cpc	r25, r1
    2c72:	11 f5       	brne	.+68     	; 0x2cb8 <Traffic_Handler+0xca>
    2c74:	80 91 8e 01 	lds	r24, 0x018E
    2c78:	90 91 8f 01 	lds	r25, 0x018F
    2c7c:	8f 30       	cpi	r24, 0x0F	; 15
    2c7e:	91 05       	cpc	r25, r1
    2c80:	d9 f0       	breq	.+54     	; 0x2cb8 <Traffic_Handler+0xca>
    {
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove red state
    2c82:	8e ea       	ldi	r24, 0xAE	; 174
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	2c ea       	ldi	r18, 0xAC	; 172
    2c88:	31 e0       	ldi	r19, 0x01	; 1
    2c8a:	b9 01       	movw	r22, r18
    2c8c:	0e 94 4a 07 	call	0xe94	; 0xe94 <Stack_Pop>
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove yellow state
    2c90:	8e ea       	ldi	r24, 0xAE	; 174
    2c92:	91 e0       	ldi	r25, 0x01	; 1
    2c94:	2c ea       	ldi	r18, 0xAC	; 172
    2c96:	31 e0       	ldi	r19, 0x01	; 1
    2c98:	b9 01       	movw	r22, r18
    2c9a:	0e 94 4a 07 	call	0xe94	; 0xe94 <Stack_Pop>
        timer_counter = 0; // Reset timer
    2c9e:	10 92 ab 01 	sts	0x01AB, r1
    2ca2:	10 92 aa 01 	sts	0x01AA, r1
        last_handled_time = -1; // Reset last handled time
    2ca6:	8f ef       	ldi	r24, 0xFF	; 255
    2ca8:	9f ef       	ldi	r25, 0xFF	; 255
    2caa:	90 93 8f 01 	sts	0x018F, r25
    2cae:	80 93 8e 01 	sts	0x018E, r24
        CLCD_voidSendCommand(1); // Clear display
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	0e 94 11 14 	call	0x2822	; 0x2822 <CLCD_voidSendCommand>
    }
}
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <TrafficLightMainFunction>:

/* Main Traffic Light Control Function */
void TrafficLightMainFunction(void)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    Local_Variable = TrafficStack.top->entry; // Get the current state function
    2cc6:	e0 91 ae 01 	lds	r30, 0x01AE
    2cca:	f0 91 af 01 	lds	r31, 0x01AF
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	90 93 ad 01 	sts	0x01AD, r25
    2cd6:	80 93 ac 01 	sts	0x01AC, r24
    Local_Variable(); // Execute the state function
    2cda:	e0 91 ac 01 	lds	r30, 0x01AC
    2cde:	f0 91 ad 01 	lds	r31, 0x01AD
    2ce2:	09 95       	icall

    Traffic_Handler(); // Handle state transitions
    2ce4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <Traffic_Handler>

    /* Display timer and stack size */
    CLCD_voidGoToXY(0, 0);
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	0e 94 9a 14 	call	0x2934	; 0x2934 <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(timer_counter);
    2cf0:	80 91 aa 01 	lds	r24, 0x01AA
    2cf4:	90 91 ab 01 	lds	r25, 0x01AB
    2cf8:	aa 27       	eor	r26, r26
    2cfa:	97 fd       	sbrc	r25, 7
    2cfc:	a0 95       	com	r26
    2cfe:	ba 2f       	mov	r27, r26
    2d00:	bc 01       	movw	r22, r24
    2d02:	cd 01       	movw	r24, r26
    2d04:	0e 94 b8 14 	call	0x2970	; 0x2970 <CLCD_voidWriteNumber>
    CLCD_voidGoToXY(1, 0);
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	0e 94 9a 14 	call	0x2934	; 0x2934 <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(TrafficStack.Size);
    2d10:	80 91 b0 01 	lds	r24, 0x01B0
    2d14:	90 91 b1 01 	lds	r25, 0x01B1
    2d18:	a0 91 b2 01 	lds	r26, 0x01B2
    2d1c:	b0 91 b3 01 	lds	r27, 0x01B3
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 b8 14 	call	0x2970	; 0x2970 <CLCD_voidWriteNumber>
}
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <Fixed_FromFloat>:
#include "../inc/FixedPoint_interface.h"

fixed32_t Fixed_FromFloat(float value)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <Fixed_FromFloat+0x6>
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <Fixed_FromFloat+0x8>
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	69 83       	std	Y+1, r22	; 0x01
    2d3c:	7a 83       	std	Y+2, r23	; 0x02
    2d3e:	8b 83       	std	Y+3, r24	; 0x03
    2d40:	9c 83       	std	Y+4, r25	; 0x04
	return FLOAT_TO_FIXP(value);
    2d42:	69 81       	ldd	r22, Y+1	; 0x01
    2d44:	7a 81       	ldd	r23, Y+2	; 0x02
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	3f ef       	ldi	r19, 0xFF	; 255
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	57 e4       	ldi	r21, 0x47	; 71
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
}
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <Fixed_FromInt>:
fixed32_t Fixed_FromInt(uint32 integer)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <Fixed_FromInt+0x6>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <Fixed_FromInt+0x8>
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	69 83       	std	Y+1, r22	; 0x01
    2d86:	7a 83       	std	Y+2, r23	; 0x02
    2d88:	8b 83       	std	Y+3, r24	; 0x03
    2d8a:	9c 83       	std	Y+4, r25	; 0x04
	 return INT_TO_FIXP(integer);
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d90:	ab 81       	ldd	r26, Y+3	; 0x03
    2d92:	bc 81       	ldd	r27, Y+4	; 0x04
    2d94:	dc 01       	movw	r26, r24
    2d96:	99 27       	eor	r25, r25
    2d98:	88 27       	eor	r24, r24
}
    2d9a:	bc 01       	movw	r22, r24
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <Fixed_ToInt>:

uint32 Fixed_ToInt(fixed32_t fixed)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	00 d0       	rcall	.+0      	; 0x2db2 <Fixed_ToInt+0x6>
    2db2:	00 d0       	rcall	.+0      	; 0x2db4 <Fixed_ToInt+0x8>
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	69 83       	std	Y+1, r22	; 0x01
    2dba:	7a 83       	std	Y+2, r23	; 0x02
    2dbc:	8b 83       	std	Y+3, r24	; 0x03
    2dbe:	9c 83       	std	Y+4, r25	; 0x04
	return (fixed>>FixedPoint_SHIFT);
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	ab 81       	ldd	r26, Y+3	; 0x03
    2dc6:	bc 81       	ldd	r27, Y+4	; 0x04
    2dc8:	cd 01       	movw	r24, r26
    2dca:	aa 27       	eor	r26, r26
    2dcc:	bb 27       	eor	r27, r27
}
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <Fixed_ToFloat>:
float Fixed_ToFloat(fixed32_t fixed)
{
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	2e 97       	sbiw	r28, 0x0e	; 14
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	6b 87       	std	Y+11, r22	; 0x0b
    2dfe:	7c 87       	std	Y+12, r23	; 0x0c
    2e00:	8d 87       	std	Y+13, r24	; 0x0d
    2e02:	9e 87       	std	Y+14, r25	; 0x0e
	float Ret_Value=0;
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a0 e0       	ldi	r26, 0x00	; 0
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	8f 83       	std	Y+7, r24	; 0x07
    2e0e:	98 87       	std	Y+8, r25	; 0x08
    2e10:	a9 87       	std	Y+9, r26	; 0x09
    2e12:	ba 87       	std	Y+10, r27	; 0x0a
	uint32 Fraction=0;
    2e14:	1b 82       	std	Y+3, r1	; 0x03
    2e16:	1c 82       	std	Y+4, r1	; 0x04
    2e18:	1d 82       	std	Y+5, r1	; 0x05
    2e1a:	1e 82       	std	Y+6, r1	; 0x06
	uint16 Local_Variable=(fixed>>FixedPoint_SHIFT);
    2e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e20:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e22:	be 85       	ldd	r27, Y+14	; 0x0e
    2e24:	cd 01       	movw	r24, r26
    2e26:	aa 27       	eor	r26, r26
    2e28:	bb 27       	eor	r27, r27
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
	Fraction=(((fixed & 0x0000ffff)*100/(FixedPoint_SCALE)));
    2e2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e30:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e32:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e34:	be 85       	ldd	r27, Y+14	; 0x0e
    2e36:	a0 70       	andi	r26, 0x00	; 0
    2e38:	b0 70       	andi	r27, 0x00	; 0
    2e3a:	24 e6       	ldi	r18, 0x64	; 100
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	bc 01       	movw	r22, r24
    2e44:	cd 01       	movw	r24, r26
    2e46:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__mulsi3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	2f ef       	ldi	r18, 0xFF	; 255
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	50 e0       	ldi	r21, 0x00	; 0
    2e56:	bc 01       	movw	r22, r24
    2e58:	cd 01       	movw	r24, r26
    2e5a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__udivmodsi4>
    2e5e:	da 01       	movw	r26, r20
    2e60:	c9 01       	movw	r24, r18
    2e62:	8b 83       	std	Y+3, r24	; 0x03
    2e64:	9c 83       	std	Y+4, r25	; 0x04
    2e66:	ad 83       	std	Y+5, r26	; 0x05
    2e68:	be 83       	std	Y+6, r27	; 0x06
	Ret_Value=((float)Local_Variable+((float)Fraction+1.0)/100.0);
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	cc 01       	movw	r24, r24
    2e70:	a0 e0       	ldi	r26, 0x00	; 0
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2e7c:	7b 01       	movw	r14, r22
    2e7e:	8c 01       	movw	r16, r24
    2e80:	6b 81       	ldd	r22, Y+3	; 0x03
    2e82:	7c 81       	ldd	r23, Y+4	; 0x04
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e8       	ldi	r20, 0x80	; 128
    2e9a:	5f e3       	ldi	r21, 0x3F	; 63
    2e9c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	48 ec       	ldi	r20, 0xC8	; 200
    2eae:	52 e4       	ldi	r21, 0x42	; 66
    2eb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9c 01       	movw	r18, r24
    2eba:	ad 01       	movw	r20, r26
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	b7 01       	movw	r22, r14
    2ec0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	8f 83       	std	Y+7, r24	; 0x07
    2eca:	98 87       	std	Y+8, r25	; 0x08
    2ecc:	a9 87       	std	Y+9, r26	; 0x09
    2ece:	ba 87       	std	Y+10, r27	; 0x0a
	return (Ret_Value);
    2ed0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed2:	98 85       	ldd	r25, Y+8	; 0x08
    2ed4:	a9 85       	ldd	r26, Y+9	; 0x09
    2ed6:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	2e 96       	adiw	r28, 0x0e	; 14
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	08 95       	ret

00002ef6 <main>:
#include "TrafficLights/inc/TrafficLightsControl_interface.h"
#include  "Fixed_Point/inc/FixedPoint_interface.h"


int main()
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <main+0x6>
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <main+0x8>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
	TrafficLightInit();
    2f02:	0e 94 d5 15 	call	0x2baa	; 0x2baa <TrafficLightInit>
	float Test;

	while(1)
	{

		Test= Fixed_ToFloat(137625);
    2f06:	69 e9       	ldi	r22, 0x99	; 153
    2f08:	79 e1       	ldi	r23, 0x19	; 25
    2f0a:	82 e0       	ldi	r24, 0x02	; 2
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <Fixed_ToFloat>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	ab 83       	std	Y+3, r26	; 0x03
    2f1c:	bc 83       	std	Y+4, r27	; 0x04

		CLCD_voidGoToXY(0,0);
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 9a 14 	call	0x2934	; 0x2934 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Test);
    2f26:	69 81       	ldd	r22, Y+1	; 0x01
    2f28:	7a 81       	ldd	r23, Y+2	; 0x02
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 b8 14 	call	0x2970	; 0x2970 <CLCD_voidWriteNumber>
    2f3e:	e3 cf       	rjmp	.-58     	; 0x2f06 <main+0x10>

00002f40 <__mulsi3>:
    2f40:	62 9f       	mul	r22, r18
    2f42:	d0 01       	movw	r26, r0
    2f44:	73 9f       	mul	r23, r19
    2f46:	f0 01       	movw	r30, r0
    2f48:	82 9f       	mul	r24, r18
    2f4a:	e0 0d       	add	r30, r0
    2f4c:	f1 1d       	adc	r31, r1
    2f4e:	64 9f       	mul	r22, r20
    2f50:	e0 0d       	add	r30, r0
    2f52:	f1 1d       	adc	r31, r1
    2f54:	92 9f       	mul	r25, r18
    2f56:	f0 0d       	add	r31, r0
    2f58:	83 9f       	mul	r24, r19
    2f5a:	f0 0d       	add	r31, r0
    2f5c:	74 9f       	mul	r23, r20
    2f5e:	f0 0d       	add	r31, r0
    2f60:	65 9f       	mul	r22, r21
    2f62:	f0 0d       	add	r31, r0
    2f64:	99 27       	eor	r25, r25
    2f66:	72 9f       	mul	r23, r18
    2f68:	b0 0d       	add	r27, r0
    2f6a:	e1 1d       	adc	r30, r1
    2f6c:	f9 1f       	adc	r31, r25
    2f6e:	63 9f       	mul	r22, r19
    2f70:	b0 0d       	add	r27, r0
    2f72:	e1 1d       	adc	r30, r1
    2f74:	f9 1f       	adc	r31, r25
    2f76:	bd 01       	movw	r22, r26
    2f78:	cf 01       	movw	r24, r30
    2f7a:	11 24       	eor	r1, r1
    2f7c:	08 95       	ret

00002f7e <__udivmodhi4>:
    2f7e:	aa 1b       	sub	r26, r26
    2f80:	bb 1b       	sub	r27, r27
    2f82:	51 e1       	ldi	r21, 0x11	; 17
    2f84:	07 c0       	rjmp	.+14     	; 0x2f94 <__udivmodhi4_ep>

00002f86 <__udivmodhi4_loop>:
    2f86:	aa 1f       	adc	r26, r26
    2f88:	bb 1f       	adc	r27, r27
    2f8a:	a6 17       	cp	r26, r22
    2f8c:	b7 07       	cpc	r27, r23
    2f8e:	10 f0       	brcs	.+4      	; 0x2f94 <__udivmodhi4_ep>
    2f90:	a6 1b       	sub	r26, r22
    2f92:	b7 0b       	sbc	r27, r23

00002f94 <__udivmodhi4_ep>:
    2f94:	88 1f       	adc	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	5a 95       	dec	r21
    2f9a:	a9 f7       	brne	.-22     	; 0x2f86 <__udivmodhi4_loop>
    2f9c:	80 95       	com	r24
    2f9e:	90 95       	com	r25
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	08 95       	ret

00002fa6 <__udivmodsi4>:
    2fa6:	a1 e2       	ldi	r26, 0x21	; 33
    2fa8:	1a 2e       	mov	r1, r26
    2faa:	aa 1b       	sub	r26, r26
    2fac:	bb 1b       	sub	r27, r27
    2fae:	fd 01       	movw	r30, r26
    2fb0:	0d c0       	rjmp	.+26     	; 0x2fcc <__udivmodsi4_ep>

00002fb2 <__udivmodsi4_loop>:
    2fb2:	aa 1f       	adc	r26, r26
    2fb4:	bb 1f       	adc	r27, r27
    2fb6:	ee 1f       	adc	r30, r30
    2fb8:	ff 1f       	adc	r31, r31
    2fba:	a2 17       	cp	r26, r18
    2fbc:	b3 07       	cpc	r27, r19
    2fbe:	e4 07       	cpc	r30, r20
    2fc0:	f5 07       	cpc	r31, r21
    2fc2:	20 f0       	brcs	.+8      	; 0x2fcc <__udivmodsi4_ep>
    2fc4:	a2 1b       	sub	r26, r18
    2fc6:	b3 0b       	sbc	r27, r19
    2fc8:	e4 0b       	sbc	r30, r20
    2fca:	f5 0b       	sbc	r31, r21

00002fcc <__udivmodsi4_ep>:
    2fcc:	66 1f       	adc	r22, r22
    2fce:	77 1f       	adc	r23, r23
    2fd0:	88 1f       	adc	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	1a 94       	dec	r1
    2fd6:	69 f7       	brne	.-38     	; 0x2fb2 <__udivmodsi4_loop>
    2fd8:	60 95       	com	r22
    2fda:	70 95       	com	r23
    2fdc:	80 95       	com	r24
    2fde:	90 95       	com	r25
    2fe0:	9b 01       	movw	r18, r22
    2fe2:	ac 01       	movw	r20, r24
    2fe4:	bd 01       	movw	r22, r26
    2fe6:	cf 01       	movw	r24, r30
    2fe8:	08 95       	ret

00002fea <__divmodsi4>:
    2fea:	97 fb       	bst	r25, 7
    2fec:	09 2e       	mov	r0, r25
    2fee:	05 26       	eor	r0, r21
    2ff0:	0e d0       	rcall	.+28     	; 0x300e <__divmodsi4_neg1>
    2ff2:	57 fd       	sbrc	r21, 7
    2ff4:	04 d0       	rcall	.+8      	; 0x2ffe <__divmodsi4_neg2>
    2ff6:	d7 df       	rcall	.-82     	; 0x2fa6 <__udivmodsi4>
    2ff8:	0a d0       	rcall	.+20     	; 0x300e <__divmodsi4_neg1>
    2ffa:	00 1c       	adc	r0, r0
    2ffc:	38 f4       	brcc	.+14     	; 0x300c <__divmodsi4_exit>

00002ffe <__divmodsi4_neg2>:
    2ffe:	50 95       	com	r21
    3000:	40 95       	com	r20
    3002:	30 95       	com	r19
    3004:	21 95       	neg	r18
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	4f 4f       	sbci	r20, 0xFF	; 255
    300a:	5f 4f       	sbci	r21, 0xFF	; 255

0000300c <__divmodsi4_exit>:
    300c:	08 95       	ret

0000300e <__divmodsi4_neg1>:
    300e:	f6 f7       	brtc	.-4      	; 0x300c <__divmodsi4_exit>
    3010:	90 95       	com	r25
    3012:	80 95       	com	r24
    3014:	70 95       	com	r23
    3016:	61 95       	neg	r22
    3018:	7f 4f       	sbci	r23, 0xFF	; 255
    301a:	8f 4f       	sbci	r24, 0xFF	; 255
    301c:	9f 4f       	sbci	r25, 0xFF	; 255
    301e:	08 95       	ret

00003020 <__prologue_saves__>:
    3020:	2f 92       	push	r2
    3022:	3f 92       	push	r3
    3024:	4f 92       	push	r4
    3026:	5f 92       	push	r5
    3028:	6f 92       	push	r6
    302a:	7f 92       	push	r7
    302c:	8f 92       	push	r8
    302e:	9f 92       	push	r9
    3030:	af 92       	push	r10
    3032:	bf 92       	push	r11
    3034:	cf 92       	push	r12
    3036:	df 92       	push	r13
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	ca 1b       	sub	r28, r26
    304a:	db 0b       	sbc	r29, r27
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	09 94       	ijmp

00003058 <__epilogue_restores__>:
    3058:	2a 88       	ldd	r2, Y+18	; 0x12
    305a:	39 88       	ldd	r3, Y+17	; 0x11
    305c:	48 88       	ldd	r4, Y+16	; 0x10
    305e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3060:	6e 84       	ldd	r6, Y+14	; 0x0e
    3062:	7d 84       	ldd	r7, Y+13	; 0x0d
    3064:	8c 84       	ldd	r8, Y+12	; 0x0c
    3066:	9b 84       	ldd	r9, Y+11	; 0x0b
    3068:	aa 84       	ldd	r10, Y+10	; 0x0a
    306a:	b9 84       	ldd	r11, Y+9	; 0x09
    306c:	c8 84       	ldd	r12, Y+8	; 0x08
    306e:	df 80       	ldd	r13, Y+7	; 0x07
    3070:	ee 80       	ldd	r14, Y+6	; 0x06
    3072:	fd 80       	ldd	r15, Y+5	; 0x05
    3074:	0c 81       	ldd	r16, Y+4	; 0x04
    3076:	1b 81       	ldd	r17, Y+3	; 0x03
    3078:	aa 81       	ldd	r26, Y+2	; 0x02
    307a:	b9 81       	ldd	r27, Y+1	; 0x01
    307c:	ce 0f       	add	r28, r30
    307e:	d1 1d       	adc	r29, r1
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	ed 01       	movw	r28, r26
    308c:	08 95       	ret

0000308e <malloc>:
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	bc 01       	movw	r22, r24
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	91 05       	cpc	r25, r1
    3098:	10 f4       	brcc	.+4      	; 0x309e <malloc+0x10>
    309a:	62 e0       	ldi	r22, 0x02	; 2
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	a0 91 b6 01 	lds	r26, 0x01B6
    30a2:	b0 91 b7 01 	lds	r27, 0x01B7
    30a6:	ed 01       	movw	r28, r26
    30a8:	e0 e0       	ldi	r30, 0x00	; 0
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	21 c0       	rjmp	.+66     	; 0x30f4 <malloc+0x66>
    30b2:	88 81       	ld	r24, Y
    30b4:	99 81       	ldd	r25, Y+1	; 0x01
    30b6:	86 17       	cp	r24, r22
    30b8:	97 07       	cpc	r25, r23
    30ba:	69 f4       	brne	.+26     	; 0x30d6 <malloc+0x48>
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	30 97       	sbiw	r30, 0x00	; 0
    30c2:	19 f0       	breq	.+6      	; 0x30ca <malloc+0x3c>
    30c4:	93 83       	std	Z+3, r25	; 0x03
    30c6:	82 83       	std	Z+2, r24	; 0x02
    30c8:	04 c0       	rjmp	.+8      	; 0x30d2 <malloc+0x44>
    30ca:	90 93 b7 01 	sts	0x01B7, r25
    30ce:	80 93 b6 01 	sts	0x01B6, r24
    30d2:	fe 01       	movw	r30, r28
    30d4:	34 c0       	rjmp	.+104    	; 0x313e <malloc+0xb0>
    30d6:	68 17       	cp	r22, r24
    30d8:	79 07       	cpc	r23, r25
    30da:	38 f4       	brcc	.+14     	; 0x30ea <malloc+0x5c>
    30dc:	41 15       	cp	r20, r1
    30de:	51 05       	cpc	r21, r1
    30e0:	19 f0       	breq	.+6      	; 0x30e8 <malloc+0x5a>
    30e2:	84 17       	cp	r24, r20
    30e4:	95 07       	cpc	r25, r21
    30e6:	08 f4       	brcc	.+2      	; 0x30ea <malloc+0x5c>
    30e8:	ac 01       	movw	r20, r24
    30ea:	fe 01       	movw	r30, r28
    30ec:	8a 81       	ldd	r24, Y+2	; 0x02
    30ee:	9b 81       	ldd	r25, Y+3	; 0x03
    30f0:	9c 01       	movw	r18, r24
    30f2:	e9 01       	movw	r28, r18
    30f4:	20 97       	sbiw	r28, 0x00	; 0
    30f6:	e9 f6       	brne	.-70     	; 0x30b2 <malloc+0x24>
    30f8:	41 15       	cp	r20, r1
    30fa:	51 05       	cpc	r21, r1
    30fc:	a9 f1       	breq	.+106    	; 0x3168 <malloc+0xda>
    30fe:	ca 01       	movw	r24, r20
    3100:	86 1b       	sub	r24, r22
    3102:	97 0b       	sbc	r25, r23
    3104:	04 97       	sbiw	r24, 0x04	; 4
    3106:	08 f4       	brcc	.+2      	; 0x310a <malloc+0x7c>
    3108:	ba 01       	movw	r22, r20
    310a:	e0 e0       	ldi	r30, 0x00	; 0
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	2a c0       	rjmp	.+84     	; 0x3164 <malloc+0xd6>
    3110:	8d 91       	ld	r24, X+
    3112:	9c 91       	ld	r25, X
    3114:	11 97       	sbiw	r26, 0x01	; 1
    3116:	84 17       	cp	r24, r20
    3118:	95 07       	cpc	r25, r21
    311a:	f9 f4       	brne	.+62     	; 0x315a <malloc+0xcc>
    311c:	64 17       	cp	r22, r20
    311e:	75 07       	cpc	r23, r21
    3120:	81 f4       	brne	.+32     	; 0x3142 <malloc+0xb4>
    3122:	12 96       	adiw	r26, 0x02	; 2
    3124:	8d 91       	ld	r24, X+
    3126:	9c 91       	ld	r25, X
    3128:	13 97       	sbiw	r26, 0x03	; 3
    312a:	30 97       	sbiw	r30, 0x00	; 0
    312c:	19 f0       	breq	.+6      	; 0x3134 <malloc+0xa6>
    312e:	93 83       	std	Z+3, r25	; 0x03
    3130:	82 83       	std	Z+2, r24	; 0x02
    3132:	04 c0       	rjmp	.+8      	; 0x313c <malloc+0xae>
    3134:	90 93 b7 01 	sts	0x01B7, r25
    3138:	80 93 b6 01 	sts	0x01B6, r24
    313c:	fd 01       	movw	r30, r26
    313e:	32 96       	adiw	r30, 0x02	; 2
    3140:	4f c0       	rjmp	.+158    	; 0x31e0 <malloc+0x152>
    3142:	ca 01       	movw	r24, r20
    3144:	86 1b       	sub	r24, r22
    3146:	97 0b       	sbc	r25, r23
    3148:	fd 01       	movw	r30, r26
    314a:	e8 0f       	add	r30, r24
    314c:	f9 1f       	adc	r31, r25
    314e:	61 93       	st	Z+, r22
    3150:	71 93       	st	Z+, r23
    3152:	02 97       	sbiw	r24, 0x02	; 2
    3154:	8d 93       	st	X+, r24
    3156:	9c 93       	st	X, r25
    3158:	43 c0       	rjmp	.+134    	; 0x31e0 <malloc+0x152>
    315a:	fd 01       	movw	r30, r26
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	9c 01       	movw	r18, r24
    3162:	d9 01       	movw	r26, r18
    3164:	10 97       	sbiw	r26, 0x00	; 0
    3166:	a1 f6       	brne	.-88     	; 0x3110 <malloc+0x82>
    3168:	80 91 b4 01 	lds	r24, 0x01B4
    316c:	90 91 b5 01 	lds	r25, 0x01B5
    3170:	89 2b       	or	r24, r25
    3172:	41 f4       	brne	.+16     	; 0x3184 <malloc+0xf6>
    3174:	80 91 8a 01 	lds	r24, 0x018A
    3178:	90 91 8b 01 	lds	r25, 0x018B
    317c:	90 93 b5 01 	sts	0x01B5, r25
    3180:	80 93 b4 01 	sts	0x01B4, r24
    3184:	40 91 8c 01 	lds	r20, 0x018C
    3188:	50 91 8d 01 	lds	r21, 0x018D
    318c:	41 15       	cp	r20, r1
    318e:	51 05       	cpc	r21, r1
    3190:	41 f4       	brne	.+16     	; 0x31a2 <malloc+0x114>
    3192:	4d b7       	in	r20, 0x3d	; 61
    3194:	5e b7       	in	r21, 0x3e	; 62
    3196:	80 91 88 01 	lds	r24, 0x0188
    319a:	90 91 89 01 	lds	r25, 0x0189
    319e:	48 1b       	sub	r20, r24
    31a0:	59 0b       	sbc	r21, r25
    31a2:	20 91 b4 01 	lds	r18, 0x01B4
    31a6:	30 91 b5 01 	lds	r19, 0x01B5
    31aa:	24 17       	cp	r18, r20
    31ac:	35 07       	cpc	r19, r21
    31ae:	b0 f4       	brcc	.+44     	; 0x31dc <malloc+0x14e>
    31b0:	ca 01       	movw	r24, r20
    31b2:	82 1b       	sub	r24, r18
    31b4:	93 0b       	sbc	r25, r19
    31b6:	86 17       	cp	r24, r22
    31b8:	97 07       	cpc	r25, r23
    31ba:	80 f0       	brcs	.+32     	; 0x31dc <malloc+0x14e>
    31bc:	ab 01       	movw	r20, r22
    31be:	4e 5f       	subi	r20, 0xFE	; 254
    31c0:	5f 4f       	sbci	r21, 0xFF	; 255
    31c2:	84 17       	cp	r24, r20
    31c4:	95 07       	cpc	r25, r21
    31c6:	50 f0       	brcs	.+20     	; 0x31dc <malloc+0x14e>
    31c8:	42 0f       	add	r20, r18
    31ca:	53 1f       	adc	r21, r19
    31cc:	50 93 b5 01 	sts	0x01B5, r21
    31d0:	40 93 b4 01 	sts	0x01B4, r20
    31d4:	f9 01       	movw	r30, r18
    31d6:	61 93       	st	Z+, r22
    31d8:	71 93       	st	Z+, r23
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <malloc+0x152>
    31dc:	e0 e0       	ldi	r30, 0x00	; 0
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	cf 01       	movw	r24, r30
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	08 95       	ret

000031e8 <free>:
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <free+0xa>
    31f0:	50 c0       	rjmp	.+160    	; 0x3292 <free+0xaa>
    31f2:	ec 01       	movw	r28, r24
    31f4:	22 97       	sbiw	r28, 0x02	; 2
    31f6:	1b 82       	std	Y+3, r1	; 0x03
    31f8:	1a 82       	std	Y+2, r1	; 0x02
    31fa:	a0 91 b6 01 	lds	r26, 0x01B6
    31fe:	b0 91 b7 01 	lds	r27, 0x01B7
    3202:	10 97       	sbiw	r26, 0x00	; 0
    3204:	09 f1       	breq	.+66     	; 0x3248 <free+0x60>
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	ac 17       	cp	r26, r28
    320c:	bd 07       	cpc	r27, r29
    320e:	08 f1       	brcs	.+66     	; 0x3252 <free+0x6a>
    3210:	bb 83       	std	Y+3, r27	; 0x03
    3212:	aa 83       	std	Y+2, r26	; 0x02
    3214:	fe 01       	movw	r30, r28
    3216:	21 91       	ld	r18, Z+
    3218:	31 91       	ld	r19, Z+
    321a:	e2 0f       	add	r30, r18
    321c:	f3 1f       	adc	r31, r19
    321e:	ae 17       	cp	r26, r30
    3220:	bf 07       	cpc	r27, r31
    3222:	79 f4       	brne	.+30     	; 0x3242 <free+0x5a>
    3224:	8d 91       	ld	r24, X+
    3226:	9c 91       	ld	r25, X
    3228:	11 97       	sbiw	r26, 0x01	; 1
    322a:	28 0f       	add	r18, r24
    322c:	39 1f       	adc	r19, r25
    322e:	2e 5f       	subi	r18, 0xFE	; 254
    3230:	3f 4f       	sbci	r19, 0xFF	; 255
    3232:	39 83       	std	Y+1, r19	; 0x01
    3234:	28 83       	st	Y, r18
    3236:	12 96       	adiw	r26, 0x02	; 2
    3238:	8d 91       	ld	r24, X+
    323a:	9c 91       	ld	r25, X
    323c:	13 97       	sbiw	r26, 0x03	; 3
    323e:	9b 83       	std	Y+3, r25	; 0x03
    3240:	8a 83       	std	Y+2, r24	; 0x02
    3242:	41 15       	cp	r20, r1
    3244:	51 05       	cpc	r21, r1
    3246:	71 f4       	brne	.+28     	; 0x3264 <free+0x7c>
    3248:	d0 93 b7 01 	sts	0x01B7, r29
    324c:	c0 93 b6 01 	sts	0x01B6, r28
    3250:	20 c0       	rjmp	.+64     	; 0x3292 <free+0xaa>
    3252:	12 96       	adiw	r26, 0x02	; 2
    3254:	8d 91       	ld	r24, X+
    3256:	9c 91       	ld	r25, X
    3258:	13 97       	sbiw	r26, 0x03	; 3
    325a:	ad 01       	movw	r20, r26
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	11 f0       	breq	.+4      	; 0x3264 <free+0x7c>
    3260:	dc 01       	movw	r26, r24
    3262:	d3 cf       	rjmp	.-90     	; 0x320a <free+0x22>
    3264:	fa 01       	movw	r30, r20
    3266:	d3 83       	std	Z+3, r29	; 0x03
    3268:	c2 83       	std	Z+2, r28	; 0x02
    326a:	21 91       	ld	r18, Z+
    326c:	31 91       	ld	r19, Z+
    326e:	e2 0f       	add	r30, r18
    3270:	f3 1f       	adc	r31, r19
    3272:	ce 17       	cp	r28, r30
    3274:	df 07       	cpc	r29, r31
    3276:	69 f4       	brne	.+26     	; 0x3292 <free+0xaa>
    3278:	88 81       	ld	r24, Y
    327a:	99 81       	ldd	r25, Y+1	; 0x01
    327c:	28 0f       	add	r18, r24
    327e:	39 1f       	adc	r19, r25
    3280:	2e 5f       	subi	r18, 0xFE	; 254
    3282:	3f 4f       	sbci	r19, 0xFF	; 255
    3284:	fa 01       	movw	r30, r20
    3286:	31 83       	std	Z+1, r19	; 0x01
    3288:	20 83       	st	Z, r18
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	9b 81       	ldd	r25, Y+3	; 0x03
    328e:	93 83       	std	Z+3, r25	; 0x03
    3290:	82 83       	std	Z+2, r24	; 0x02
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	08 95       	ret

00003298 <printf>:
    3298:	a0 e0       	ldi	r26, 0x00	; 0
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e2 e5       	ldi	r30, 0x52	; 82
    329e:	f9 e1       	ldi	r31, 0x19	; 25
    32a0:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x20>
    32a4:	fe 01       	movw	r30, r28
    32a6:	35 96       	adiw	r30, 0x05	; 5
    32a8:	61 91       	ld	r22, Z+
    32aa:	71 91       	ld	r23, Z+
    32ac:	80 91 ba 01 	lds	r24, 0x01BA
    32b0:	90 91 bb 01 	lds	r25, 0x01BB
    32b4:	af 01       	movw	r20, r30
    32b6:	0e 94 61 19 	call	0x32c2	; 0x32c2 <vfprintf>
    32ba:	20 96       	adiw	r28, 0x00	; 0
    32bc:	e2 e0       	ldi	r30, 0x02	; 2
    32be:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x20>

000032c2 <vfprintf>:
    32c2:	ab e0       	ldi	r26, 0x0B	; 11
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	e7 e6       	ldi	r30, 0x67	; 103
    32c8:	f9 e1       	ldi	r31, 0x19	; 25
    32ca:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__prologue_saves__>
    32ce:	3c 01       	movw	r6, r24
    32d0:	2b 01       	movw	r4, r22
    32d2:	5a 01       	movw	r10, r20
    32d4:	fc 01       	movw	r30, r24
    32d6:	17 82       	std	Z+7, r1	; 0x07
    32d8:	16 82       	std	Z+6, r1	; 0x06
    32da:	83 81       	ldd	r24, Z+3	; 0x03
    32dc:	81 fd       	sbrc	r24, 1
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <vfprintf+0x24>
    32e0:	6f ef       	ldi	r22, 0xFF	; 255
    32e2:	7f ef       	ldi	r23, 0xFF	; 255
    32e4:	c6 c1       	rjmp	.+908    	; 0x3672 <vfprintf+0x3b0>
    32e6:	9a e0       	ldi	r25, 0x0A	; 10
    32e8:	89 2e       	mov	r8, r25
    32ea:	1e 01       	movw	r2, r28
    32ec:	08 94       	sec
    32ee:	21 1c       	adc	r2, r1
    32f0:	31 1c       	adc	r3, r1
    32f2:	f3 01       	movw	r30, r6
    32f4:	23 81       	ldd	r18, Z+3	; 0x03
    32f6:	f2 01       	movw	r30, r4
    32f8:	23 fd       	sbrc	r18, 3
    32fa:	85 91       	lpm	r24, Z+
    32fc:	23 ff       	sbrs	r18, 3
    32fe:	81 91       	ld	r24, Z+
    3300:	2f 01       	movw	r4, r30
    3302:	88 23       	and	r24, r24
    3304:	09 f4       	brne	.+2      	; 0x3308 <vfprintf+0x46>
    3306:	b2 c1       	rjmp	.+868    	; 0x366c <vfprintf+0x3aa>
    3308:	85 32       	cpi	r24, 0x25	; 37
    330a:	39 f4       	brne	.+14     	; 0x331a <vfprintf+0x58>
    330c:	23 fd       	sbrc	r18, 3
    330e:	85 91       	lpm	r24, Z+
    3310:	23 ff       	sbrs	r18, 3
    3312:	81 91       	ld	r24, Z+
    3314:	2f 01       	movw	r4, r30
    3316:	85 32       	cpi	r24, 0x25	; 37
    3318:	29 f4       	brne	.+10     	; 0x3324 <vfprintf+0x62>
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	b3 01       	movw	r22, r6
    331e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    3322:	e7 cf       	rjmp	.-50     	; 0x32f2 <vfprintf+0x30>
    3324:	98 2f       	mov	r25, r24
    3326:	ff 24       	eor	r15, r15
    3328:	ee 24       	eor	r14, r14
    332a:	99 24       	eor	r9, r9
    332c:	ff e1       	ldi	r31, 0x1F	; 31
    332e:	ff 15       	cp	r31, r15
    3330:	d0 f0       	brcs	.+52     	; 0x3366 <vfprintf+0xa4>
    3332:	9b 32       	cpi	r25, 0x2B	; 43
    3334:	69 f0       	breq	.+26     	; 0x3350 <vfprintf+0x8e>
    3336:	9c 32       	cpi	r25, 0x2C	; 44
    3338:	28 f4       	brcc	.+10     	; 0x3344 <vfprintf+0x82>
    333a:	90 32       	cpi	r25, 0x20	; 32
    333c:	59 f0       	breq	.+22     	; 0x3354 <vfprintf+0x92>
    333e:	93 32       	cpi	r25, 0x23	; 35
    3340:	91 f4       	brne	.+36     	; 0x3366 <vfprintf+0xa4>
    3342:	0e c0       	rjmp	.+28     	; 0x3360 <vfprintf+0x9e>
    3344:	9d 32       	cpi	r25, 0x2D	; 45
    3346:	49 f0       	breq	.+18     	; 0x335a <vfprintf+0x98>
    3348:	90 33       	cpi	r25, 0x30	; 48
    334a:	69 f4       	brne	.+26     	; 0x3366 <vfprintf+0xa4>
    334c:	41 e0       	ldi	r20, 0x01	; 1
    334e:	24 c0       	rjmp	.+72     	; 0x3398 <vfprintf+0xd6>
    3350:	52 e0       	ldi	r21, 0x02	; 2
    3352:	f5 2a       	or	r15, r21
    3354:	84 e0       	ldi	r24, 0x04	; 4
    3356:	f8 2a       	or	r15, r24
    3358:	28 c0       	rjmp	.+80     	; 0x33aa <vfprintf+0xe8>
    335a:	98 e0       	ldi	r25, 0x08	; 8
    335c:	f9 2a       	or	r15, r25
    335e:	25 c0       	rjmp	.+74     	; 0x33aa <vfprintf+0xe8>
    3360:	e0 e1       	ldi	r30, 0x10	; 16
    3362:	fe 2a       	or	r15, r30
    3364:	22 c0       	rjmp	.+68     	; 0x33aa <vfprintf+0xe8>
    3366:	f7 fc       	sbrc	r15, 7
    3368:	29 c0       	rjmp	.+82     	; 0x33bc <vfprintf+0xfa>
    336a:	89 2f       	mov	r24, r25
    336c:	80 53       	subi	r24, 0x30	; 48
    336e:	8a 30       	cpi	r24, 0x0A	; 10
    3370:	70 f4       	brcc	.+28     	; 0x338e <vfprintf+0xcc>
    3372:	f6 fe       	sbrs	r15, 6
    3374:	05 c0       	rjmp	.+10     	; 0x3380 <vfprintf+0xbe>
    3376:	98 9c       	mul	r9, r8
    3378:	90 2c       	mov	r9, r0
    337a:	11 24       	eor	r1, r1
    337c:	98 0e       	add	r9, r24
    337e:	15 c0       	rjmp	.+42     	; 0x33aa <vfprintf+0xe8>
    3380:	e8 9c       	mul	r14, r8
    3382:	e0 2c       	mov	r14, r0
    3384:	11 24       	eor	r1, r1
    3386:	e8 0e       	add	r14, r24
    3388:	f0 e2       	ldi	r31, 0x20	; 32
    338a:	ff 2a       	or	r15, r31
    338c:	0e c0       	rjmp	.+28     	; 0x33aa <vfprintf+0xe8>
    338e:	9e 32       	cpi	r25, 0x2E	; 46
    3390:	29 f4       	brne	.+10     	; 0x339c <vfprintf+0xda>
    3392:	f6 fc       	sbrc	r15, 6
    3394:	6b c1       	rjmp	.+726    	; 0x366c <vfprintf+0x3aa>
    3396:	40 e4       	ldi	r20, 0x40	; 64
    3398:	f4 2a       	or	r15, r20
    339a:	07 c0       	rjmp	.+14     	; 0x33aa <vfprintf+0xe8>
    339c:	9c 36       	cpi	r25, 0x6C	; 108
    339e:	19 f4       	brne	.+6      	; 0x33a6 <vfprintf+0xe4>
    33a0:	50 e8       	ldi	r21, 0x80	; 128
    33a2:	f5 2a       	or	r15, r21
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <vfprintf+0xe8>
    33a6:	98 36       	cpi	r25, 0x68	; 104
    33a8:	49 f4       	brne	.+18     	; 0x33bc <vfprintf+0xfa>
    33aa:	f2 01       	movw	r30, r4
    33ac:	23 fd       	sbrc	r18, 3
    33ae:	95 91       	lpm	r25, Z+
    33b0:	23 ff       	sbrs	r18, 3
    33b2:	91 91       	ld	r25, Z+
    33b4:	2f 01       	movw	r4, r30
    33b6:	99 23       	and	r25, r25
    33b8:	09 f0       	breq	.+2      	; 0x33bc <vfprintf+0xfa>
    33ba:	b8 cf       	rjmp	.-144    	; 0x332c <vfprintf+0x6a>
    33bc:	89 2f       	mov	r24, r25
    33be:	85 54       	subi	r24, 0x45	; 69
    33c0:	83 30       	cpi	r24, 0x03	; 3
    33c2:	18 f0       	brcs	.+6      	; 0x33ca <vfprintf+0x108>
    33c4:	80 52       	subi	r24, 0x20	; 32
    33c6:	83 30       	cpi	r24, 0x03	; 3
    33c8:	38 f4       	brcc	.+14     	; 0x33d8 <vfprintf+0x116>
    33ca:	44 e0       	ldi	r20, 0x04	; 4
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	a4 0e       	add	r10, r20
    33d0:	b5 1e       	adc	r11, r21
    33d2:	5f e3       	ldi	r21, 0x3F	; 63
    33d4:	59 83       	std	Y+1, r21	; 0x01
    33d6:	0f c0       	rjmp	.+30     	; 0x33f6 <vfprintf+0x134>
    33d8:	93 36       	cpi	r25, 0x63	; 99
    33da:	31 f0       	breq	.+12     	; 0x33e8 <vfprintf+0x126>
    33dc:	93 37       	cpi	r25, 0x73	; 115
    33de:	79 f0       	breq	.+30     	; 0x33fe <vfprintf+0x13c>
    33e0:	93 35       	cpi	r25, 0x53	; 83
    33e2:	09 f0       	breq	.+2      	; 0x33e6 <vfprintf+0x124>
    33e4:	56 c0       	rjmp	.+172    	; 0x3492 <vfprintf+0x1d0>
    33e6:	20 c0       	rjmp	.+64     	; 0x3428 <vfprintf+0x166>
    33e8:	f5 01       	movw	r30, r10
    33ea:	80 81       	ld	r24, Z
    33ec:	89 83       	std	Y+1, r24	; 0x01
    33ee:	42 e0       	ldi	r20, 0x02	; 2
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	a4 0e       	add	r10, r20
    33f4:	b5 1e       	adc	r11, r21
    33f6:	61 01       	movw	r12, r2
    33f8:	01 e0       	ldi	r16, 0x01	; 1
    33fa:	10 e0       	ldi	r17, 0x00	; 0
    33fc:	12 c0       	rjmp	.+36     	; 0x3422 <vfprintf+0x160>
    33fe:	f5 01       	movw	r30, r10
    3400:	c0 80       	ld	r12, Z
    3402:	d1 80       	ldd	r13, Z+1	; 0x01
    3404:	f6 fc       	sbrc	r15, 6
    3406:	03 c0       	rjmp	.+6      	; 0x340e <vfprintf+0x14c>
    3408:	6f ef       	ldi	r22, 0xFF	; 255
    340a:	7f ef       	ldi	r23, 0xFF	; 255
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <vfprintf+0x150>
    340e:	69 2d       	mov	r22, r9
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	42 e0       	ldi	r20, 0x02	; 2
    3414:	50 e0       	ldi	r21, 0x00	; 0
    3416:	a4 0e       	add	r10, r20
    3418:	b5 1e       	adc	r11, r21
    341a:	c6 01       	movw	r24, r12
    341c:	0e 94 49 1b 	call	0x3692	; 0x3692 <strnlen>
    3420:	8c 01       	movw	r16, r24
    3422:	5f e7       	ldi	r21, 0x7F	; 127
    3424:	f5 22       	and	r15, r21
    3426:	14 c0       	rjmp	.+40     	; 0x3450 <vfprintf+0x18e>
    3428:	f5 01       	movw	r30, r10
    342a:	c0 80       	ld	r12, Z
    342c:	d1 80       	ldd	r13, Z+1	; 0x01
    342e:	f6 fc       	sbrc	r15, 6
    3430:	03 c0       	rjmp	.+6      	; 0x3438 <vfprintf+0x176>
    3432:	6f ef       	ldi	r22, 0xFF	; 255
    3434:	7f ef       	ldi	r23, 0xFF	; 255
    3436:	02 c0       	rjmp	.+4      	; 0x343c <vfprintf+0x17a>
    3438:	69 2d       	mov	r22, r9
    343a:	70 e0       	ldi	r23, 0x00	; 0
    343c:	42 e0       	ldi	r20, 0x02	; 2
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	a4 0e       	add	r10, r20
    3442:	b5 1e       	adc	r11, r21
    3444:	c6 01       	movw	r24, r12
    3446:	0e 94 3e 1b 	call	0x367c	; 0x367c <strnlen_P>
    344a:	8c 01       	movw	r16, r24
    344c:	50 e8       	ldi	r21, 0x80	; 128
    344e:	f5 2a       	or	r15, r21
    3450:	f3 fe       	sbrs	r15, 3
    3452:	07 c0       	rjmp	.+14     	; 0x3462 <vfprintf+0x1a0>
    3454:	1a c0       	rjmp	.+52     	; 0x348a <vfprintf+0x1c8>
    3456:	80 e2       	ldi	r24, 0x20	; 32
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	b3 01       	movw	r22, r6
    345c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    3460:	ea 94       	dec	r14
    3462:	8e 2d       	mov	r24, r14
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	08 17       	cp	r16, r24
    3468:	19 07       	cpc	r17, r25
    346a:	a8 f3       	brcs	.-22     	; 0x3456 <vfprintf+0x194>
    346c:	0e c0       	rjmp	.+28     	; 0x348a <vfprintf+0x1c8>
    346e:	f6 01       	movw	r30, r12
    3470:	f7 fc       	sbrc	r15, 7
    3472:	85 91       	lpm	r24, Z+
    3474:	f7 fe       	sbrs	r15, 7
    3476:	81 91       	ld	r24, Z+
    3478:	6f 01       	movw	r12, r30
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	b3 01       	movw	r22, r6
    347e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    3482:	e1 10       	cpse	r14, r1
    3484:	ea 94       	dec	r14
    3486:	01 50       	subi	r16, 0x01	; 1
    3488:	10 40       	sbci	r17, 0x00	; 0
    348a:	01 15       	cp	r16, r1
    348c:	11 05       	cpc	r17, r1
    348e:	79 f7       	brne	.-34     	; 0x346e <vfprintf+0x1ac>
    3490:	ea c0       	rjmp	.+468    	; 0x3666 <vfprintf+0x3a4>
    3492:	94 36       	cpi	r25, 0x64	; 100
    3494:	11 f0       	breq	.+4      	; 0x349a <vfprintf+0x1d8>
    3496:	99 36       	cpi	r25, 0x69	; 105
    3498:	69 f5       	brne	.+90     	; 0x34f4 <vfprintf+0x232>
    349a:	f7 fe       	sbrs	r15, 7
    349c:	08 c0       	rjmp	.+16     	; 0x34ae <vfprintf+0x1ec>
    349e:	f5 01       	movw	r30, r10
    34a0:	20 81       	ld	r18, Z
    34a2:	31 81       	ldd	r19, Z+1	; 0x01
    34a4:	42 81       	ldd	r20, Z+2	; 0x02
    34a6:	53 81       	ldd	r21, Z+3	; 0x03
    34a8:	84 e0       	ldi	r24, 0x04	; 4
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0a c0       	rjmp	.+20     	; 0x34c2 <vfprintf+0x200>
    34ae:	f5 01       	movw	r30, r10
    34b0:	80 81       	ld	r24, Z
    34b2:	91 81       	ldd	r25, Z+1	; 0x01
    34b4:	9c 01       	movw	r18, r24
    34b6:	44 27       	eor	r20, r20
    34b8:	37 fd       	sbrc	r19, 7
    34ba:	40 95       	com	r20
    34bc:	54 2f       	mov	r21, r20
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	a8 0e       	add	r10, r24
    34c4:	b9 1e       	adc	r11, r25
    34c6:	9f e6       	ldi	r25, 0x6F	; 111
    34c8:	f9 22       	and	r15, r25
    34ca:	57 ff       	sbrs	r21, 7
    34cc:	09 c0       	rjmp	.+18     	; 0x34e0 <vfprintf+0x21e>
    34ce:	50 95       	com	r21
    34d0:	40 95       	com	r20
    34d2:	30 95       	com	r19
    34d4:	21 95       	neg	r18
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
    34d8:	4f 4f       	sbci	r20, 0xFF	; 255
    34da:	5f 4f       	sbci	r21, 0xFF	; 255
    34dc:	e0 e8       	ldi	r30, 0x80	; 128
    34de:	fe 2a       	or	r15, r30
    34e0:	ca 01       	movw	r24, r20
    34e2:	b9 01       	movw	r22, r18
    34e4:	a1 01       	movw	r20, r2
    34e6:	2a e0       	ldi	r18, 0x0A	; 10
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	0e 94 80 1b 	call	0x3700	; 0x3700 <__ultoa_invert>
    34ee:	d8 2e       	mov	r13, r24
    34f0:	d2 18       	sub	r13, r2
    34f2:	40 c0       	rjmp	.+128    	; 0x3574 <vfprintf+0x2b2>
    34f4:	95 37       	cpi	r25, 0x75	; 117
    34f6:	29 f4       	brne	.+10     	; 0x3502 <vfprintf+0x240>
    34f8:	1f 2d       	mov	r17, r15
    34fa:	1f 7e       	andi	r17, 0xEF	; 239
    34fc:	2a e0       	ldi	r18, 0x0A	; 10
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	1d c0       	rjmp	.+58     	; 0x353c <vfprintf+0x27a>
    3502:	1f 2d       	mov	r17, r15
    3504:	19 7f       	andi	r17, 0xF9	; 249
    3506:	9f 36       	cpi	r25, 0x6F	; 111
    3508:	61 f0       	breq	.+24     	; 0x3522 <vfprintf+0x260>
    350a:	90 37       	cpi	r25, 0x70	; 112
    350c:	20 f4       	brcc	.+8      	; 0x3516 <vfprintf+0x254>
    350e:	98 35       	cpi	r25, 0x58	; 88
    3510:	09 f0       	breq	.+2      	; 0x3514 <vfprintf+0x252>
    3512:	ac c0       	rjmp	.+344    	; 0x366c <vfprintf+0x3aa>
    3514:	0f c0       	rjmp	.+30     	; 0x3534 <vfprintf+0x272>
    3516:	90 37       	cpi	r25, 0x70	; 112
    3518:	39 f0       	breq	.+14     	; 0x3528 <vfprintf+0x266>
    351a:	98 37       	cpi	r25, 0x78	; 120
    351c:	09 f0       	breq	.+2      	; 0x3520 <vfprintf+0x25e>
    351e:	a6 c0       	rjmp	.+332    	; 0x366c <vfprintf+0x3aa>
    3520:	04 c0       	rjmp	.+8      	; 0x352a <vfprintf+0x268>
    3522:	28 e0       	ldi	r18, 0x08	; 8
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	0a c0       	rjmp	.+20     	; 0x353c <vfprintf+0x27a>
    3528:	10 61       	ori	r17, 0x10	; 16
    352a:	14 fd       	sbrc	r17, 4
    352c:	14 60       	ori	r17, 0x04	; 4
    352e:	20 e1       	ldi	r18, 0x10	; 16
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	04 c0       	rjmp	.+8      	; 0x353c <vfprintf+0x27a>
    3534:	14 fd       	sbrc	r17, 4
    3536:	16 60       	ori	r17, 0x06	; 6
    3538:	20 e1       	ldi	r18, 0x10	; 16
    353a:	32 e0       	ldi	r19, 0x02	; 2
    353c:	17 ff       	sbrs	r17, 7
    353e:	08 c0       	rjmp	.+16     	; 0x3550 <vfprintf+0x28e>
    3540:	f5 01       	movw	r30, r10
    3542:	60 81       	ld	r22, Z
    3544:	71 81       	ldd	r23, Z+1	; 0x01
    3546:	82 81       	ldd	r24, Z+2	; 0x02
    3548:	93 81       	ldd	r25, Z+3	; 0x03
    354a:	44 e0       	ldi	r20, 0x04	; 4
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	08 c0       	rjmp	.+16     	; 0x3560 <vfprintf+0x29e>
    3550:	f5 01       	movw	r30, r10
    3552:	80 81       	ld	r24, Z
    3554:	91 81       	ldd	r25, Z+1	; 0x01
    3556:	bc 01       	movw	r22, r24
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	42 e0       	ldi	r20, 0x02	; 2
    355e:	50 e0       	ldi	r21, 0x00	; 0
    3560:	a4 0e       	add	r10, r20
    3562:	b5 1e       	adc	r11, r21
    3564:	a1 01       	movw	r20, r2
    3566:	0e 94 80 1b 	call	0x3700	; 0x3700 <__ultoa_invert>
    356a:	d8 2e       	mov	r13, r24
    356c:	d2 18       	sub	r13, r2
    356e:	8f e7       	ldi	r24, 0x7F	; 127
    3570:	f8 2e       	mov	r15, r24
    3572:	f1 22       	and	r15, r17
    3574:	f6 fe       	sbrs	r15, 6
    3576:	0b c0       	rjmp	.+22     	; 0x358e <vfprintf+0x2cc>
    3578:	5e ef       	ldi	r21, 0xFE	; 254
    357a:	f5 22       	and	r15, r21
    357c:	d9 14       	cp	r13, r9
    357e:	38 f4       	brcc	.+14     	; 0x358e <vfprintf+0x2cc>
    3580:	f4 fe       	sbrs	r15, 4
    3582:	07 c0       	rjmp	.+14     	; 0x3592 <vfprintf+0x2d0>
    3584:	f2 fc       	sbrc	r15, 2
    3586:	05 c0       	rjmp	.+10     	; 0x3592 <vfprintf+0x2d0>
    3588:	8f ee       	ldi	r24, 0xEF	; 239
    358a:	f8 22       	and	r15, r24
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <vfprintf+0x2d0>
    358e:	1d 2d       	mov	r17, r13
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <vfprintf+0x2d2>
    3592:	19 2d       	mov	r17, r9
    3594:	f4 fe       	sbrs	r15, 4
    3596:	0d c0       	rjmp	.+26     	; 0x35b2 <vfprintf+0x2f0>
    3598:	fe 01       	movw	r30, r28
    359a:	ed 0d       	add	r30, r13
    359c:	f1 1d       	adc	r31, r1
    359e:	80 81       	ld	r24, Z
    35a0:	80 33       	cpi	r24, 0x30	; 48
    35a2:	19 f4       	brne	.+6      	; 0x35aa <vfprintf+0x2e8>
    35a4:	99 ee       	ldi	r25, 0xE9	; 233
    35a6:	f9 22       	and	r15, r25
    35a8:	08 c0       	rjmp	.+16     	; 0x35ba <vfprintf+0x2f8>
    35aa:	1f 5f       	subi	r17, 0xFF	; 255
    35ac:	f2 fe       	sbrs	r15, 2
    35ae:	05 c0       	rjmp	.+10     	; 0x35ba <vfprintf+0x2f8>
    35b0:	03 c0       	rjmp	.+6      	; 0x35b8 <vfprintf+0x2f6>
    35b2:	8f 2d       	mov	r24, r15
    35b4:	86 78       	andi	r24, 0x86	; 134
    35b6:	09 f0       	breq	.+2      	; 0x35ba <vfprintf+0x2f8>
    35b8:	1f 5f       	subi	r17, 0xFF	; 255
    35ba:	0f 2d       	mov	r16, r15
    35bc:	f3 fc       	sbrc	r15, 3
    35be:	14 c0       	rjmp	.+40     	; 0x35e8 <vfprintf+0x326>
    35c0:	f0 fe       	sbrs	r15, 0
    35c2:	0f c0       	rjmp	.+30     	; 0x35e2 <vfprintf+0x320>
    35c4:	1e 15       	cp	r17, r14
    35c6:	10 f0       	brcs	.+4      	; 0x35cc <vfprintf+0x30a>
    35c8:	9d 2c       	mov	r9, r13
    35ca:	0b c0       	rjmp	.+22     	; 0x35e2 <vfprintf+0x320>
    35cc:	9d 2c       	mov	r9, r13
    35ce:	9e 0c       	add	r9, r14
    35d0:	91 1a       	sub	r9, r17
    35d2:	1e 2d       	mov	r17, r14
    35d4:	06 c0       	rjmp	.+12     	; 0x35e2 <vfprintf+0x320>
    35d6:	80 e2       	ldi	r24, 0x20	; 32
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	b3 01       	movw	r22, r6
    35dc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    35e0:	1f 5f       	subi	r17, 0xFF	; 255
    35e2:	1e 15       	cp	r17, r14
    35e4:	c0 f3       	brcs	.-16     	; 0x35d6 <vfprintf+0x314>
    35e6:	04 c0       	rjmp	.+8      	; 0x35f0 <vfprintf+0x32e>
    35e8:	1e 15       	cp	r17, r14
    35ea:	10 f4       	brcc	.+4      	; 0x35f0 <vfprintf+0x32e>
    35ec:	e1 1a       	sub	r14, r17
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <vfprintf+0x330>
    35f0:	ee 24       	eor	r14, r14
    35f2:	04 ff       	sbrs	r16, 4
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <vfprintf+0x352>
    35f6:	80 e3       	ldi	r24, 0x30	; 48
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	b3 01       	movw	r22, r6
    35fc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    3600:	02 ff       	sbrs	r16, 2
    3602:	1d c0       	rjmp	.+58     	; 0x363e <vfprintf+0x37c>
    3604:	01 fd       	sbrc	r16, 1
    3606:	03 c0       	rjmp	.+6      	; 0x360e <vfprintf+0x34c>
    3608:	88 e7       	ldi	r24, 0x78	; 120
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e c0       	rjmp	.+28     	; 0x362a <vfprintf+0x368>
    360e:	88 e5       	ldi	r24, 0x58	; 88
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0b c0       	rjmp	.+22     	; 0x362a <vfprintf+0x368>
    3614:	80 2f       	mov	r24, r16
    3616:	86 78       	andi	r24, 0x86	; 134
    3618:	91 f0       	breq	.+36     	; 0x363e <vfprintf+0x37c>
    361a:	01 ff       	sbrs	r16, 1
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <vfprintf+0x360>
    361e:	8b e2       	ldi	r24, 0x2B	; 43
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <vfprintf+0x362>
    3622:	80 e2       	ldi	r24, 0x20	; 32
    3624:	f7 fc       	sbrc	r15, 7
    3626:	8d e2       	ldi	r24, 0x2D	; 45
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	b3 01       	movw	r22, r6
    362c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    3630:	06 c0       	rjmp	.+12     	; 0x363e <vfprintf+0x37c>
    3632:	80 e3       	ldi	r24, 0x30	; 48
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	b3 01       	movw	r22, r6
    3638:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    363c:	9a 94       	dec	r9
    363e:	d9 14       	cp	r13, r9
    3640:	c0 f3       	brcs	.-16     	; 0x3632 <vfprintf+0x370>
    3642:	da 94       	dec	r13
    3644:	f1 01       	movw	r30, r2
    3646:	ed 0d       	add	r30, r13
    3648:	f1 1d       	adc	r31, r1
    364a:	80 81       	ld	r24, Z
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	b3 01       	movw	r22, r6
    3650:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    3654:	dd 20       	and	r13, r13
    3656:	a9 f7       	brne	.-22     	; 0x3642 <vfprintf+0x380>
    3658:	06 c0       	rjmp	.+12     	; 0x3666 <vfprintf+0x3a4>
    365a:	80 e2       	ldi	r24, 0x20	; 32
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	b3 01       	movw	r22, r6
    3660:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <fputc>
    3664:	ea 94       	dec	r14
    3666:	ee 20       	and	r14, r14
    3668:	c1 f7       	brne	.-16     	; 0x365a <vfprintf+0x398>
    366a:	43 ce       	rjmp	.-890    	; 0x32f2 <vfprintf+0x30>
    366c:	f3 01       	movw	r30, r6
    366e:	66 81       	ldd	r22, Z+6	; 0x06
    3670:	77 81       	ldd	r23, Z+7	; 0x07
    3672:	cb 01       	movw	r24, r22
    3674:	2b 96       	adiw	r28, 0x0b	; 11
    3676:	e2 e1       	ldi	r30, 0x12	; 18
    3678:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__epilogue_restores__>

0000367c <strnlen_P>:
    367c:	fc 01       	movw	r30, r24
    367e:	05 90       	lpm	r0, Z+
    3680:	61 50       	subi	r22, 0x01	; 1
    3682:	70 40       	sbci	r23, 0x00	; 0
    3684:	01 10       	cpse	r0, r1
    3686:	d8 f7       	brcc	.-10     	; 0x367e <strnlen_P+0x2>
    3688:	80 95       	com	r24
    368a:	90 95       	com	r25
    368c:	8e 0f       	add	r24, r30
    368e:	9f 1f       	adc	r25, r31
    3690:	08 95       	ret

00003692 <strnlen>:
    3692:	fc 01       	movw	r30, r24
    3694:	61 50       	subi	r22, 0x01	; 1
    3696:	70 40       	sbci	r23, 0x00	; 0
    3698:	01 90       	ld	r0, Z+
    369a:	01 10       	cpse	r0, r1
    369c:	d8 f7       	brcc	.-10     	; 0x3694 <strnlen+0x2>
    369e:	80 95       	com	r24
    36a0:	90 95       	com	r25
    36a2:	8e 0f       	add	r24, r30
    36a4:	9f 1f       	adc	r25, r31
    36a6:	08 95       	ret

000036a8 <fputc>:
    36a8:	0f 93       	push	r16
    36aa:	1f 93       	push	r17
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	8c 01       	movw	r16, r24
    36b2:	eb 01       	movw	r28, r22
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	81 ff       	sbrs	r24, 1
    36b8:	1b c0       	rjmp	.+54     	; 0x36f0 <fputc+0x48>
    36ba:	82 ff       	sbrs	r24, 2
    36bc:	0d c0       	rjmp	.+26     	; 0x36d8 <fputc+0x30>
    36be:	2e 81       	ldd	r18, Y+6	; 0x06
    36c0:	3f 81       	ldd	r19, Y+7	; 0x07
    36c2:	8c 81       	ldd	r24, Y+4	; 0x04
    36c4:	9d 81       	ldd	r25, Y+5	; 0x05
    36c6:	28 17       	cp	r18, r24
    36c8:	39 07       	cpc	r19, r25
    36ca:	64 f4       	brge	.+24     	; 0x36e4 <fputc+0x3c>
    36cc:	e8 81       	ld	r30, Y
    36ce:	f9 81       	ldd	r31, Y+1	; 0x01
    36d0:	01 93       	st	Z+, r16
    36d2:	f9 83       	std	Y+1, r31	; 0x01
    36d4:	e8 83       	st	Y, r30
    36d6:	06 c0       	rjmp	.+12     	; 0x36e4 <fputc+0x3c>
    36d8:	e8 85       	ldd	r30, Y+8	; 0x08
    36da:	f9 85       	ldd	r31, Y+9	; 0x09
    36dc:	80 2f       	mov	r24, r16
    36de:	09 95       	icall
    36e0:	89 2b       	or	r24, r25
    36e2:	31 f4       	brne	.+12     	; 0x36f0 <fputc+0x48>
    36e4:	8e 81       	ldd	r24, Y+6	; 0x06
    36e6:	9f 81       	ldd	r25, Y+7	; 0x07
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	9f 83       	std	Y+7, r25	; 0x07
    36ec:	8e 83       	std	Y+6, r24	; 0x06
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <fputc+0x4c>
    36f0:	0f ef       	ldi	r16, 0xFF	; 255
    36f2:	1f ef       	ldi	r17, 0xFF	; 255
    36f4:	c8 01       	movw	r24, r16
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	08 95       	ret

00003700 <__ultoa_invert>:
    3700:	fa 01       	movw	r30, r20
    3702:	aa 27       	eor	r26, r26
    3704:	28 30       	cpi	r18, 0x08	; 8
    3706:	51 f1       	breq	.+84     	; 0x375c <__ultoa_invert+0x5c>
    3708:	20 31       	cpi	r18, 0x10	; 16
    370a:	81 f1       	breq	.+96     	; 0x376c <__ultoa_invert+0x6c>
    370c:	e8 94       	clt
    370e:	6f 93       	push	r22
    3710:	6e 7f       	andi	r22, 0xFE	; 254
    3712:	6e 5f       	subi	r22, 0xFE	; 254
    3714:	7f 4f       	sbci	r23, 0xFF	; 255
    3716:	8f 4f       	sbci	r24, 0xFF	; 255
    3718:	9f 4f       	sbci	r25, 0xFF	; 255
    371a:	af 4f       	sbci	r26, 0xFF	; 255
    371c:	b1 e0       	ldi	r27, 0x01	; 1
    371e:	3e d0       	rcall	.+124    	; 0x379c <__ultoa_invert+0x9c>
    3720:	b4 e0       	ldi	r27, 0x04	; 4
    3722:	3c d0       	rcall	.+120    	; 0x379c <__ultoa_invert+0x9c>
    3724:	67 0f       	add	r22, r23
    3726:	78 1f       	adc	r23, r24
    3728:	89 1f       	adc	r24, r25
    372a:	9a 1f       	adc	r25, r26
    372c:	a1 1d       	adc	r26, r1
    372e:	68 0f       	add	r22, r24
    3730:	79 1f       	adc	r23, r25
    3732:	8a 1f       	adc	r24, r26
    3734:	91 1d       	adc	r25, r1
    3736:	a1 1d       	adc	r26, r1
    3738:	6a 0f       	add	r22, r26
    373a:	71 1d       	adc	r23, r1
    373c:	81 1d       	adc	r24, r1
    373e:	91 1d       	adc	r25, r1
    3740:	a1 1d       	adc	r26, r1
    3742:	20 d0       	rcall	.+64     	; 0x3784 <__ultoa_invert+0x84>
    3744:	09 f4       	brne	.+2      	; 0x3748 <__ultoa_invert+0x48>
    3746:	68 94       	set
    3748:	3f 91       	pop	r19
    374a:	2a e0       	ldi	r18, 0x0A	; 10
    374c:	26 9f       	mul	r18, r22
    374e:	11 24       	eor	r1, r1
    3750:	30 19       	sub	r19, r0
    3752:	30 5d       	subi	r19, 0xD0	; 208
    3754:	31 93       	st	Z+, r19
    3756:	de f6       	brtc	.-74     	; 0x370e <__ultoa_invert+0xe>
    3758:	cf 01       	movw	r24, r30
    375a:	08 95       	ret
    375c:	46 2f       	mov	r20, r22
    375e:	47 70       	andi	r20, 0x07	; 7
    3760:	40 5d       	subi	r20, 0xD0	; 208
    3762:	41 93       	st	Z+, r20
    3764:	b3 e0       	ldi	r27, 0x03	; 3
    3766:	0f d0       	rcall	.+30     	; 0x3786 <__ultoa_invert+0x86>
    3768:	c9 f7       	brne	.-14     	; 0x375c <__ultoa_invert+0x5c>
    376a:	f6 cf       	rjmp	.-20     	; 0x3758 <__ultoa_invert+0x58>
    376c:	46 2f       	mov	r20, r22
    376e:	4f 70       	andi	r20, 0x0F	; 15
    3770:	40 5d       	subi	r20, 0xD0	; 208
    3772:	4a 33       	cpi	r20, 0x3A	; 58
    3774:	18 f0       	brcs	.+6      	; 0x377c <__ultoa_invert+0x7c>
    3776:	49 5d       	subi	r20, 0xD9	; 217
    3778:	31 fd       	sbrc	r19, 1
    377a:	40 52       	subi	r20, 0x20	; 32
    377c:	41 93       	st	Z+, r20
    377e:	02 d0       	rcall	.+4      	; 0x3784 <__ultoa_invert+0x84>
    3780:	a9 f7       	brne	.-22     	; 0x376c <__ultoa_invert+0x6c>
    3782:	ea cf       	rjmp	.-44     	; 0x3758 <__ultoa_invert+0x58>
    3784:	b4 e0       	ldi	r27, 0x04	; 4
    3786:	a6 95       	lsr	r26
    3788:	97 95       	ror	r25
    378a:	87 95       	ror	r24
    378c:	77 95       	ror	r23
    378e:	67 95       	ror	r22
    3790:	ba 95       	dec	r27
    3792:	c9 f7       	brne	.-14     	; 0x3786 <__ultoa_invert+0x86>
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	61 05       	cpc	r22, r1
    3798:	71 05       	cpc	r23, r1
    379a:	08 95       	ret
    379c:	9b 01       	movw	r18, r22
    379e:	ac 01       	movw	r20, r24
    37a0:	0a 2e       	mov	r0, r26
    37a2:	06 94       	lsr	r0
    37a4:	57 95       	ror	r21
    37a6:	47 95       	ror	r20
    37a8:	37 95       	ror	r19
    37aa:	27 95       	ror	r18
    37ac:	ba 95       	dec	r27
    37ae:	c9 f7       	brne	.-14     	; 0x37a2 <__ultoa_invert+0xa2>
    37b0:	62 0f       	add	r22, r18
    37b2:	73 1f       	adc	r23, r19
    37b4:	84 1f       	adc	r24, r20
    37b6:	95 1f       	adc	r25, r21
    37b8:	a0 1d       	adc	r26, r0
    37ba:	08 95       	ret

000037bc <_exit>:
    37bc:	f8 94       	cli

000037be <__stop_program>:
    37be:	ff cf       	rjmp	.-2      	; 0x37be <__stop_program>
