
AT32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002fc  00800060  00004846  000048da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  0080035c  0080035c  00004bd6  2**0
                  ALLOC
  3 .stab         000065e8  00000000  00000000  00004bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004a95  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000fc55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  0000fdf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  0000ffeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  0001237e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  000136f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001492c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  00014aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  00014deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000157c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__vector_1>
       8:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__vector_2>
       c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__vector_3>
      10:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_4>
      14:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_5>
      18:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_6>
      1c:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_7>
      20:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__vector_8>
      24:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__vector_9>
      28:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__vector_10>
      2c:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 35       	cpi	r26, 0x5C	; 92
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac e5       	ldi	r26, 0x5C	; 92
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <main>
      8a:	0c 94 21 24 	jmp	0x4842	; 0x4842 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 20 	jmp	0x404a	; 0x404a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 20 	jmp	0x404a	; 0x404a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 25 20 	jmp	0x404a	; 0x404a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__epilogue_restores__+0x18>

000007ea <__ltsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 25 20 	jmp	0x404a	; 0x404a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__ltsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__ltsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__ltsf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__epilogue_restores__+0x18>

0000084a <__floatsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__prologue_saves__+0x12>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	da 01       	movw	r26, r20
     860:	c9 01       	movw	r24, r18
     862:	88 27       	eor	r24, r24
     864:	b7 fd       	sbrc	r27, 7
     866:	83 95       	inc	r24
     868:	99 27       	eor	r25, r25
     86a:	aa 27       	eor	r26, r26
     86c:	bb 27       	eor	r27, r27
     86e:	b8 2e       	mov	r11, r24
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	41 05       	cpc	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	19 f4       	brne	.+6      	; 0x880 <__stack+0x21>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__stack+0x95>
     880:	88 23       	and	r24, r24
     882:	a9 f0       	breq	.+42     	; 0x8ae <__stack+0x4f>
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	58 07       	cpc	r21, r24
     892:	29 f4       	brne	.+10     	; 0x89e <__stack+0x3f>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9f ec       	ldi	r25, 0xCF	; 207
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <__stack+0x9f>
     89e:	ee 24       	eor	r14, r14
     8a0:	ff 24       	eor	r15, r15
     8a2:	87 01       	movw	r16, r14
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	79 01       	movw	r14, r18
     8b0:	8a 01       	movw	r16, r20
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	c8 2e       	mov	r12, r24
     8b6:	d1 2c       	mov	r13, r1
     8b8:	dc 82       	std	Y+4, r13	; 0x04
     8ba:	cb 82       	std	Y+3, r12	; 0x03
     8bc:	ed 82       	std	Y+5, r14	; 0x05
     8be:	fe 82       	std	Y+6, r15	; 0x06
     8c0:	0f 83       	std	Y+7, r16	; 0x07
     8c2:	18 87       	std	Y+8, r17	; 0x08
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x95>
     8d4:	08 2e       	mov	r0, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	ee 0c       	add	r14, r14
     8da:	ff 1c       	adc	r15, r15
     8dc:	00 1f       	adc	r16, r16
     8de:	11 1f       	adc	r17, r17
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d9 0a       	sbc	r13, r25
     8f0:	dc 82       	std	Y+4, r13	; 0x04
     8f2:	cb 82       	std	Y+3, r12	; 0x03
     8f4:	ba 82       	std	Y+2, r11	; 0x02
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     8fe:	28 96       	adiw	r28, 0x08	; 8
     900:	e9 e0       	ldi	r30, 0x09	; 9
     902:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__epilogue_restores__+0x12>

00000906 <__fixsfsi>:
     906:	ac e0       	ldi	r26, 0x0C	; 12
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__prologue_saves__+0x20>
     912:	69 83       	std	Y+1, r22	; 0x01
     914:	7a 83       	std	Y+2, r23	; 0x02
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	be 01       	movw	r22, r28
     920:	6b 5f       	subi	r22, 0xFB	; 251
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	61 f1       	breq	.+88     	; 0x986 <__fixsfsi+0x80>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	50 f1       	brcs	.+84     	; 0x986 <__fixsfsi+0x80>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	21 f4       	brne	.+8      	; 0x93e <__fixsfsi+0x38>
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	88 23       	and	r24, r24
     93a:	51 f1       	breq	.+84     	; 0x990 <__fixsfsi+0x8a>
     93c:	2e c0       	rjmp	.+92     	; 0x99a <__fixsfsi+0x94>
     93e:	2f 81       	ldd	r18, Y+7	; 0x07
     940:	38 85       	ldd	r19, Y+8	; 0x08
     942:	37 fd       	sbrc	r19, 7
     944:	20 c0       	rjmp	.+64     	; 0x986 <__fixsfsi+0x80>
     946:	6e 81       	ldd	r22, Y+6	; 0x06
     948:	2f 31       	cpi	r18, 0x1F	; 31
     94a:	31 05       	cpc	r19, r1
     94c:	1c f0       	brlt	.+6      	; 0x954 <__fixsfsi+0x4e>
     94e:	66 23       	and	r22, r22
     950:	f9 f0       	breq	.+62     	; 0x990 <__fixsfsi+0x8a>
     952:	23 c0       	rjmp	.+70     	; 0x99a <__fixsfsi+0x94>
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	29 85       	ldd	r18, Y+9	; 0x09
     95e:	3a 85       	ldd	r19, Y+10	; 0x0a
     960:	4b 85       	ldd	r20, Y+11	; 0x0b
     962:	5c 85       	ldd	r21, Y+12	; 0x0c
     964:	04 c0       	rjmp	.+8      	; 0x96e <__fixsfsi+0x68>
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__fixsfsi+0x60>
     972:	66 23       	and	r22, r22
     974:	b1 f0       	breq	.+44     	; 0x9a2 <__fixsfsi+0x9c>
     976:	50 95       	com	r21
     978:	40 95       	com	r20
     97a:	30 95       	com	r19
     97c:	21 95       	neg	r18
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__fixsfsi+0x9c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__fixsfsi+0x9c>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e8       	ldi	r21, 0x80	; 128
     9a2:	b9 01       	movw	r22, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	2c 96       	adiw	r28, 0x0c	; 12
     9a8:	e2 e0       	ldi	r30, 0x02	; 2
     9aa:	0c 94 45 20 	jmp	0x408a	; 0x408a <__epilogue_restores__+0x20>

000009ae <__floatunsisf>:
     9ae:	a8 e0       	ldi	r26, 0x08	; 8
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__prologue_saves__+0x10>
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	81 05       	cpc	r24, r1
     9c4:	91 05       	cpc	r25, r1
     9c6:	19 f4       	brne	.+6      	; 0x9ce <__floatunsisf+0x20>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	60 c0       	rjmp	.+192    	; 0xa8e <__floatunsisf+0xe0>
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	f7 ff       	sbrs	r31, 7
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <__floatunsisf+0xbc>
     9f4:	22 27       	eor	r18, r18
     9f6:	33 27       	eor	r19, r19
     9f8:	2e 1b       	sub	r18, r30
     9fa:	3f 0b       	sbc	r19, r31
     9fc:	57 01       	movw	r10, r14
     9fe:	68 01       	movw	r12, r16
     a00:	02 2e       	mov	r0, r18
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__floatunsisf+0x5e>
     a04:	d6 94       	lsr	r13
     a06:	c7 94       	ror	r12
     a08:	b7 94       	ror	r11
     a0a:	a7 94       	ror	r10
     a0c:	0a 94       	dec	r0
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__floatunsisf+0x56>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatunsisf+0x7c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	2a 95       	dec	r18
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatunsisf+0x74>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8e 21       	and	r24, r14
     a36:	9f 21       	and	r25, r15
     a38:	a0 23       	and	r26, r16
     a3a:	b1 23       	and	r27, r17
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	21 f0       	breq	.+8      	; 0xa4c <__floatunsisf+0x9e>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	4a 29       	or	r20, r10
     a4e:	5b 29       	or	r21, r11
     a50:	6c 29       	or	r22, r12
     a52:	7d 29       	or	r23, r13
     a54:	4d 83       	std	Y+5, r20	; 0x05
     a56:	5e 83       	std	Y+6, r21	; 0x06
     a58:	6f 83       	std	Y+7, r22	; 0x07
     a5a:	78 87       	std	Y+8, r23	; 0x08
     a5c:	8e e1       	ldi	r24, 0x1E	; 30
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	8e 1b       	sub	r24, r30
     a62:	9f 0b       	sbc	r25, r31
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	12 c0       	rjmp	.+36     	; 0xa8e <__floatunsisf+0xe0>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	81 f0       	breq	.+32     	; 0xa8e <__floatunsisf+0xe0>
     a6e:	0e 2e       	mov	r0, r30
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0xcc>
     a72:	ee 0c       	add	r14, r14
     a74:	ff 1c       	adc	r15, r15
     a76:	00 1f       	adc	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0xc4>
     a7e:	ed 82       	std	Y+5, r14	; 0x05
     a80:	fe 82       	std	Y+6, r15	; 0x06
     a82:	0f 83       	std	Y+7, r16	; 0x07
     a84:	18 87       	std	Y+8, r17	; 0x08
     a86:	ce 1a       	sub	r12, r30
     a88:	df 0a       	sbc	r13, r31
     a8a:	dc 82       	std	Y+4, r13	; 0x04
     a8c:	cb 82       	std	Y+3, r12	; 0x03
     a8e:	1a 82       	std	Y+2, r1	; 0x02
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	ea e0       	ldi	r30, 0x0A	; 10
     a9c:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__epilogue_restores__+0x10>

00000aa0 <__clzsi2>:
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e8 16       	cp	r14, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	f8 06       	cpc	r15, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 07       	cpc	r16, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	18 07       	cpc	r17, r24
     abc:	88 f4       	brcc	.+34     	; 0xae0 <__clzsi2+0x40>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	e8 16       	cp	r14, r24
     ac2:	f1 04       	cpc	r15, r1
     ac4:	01 05       	cpc	r16, r1
     ac6:	11 05       	cpc	r17, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <__clzsi2+0x36>
     aca:	28 f0       	brcs	.+10     	; 0xad6 <__clzsi2+0x36>
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a0 e0       	ldi	r26, 0x00	; 0
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__clzsi2+0x64>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <__clzsi2+0x64>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	e8 16       	cp	r14, r24
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	f8 06       	cpc	r15, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 07       	cpc	r16, r24
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	18 07       	cpc	r17, r24
     af0:	28 f0       	brcs	.+10     	; 0xafc <__clzsi2+0x5c>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__clzsi2+0x64>
     afc:	80 e1       	ldi	r24, 0x10	; 16
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	20 e2       	ldi	r18, 0x20	; 32
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	4a 0b       	sbc	r20, r26
     b12:	5b 0b       	sbc	r21, r27
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__clzsi2+0x7e>
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__clzsi2+0x76>
     b22:	f7 01       	movw	r30, r14
     b24:	e5 57       	subi	r30, 0x75	; 117
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	80 81       	ld	r24, Z
     b2a:	28 1b       	sub	r18, r24
     b2c:	31 09       	sbc	r19, r1
     b2e:	41 09       	sbc	r20, r1
     b30:	51 09       	sbc	r21, r1
     b32:	c9 01       	movw	r24, r18
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <__pack_f>:
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	fc 01       	movw	r30, r24
     b4a:	e4 80       	ldd	r14, Z+4	; 0x04
     b4c:	f5 80       	ldd	r15, Z+5	; 0x05
     b4e:	06 81       	ldd	r16, Z+6	; 0x06
     b50:	17 81       	ldd	r17, Z+7	; 0x07
     b52:	d1 80       	ldd	r13, Z+1	; 0x01
     b54:	80 81       	ld	r24, Z
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	48 f4       	brcc	.+18     	; 0xb6c <__pack_f+0x2e>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e1       	ldi	r26, 0x10	; 16
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 2a       	or	r14, r24
     b64:	f9 2a       	or	r15, r25
     b66:	0a 2b       	or	r16, r26
     b68:	1b 2b       	or	r17, r27
     b6a:	a5 c0       	rjmp	.+330    	; 0xcb6 <__pack_f+0x178>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__pack_f+0x34>
     b70:	9f c0       	rjmp	.+318    	; 0xcb0 <__pack_f+0x172>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	21 f4       	brne	.+8      	; 0xb7e <__pack_f+0x40>
     b76:	ee 24       	eor	r14, r14
     b78:	ff 24       	eor	r15, r15
     b7a:	87 01       	movw	r16, r14
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__pack_f+0x4a>
     b7e:	e1 14       	cp	r14, r1
     b80:	f1 04       	cpc	r15, r1
     b82:	01 05       	cpc	r16, r1
     b84:	11 05       	cpc	r17, r1
     b86:	19 f4       	brne	.+6      	; 0xb8e <__pack_f+0x50>
     b88:	e0 e0       	ldi	r30, 0x00	; 0
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	96 c0       	rjmp	.+300    	; 0xcba <__pack_f+0x17c>
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	73 81       	ldd	r23, Z+3	; 0x03
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	62 38       	cpi	r22, 0x82	; 130
     b96:	79 07       	cpc	r23, r25
     b98:	0c f0       	brlt	.+2      	; 0xb9c <__pack_f+0x5e>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <__pack_f+0x114>
     b9c:	22 e8       	ldi	r18, 0x82	; 130
     b9e:	3f ef       	ldi	r19, 0xFF	; 255
     ba0:	26 1b       	sub	r18, r22
     ba2:	37 0b       	sbc	r19, r23
     ba4:	2a 31       	cpi	r18, 0x1A	; 26
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <__pack_f+0x76>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	2a c0       	rjmp	.+84     	; 0xc08 <__pack_f+0xca>
     bb4:	b8 01       	movw	r22, r16
     bb6:	a7 01       	movw	r20, r14
     bb8:	02 2e       	mov	r0, r18
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__pack_f+0x86>
     bbc:	76 95       	lsr	r23
     bbe:	67 95       	ror	r22
     bc0:	57 95       	ror	r21
     bc2:	47 95       	ror	r20
     bc4:	0a 94       	dec	r0
     bc6:	d2 f7       	brpl	.-12     	; 0xbbc <__pack_f+0x7e>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__pack_f+0x9c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__pack_f+0x94>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__pack_f+0xbe>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	9a 01       	movw	r18, r20
     bfe:	ab 01       	movw	r20, r22
     c00:	28 2b       	or	r18, r24
     c02:	39 2b       	or	r19, r25
     c04:	4a 2b       	or	r20, r26
     c06:	5b 2b       	or	r21, r27
     c08:	da 01       	movw	r26, r20
     c0a:	c9 01       	movw	r24, r18
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	91 05       	cpc	r25, r1
     c18:	a1 05       	cpc	r26, r1
     c1a:	b1 05       	cpc	r27, r1
     c1c:	39 f4       	brne	.+14     	; 0xc2c <__pack_f+0xee>
     c1e:	27 ff       	sbrs	r18, 7
     c20:	09 c0       	rjmp	.+18     	; 0xc34 <__pack_f+0xf6>
     c22:	20 5c       	subi	r18, 0xC0	; 192
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	4f 4f       	sbci	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__pack_f+0xf6>
     c2c:	21 5c       	subi	r18, 0xC1	; 193
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	4f 4f       	sbci	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	20 30       	cpi	r18, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	3a 07       	cpc	r19, r26
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	4a 07       	cpc	r20, r26
     c42:	a0 e4       	ldi	r26, 0x40	; 64
     c44:	5a 07       	cpc	r21, r26
     c46:	10 f0       	brcs	.+4      	; 0xc4c <__pack_f+0x10e>
     c48:	e1 e0       	ldi	r30, 0x01	; 1
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	79 01       	movw	r14, r18
     c4e:	8a 01       	movw	r16, r20
     c50:	27 c0       	rjmp	.+78     	; 0xca0 <__pack_f+0x162>
     c52:	60 38       	cpi	r22, 0x80	; 128
     c54:	71 05       	cpc	r23, r1
     c56:	64 f5       	brge	.+88     	; 0xcb0 <__pack_f+0x172>
     c58:	fb 01       	movw	r30, r22
     c5a:	e1 58       	subi	r30, 0x81	; 129
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	d8 01       	movw	r26, r16
     c60:	c7 01       	movw	r24, r14
     c62:	8f 77       	andi	r24, 0x7F	; 127
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	a0 70       	andi	r26, 0x00	; 0
     c68:	b0 70       	andi	r27, 0x00	; 0
     c6a:	80 34       	cpi	r24, 0x40	; 64
     c6c:	91 05       	cpc	r25, r1
     c6e:	a1 05       	cpc	r26, r1
     c70:	b1 05       	cpc	r27, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <__pack_f+0x144>
     c74:	e7 fe       	sbrs	r14, 7
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <__pack_f+0x154>
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__pack_f+0x14c>
     c82:	8f e3       	ldi	r24, 0x3F	; 63
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 0e       	add	r14, r24
     c8c:	f9 1e       	adc	r15, r25
     c8e:	0a 1f       	adc	r16, r26
     c90:	1b 1f       	adc	r17, r27
     c92:	17 ff       	sbrs	r17, 7
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <__pack_f+0x162>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	16 95       	lsr	r17
     ca4:	07 95       	ror	r16
     ca6:	f7 94       	ror	r15
     ca8:	e7 94       	ror	r14
     caa:	8a 95       	dec	r24
     cac:	d1 f7       	brne	.-12     	; 0xca2 <__pack_f+0x164>
     cae:	05 c0       	rjmp	.+10     	; 0xcba <__pack_f+0x17c>
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	87 01       	movw	r16, r14
     cb6:	ef ef       	ldi	r30, 0xFF	; 255
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	6e 2f       	mov	r22, r30
     cbc:	67 95       	ror	r22
     cbe:	66 27       	eor	r22, r22
     cc0:	67 95       	ror	r22
     cc2:	90 2f       	mov	r25, r16
     cc4:	9f 77       	andi	r25, 0x7F	; 127
     cc6:	d7 94       	ror	r13
     cc8:	dd 24       	eor	r13, r13
     cca:	d7 94       	ror	r13
     ccc:	8e 2f       	mov	r24, r30
     cce:	86 95       	lsr	r24
     cd0:	49 2f       	mov	r20, r25
     cd2:	46 2b       	or	r20, r22
     cd4:	58 2f       	mov	r21, r24
     cd6:	5d 29       	or	r21, r13
     cd8:	b7 01       	movw	r22, r14
     cda:	ca 01       	movw	r24, r20
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <__unpack_f>:
     ce8:	fc 01       	movw	r30, r24
     cea:	db 01       	movw	r26, r22
     cec:	40 81       	ld	r20, Z
     cee:	51 81       	ldd	r21, Z+1	; 0x01
     cf0:	22 81       	ldd	r18, Z+2	; 0x02
     cf2:	62 2f       	mov	r22, r18
     cf4:	6f 77       	andi	r22, 0x7F	; 127
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	22 1f       	adc	r18, r18
     cfa:	22 27       	eor	r18, r18
     cfc:	22 1f       	adc	r18, r18
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	89 2f       	mov	r24, r25
     d02:	88 0f       	add	r24, r24
     d04:	82 2b       	or	r24, r18
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	99 1f       	adc	r25, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	99 1f       	adc	r25, r25
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	a9 f5       	brne	.+106    	; 0xd86 <__unpack_f+0x9e>
     d1c:	41 15       	cp	r20, r1
     d1e:	51 05       	cpc	r21, r1
     d20:	61 05       	cpc	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <__unpack_f+0x42>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <__unpack_f+0xb0>
     d2a:	82 e8       	ldi	r24, 0x82	; 130
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	9a 01       	movw	r18, r20
     d38:	ab 01       	movw	r20, r22
     d3a:	67 e0       	ldi	r22, 0x07	; 7
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	6a 95       	dec	r22
     d46:	d1 f7       	brne	.-12     	; 0xd3c <__unpack_f+0x54>
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	8c 93       	st	X, r24
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__unpack_f+0x80>
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	9c 93       	st	X, r25
     d64:	8e 93       	st	-X, r24
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	20 30       	cpi	r18, 0x00	; 0
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	38 07       	cpc	r19, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	48 07       	cpc	r20, r24
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	58 07       	cpc	r21, r24
     d76:	58 f3       	brcs	.-42     	; 0xd4e <__unpack_f+0x66>
     d78:	14 96       	adiw	r26, 0x04	; 4
     d7a:	2d 93       	st	X+, r18
     d7c:	3d 93       	st	X+, r19
     d7e:	4d 93       	st	X+, r20
     d80:	5c 93       	st	X, r21
     d82:	17 97       	sbiw	r26, 0x07	; 7
     d84:	08 95       	ret
     d86:	2f 3f       	cpi	r18, 0xFF	; 255
     d88:	31 05       	cpc	r19, r1
     d8a:	79 f4       	brne	.+30     	; 0xdaa <__unpack_f+0xc2>
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	61 05       	cpc	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	19 f4       	brne	.+6      	; 0xd9c <__unpack_f+0xb4>
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	8c 93       	st	X, r24
     d9a:	08 95       	ret
     d9c:	64 ff       	sbrs	r22, 4
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <__unpack_f+0xbe>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
     da4:	12 c0       	rjmp	.+36     	; 0xdca <__unpack_f+0xe2>
     da6:	1c 92       	st	X, r1
     da8:	10 c0       	rjmp	.+32     	; 0xdca <__unpack_f+0xe2>
     daa:	2f 57       	subi	r18, 0x7F	; 127
     dac:	30 40       	sbci	r19, 0x00	; 0
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	3c 93       	st	X, r19
     db2:	2e 93       	st	-X, r18
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	8c 93       	st	X, r24
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	8a 95       	dec	r24
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <__unpack_f+0xd4>
     dc8:	70 64       	ori	r23, 0x40	; 64
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	4d 93       	st	X+, r20
     dce:	5d 93       	st	X+, r21
     dd0:	6d 93       	st	X+, r22
     dd2:	7c 93       	st	X, r23
     dd4:	17 97       	sbiw	r26, 0x07	; 7
     dd6:	08 95       	ret

00000dd8 <__fpcmp_parts_f>:
     dd8:	1f 93       	push	r17
     dda:	dc 01       	movw	r26, r24
     ddc:	fb 01       	movw	r30, r22
     dde:	9c 91       	ld	r25, X
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	08 f4       	brcc	.+2      	; 0xde6 <__fpcmp_parts_f+0xe>
     de4:	47 c0       	rjmp	.+142    	; 0xe74 <__fpcmp_parts_f+0x9c>
     de6:	80 81       	ld	r24, Z
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	08 f4       	brcc	.+2      	; 0xdee <__fpcmp_parts_f+0x16>
     dec:	43 c0       	rjmp	.+134    	; 0xe74 <__fpcmp_parts_f+0x9c>
     dee:	94 30       	cpi	r25, 0x04	; 4
     df0:	51 f4       	brne	.+20     	; 0xe06 <__fpcmp_parts_f+0x2e>
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	1c 91       	ld	r17, X
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	99 f5       	brne	.+102    	; 0xe60 <__fpcmp_parts_f+0x88>
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	68 2f       	mov	r22, r24
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	61 1b       	sub	r22, r17
     e02:	71 09       	sbc	r23, r1
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <__fpcmp_parts_f+0xac>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	21 f0       	breq	.+8      	; 0xe12 <__fpcmp_parts_f+0x3a>
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__fpcmp_parts_f+0x42>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	b9 f1       	breq	.+110    	; 0xe80 <__fpcmp_parts_f+0xa8>
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	88 23       	and	r24, r24
     e16:	89 f1       	breq	.+98     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e18:	2d c0       	rjmp	.+90     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	1c 91       	ld	r17, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	f1 f0       	breq	.+60     	; 0xe60 <__fpcmp_parts_f+0x88>
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	18 17       	cp	r17, r24
     e28:	d9 f4       	brne	.+54     	; 0xe60 <__fpcmp_parts_f+0x88>
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	94 f0       	brlt	.+36     	; 0xe60 <__fpcmp_parts_f+0x88>
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	bc f0       	brlt	.+46     	; 0xe70 <__fpcmp_parts_f+0x98>
     e42:	14 96       	adiw	r26, 0x04	; 4
     e44:	8d 91       	ld	r24, X+
     e46:	9d 91       	ld	r25, X+
     e48:	0d 90       	ld	r0, X+
     e4a:	bc 91       	ld	r27, X
     e4c:	a0 2d       	mov	r26, r0
     e4e:	24 81       	ldd	r18, Z+4	; 0x04
     e50:	35 81       	ldd	r19, Z+5	; 0x05
     e52:	46 81       	ldd	r20, Z+6	; 0x06
     e54:	57 81       	ldd	r21, Z+7	; 0x07
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	4a 07       	cpc	r20, r26
     e5c:	5b 07       	cpc	r21, r27
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <__fpcmp_parts_f+0x8e>
     e60:	11 23       	and	r17, r17
     e62:	41 f0       	breq	.+16     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	a4 07       	cpc	r26, r20
     e6c:	b5 07       	cpc	r27, r21
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fpcmp_parts_f+0xa8>
     e70:	11 23       	and	r17, r17
     e72:	19 f0       	breq	.+6      	; 0xe7a <__fpcmp_parts_f+0xa2>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <__fpcmp_parts_f+0xac>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__fpcmp_parts_f+0xac>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	cb 01       	movw	r24, r22
     e86:	1f 91       	pop	r17
     e88:	08 95       	ret

00000e8a <Stack_Full>:
#include "stdio.h"
#include "../../BSW/LIB/STD_TYPES.h"
#include "Stack.h"

uint8 static Stack_Full(Stack* My_Stack)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <Stack_Full+0x6>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
    return 0;
     e98:	80 e0       	ldi	r24, 0x00	; 0
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <Stack_Empty>:
uint8 static Stack_Empty(Stack* My_Stack)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <Stack_Empty+0x6>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
    return (My_Stack->top==NULL);
     eb4:	e9 81       	ldd	r30, Y+1	; 0x01
     eb6:	fa 81       	ldd	r31, Y+2	; 0x02
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	1b 82       	std	Y+3, r1	; 0x03
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <Stack_Empty+0x22>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Stack_Creation>:

Status Stack_Creation(Stack* My_Stack)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Stack_Creation+0x6>
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9b 83       	std	Y+3, r25	; 0x03
     ee2:	8a 83       	std	Y+2, r24	; 0x02
    Status Local=E_NOT_OK;
     ee4:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	61 f0       	breq	.+24     	; 0xf06 <Stack_Creation+0x32>
    {
        //do nothing
    }
    else
    {
        My_Stack->Size=0;
     eee:	ea 81       	ldd	r30, Y+2	; 0x02
     ef0:	fb 81       	ldd	r31, Y+3	; 0x03
     ef2:	12 82       	std	Z+2, r1	; 0x02
     ef4:	13 82       	std	Z+3, r1	; 0x03
     ef6:	14 82       	std	Z+4, r1	; 0x04
     ef8:	15 82       	std	Z+5, r1	; 0x05
        My_Stack->top=NULL;
     efa:	ea 81       	ldd	r30, Y+2	; 0x02
     efc:	fb 81       	ldd	r31, Y+3	; 0x03
     efe:	11 82       	std	Z+1, r1	; 0x01
     f00:	10 82       	st	Z, r1
         Local=E_OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01

    }
return Local;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <Stack_Push>:
Status Stack_Push(Stack* My_Stack,StackEntry Variable)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	27 97       	sbiw	r28, 0x07	; 7
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	9d 83       	std	Y+5, r25	; 0x05
     f2a:	8c 83       	std	Y+4, r24	; 0x04
     f2c:	7f 83       	std	Y+7, r23	; 0x07
     f2e:	6e 83       	std	Y+6, r22	; 0x06
    Status Local=E_NOT_OK;
     f30:	1b 82       	std	Y+3, r1	; 0x03
    StackNode * Local_Pointer=(StackNode*)malloc(sizeof(StackNode));
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 50 20 	call	0x40a0	; 0x40a0 <malloc>
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01

    if(NULL==My_Stack|| Stack_Full(My_Stack))
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	59 f1       	breq	.+86     	; 0xf9c <Stack_Push+0x88>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	0e 94 45 07 	call	0xe8a	; 0xe8a <Stack_Full>
     f4e:	88 23       	and	r24, r24
     f50:	29 f5       	brne	.+74     	; 0xf9c <Stack_Push+0x88>
        //do nothing
    }
    else
    {

        Local_Pointer->entry=Variable;
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	8e 81       	ldd	r24, Y+6	; 0x06
     f58:	9f 81       	ldd	r25, Y+7	; 0x07
     f5a:	93 83       	std	Z+3, r25	; 0x03
     f5c:	82 83       	std	Z+2, r24	; 0x02
        Local_Pointer->Next=My_Stack->top;
     f5e:	ec 81       	ldd	r30, Y+4	; 0x04
     f60:	fd 81       	ldd	r31, Y+5	; 0x05
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
        My_Stack->top=Local_Pointer;
     f6e:	ec 81       	ldd	r30, Y+4	; 0x04
     f70:	fd 81       	ldd	r31, Y+5	; 0x05
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
        My_Stack->Size++;
     f7a:	ec 81       	ldd	r30, Y+4	; 0x04
     f7c:	fd 81       	ldd	r31, Y+5	; 0x05
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	a4 81       	ldd	r26, Z+4	; 0x04
     f84:	b5 81       	ldd	r27, Z+5	; 0x05
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	a1 1d       	adc	r26, r1
     f8a:	b1 1d       	adc	r27, r1
     f8c:	ec 81       	ldd	r30, Y+4	; 0x04
     f8e:	fd 81       	ldd	r31, Y+5	; 0x05
     f90:	82 83       	std	Z+2, r24	; 0x02
     f92:	93 83       	std	Z+3, r25	; 0x03
     f94:	a4 83       	std	Z+4, r26	; 0x04
     f96:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	8b 83       	std	Y+3, r24	; 0x03
    }
return Local;
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03

}
     f9e:	27 96       	adiw	r28, 0x07	; 7
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <Stack_Pop>:
Status Stack_Pop(Stack* My_Stack,StackEntry* Variable)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	27 97       	sbiw	r28, 0x07	; 7
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	9d 83       	std	Y+5, r25	; 0x05
     fc6:	8c 83       	std	Y+4, r24	; 0x04
     fc8:	7f 83       	std	Y+7, r23	; 0x07
     fca:	6e 83       	std	Y+6, r22	; 0x06
    StackNode* Local_Pointer= NULL;
     fcc:	1b 82       	std	Y+3, r1	; 0x03
     fce:	1a 82       	std	Y+2, r1	; 0x02
    Status Local=E_NOT_OK;
     fd0:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack || NULL == Variable|| Stack_Empty(My_Stack))
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d9 f1       	breq	.+118    	; 0x1050 <Stack_Pop+0xa0>
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	b9 f1       	breq	.+110    	; 0x1050 <Stack_Pop+0xa0>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	0e 94 52 07 	call	0xea4	; 0xea4 <Stack_Empty>
     fea:	88 23       	and	r24, r24
     fec:	89 f5       	brne	.+98     	; 0x1050 <Stack_Pop+0xa0>
        //do nothing
    }
    else
    {

        *Variable=My_Stack->top->entry;
     fee:	ec 81       	ldd	r30, Y+4	; 0x04
     ff0:	fd 81       	ldd	r31, Y+5	; 0x05
     ff2:	01 90       	ld	r0, Z+
     ff4:	f0 81       	ld	r31, Z
     ff6:	e0 2d       	mov	r30, r0
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	ee 81       	ldd	r30, Y+6	; 0x06
     ffe:	ff 81       	ldd	r31, Y+7	; 0x07
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
        Local_Pointer= My_Stack->top;
    1004:	ec 81       	ldd	r30, Y+4	; 0x04
    1006:	fd 81       	ldd	r31, Y+5	; 0x05
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02
        My_Stack->top=My_Stack->top->Next;
    1010:	ec 81       	ldd	r30, Y+4	; 0x04
    1012:	fd 81       	ldd	r31, Y+5	; 0x05
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	ec 81       	ldd	r30, Y+4	; 0x04
    1020:	fd 81       	ldd	r31, Y+5	; 0x05
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
        free(Local_Pointer);
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	0e 94 fd 20 	call	0x41fa	; 0x41fa <free>
        My_Stack->Size--;
    102e:	ec 81       	ldd	r30, Y+4	; 0x04
    1030:	fd 81       	ldd	r31, Y+5	; 0x05
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	a4 81       	ldd	r26, Z+4	; 0x04
    1038:	b5 81       	ldd	r27, Z+5	; 0x05
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	a1 09       	sbc	r26, r1
    103e:	b1 09       	sbc	r27, r1
    1040:	ec 81       	ldd	r30, Y+4	; 0x04
    1042:	fd 81       	ldd	r31, Y+5	; 0x05
    1044:	82 83       	std	Z+2, r24	; 0x02
    1046:	93 83       	std	Z+3, r25	; 0x03
    1048:	a4 83       	std	Z+4, r26	; 0x04
    104a:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    }
return Local;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	27 96       	adiw	r28, 0x07	; 7
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <Stack_Display>:

Status Stack_Display(Stack* My_Stack) {
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <Stack_Display+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <Stack_Display+0x8>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9d 83       	std	Y+5, r25	; 0x05
    1074:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
    1076:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* temp = NULL;
    1078:	1a 82       	std	Y+2, r1	; 0x02
    107a:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == My_Stack) {
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	99 f1       	breq	.+102    	; 0x10ea <Stack_Display+0x86>
        // Do nothing
    } else {
        temp = My_Stack->top;
    1084:	ec 81       	ldd	r30, Y+4	; 0x04
    1086:	fd 81       	ldd	r31, Y+5	; 0x05
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	26 c0       	rjmp	.+76     	; 0x10de <Stack_Display+0x7a>
        while (temp != NULL) {
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
    1092:	e9 81       	ldd	r30, Y+1	; 0x01
    1094:	fa 81       	ldd	r31, Y+2	; 0x02
    1096:	40 81       	ld	r20, Z
    1098:	51 81       	ldd	r21, Z+1	; 0x01
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	22 81       	ldd	r18, Z+2	; 0x02
    10a0:	33 81       	ldd	r19, Z+3	; 0x03
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <Stack_Display+0x40>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <Stack_Display+0x42>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <Stack_Display+0x44>
    10a8:	ed b7       	in	r30, 0x3d	; 61
    10aa:	fe b7       	in	r31, 0x3e	; 62
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	80 e6       	ldi	r24, 0x60	; 96
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
    10b6:	53 83       	std	Z+3, r21	; 0x03
    10b8:	42 83       	std	Z+2, r20	; 0x02
    10ba:	35 83       	std	Z+5, r19	; 0x05
    10bc:	24 83       	std	Z+4, r18	; 0x04
    10be:	0e 94 5e 21 	call	0x42bc	; 0x42bc <printf>
    10c2:	8d b7       	in	r24, 0x3d	; 61
    10c4:	9e b7       	in	r25, 0x3e	; 62
    10c6:	06 96       	adiw	r24, 0x06	; 6
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	9e bf       	out	0x3e, r25	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	8d bf       	out	0x3d, r24	; 61
            temp = temp->Next;
    10d2:	e9 81       	ldd	r30, Y+1	; 0x01
    10d4:	fa 81       	ldd	r31, Y+2	; 0x02
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
    StackNode* temp = NULL;
    if (NULL == My_Stack) {
        // Do nothing
    } else {
        temp = My_Stack->top;
        while (temp != NULL) {
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	b1 f6       	brne	.-84     	; 0x1092 <Stack_Display+0x2e>
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
            temp = temp->Next;
        }
        Local = E_OK;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <Clear_Stack>:
Status Clear_Stack(Stack* My_Stack)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <Clear_Stack+0x6>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <Clear_Stack+0x8>
    1104:	0f 92       	push	r0
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	9d 83       	std	Y+5, r25	; 0x05
    110c:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
    110e:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* Local_pointer = NULL;
    1110:	1a 82       	std	Y+2, r1	; 0x02
    1112:	19 82       	std	Y+1, r1	; 0x01

   Local_pointer=My_Stack->top;
    1114:	ec 81       	ldd	r30, Y+4	; 0x04
    1116:	fd 81       	ldd	r31, Y+5	; 0x05
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == My_Stack)
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	f9 f0       	breq	.+62     	; 0x1166 <Clear_Stack+0x6a>
    1128:	12 c0       	rjmp	.+36     	; 0x114e <Clear_Stack+0x52>
    }
    else
    {
        while(Local_pointer)
        {
           Local_pointer= Local_pointer->Next;
    112a:	e9 81       	ldd	r30, Y+1	; 0x01
    112c:	fa 81       	ldd	r31, Y+2	; 0x02
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
            free(My_Stack->top);
    1136:	ec 81       	ldd	r30, Y+4	; 0x04
    1138:	fd 81       	ldd	r31, Y+5	; 0x05
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <free>
            My_Stack->top=Local_pointer;
    1142:	ec 81       	ldd	r30, Y+4	; 0x04
    1144:	fd 81       	ldd	r31, Y+5	; 0x05
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	80 83       	st	Z, r24
    {
        // Do nothing
    }
    else
    {
        while(Local_pointer)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	51 f7       	brne	.-44     	; 0x112a <Clear_Stack+0x2e>
        {
           Local_pointer= Local_pointer->Next;
            free(My_Stack->top);
            My_Stack->top=Local_pointer;
        }
        My_Stack->Size=0;
    1156:	ec 81       	ldd	r30, Y+4	; 0x04
    1158:	fd 81       	ldd	r31, Y+5	; 0x05
    115a:	12 82       	std	Z+2, r1	; 0x02
    115c:	13 82       	std	Z+3, r1	; 0x03
    115e:	14 82       	std	Z+4, r1	; 0x04
    1160:	15 82       	std	Z+5, r1	; 0x05
        Local = E_OK;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <Stack_Size>:
Status Stack_Size(Stack* My_Stack,StackEntry* Variable)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	00 d0       	rcall	.+0      	; 0x117e <Stack_Size+0x6>
    117e:	00 d0       	rcall	.+0      	; 0x1180 <Stack_Size+0x8>
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9b 83       	std	Y+3, r25	; 0x03
    1188:	8a 83       	std	Y+2, r24	; 0x02
    118a:	7d 83       	std	Y+5, r23	; 0x05
    118c:	6c 83       	std	Y+4, r22	; 0x04
     Status Local = E_NOT_OK;
    118e:	19 82       	std	Y+1, r1	; 0x01

    if (NULL == My_Stack)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <Stack_Size+0x38>
    {
        // Do nothing
    }
    else
    {
        *Variable  =My_Stack->Size;
    1198:	ea 81       	ldd	r30, Y+2	; 0x02
    119a:	fb 81       	ldd	r31, Y+3	; 0x03
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	a4 81       	ldd	r26, Z+4	; 0x04
    11a2:	b5 81       	ldd	r27, Z+5	; 0x05
    11a4:	ec 81       	ldd	r30, Y+4	; 0x04
    11a6:	fd 81       	ldd	r31, Y+5	; 0x05
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
         Local = E_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <Queue_Creation>:
#include "Queue/inc/Queue.h"


void Queue_Creation(Queue* P2S_Queue)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <Queue_Creation+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
	P2S_Queue->Queue_Size=NULL;
    11d0:	e9 81       	ldd	r30, Y+1	; 0x01
    11d2:	fa 81       	ldd	r31, Y+2	; 0x02
    11d4:	12 82       	std	Z+2, r1	; 0x02
	P2S_Queue->Front=0;
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	10 82       	st	Z, r1
	P2S_Queue->Rear=-1;
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	81 83       	std	Z+1, r24	; 0x01
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <Queue_Empty>:
Queue_Status Queue_Empty(Queue* P2S_Queue)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <Queue_Empty+0x6>
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	9b 83       	std	Y+3, r25	; 0x03
    11fc:	8a 83       	std	Y+2, r24	; 0x02
	Queue_Status Local_queue;
	if(P2S_Queue->Queue_Size == 0)
    11fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1200:	fb 81       	ldd	r31, Y+3	; 0x03
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	88 23       	and	r24, r24
    1206:	11 f4       	brne	.+4      	; 0x120c <Queue_Empty+0x1e>
	{
		Local_queue=Queue_empty;
    1208:	19 82       	std	Y+1, r1	; 0x01
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <Queue_Empty+0x22>
	}
	else
	{
		Local_queue=Queue_not_empty;
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_queue;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <Queue_Full>:

Queue_Status Queue_Full(Queue* P2S_Queue)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <Queue_Full+0x6>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
	return (P2S_Queue->Queue_Size == Queue_MAX);
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	82 81       	ldd	r24, Z+2	; 0x02
    1234:	1b 82       	std	Y+3, r1	; 0x03
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	11 f4       	brne	.+4      	; 0x123e <Queue_Full+0x20>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	8b 83       	std	Y+3, r24	; 0x03
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <Queue_Append>:
void Queue_Append(Queue* P2S_Queue,Queue_Entry Data)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <Queue_Append+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <Queue_Append+0x8>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <Queue_Append+0xa>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	4b 83       	std	Y+3, r20	; 0x03
    1260:	5c 83       	std	Y+4, r21	; 0x04
    1262:	6d 83       	std	Y+5, r22	; 0x05
    1264:	7e 83       	std	Y+6, r23	; 0x06
	/* check the rear index circular queue*/
	P2S_Queue->Rear= ((P2S_Queue->Rear)+1)% Queue_MAX;
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	81 81       	ldd	r24, Z+1	; 0x01
    126c:	99 27       	eor	r25, r25
    126e:	87 fd       	sbrc	r24, 7
    1270:	90 95       	com	r25
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	b9 01       	movw	r22, r18
    127a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__divmodhi4>
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	81 83       	std	Z+1, r24	; 0x01
	P2S_Queue->Array[P2S_Queue->Rear]=Data;
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	81 81       	ldd	r24, Z+1	; 0x01
    128a:	99 27       	eor	r25, r25
    128c:	87 fd       	sbrc	r24, 7
    128e:	90 95       	com	r25
    1290:	29 81       	ldd	r18, Y+1	; 0x01
    1292:	3a 81       	ldd	r19, Y+2	; 0x02
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	82 0f       	add	r24, r18
    129e:	93 1f       	adc	r25, r19
    12a0:	fc 01       	movw	r30, r24
    12a2:	33 96       	adiw	r30, 0x03	; 3
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	ad 81       	ldd	r26, Y+5	; 0x05
    12aa:	be 81       	ldd	r27, Y+6	; 0x06
    12ac:	80 83       	st	Z, r24
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	a2 83       	std	Z+2, r26	; 0x02
    12b2:	b3 83       	std	Z+3, r27	; 0x03
	P2S_Queue->Queue_Size++;
    12b4:	e9 81       	ldd	r30, Y+1	; 0x01
    12b6:	fa 81       	ldd	r31, Y+2	; 0x02
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	e9 81       	ldd	r30, Y+1	; 0x01
    12be:	fa 81       	ldd	r31, Y+2	; 0x02
    12c0:	82 83       	std	Z+2, r24	; 0x02
}
    12c2:	26 96       	adiw	r28, 0x06	; 6
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <Queue_Server>:
void Queue_Server(Queue* P2S_Queue,Queue_Entry* Data)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <Queue_Server+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <Queue_Server+0x8>
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	7c 83       	std	Y+4, r23	; 0x04
    12e6:	6b 83       	std	Y+3, r22	; 0x03
	*Data=P2S_Queue->Array[P2S_Queue->Front];
    12e8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ea:	fa 81       	ldd	r31, Y+2	; 0x02
    12ec:	80 81       	ld	r24, Z
    12ee:	99 27       	eor	r25, r25
    12f0:	87 fd       	sbrc	r24, 7
    12f2:	90 95       	com	r25
    12f4:	29 81       	ldd	r18, Y+1	; 0x01
    12f6:	3a 81       	ldd	r19, Y+2	; 0x02
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	82 0f       	add	r24, r18
    1302:	93 1f       	adc	r25, r19
    1304:	fc 01       	movw	r30, r24
    1306:	33 96       	adiw	r30, 0x03	; 3
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	a2 81       	ldd	r26, Z+2	; 0x02
    130e:	b3 81       	ldd	r27, Z+3	; 0x03
    1310:	eb 81       	ldd	r30, Y+3	; 0x03
    1312:	fc 81       	ldd	r31, Y+4	; 0x04
    1314:	80 83       	st	Z, r24
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	a2 83       	std	Z+2, r26	; 0x02
    131a:	b3 83       	std	Z+3, r27	; 0x03
	P2S_Queue->Front= ((P2S_Queue->Front) +1) % Queue_MAX ;
    131c:	e9 81       	ldd	r30, Y+1	; 0x01
    131e:	fa 81       	ldd	r31, Y+2	; 0x02
    1320:	80 81       	ld	r24, Z
    1322:	99 27       	eor	r25, r25
    1324:	87 fd       	sbrc	r24, 7
    1326:	90 95       	com	r25
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	2a e0       	ldi	r18, 0x0A	; 10
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	b9 01       	movw	r22, r18
    1330:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__divmodhi4>
    1334:	e9 81       	ldd	r30, Y+1	; 0x01
    1336:	fa 81       	ldd	r31, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
	P2S_Queue->Queue_Size--;
    133a:	e9 81       	ldd	r30, Y+1	; 0x01
    133c:	fa 81       	ldd	r31, Y+2	; 0x02
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	81 50       	subi	r24, 0x01	; 1
    1342:	e9 81       	ldd	r30, Y+1	; 0x01
    1344:	fa 81       	ldd	r31, Y+2	; 0x02
    1346:	82 83       	std	Z+2, r24	; 0x02
}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <Queue_Size>:
uint8 Queue_Size(Queue* P2S_Queue)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <Queue_Size+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	return P2S_Queue->Queue_Size;
    1364:	e9 81       	ldd	r30, Y+1	; 0x01
    1366:	fa 81       	ldd	r31, Y+2	; 0x02
    1368:	82 81       	ldd	r24, Z+2	; 0x02
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <Queue_Clear>:

void Queue_Clear(Queue* P2S_Queue)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <Queue_Clear+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01

	P2S_Queue->Queue_Size=NULL;
    1382:	e9 81       	ldd	r30, Y+1	; 0x01
    1384:	fa 81       	ldd	r31, Y+2	; 0x02
    1386:	12 82       	std	Z+2, r1	; 0x02
	P2S_Queue->Rear=-1;
    1388:	e9 81       	ldd	r30, Y+1	; 0x01
    138a:	fa 81       	ldd	r31, Y+2	; 0x02
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	81 83       	std	Z+1, r24	; 0x01
	P2S_Queue->Front=NULL;
    1390:	e9 81       	ldd	r30, Y+1	; 0x01
    1392:	fa 81       	ldd	r31, Y+2	; 0x02
    1394:	10 82       	st	Z, r1
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <TraverseQueue>:
void TraverseQueue(Queue* P2S_Queue, void (*P2F)(Queue_Entry))
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <TraverseQueue+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <TraverseQueue+0x8>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <TraverseQueue+0xa>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	7e 83       	std	Y+6, r23	; 0x06
    13b4:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_Size=0;
    13b6:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Pos;
	for(Pos=P2S_Queue->Front;Local_Size<P2S_Queue->Queue_Size;Local_Size++)
    13b8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ba:	fc 81       	ldd	r31, Y+4	; 0x04
    13bc:	80 81       	ld	r24, Z
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	25 c0       	rjmp	.+74     	; 0x140c <TraverseQueue+0x6c>
	{
		(*P2F)(P2S_Queue->Array[Pos]);
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	99 27       	eor	r25, r25
    13c6:	87 fd       	sbrc	r24, 7
    13c8:	90 95       	com	r25
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	82 0f       	add	r24, r18
    13d8:	93 1f       	adc	r25, r19
    13da:	fc 01       	movw	r30, r24
    13dc:	33 96       	adiw	r30, 0x03	; 3
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	a2 81       	ldd	r26, Z+2	; 0x02
    13e4:	b3 81       	ldd	r27, Z+3	; 0x03
    13e6:	ed 81       	ldd	r30, Y+5	; 0x05
    13e8:	fe 81       	ldd	r31, Y+6	; 0x06
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	09 95       	icall
		Pos=(Pos+1)%Queue_MAX;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	99 27       	eor	r25, r25
    13f4:	87 fd       	sbrc	r24, 7
    13f6:	90 95       	com	r25
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	2a e0       	ldi	r18, 0x0A	; 10
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	b9 01       	movw	r22, r18
    1400:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__divmodhi4>
    1404:	89 83       	std	Y+1, r24	; 0x01
}
void TraverseQueue(Queue* P2S_Queue, void (*P2F)(Queue_Entry))
{
	uint8 Local_Size=0;
	sint8 Pos;
	for(Pos=P2S_Queue->Front;Local_Size<P2S_Queue->Queue_Size;Local_Size++)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	8a 83       	std	Y+2, r24	; 0x02
    140c:	eb 81       	ldd	r30, Y+3	; 0x03
    140e:	fc 81       	ldd	r31, Y+4	; 0x04
    1410:	92 81       	ldd	r25, Z+2	; 0x02
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	89 17       	cp	r24, r25
    1416:	a8 f2       	brcs	.-86     	; 0x13c2 <TraverseQueue+0x22>

	}



}
    1418:	26 96       	adiw	r28, 0x06	; 6
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <UART_voidInit>:
#include  "../inc/UART_interface.h"
#include "../inc/UART_private.h"
#include "../inc/UART_register.h"

void UART_voidInit(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	UCSRC= (1<<UCSRC_URSEL) | (1<<UCSRC_UCSZ1) | (1<<UCSRC_UCSZ0);
    1432:	e9 e2       	ldi	r30, 0x29	; 41
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	86 e8       	ldi	r24, 0x86	; 134
    1438:	80 83       	st	Z, r24
/*BAUD RATE*/
UBRRL=51;
    143a:	e9 e2       	ldi	r30, 0x29	; 41
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	83 e3       	ldi	r24, 0x33	; 51
    1440:	80 83       	st	Z, r24
/*ENABLE TRANSMITE AND RECEIVE*/
SET_BIT(UCSRB,UCSRB_RXEN);
    1442:	aa e2       	ldi	r26, 0x2A	; 42
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	ea e2       	ldi	r30, 0x2A	; 42
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 61       	ori	r24, 0x10	; 16
    144e:	8c 93       	st	X, r24
SET_BIT(UCSRB,UCSRB_TXEN);
    1450:	aa e2       	ldi	r26, 0x2A	; 42
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ea e2       	ldi	r30, 0x2A	; 42
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 60       	ori	r24, 0x08	; 8
    145c:	8c 93       	st	X, r24
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <UART_voidTransmit>:

void UART_voidTransmit(uint8 Copy_u8Data)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	89 83       	std	Y+1, r24	; 0x01
while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
    1470:	eb e2       	ldi	r30, 0x2B	; 43
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	82 95       	swap	r24
    1478:	86 95       	lsr	r24
    147a:	87 70       	andi	r24, 0x07	; 7
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	81 70       	andi	r24, 0x01	; 1
    1482:	90 70       	andi	r25, 0x00	; 0
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	a1 f3       	breq	.-24     	; 0x1470 <UART_voidTransmit+0xc>

UDR=Copy_u8Data;
    1488:	ec e2       	ldi	r30, 0x2C	; 44
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	80 83       	st	Z, r24
}
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <UART_u8Receive>:

uint8 UART_u8Receive(void)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
    14a0:	eb e2       	ldi	r30, 0x2B	; 43
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	88 23       	and	r24, r24
    14a8:	dc f7       	brge	.-10     	; 0x14a0 <UART_u8Receive+0x8>

return UDR;
    14aa:	ec e2       	ldi	r30, 0x2C	; 44
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
}
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <UART_voidSendString>:


void UART_voidSendString(uint8* Copy_pvString)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <UART_voidSendString+0x6>
    14bc:	0f 92       	push	r0
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	9b 83       	std	Y+3, r25	; 0x03
    14c4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 counter=0;
    14c6:	19 82       	std	Y+1, r1	; 0x01
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <UART_voidSendString+0x30>

while(Copy_pvString[counter]!='\0')
{
	UART_voidTransmit(Copy_pvString[counter]);
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	fc 01       	movw	r30, r24
    14d6:	e2 0f       	add	r30, r18
    14d8:	f3 1f       	adc	r31, r19
    14da:	80 81       	ld	r24, Z
    14dc:	0e 94 32 0a 	call	0x1464	; 0x1464 <UART_voidTransmit>
	counter++;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	89 83       	std	Y+1, r24	; 0x01
void UART_voidSendString(uint8* Copy_pvString)
{

	uint8 counter=0;

while(Copy_pvString[counter]!='\0')
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	9b 81       	ldd	r25, Y+3	; 0x03
    14f0:	fc 01       	movw	r30, r24
    14f2:	e2 0f       	add	r30, r18
    14f4:	f3 1f       	adc	r31, r19
    14f6:	80 81       	ld	r24, Z
    14f8:	88 23       	and	r24, r24
    14fa:	39 f7       	brne	.-50     	; 0x14ca <UART_voidSendString+0x14>
{
	UART_voidTransmit(Copy_pvString[counter]);
	counter++;
}

}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <UART_voidSendNumber>:

void UART_voidSendNumber(sint32 Copy_s32Number)
{
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	60 97       	sbiw	r28, 0x10	; 16
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	6d 87       	std	Y+13, r22	; 0x0d
    1522:	7e 87       	std	Y+14, r23	; 0x0e
    1524:	8f 87       	std	Y+15, r24	; 0x0f
    1526:	98 8b       	std	Y+16, r25	; 0x10
	if(Copy_s32Number<0)
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	af 85       	ldd	r26, Y+15	; 0x0f
    152e:	b8 89       	ldd	r27, Y+16	; 0x10
    1530:	bb 23       	and	r27, r27
    1532:	94 f4       	brge	.+36     	; 0x1558 <UART_voidSendNumber+0x50>
	{
		UART_voidTransmit('-');
    1534:	8d e2       	ldi	r24, 0x2D	; 45
    1536:	0e 94 32 0a 	call	0x1464	; 0x1464 <UART_voidTransmit>
		Copy_s32Number= -Copy_s32Number;
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	af 85       	ldd	r26, Y+15	; 0x0f
    1540:	b8 89       	ldd	r27, Y+16	; 0x10
    1542:	b0 95       	com	r27
    1544:	a0 95       	com	r26
    1546:	90 95       	com	r25
    1548:	81 95       	neg	r24
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	af 4f       	sbci	r26, 0xFF	; 255
    154e:	bf 4f       	sbci	r27, 0xFF	; 255
    1550:	8d 87       	std	Y+13, r24	; 0x0d
    1552:	9e 87       	std	Y+14, r25	; 0x0e
    1554:	af 87       	std	Y+15, r26	; 0x0f
    1556:	b8 8b       	std	Y+16, r27	; 0x10
	}
	if(Copy_s32Number==0)
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	af 85       	ldd	r26, Y+15	; 0x0f
    155e:	b8 89       	ldd	r27, Y+16	; 0x10
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	a1 05       	cpc	r26, r1
    1564:	b1 05       	cpc	r27, r1
    1566:	21 f4       	brne	.+8      	; 0x1570 <UART_voidSendNumber+0x68>
	{
		UART_voidTransmit('0');
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	0e 94 32 0a 	call	0x1464	; 0x1464 <UART_voidTransmit>
    156e:	50 c0       	rjmp	.+160    	; 0x1610 <UART_voidSendNumber+0x108>
		return;
	}
uint8 NUM[10];
uint8 Local_u8Counter=0;
    1570:	1a 82       	std	Y+2, r1	; 0x02
    1572:	2e c0       	rjmp	.+92     	; 0x15d0 <UART_voidSendNumber+0xc8>
while(Copy_s32Number>0)
{
	NUM[Local_u8Counter++]=(Copy_s32Number%10)+'0';
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	08 2f       	mov	r16, r24
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	8d 85       	ldd	r24, Y+13	; 0x0d
    157c:	9e 85       	ldd	r25, Y+14	; 0x0e
    157e:	af 85       	ldd	r26, Y+15	; 0x0f
    1580:	b8 89       	ldd	r27, Y+16	; 0x10
    1582:	2a e0       	ldi	r18, 0x0A	; 10
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__divmodsi4>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	28 2f       	mov	r18, r24
    1598:	20 5d       	subi	r18, 0xD0	; 208
    159a:	ce 01       	movw	r24, r28
    159c:	03 96       	adiw	r24, 0x03	; 3
    159e:	fc 01       	movw	r30, r24
    15a0:	e0 0f       	add	r30, r16
    15a2:	f1 1f       	adc	r31, r17
    15a4:	20 83       	st	Z, r18
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	8a 83       	std	Y+2, r24	; 0x02
	Copy_s32Number/=10;
    15ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b0:	af 85       	ldd	r26, Y+15	; 0x0f
    15b2:	b8 89       	ldd	r27, Y+16	; 0x10
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__divmodsi4>
    15c4:	da 01       	movw	r26, r20
    15c6:	c9 01       	movw	r24, r18
    15c8:	8d 87       	std	Y+13, r24	; 0x0d
    15ca:	9e 87       	std	Y+14, r25	; 0x0e
    15cc:	af 87       	std	Y+15, r26	; 0x0f
    15ce:	b8 8b       	std	Y+16, r27	; 0x10
		UART_voidTransmit('0');
		return;
	}
uint8 NUM[10];
uint8 Local_u8Counter=0;
while(Copy_s32Number>0)
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	af 85       	ldd	r26, Y+15	; 0x0f
    15d6:	b8 89       	ldd	r27, Y+16	; 0x10
    15d8:	18 16       	cp	r1, r24
    15da:	19 06       	cpc	r1, r25
    15dc:	1a 06       	cpc	r1, r26
    15de:	1b 06       	cpc	r1, r27
    15e0:	4c f2       	brlt	.-110    	; 0x1574 <UART_voidSendNumber+0x6c>
{
	NUM[Local_u8Counter++]=(Copy_s32Number%10)+'0';
	Copy_s32Number/=10;
}
/*reverse*/
for(uint8 i=Local_u8Counter;i>0;i--)
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	11 c0       	rjmp	.+34     	; 0x160a <UART_voidSendNumber+0x102>
{
	UART_voidTransmit(NUM[i-1]);
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 01       	movw	r18, r24
    15f0:	21 50       	subi	r18, 0x01	; 1
    15f2:	30 40       	sbci	r19, 0x00	; 0
    15f4:	ce 01       	movw	r24, r28
    15f6:	03 96       	adiw	r24, 0x03	; 3
    15f8:	fc 01       	movw	r30, r24
    15fa:	e2 0f       	add	r30, r18
    15fc:	f3 1f       	adc	r31, r19
    15fe:	80 81       	ld	r24, Z
    1600:	0e 94 32 0a 	call	0x1464	; 0x1464 <UART_voidTransmit>
{
	NUM[Local_u8Counter++]=(Copy_s32Number%10)+'0';
	Copy_s32Number/=10;
}
/*reverse*/
for(uint8 i=Local_u8Counter;i>0;i--)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	81 50       	subi	r24, 0x01	; 1
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	88 23       	and	r24, r24
    160e:	61 f7       	brne	.-40     	; 0x15e8 <UART_voidSendNumber+0xe0>
{
	UART_voidTransmit(NUM[i-1]);
}
}
    1610:	60 96       	adiw	r28, 0x10	; 16
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	08 95       	ret

00001626 <TWI_voidMasterInit>:
#include "../inc/TWI_interface.h"
void TWI_voidMasterInit(void)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
/*SCL CLOCK*/
TWBR_Reg =255;
    162e:	e0 e2       	ldi	r30, 0x20	; 32
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	80 83       	st	Z, r24
TWSR_Reg->TWPSX=PRESCALER_BY_1;
    1636:	e1 e2       	ldi	r30, 0x21	; 33
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8c 7f       	andi	r24, 0xFC	; 252
    163e:	80 83       	st	Z, r24
/*ENABLE*/
TWCR_Reg->TWEN=1;
    1640:	e6 e5       	ldi	r30, 0x56	; 86
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	84 60       	ori	r24, 0x04	; 4
    1648:	80 83       	st	Z, r24
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <TWI_voidStartCondition>:

void TWI_voidStartCondition(void)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
	/*TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT)*/
    TWCR_Reg->TWCR_8bit_Reg  = 164;
    1658:	e6 e5       	ldi	r30, 0x56	; 86
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	84 ea       	ldi	r24, 0xA4	; 164
    165e:	80 83       	st	Z, r24
    // Wait for TWINT to be set (operation complete)
    while (TWCR_Reg->TWINT == 0);
    1660:	e6 e5       	ldi	r30, 0x56	; 86
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 78       	andi	r24, 0x80	; 128
    1668:	88 23       	and	r24, r24
    166a:	d1 f3       	breq	.-12     	; 0x1660 <TWI_voidStartCondition+0x10>
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <TWI_voidStopCondition>:


void TWI_voidStopCondition(void)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	/*TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT)*/
	TWCR_Reg->TWCR_8bit_Reg=148;
    167a:	e6 e5       	ldi	r30, 0x56	; 86
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	84 e9       	ldi	r24, 0x94	; 148
    1680:	80 83       	st	Z, r24
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <TWI_voidSendData>:
void TWI_voidSendData(uint8 Copy_u8Data)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
	TWDR_Reg=Copy_u8Data;
    1694:	e3 e2       	ldi	r30, 0x23	; 35
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	80 83       	st	Z, r24
	/*TWCR=(1<<TWEN)|(1<<TWINT)*/
    TWCR_Reg->TWCR_8bit_Reg  = 132;
    169c:	e6 e5       	ldi	r30, 0x56	; 86
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	84 e8       	ldi	r24, 0x84	; 132
    16a2:	80 83       	st	Z, r24

while(TWCR_Reg->TWINT==0);
    16a4:	e6 e5       	ldi	r30, 0x56	; 86
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 78       	andi	r24, 0x80	; 128
    16ac:	88 23       	and	r24, r24
    16ae:	d1 f3       	breq	.-12     	; 0x16a4 <TWI_voidSendData+0x1c>
}
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <TWI_u8ReceiveData>:
uint8 TWI_u8ReceiveData(void)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
	/*TWCR=(1<<TWEN)|(1<<TWINT)*/
	TWCR_Reg->TWCR_8bit_Reg  = 132;
    16c0:	e6 e5       	ldi	r30, 0x56	; 86
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	84 e8       	ldi	r24, 0x84	; 132
    16c6:	80 83       	st	Z, r24
	while(TWCR_Reg->TWINT==0);
    16c8:	e6 e5       	ldi	r30, 0x56	; 86
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 78       	andi	r24, 0x80	; 128
    16d0:	88 23       	and	r24, r24
    16d2:	d1 f3       	breq	.-12     	; 0x16c8 <TWI_u8ReceiveData+0x10>
return TWDR_Reg;
    16d4:	e3 e2       	ldi	r30, 0x23	; 35
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <TIMER2_DutyCycle>:
#include "../inc/TIMER2_interface.h"
#include "../inc/TIMER2_private.h"
#include "../inc/TIMER2_register.h"

void TIMER2_DutyCycle(uint8 Copy_uint8Duty)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <TIMER2_DutyCycle+0x6>
    16e6:	0f 92       	push	r0
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
    16ee:	1a 82       	std	Y+2, r1	; 0x02
    16f0:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	98 2f       	mov	r25, r24
    16fa:	88 27       	eor	r24, r24
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	24 e6       	ldi	r18, 0x64	; 100
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	b9 01       	movw	r22, r18
    170a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__udivmodhi4>
    170e:	cb 01       	movw	r24, r22
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Local_VCalue;
    1714:	e3 e4       	ldi	r30, 0x43	; 67
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	80 83       	st	Z, r24
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <TIMER2_Delay>:


void TIMER2_Delay(uint16 Copy_uint16Delay)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <TIMER2_Delay+0x6>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <TIMER2_Delay+0x8>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
    1738:	1a 82       	std	Y+2, r1	; 0x02
    173a:	19 82       	std	Y+1, r1	; 0x01
    173c:	10 c0       	rjmp	.+32     	; 0x175e <TIMER2_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIFR_Reg->OCF2 == 0);
    173e:	e8 e5       	ldi	r30, 0x58	; 88
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 78       	andi	r24, 0x80	; 128
    1746:	88 23       	and	r24, r24
    1748:	d1 f3       	breq	.-12     	; 0x173e <TIMER2_Delay+0x16>
	TIFR_Reg->OCF2 =1;
    174a:	e8 e5       	ldi	r30, 0x58	; 88
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	80 68       	ori	r24, 0x80	; 128
    1752:	80 83       	st	Z, r24
	Counter++;
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	9a 81       	ldd	r25, Y+2	; 0x02
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
void TIMER2_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
    175e:	29 81       	ldd	r18, Y+1	; 0x01
    1760:	3a 81       	ldd	r19, Y+2	; 0x02
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	28 17       	cp	r18, r24
    1768:	39 07       	cpc	r19, r25
    176a:	48 f3       	brcs	.-46     	; 0x173e <TIMER2_Delay+0x16>
	Counter++;


	}

}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Reg->CS2x= CLCK_SELECTION;
    1782:	e5 e4       	ldi	r30, 0x45	; 69
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 7f       	andi	r24, 0xF8	; 248
    178a:	84 60       	ori	r24, 0x04	; 4
    178c:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=DISABLE;
TCCR2_Reg->COM2x=CORRECT_PWM_OUTPUT_MODE;


#elif TIMER_MODE==CTC_MODE
TCCR2_Reg->WGM20=DISABLE;
    178e:	e5 e4       	ldi	r30, 0x45	; 69
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 7b       	andi	r24, 0xBF	; 191
    1796:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=ENABLE;
    1798:	e5 e4       	ldi	r30, 0x45	; 69
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	88 60       	ori	r24, 0x08	; 8
    17a0:	80 83       	st	Z, r24
TCCR2_Reg->COM2x=CTC_OUTPUT_MODE;
    17a2:	e5 e4       	ldi	r30, 0x45	; 69
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8f 7c       	andi	r24, 0xCF	; 207
    17aa:	80 61       	ori	r24, 0x10	; 16
    17ac:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
TIMSK_Reg->TOIE2=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
TIMSK_Reg->OCIE2=ENABLE;
    17ae:	e9 e5       	ldi	r30, 0x59	; 89
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	80 68       	ori	r24, 0x80	; 128
    17b6:	80 83       	st	Z, r24
#endif


}
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <TIMER2_voiSetPreLoadValue>:


void TIMER2_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Reg=Copy_uint8Value;
    17ca:	e4 e4       	ldi	r30, 0x44	; 68
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	80 83       	st	Z, r24
}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <TIMER2_voiSetCompareMatchValue>:


void TIMER2_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Copy_uint8Value;
    17e6:	e3 e4       	ldi	r30, 0x43	; 67
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	80 83       	st	Z, r24
}
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <Timer2_Timer2OVFCallBackFunc>:

Status_t Timer2_Timer2OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <Timer2_Timer2OVFCallBackFunc+0x6>
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9b 83       	std	Y+3, r25	; 0x03
    1804:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
    1806:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	19 f4       	brne	.+6      	; 0x1816 <Timer2_Timer2OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER2_POINTER_Err;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <Timer2_Timer2OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	90 93 5f 03 	sts	0x035F, r25
    181e:	80 93 5e 03 	sts	0x035E, r24
	}

	return Local_ErrorState;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <Timer2_Timer2CTCCallBackFunc>:

Status_t Timer2_Timer2CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <Timer2_Timer2CTCCallBackFunc+0x6>
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	9b 83       	std	Y+3, r25	; 0x03
    183e:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
    1840:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	19 f4       	brne	.+6      	; 0x1850 <Timer2_Timer2CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER2_POINTER_Err;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	06 c0       	rjmp	.+12     	; 0x185c <Timer2_Timer2CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	90 93 5d 03 	sts	0x035D, r25
    1858:	80 93 5c 03 	sts	0x035C, r24
		}

	return Local_ErrorState;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <__vector_4>:




/*TIMER0 COMPARE MATCH*/
void __vector_4(void){
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	2f 93       	push	r18
    1876:	3f 93       	push	r19
    1878:	4f 93       	push	r20
    187a:	5f 93       	push	r21
    187c:	6f 93       	push	r22
    187e:	7f 93       	push	r23
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	af 93       	push	r26
    1886:	bf 93       	push	r27
    1888:	ef 93       	push	r30
    188a:	ff 93       	push	r31
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    1894:	e0 91 5c 03 	lds	r30, 0x035C
    1898:	f0 91 5d 03 	lds	r31, 0x035D
    189c:	09 95       	icall
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	ff 91       	pop	r31
    18a4:	ef 91       	pop	r30
    18a6:	bf 91       	pop	r27
    18a8:	af 91       	pop	r26
    18aa:	9f 91       	pop	r25
    18ac:	8f 91       	pop	r24
    18ae:	7f 91       	pop	r23
    18b0:	6f 91       	pop	r22
    18b2:	5f 91       	pop	r21
    18b4:	4f 91       	pop	r20
    18b6:	3f 91       	pop	r19
    18b8:	2f 91       	pop	r18
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <__vector_5>:

/*TIMER0 OVERFLOW*/
void __vector_5(void){
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    18ee:	e0 91 5e 03 	lds	r30, 0x035E
    18f2:	f0 91 5f 03 	lds	r31, 0x035F
    18f6:	09 95       	icall
}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <TIMER1_voidInit>:
#include "../inc/TIMER1_register.h"
#include "../inc/TIMER1_config.h"


void TIMER1_voidInit(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	/*Clock selection*/
TCCR1B_Reg->CS1X= CLCK_SELECT;
    1926:	ee e4       	ldi	r30, 0x4E	; 78
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	88 7f       	andi	r24, 0xF8	; 248
    192e:	84 60       	ori	r24, 0x04	; 4
    1930:	80 83       	st	Z, r24

/*Waveform generation mode*/
TCCR1A_Reg->WGM1X=WAVE_GEN & 0b0011;
    1932:	ef e4       	ldi	r30, 0x4F	; 79
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8c 7f       	andi	r24, 0xFC	; 252
    193a:	80 83       	st	Z, r24
TCCR1B_Reg->WGM1XX=(WAVE_GEN>>2) & 0b0011;
    193c:	ee e4       	ldi	r30, 0x4E	; 78
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	87 7e       	andi	r24, 0xE7	; 231
    1944:	88 60       	ori	r24, 0x08	; 8
    1946:	80 83       	st	Z, r24

#ifdef CHANNEL_A

#if TIMER1A_MODE == TIMER1_NON_PWM

TCCR1A_Reg->COM1AX=TIMER1A_OUT_MODE;
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8f 73       	andi	r24, 0x3F	; 63
    1950:	80 83       	st	Z, r24

#ifdef CHANNEL_B

#if TIMER1B_MODE == TIMER1_NON_PWM

		TCCR1A_Reg->COM1BX=TIMER1B_OUT_MODE;
    1952:	ef e4       	ldi	r30, 0x4F	; 79
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8f 7c       	andi	r24, 0xCF	; 207
    195a:	80 83       	st	Z, r24
#endif

/*INTERRUPT ENABLE*/
#ifdef TIMER1_COMPARE_MATCH_A_ISR_ENABLE

		TIMSK_Reg->OCIE1A=Enable;
    195c:	e9 e5       	ldi	r30, 0x59	; 89
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	80 61       	ori	r24, 0x10	; 16
    1964:	80 83       	st	Z, r24
#ifdef TIMER1_INPUT_CAPTURE_INTERRUPT
		TIMSK_Reg->TICIE1=Enable;
#endif


}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <TIMER1_voidSetChannelACompMatch>:


void TIMER1_voidSetChannelACompMatch(uint16 Copy_uint16Data)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <TIMER1_voidSetChannelACompMatch+0x6>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Reg=Copy_uint16Data;
    197a:	ea e4       	ldi	r30, 0x4A	; 74
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(uint16 Copy_uint16Data)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <TIMER1_voidSetChannelBCompMatch+0x6>
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Reg=Copy_uint16Data;
    199e:	e8 e4       	ldi	r30, 0x48	; 72
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(uint16 Copy_uint16ICR)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <TIMER1_voidSetICR+0x6>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Reg=Copy_uint16ICR;
    19c2:	e6 e4       	ldi	r30, 0x46	; 70
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <TIMER1_voidSetTimerValue>:
void TIMER1_voidSetTimerValue(uint16 Copy_uint16Value)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <TIMER1_voidSetTimerValue+0x6>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Reg=	Copy_uint16Value;
    19e6:	ec e4       	ldi	r30, 0x4C	; 76
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <TIMER1_uint16GetTimerValue>:
uint16 TIMER1_uint16GetTimerValue(void)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
return TCNT1_Reg;
    1a04:	ec e4       	ldi	r30, 0x4C	; 76
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <TIMER1_CTCASetCallBck>:


Timer1_status TIMER1_CTCASetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <TIMER1_CTCASetCallBck+0x6>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	9b 83       	std	Y+3, r25	; 0x03
    1a20:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    1a22:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Copy_pvCallBackFunc)
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	19 f4       	brne	.+6      	; 0x1a32 <TIMER1_CTCASetCallBck+0x20>
	{
		Local_ErrorState=TIMER1_PONTER_ERR;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <TIMER1_CTCASetCallBck+0x2c>
	}
	else
	{
		TIMER1_pvCallBackFunc_CTC_A=Copy_pvCallBackFunc;
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	90 93 61 03 	sts	0x0361, r25
    1a3a:	80 93 60 03 	sts	0x0360, r24
	}
return Local_ErrorState;
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <TIMER1_CTCBSetCallBck>:
Timer1_status TIMER1_CTCBSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <TIMER1_CTCBSetCallBck+0x6>
    1a52:	0f 92       	push	r0
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9b 83       	std	Y+3, r25	; 0x03
    1a5a:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_status Local_ErrorState=TIMER1_OK;
    1a5c:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	9b 81       	ldd	r25, Y+3	; 0x03
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	19 f4       	brne	.+6      	; 0x1a6c <TIMER1_CTCBSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <TIMER1_CTCBSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CTC_B=Copy_pvCallBackFunc;
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a70:	90 93 63 03 	sts	0x0363, r25
    1a74:	80 93 62 03 	sts	0x0362, r24
		}
	return Local_ErrorState;
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <TIMER1_OVSetCallBck>:


Timer1_status TIMER1_OVSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <TIMER1_OVSetCallBck+0x6>
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	9b 83       	std	Y+3, r25	; 0x03
    1a94:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    1a96:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	19 f4       	brne	.+6      	; 0x1aa6 <TIMER1_OVSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	06 c0       	rjmp	.+12     	; 0x1ab2 <TIMER1_OVSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_OV=Copy_pvCallBackFunc;
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aaa:	90 93 65 03 	sts	0x0365, r25
    1aae:	80 93 64 03 	sts	0x0364, r24
		}
	return Local_ErrorState;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <TIMER1_CAPTURESetCallBck>:


Timer1_status TIMER1_CAPTURESetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <TIMER1_CAPTURESetCallBck+0x6>
    1ac6:	0f 92       	push	r0
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	9b 83       	std	Y+3, r25	; 0x03
    1ace:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    1ad0:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <TIMER1_CAPTURESetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <TIMER1_CAPTURESetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CaptEvnt=Copy_pvCallBackFunc;
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae4:	90 93 67 03 	sts	0x0367, r25
    1ae8:	80 93 66 03 	sts	0x0366, r24
		}
	return Local_ErrorState;
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <__vector_6>:



void __vector_6 (void)
{
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62

	TIMER1_pvCallBackFunc_CaptEvnt();
    1b24:	e0 91 66 03 	lds	r30, 0x0366
    1b28:	f0 91 67 03 	lds	r31, 0x0367
    1b2c:	09 95       	icall
	TIFR_Reg->ICF1=Enable;
    1b2e:	e8 e5       	ldi	r30, 0x58	; 88
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 62       	ori	r24, 0x20	; 32
    1b36:	80 83       	st	Z, r24
}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	bf 91       	pop	r27
    1b42:	af 91       	pop	r26
    1b44:	9f 91       	pop	r25
    1b46:	8f 91       	pop	r24
    1b48:	7f 91       	pop	r23
    1b4a:	6f 91       	pop	r22
    1b4c:	5f 91       	pop	r21
    1b4e:	4f 91       	pop	r20
    1b50:	3f 91       	pop	r19
    1b52:	2f 91       	pop	r18
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_7>:

void __vector_7 (void)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	2f 93       	push	r18
    1b6a:	3f 93       	push	r19
    1b6c:	4f 93       	push	r20
    1b6e:	5f 93       	push	r21
    1b70:	6f 93       	push	r22
    1b72:	7f 93       	push	r23
    1b74:	8f 93       	push	r24
    1b76:	9f 93       	push	r25
    1b78:	af 93       	push	r26
    1b7a:	bf 93       	push	r27
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_A();
    1b88:	e0 91 60 03 	lds	r30, 0x0360
    1b8c:	f0 91 61 03 	lds	r31, 0x0361
    1b90:	09 95       	icall
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	bf 91       	pop	r27
    1b9c:	af 91       	pop	r26
    1b9e:	9f 91       	pop	r25
    1ba0:	8f 91       	pop	r24
    1ba2:	7f 91       	pop	r23
    1ba4:	6f 91       	pop	r22
    1ba6:	5f 91       	pop	r21
    1ba8:	4f 91       	pop	r20
    1baa:	3f 91       	pop	r19
    1bac:	2f 91       	pop	r18
    1bae:	0f 90       	pop	r0
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	0f 90       	pop	r0
    1bb4:	1f 90       	pop	r1
    1bb6:	18 95       	reti

00001bb8 <__vector_8>:

void __vector_8 (void)
{
    1bb8:	1f 92       	push	r1
    1bba:	0f 92       	push	r0
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	0f 92       	push	r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	2f 93       	push	r18
    1bc4:	3f 93       	push	r19
    1bc6:	4f 93       	push	r20
    1bc8:	5f 93       	push	r21
    1bca:	6f 93       	push	r22
    1bcc:	7f 93       	push	r23
    1bce:	8f 93       	push	r24
    1bd0:	9f 93       	push	r25
    1bd2:	af 93       	push	r26
    1bd4:	bf 93       	push	r27
    1bd6:	ef 93       	push	r30
    1bd8:	ff 93       	push	r31
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_B();
    1be2:	e0 91 62 03 	lds	r30, 0x0362
    1be6:	f0 91 63 03 	lds	r31, 0x0363
    1bea:	09 95       	icall
}
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	ff 91       	pop	r31
    1bf2:	ef 91       	pop	r30
    1bf4:	bf 91       	pop	r27
    1bf6:	af 91       	pop	r26
    1bf8:	9f 91       	pop	r25
    1bfa:	8f 91       	pop	r24
    1bfc:	7f 91       	pop	r23
    1bfe:	6f 91       	pop	r22
    1c00:	5f 91       	pop	r21
    1c02:	4f 91       	pop	r20
    1c04:	3f 91       	pop	r19
    1c06:	2f 91       	pop	r18
    1c08:	0f 90       	pop	r0
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	0f 90       	pop	r0
    1c0e:	1f 90       	pop	r1
    1c10:	18 95       	reti

00001c12 <__vector_9>:


void __vector_9 (void)
{
    1c12:	1f 92       	push	r1
    1c14:	0f 92       	push	r0
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	0f 92       	push	r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	2f 93       	push	r18
    1c1e:	3f 93       	push	r19
    1c20:	4f 93       	push	r20
    1c22:	5f 93       	push	r21
    1c24:	6f 93       	push	r22
    1c26:	7f 93       	push	r23
    1c28:	8f 93       	push	r24
    1c2a:	9f 93       	push	r25
    1c2c:	af 93       	push	r26
    1c2e:	bf 93       	push	r27
    1c30:	ef 93       	push	r30
    1c32:	ff 93       	push	r31
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_OV();
    1c3c:	e0 91 64 03 	lds	r30, 0x0364
    1c40:	f0 91 65 03 	lds	r31, 0x0365
    1c44:	09 95       	icall
}
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	bf 91       	pop	r27
    1c50:	af 91       	pop	r26
    1c52:	9f 91       	pop	r25
    1c54:	8f 91       	pop	r24
    1c56:	7f 91       	pop	r23
    1c58:	6f 91       	pop	r22
    1c5a:	5f 91       	pop	r21
    1c5c:	4f 91       	pop	r20
    1c5e:	3f 91       	pop	r19
    1c60:	2f 91       	pop	r18
    1c62:	0f 90       	pop	r0
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	0f 90       	pop	r0
    1c68:	1f 90       	pop	r1
    1c6a:	18 95       	reti

00001c6c <TIMER0_DutyCycle>:
#include "../inc/TIMER0_private.h"
#include "../inc/TIMER0_register.h"
#include "../inc/TIMER0_config.h"

void TIMER0_DutyCycle(uint8 Copy_uint8Duty)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <TIMER0_DutyCycle+0x6>
    1c72:	0f 92       	push	r0
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
    1c7a:	1a 82       	std	Y+2, r1	; 0x02
    1c7c:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	98 2f       	mov	r25, r24
    1c86:	88 27       	eor	r24, r24
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	24 e6       	ldi	r18, 0x64	; 100
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	b9 01       	movw	r22, r18
    1c96:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__udivmodhi4>
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Local_VCalue;
    1ca0:	ec e5       	ldi	r30, 0x5C	; 92
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	80 83       	st	Z, r24
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <TIMER0_Delay>:


void TIMER0_Delay(uint16 Copy_uint16Delay)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <TIMER0_Delay+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <TIMER0_Delay+0x8>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
    1cc4:	1a 82       	std	Y+2, r1	; 0x02
    1cc6:	19 82       	std	Y+1, r1	; 0x01
    1cc8:	10 c0       	rjmp	.+32     	; 0x1cea <TIMER0_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIMER0_TIFR_Reg->OCF0 == 0);
    1cca:	e8 e5       	ldi	r30, 0x58	; 88
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	82 70       	andi	r24, 0x02	; 2
    1cd2:	88 23       	and	r24, r24
    1cd4:	d1 f3       	breq	.-12     	; 0x1cca <TIMER0_Delay+0x16>
	TIMER0_TIFR_Reg->OCF0 =1;
    1cd6:	e8 e5       	ldi	r30, 0x58	; 88
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	82 60       	ori	r24, 0x02	; 2
    1cde:	80 83       	st	Z, r24
	Counter++;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
    1cea:	29 81       	ldd	r18, Y+1	; 0x01
    1cec:	3a 81       	ldd	r19, Y+2	; 0x02
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	28 17       	cp	r18, r24
    1cf4:	39 07       	cpc	r19, r25
    1cf6:	48 f3       	brcs	.-46     	; 0x1cca <TIMER0_Delay+0x16>
	while(TIMER0_TIFR_Reg->OCF0 == 0);
	TIMER0_TIFR_Reg->OCF0 =1;
	Counter++;
	}

}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <TIMER0_voidInit>:
void TIMER0_voidInit(void)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
	/*clock selection*/
	TIMER0_TCCR0_Reg->CS0x= CLCK_SELECTION;
    1d0e:	e3 e5       	ldi	r30, 0x53	; 83
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	88 7f       	andi	r24, 0xF8	; 248
    1d16:	84 60       	ori	r24, 0x04	; 4
    1d18:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM01=DISABLE;
	TIMER0_TCCR0_Reg->COM0=CORRECT_PWM_OUTPUT_MODE;


#elif TIMER_MODE==CTC_MODE
	TIMER0_TCCR0_Reg->WGM00=DISABLE;
    1d1a:	e3 e5       	ldi	r30, 0x53	; 83
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 7b       	andi	r24, 0xBF	; 191
    1d22:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM01=1;
    1d24:	e3 e5       	ldi	r30, 0x53	; 83
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 60       	ori	r24, 0x08	; 8
    1d2c:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->COM0=CTC_OUTPUT_MODE;
    1d2e:	e3 e5       	ldi	r30, 0x53	; 83
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7c       	andi	r24, 0xCF	; 207
    1d36:	80 61       	ori	r24, 0x10	; 16
    1d38:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
	TIMER0_TIMSK_Reg->TOIE0=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
	TIMER0_TIMSK_Reg->OCIE0=1;
    1d3a:	e9 e5       	ldi	r30, 0x59	; 89
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	82 60       	ori	r24, 0x02	; 2
    1d42:	80 83       	st	Z, r24
#endif


}
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <TIMER0_voiSetPreLoadValue>:


void TIMER0_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_Reg=Copy_uint8Value;
    1d56:	e2 e5       	ldi	r30, 0x52	; 82
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	80 83       	st	Z, r24
}
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <TIMER0_voiSetCompareMatchValue>:


void TIMER0_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Copy_uint8Value;
    1d72:	ec e5       	ldi	r30, 0x5C	; 92
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	80 83       	st	Z, r24
}
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <Timer0_Timer0OVFCallBackFunc>:

Status_t Timer0_Timer0OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <Timer0_Timer0OVFCallBackFunc+0x6>
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	9b 83       	std	Y+3, r25	; 0x03
    1d90:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    1d92:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	19 f4       	brne	.+6      	; 0x1da2 <Timer0_Timer0OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER_POINTER_Err;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <Timer0_Timer0OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	90 93 6b 03 	sts	0x036B, r25
    1daa:	80 93 6a 03 	sts	0x036A, r24
	}

	return Local_ErrorState;
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <Timer0_Timer0CTCCallBackFunc>:

Status_t Timer0_Timer0CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <Timer0_Timer0CTCCallBackFunc+0x6>
    1dc2:	0f 92       	push	r0
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	9b 83       	std	Y+3, r25	; 0x03
    1dca:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    1dcc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	19 f4       	brne	.+6      	; 0x1ddc <Timer0_Timer0CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER_POINTER_Err;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	06 c0       	rjmp	.+12     	; 0x1de8 <Timer0_Timer0CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	90 93 69 03 	sts	0x0369, r25
    1de4:	80 93 68 03 	sts	0x0368, r24
		}

	return Local_ErrorState;
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <__vector_10>:




/*TIMER0 COMPARE MATCH*/
void __vector_10(void){
    1df6:	1f 92       	push	r1
    1df8:	0f 92       	push	r0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	0f 92       	push	r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	2f 93       	push	r18
    1e02:	3f 93       	push	r19
    1e04:	4f 93       	push	r20
    1e06:	5f 93       	push	r21
    1e08:	6f 93       	push	r22
    1e0a:	7f 93       	push	r23
    1e0c:	8f 93       	push	r24
    1e0e:	9f 93       	push	r25
    1e10:	af 93       	push	r26
    1e12:	bf 93       	push	r27
    1e14:	ef 93       	push	r30
    1e16:	ff 93       	push	r31
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    1e20:	e0 91 68 03 	lds	r30, 0x0368
    1e24:	f0 91 69 03 	lds	r31, 0x0369
    1e28:	09 95       	icall
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	ff 91       	pop	r31
    1e30:	ef 91       	pop	r30
    1e32:	bf 91       	pop	r27
    1e34:	af 91       	pop	r26
    1e36:	9f 91       	pop	r25
    1e38:	8f 91       	pop	r24
    1e3a:	7f 91       	pop	r23
    1e3c:	6f 91       	pop	r22
    1e3e:	5f 91       	pop	r21
    1e40:	4f 91       	pop	r20
    1e42:	3f 91       	pop	r19
    1e44:	2f 91       	pop	r18
    1e46:	0f 90       	pop	r0
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	0f 90       	pop	r0
    1e4c:	1f 90       	pop	r1
    1e4e:	18 95       	reti

00001e50 <__vector_11>:

/*TIMER0 OVERFLOW*/
void __vector_11(void){
    1e50:	1f 92       	push	r1
    1e52:	0f 92       	push	r0
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	0f 92       	push	r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	2f 93       	push	r18
    1e5c:	3f 93       	push	r19
    1e5e:	4f 93       	push	r20
    1e60:	5f 93       	push	r21
    1e62:	6f 93       	push	r22
    1e64:	7f 93       	push	r23
    1e66:	8f 93       	push	r24
    1e68:	9f 93       	push	r25
    1e6a:	af 93       	push	r26
    1e6c:	bf 93       	push	r27
    1e6e:	ef 93       	push	r30
    1e70:	ff 93       	push	r31
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    1e7a:	e0 91 6a 03 	lds	r30, 0x036A
    1e7e:	f0 91 6b 03 	lds	r31, 0x036B
    1e82:	09 95       	icall
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	ff 91       	pop	r31
    1e8a:	ef 91       	pop	r30
    1e8c:	bf 91       	pop	r27
    1e8e:	af 91       	pop	r26
    1e90:	9f 91       	pop	r25
    1e92:	8f 91       	pop	r24
    1e94:	7f 91       	pop	r23
    1e96:	6f 91       	pop	r22
    1e98:	5f 91       	pop	r21
    1e9a:	4f 91       	pop	r20
    1e9c:	3f 91       	pop	r19
    1e9e:	2f 91       	pop	r18
    1ea0:	0f 90       	pop	r0
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	0f 90       	pop	r0
    1ea6:	1f 90       	pop	r1
    1ea8:	18 95       	reti

00001eaa <PORT_voidInit>:
#include"../inc/PORT_config.h"



void PORT_voidInit(void)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62

DDRA=PORTA_DIR;
    1eb2:	ea e3       	ldi	r30, 0x3A	; 58
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	80 83       	st	Z, r24
DDRB=PORTB_DIR;
    1eba:	e7 e3       	ldi	r30, 0x37	; 55
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	88 e0       	ldi	r24, 0x08	; 8
    1ec0:	80 83       	st	Z, r24
DDRC=PORTC_DIR;
    1ec2:	e4 e3       	ldi	r30, 0x34	; 52
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	10 82       	st	Z, r1
DDRD=PORTD_DIR;
    1ec8:	e1 e3       	ldi	r30, 0x31	; 49
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	10 82       	st	Z, r1

PORTA=PORTA_INIT_VALUE;
    1ece:	eb e3       	ldi	r30, 0x3B	; 59
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	10 82       	st	Z, r1
PORTB=PORTB_INIT_VALUE;
    1ed4:	e8 e3       	ldi	r30, 0x38	; 56
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	10 82       	st	Z, r1
PORTC=PORTC_INIT_VALUE;
    1eda:	e5 e3       	ldi	r30, 0x35	; 53
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	10 82       	st	Z, r1
PORTD=PORTD_INIT_VALUE;
    1ee0:	e2 e3       	ldi	r30, 0x32	; 50
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	80 83       	st	Z, r24
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <GIE_Enable>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/GIE_interface.h"
#include "../inc/GIE_register.h"

void GIE_Enable(void)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_I);
    1ef6:	af e5       	ldi	r26, 0x5F	; 95
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	ef e5       	ldi	r30, 0x5F	; 95
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	80 68       	ori	r24, 0x80	; 128
    1f02:	8c 93       	st	X, r24

}
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <GIE_Disable>:
void GIE_Disable(void)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    1f12:	af e5       	ldi	r26, 0x5F	; 95
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ef e5       	ldi	r30, 0x5F	; 95
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 77       	andi	r24, 0x7F	; 127
    1f1e:	8c 93       	st	X, r24
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <EXTI_voidInt0Init>:
#include "../inc/EXTI_interface.h"
#include "../inc/EXTI_config.h"
#include "../inc/EXTI_private.h"

void EXTI_voidInt0Init(void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62

#if INT0_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    1f2e:	a5 e5       	ldi	r26, 0x55	; 85
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e5 e5       	ldi	r30, 0x55	; 85
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	81 60       	ori	r24, 0x01	; 1
    1f3a:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1f3c:	a5 e5       	ldi	r26, 0x55	; 85
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e5       	ldi	r30, 0x55	; 85
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8d 7f       	andi	r24, 0xFD	; 253
    1f48:	8c 93       	st	X, r24
#else
#error "INT0 Wrong init"
#endif

#if INT0_STATE == INT0_ENABLE
	SET_BIT(GICR,GICR_INT0);
    1f4a:	ab e5       	ldi	r26, 0x5B	; 91
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	eb e5       	ldi	r30, 0x5B	; 91
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	80 64       	ori	r24, 0x40	; 64
    1f56:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT0);
#else
#error "INT0 Wrong init"
#endif

}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
#if INT1_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC10);
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
    1f66:	a5 e5       	ldi	r26, 0x55	; 85
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e5 e5       	ldi	r30, 0x55	; 85
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	84 60       	ori	r24, 0x04	; 4
    1f72:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1f74:	a5 e5       	ldi	r26, 0x55	; 85
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e5 e5       	ldi	r30, 0x55	; 85
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	87 7f       	andi	r24, 0xF7	; 247
    1f80:	8c 93       	st	X, r24
#elif  INT1_STATE == INT1_DISABLE
	CLEAR_BIT(GICR,GICR_INT1);
#else
#warning "INT1 Wrong init"
#endif
}
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62

#if INT2_SENSE == FALLING_EDGE
	CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    1f90:	a4 e5       	ldi	r26, 0x54	; 84
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e4 e5       	ldi	r30, 0x54	; 84
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	8f 7b       	andi	r24, 0xBF	; 191
    1f9c:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT2);
#else
#warning "INT2 Wrong init"
#endif

}
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <EXTI_uint8IntSetSenseControl>:

uint8 EXTI_uint8IntSetSenseControl(uint8 Copy_uint8IntNumber,uint8 Copy_uint8Sense)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	29 97       	sbiw	r28, 0x09	; 9
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	8a 83       	std	Y+2, r24	; 0x02
    1fba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState=0;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
	if(INT0==Copy_uint8IntNumber)
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <EXTI_uint8IntSetSenseControl+0x22>
    1fc4:	5e c0       	rjmp	.+188    	; 0x2082 <EXTI_uint8IntSetSenseControl+0xde>
	{
		switch(Copy_uint8Sense)
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	39 87       	std	Y+9, r19	; 0x09
    1fce:	28 87       	std	Y+8, r18	; 0x08
    1fd0:	88 85       	ldd	r24, Y+8	; 0x08
    1fd2:	99 85       	ldd	r25, Y+9	; 0x09
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	21 f1       	breq	.+72     	; 0x2022 <EXTI_uint8IntSetSenseControl+0x7e>
    1fda:	28 85       	ldd	r18, Y+8	; 0x08
    1fdc:	39 85       	ldd	r19, Y+9	; 0x09
    1fde:	22 30       	cpi	r18, 0x02	; 2
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <EXTI_uint8IntSetSenseControl+0x4a>
    1fe4:	88 85       	ldd	r24, Y+8	; 0x08
    1fe6:	99 85       	ldd	r25, Y+9	; 0x09
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	61 f0       	breq	.+24     	; 0x2004 <EXTI_uint8IntSetSenseControl+0x60>
    1fec:	47 c0       	rjmp	.+142    	; 0x207c <EXTI_uint8IntSetSenseControl+0xd8>
    1fee:	28 85       	ldd	r18, Y+8	; 0x08
    1ff0:	39 85       	ldd	r19, Y+9	; 0x09
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	21 f1       	breq	.+72     	; 0x2040 <EXTI_uint8IntSetSenseControl+0x9c>
    1ff8:	88 85       	ldd	r24, Y+8	; 0x08
    1ffa:	99 85       	ldd	r25, Y+9	; 0x09
    1ffc:	83 30       	cpi	r24, 0x03	; 3
    1ffe:	91 05       	cpc	r25, r1
    2000:	71 f1       	breq	.+92     	; 0x205e <EXTI_uint8IntSetSenseControl+0xba>
    2002:	3c c0       	rjmp	.+120    	; 0x207c <EXTI_uint8IntSetSenseControl+0xd8>
		{
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    2004:	a5 e5       	ldi	r26, 0x55	; 85
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e5 e5       	ldi	r30, 0x55	; 85
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8e 7f       	andi	r24, 0xFE	; 254
    2010:	8c 93       	st	X, r24
    2012:	a5 e5       	ldi	r26, 0x55	; 85
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e5       	ldi	r30, 0x55	; 85
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8d 7f       	andi	r24, 0xFD	; 253
    201e:	8c 93       	st	X, r24
    2020:	ba c0       	rjmp	.+372    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    2022:	a5 e5       	ldi	r26, 0x55	; 85
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e5 e5       	ldi	r30, 0x55	; 85
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	81 60       	ori	r24, 0x01	; 1
    202e:	8c 93       	st	X, r24
    2030:	a5 e5       	ldi	r26, 0x55	; 85
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e5 e5       	ldi	r30, 0x55	; 85
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8d 7f       	andi	r24, 0xFD	; 253
    203c:	8c 93       	st	X, r24
    203e:	ab c0       	rjmp	.+342    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    2040:	a5 e5       	ldi	r26, 0x55	; 85
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e5 e5       	ldi	r30, 0x55	; 85
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8e 7f       	andi	r24, 0xFE	; 254
    204c:	8c 93       	st	X, r24
    204e:	a5 e5       	ldi	r26, 0x55	; 85
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e5 e5       	ldi	r30, 0x55	; 85
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	82 60       	ori	r24, 0x02	; 2
    205a:	8c 93       	st	X, r24
    205c:	9c c0       	rjmp	.+312    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    205e:	a5 e5       	ldi	r26, 0x55	; 85
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e5       	ldi	r30, 0x55	; 85
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	81 60       	ori	r24, 0x01	; 1
    206a:	8c 93       	st	X, r24
    206c:	a5 e5       	ldi	r26, 0x55	; 85
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e5 e5       	ldi	r30, 0x55	; 85
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	8c 93       	st	X, r24
    207a:	8d c0       	rjmp	.+282    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
		default : Local_ErrorState=1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	8a c0       	rjmp	.+276    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
		}
	}
	else if(INT1==Copy_uint8IntNumber)
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	09 f0       	breq	.+2      	; 0x208a <EXTI_uint8IntSetSenseControl+0xe6>
    2088:	5e c0       	rjmp	.+188    	; 0x2146 <EXTI_uint8IntSetSenseControl+0x1a2>
	{
		switch(Copy_uint8Sense)
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	3f 83       	std	Y+7, r19	; 0x07
    2092:	2e 83       	std	Y+6, r18	; 0x06
    2094:	8e 81       	ldd	r24, Y+6	; 0x06
    2096:	9f 81       	ldd	r25, Y+7	; 0x07
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	91 05       	cpc	r25, r1
    209c:	21 f1       	breq	.+72     	; 0x20e6 <EXTI_uint8IntSetSenseControl+0x142>
    209e:	2e 81       	ldd	r18, Y+6	; 0x06
    20a0:	3f 81       	ldd	r19, Y+7	; 0x07
    20a2:	22 30       	cpi	r18, 0x02	; 2
    20a4:	31 05       	cpc	r19, r1
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <EXTI_uint8IntSetSenseControl+0x10e>
    20a8:	8e 81       	ldd	r24, Y+6	; 0x06
    20aa:	9f 81       	ldd	r25, Y+7	; 0x07
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	61 f0       	breq	.+24     	; 0x20c8 <EXTI_uint8IntSetSenseControl+0x124>
    20b0:	47 c0       	rjmp	.+142    	; 0x2140 <EXTI_uint8IntSetSenseControl+0x19c>
    20b2:	2e 81       	ldd	r18, Y+6	; 0x06
    20b4:	3f 81       	ldd	r19, Y+7	; 0x07
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	21 f1       	breq	.+72     	; 0x2104 <EXTI_uint8IntSetSenseControl+0x160>
    20bc:	8e 81       	ldd	r24, Y+6	; 0x06
    20be:	9f 81       	ldd	r25, Y+7	; 0x07
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	91 05       	cpc	r25, r1
    20c4:	71 f1       	breq	.+92     	; 0x2122 <EXTI_uint8IntSetSenseControl+0x17e>
    20c6:	3c c0       	rjmp	.+120    	; 0x2140 <EXTI_uint8IntSetSenseControl+0x19c>
	  {
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    20c8:	a5 e5       	ldi	r26, 0x55	; 85
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e5       	ldi	r30, 0x55	; 85
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	8b 7f       	andi	r24, 0xFB	; 251
    20d4:	8c 93       	st	X, r24
    20d6:	a5 e5       	ldi	r26, 0x55	; 85
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e5 e5       	ldi	r30, 0x55	; 85
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	87 7f       	andi	r24, 0xF7	; 247
    20e2:	8c 93       	st	X, r24
    20e4:	58 c0       	rjmp	.+176    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    20e6:	a5 e5       	ldi	r26, 0x55	; 85
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e5 e5       	ldi	r30, 0x55	; 85
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	84 60       	ori	r24, 0x04	; 4
    20f2:	8c 93       	st	X, r24
    20f4:	a5 e5       	ldi	r26, 0x55	; 85
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e5 e5       	ldi	r30, 0x55	; 85
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	87 7f       	andi	r24, 0xF7	; 247
    2100:	8c 93       	st	X, r24
    2102:	49 c0       	rjmp	.+146    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    2104:	a5 e5       	ldi	r26, 0x55	; 85
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e5 e5       	ldi	r30, 0x55	; 85
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	8b 7f       	andi	r24, 0xFB	; 251
    2110:	8c 93       	st	X, r24
    2112:	a5 e5       	ldi	r26, 0x55	; 85
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e5 e5       	ldi	r30, 0x55	; 85
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	88 60       	ori	r24, 0x08	; 8
    211e:	8c 93       	st	X, r24
    2120:	3a c0       	rjmp	.+116    	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    2122:	a5 e5       	ldi	r26, 0x55	; 85
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e5 e5       	ldi	r30, 0x55	; 85
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	84 60       	ori	r24, 0x04	; 4
    212e:	8c 93       	st	X, r24
    2130:	a5 e5       	ldi	r26, 0x55	; 85
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e5 e5       	ldi	r30, 0x55	; 85
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	88 60       	ori	r24, 0x08	; 8
    213c:	8c 93       	st	X, r24
    213e:	2b c0       	rjmp	.+86     	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	28 c0       	rjmp	.+80     	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else if(INT2==Copy_uint8IntNumber)
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	83 30       	cpi	r24, 0x03	; 3
    214a:	19 f5       	brne	.+70     	; 0x2192 <EXTI_uint8IntSetSenseControl+0x1ee>
	{switch(Copy_uint8Sense)
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	3d 83       	std	Y+5, r19	; 0x05
    2154:	2c 83       	std	Y+4, r18	; 0x04
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	9d 81       	ldd	r25, Y+5	; 0x05
    215a:	82 30       	cpi	r24, 0x02	; 2
    215c:	91 05       	cpc	r25, r1
    215e:	31 f0       	breq	.+12     	; 0x216c <EXTI_uint8IntSetSenseControl+0x1c8>
    2160:	2c 81       	ldd	r18, Y+4	; 0x04
    2162:	3d 81       	ldd	r19, Y+5	; 0x05
    2164:	23 30       	cpi	r18, 0x03	; 3
    2166:	31 05       	cpc	r19, r1
    2168:	49 f0       	breq	.+18     	; 0x217c <EXTI_uint8IntSetSenseControl+0x1d8>
    216a:	10 c0       	rjmp	.+32     	; 0x218c <EXTI_uint8IntSetSenseControl+0x1e8>
	  {
	   case EXTI_FALLING:CLEAR_BIT(MCUCSR,MCUCSR_ISC2);break;
    216c:	a4 e5       	ldi	r26, 0x54	; 84
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e4 e5       	ldi	r30, 0x54	; 84
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	8f 7b       	andi	r24, 0xBF	; 191
    2178:	8c 93       	st	X, r24
    217a:	0d c0       	rjmp	.+26     	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
    217c:	a4 e5       	ldi	r26, 0x54	; 84
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e4 e5       	ldi	r30, 0x54	; 84
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 64       	ori	r24, 0x40	; 64
    2188:	8c 93       	st	X, r24
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else
	{
		Local_ErrorState=1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_ErrorState;
    2196:	89 81       	ldd	r24, Y+1	; 0x01
}
    2198:	29 96       	adiw	r28, 0x09	; 9
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <EXTI_uint8IntEnable>:

uint8 EXTI_uint8IntEnable(uint8 Copy_uint8IntNumber)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <EXTI_uint8IntEnable+0x6>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <EXTI_uint8IntEnable+0x8>
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    21b8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	3c 83       	std	Y+4, r19	; 0x04
    21c2:	2b 83       	std	Y+3, r18	; 0x03
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	91 05       	cpc	r25, r1
    21cc:	91 f0       	breq	.+36     	; 0x21f2 <EXTI_uint8IntEnable+0x48>
    21ce:	2b 81       	ldd	r18, Y+3	; 0x03
    21d0:	3c 81       	ldd	r19, Y+4	; 0x04
    21d2:	23 30       	cpi	r18, 0x03	; 3
    21d4:	31 05       	cpc	r19, r1
    21d6:	a9 f0       	breq	.+42     	; 0x2202 <EXTI_uint8IntEnable+0x58>
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	91 05       	cpc	r25, r1
    21e0:	c1 f4       	brne	.+48     	; 0x2212 <EXTI_uint8IntEnable+0x68>
	case INT0:SET_BIT(GICR,GICR_INT0);break;
    21e2:	ab e5       	ldi	r26, 0x5B	; 91
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	eb e5       	ldi	r30, 0x5B	; 91
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	80 64       	ori	r24, 0x40	; 64
    21ee:	8c 93       	st	X, r24
    21f0:	12 c0       	rjmp	.+36     	; 0x2216 <EXTI_uint8IntEnable+0x6c>
	case INT1:SET_BIT(GICR,GICR_INT1);break;
    21f2:	ab e5       	ldi	r26, 0x5B	; 91
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	eb e5       	ldi	r30, 0x5B	; 91
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	8c 93       	st	X, r24
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <EXTI_uint8IntEnable+0x6c>
	case INT2:SET_BIT(GICR,GICR_INT2);break;
    2202:	ab e5       	ldi	r26, 0x5B	; 91
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	eb e5       	ldi	r30, 0x5B	; 91
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	80 62       	ori	r24, 0x20	; 32
    220e:	8c 93       	st	X, r24
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <EXTI_uint8IntEnable+0x6c>
    default  : Local_ErrorState=1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <EXTI_uint8IntDisable>:


uint8 EXTI_uint8IntDisable(uint8 Copy_uint8IntNumber)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <EXTI_uint8IntDisable+0x6>
    222c:	00 d0       	rcall	.+0      	; 0x222e <EXTI_uint8IntDisable+0x8>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    2234:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	3c 83       	std	Y+4, r19	; 0x04
    223e:	2b 83       	std	Y+3, r18	; 0x03
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	82 30       	cpi	r24, 0x02	; 2
    2246:	91 05       	cpc	r25, r1
    2248:	91 f0       	breq	.+36     	; 0x226e <EXTI_uint8IntDisable+0x48>
    224a:	2b 81       	ldd	r18, Y+3	; 0x03
    224c:	3c 81       	ldd	r19, Y+4	; 0x04
    224e:	23 30       	cpi	r18, 0x03	; 3
    2250:	31 05       	cpc	r19, r1
    2252:	a9 f0       	breq	.+42     	; 0x227e <EXTI_uint8IntDisable+0x58>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	91 05       	cpc	r25, r1
    225c:	c1 f4       	brne	.+48     	; 0x228e <EXTI_uint8IntDisable+0x68>
	case INT0:CLEAR_BIT(GICR,GICR_INT0);break;
    225e:	ab e5       	ldi	r26, 0x5B	; 91
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	eb e5       	ldi	r30, 0x5B	; 91
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8f 7b       	andi	r24, 0xBF	; 191
    226a:	8c 93       	st	X, r24
    226c:	12 c0       	rjmp	.+36     	; 0x2292 <EXTI_uint8IntDisable+0x6c>
	case INT1:CLEAR_BIT(GICR,GICR_INT1);break;
    226e:	ab e5       	ldi	r26, 0x5B	; 91
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	eb e5       	ldi	r30, 0x5B	; 91
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8f 77       	andi	r24, 0x7F	; 127
    227a:	8c 93       	st	X, r24
    227c:	0a c0       	rjmp	.+20     	; 0x2292 <EXTI_uint8IntDisable+0x6c>
	case INT2:CLEAR_BIT(GICR,GICR_INT2);break;
    227e:	ab e5       	ldi	r26, 0x5B	; 91
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	eb e5       	ldi	r30, 0x5B	; 91
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	8f 7d       	andi	r24, 0xDF	; 223
    228a:	8c 93       	st	X, r24
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <EXTI_uint8IntDisable+0x6c>
    default  : Local_ErrorState=1;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <EXTI_uint8Int0SetCallBack>:

uint8 EXTI_uint8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <EXTI_uint8Int0SetCallBack+0x6>
    22a8:	0f 92       	push	r0
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	9b 83       	std	Y+3, r25	; 0x03
    22b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    22b2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	39 f0       	breq	.+14     	; 0x22ca <EXTI_uint8Int0SetCallBack+0x28>
	{
		Global_EXTI_pvInt0Func=Copy_pvInt0Func;
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	9b 81       	ldd	r25, Y+3	; 0x03
    22c0:	90 93 6d 03 	sts	0x036D, r25
    22c4:	80 93 6c 03 	sts	0x036C, r24
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <EXTI_uint8Int0SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    22ca:	82 e0       	ldi	r24, 0x02	; 2
    22cc:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <EXTI_uint8Int1SetCallBack>:



uint8 EXTI_uint8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <EXTI_uint8Int1SetCallBack+0x6>
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	9b 83       	std	Y+3, r25	; 0x03
    22ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    22ec:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL)
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	9b 81       	ldd	r25, Y+3	; 0x03
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	39 f0       	breq	.+14     	; 0x2304 <EXTI_uint8Int1SetCallBack+0x28>
	{
		Global_EXTI_pvInt1Func=Copy_pvInt1Func;
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	90 93 6f 03 	sts	0x036F, r25
    22fe:	80 93 6e 03 	sts	0x036E, r24
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <EXTI_uint8Int1SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    2308:	89 81       	ldd	r24, Y+1	; 0x01
}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <EXTI_uint8Int2SetCallBack>:



uint8 EXTI_uint8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <EXTI_uint8Int2SetCallBack+0x6>
    231c:	0f 92       	push	r0
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	9b 83       	std	Y+3, r25	; 0x03
    2324:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    2326:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL)
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	39 f0       	breq	.+14     	; 0x233e <EXTI_uint8Int2SetCallBack+0x28>
	{
		Global_EXTI_pvInt2Func=Copy_pvInt2Func;
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	90 93 71 03 	sts	0x0371, r25
    2338:	80 93 70 03 	sts	0x0370, r24
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <EXTI_uint8Int2SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <__vector_1>:


/*ISR of INT0*/

void __vector_1(void)
{
    2350:	1f 92       	push	r1
    2352:	0f 92       	push	r0
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	0f 92       	push	r0
    2358:	11 24       	eor	r1, r1
    235a:	2f 93       	push	r18
    235c:	3f 93       	push	r19
    235e:	4f 93       	push	r20
    2360:	5f 93       	push	r21
    2362:	6f 93       	push	r22
    2364:	7f 93       	push	r23
    2366:	8f 93       	push	r24
    2368:	9f 93       	push	r25
    236a:	af 93       	push	r26
    236c:	bf 93       	push	r27
    236e:	ef 93       	push	r30
    2370:	ff 93       	push	r31
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt0Func!=NULL)
    237a:	80 91 6c 03 	lds	r24, 0x036C
    237e:	90 91 6d 03 	lds	r25, 0x036D
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	29 f0       	breq	.+10     	; 0x2390 <__vector_1+0x40>
	{
		Global_EXTI_pvInt0Func();
    2386:	e0 91 6c 03 	lds	r30, 0x036C
    238a:	f0 91 6d 03 	lds	r31, 0x036D
    238e:	09 95       	icall
	else
	{
		//do nothing

	}
}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	ff 91       	pop	r31
    2396:	ef 91       	pop	r30
    2398:	bf 91       	pop	r27
    239a:	af 91       	pop	r26
    239c:	9f 91       	pop	r25
    239e:	8f 91       	pop	r24
    23a0:	7f 91       	pop	r23
    23a2:	6f 91       	pop	r22
    23a4:	5f 91       	pop	r21
    23a6:	4f 91       	pop	r20
    23a8:	3f 91       	pop	r19
    23aa:	2f 91       	pop	r18
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	0f 90       	pop	r0
    23b2:	1f 90       	pop	r1
    23b4:	18 95       	reti

000023b6 <__vector_2>:

/*ISR of INT1*/

void __vector_2(void)
{
    23b6:	1f 92       	push	r1
    23b8:	0f 92       	push	r0
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	0f 92       	push	r0
    23be:	11 24       	eor	r1, r1
    23c0:	2f 93       	push	r18
    23c2:	3f 93       	push	r19
    23c4:	4f 93       	push	r20
    23c6:	5f 93       	push	r21
    23c8:	6f 93       	push	r22
    23ca:	7f 93       	push	r23
    23cc:	8f 93       	push	r24
    23ce:	9f 93       	push	r25
    23d0:	af 93       	push	r26
    23d2:	bf 93       	push	r27
    23d4:	ef 93       	push	r30
    23d6:	ff 93       	push	r31
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt1Func!=NULL)
    23e0:	80 91 6e 03 	lds	r24, 0x036E
    23e4:	90 91 6f 03 	lds	r25, 0x036F
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	29 f0       	breq	.+10     	; 0x23f6 <__vector_2+0x40>
		{
		Global_EXTI_pvInt1Func();
    23ec:	e0 91 6e 03 	lds	r30, 0x036E
    23f0:	f0 91 6f 03 	lds	r31, 0x036F
    23f4:	09 95       	icall
		{
			//do nothing

		}

	}
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	0f 90       	pop	r0
    2418:	1f 90       	pop	r1
    241a:	18 95       	reti

0000241c <__vector_3>:


/*ISR of INT2*/

void __vector_3(void)
{
    241c:	1f 92       	push	r1
    241e:	0f 92       	push	r0
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	0f 92       	push	r0
    2424:	11 24       	eor	r1, r1
    2426:	2f 93       	push	r18
    2428:	3f 93       	push	r19
    242a:	4f 93       	push	r20
    242c:	5f 93       	push	r21
    242e:	6f 93       	push	r22
    2430:	7f 93       	push	r23
    2432:	8f 93       	push	r24
    2434:	9f 93       	push	r25
    2436:	af 93       	push	r26
    2438:	bf 93       	push	r27
    243a:	ef 93       	push	r30
    243c:	ff 93       	push	r31
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62

	if(Global_EXTI_pvInt2Func!=NULL)
    2446:	80 91 70 03 	lds	r24, 0x0370
    244a:	90 91 71 03 	lds	r25, 0x0371
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	29 f0       	breq	.+10     	; 0x245c <__vector_3+0x40>
		{
		Global_EXTI_pvInt2Func();
    2452:	e0 91 70 03 	lds	r30, 0x0370
    2456:	f0 91 71 03 	lds	r31, 0x0371
    245a:	09 95       	icall
		{
			//do nothing

		}

}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	ff 91       	pop	r31
    2462:	ef 91       	pop	r30
    2464:	bf 91       	pop	r27
    2466:	af 91       	pop	r26
    2468:	9f 91       	pop	r25
    246a:	8f 91       	pop	r24
    246c:	7f 91       	pop	r23
    246e:	6f 91       	pop	r22
    2470:	5f 91       	pop	r21
    2472:	4f 91       	pop	r20
    2474:	3f 91       	pop	r19
    2476:	2f 91       	pop	r18
    2478:	0f 90       	pop	r0
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	0f 90       	pop	r0
    247e:	1f 90       	pop	r1
    2480:	18 95       	reti

00002482 <DIO_SetPortVal>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/DIO_interface.h"
#include  "../inc/DIO_private.h"
#include "../inc/DIO_register.h"

status_t DIO_SetPortVal(Port_t Copy_Port, uint8 Copy_uint8Value) {
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	00 d0       	rcall	.+0      	; 0x2488 <DIO_SetPortVal+0x6>
    2488:	00 d0       	rcall	.+0      	; 0x248a <DIO_SetPortVal+0x8>
    248a:	0f 92       	push	r0
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	8a 83       	std	Y+2, r24	; 0x02
    2492:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    2494:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	84 30       	cpi	r24, 0x04	; 4
    249a:	18 f0       	brcs	.+6      	; 0x24a2 <DIO_SetPortVal+0x20>
		Local_uint8ErrorState = DIO_SetErr;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	32 c0       	rjmp	.+100    	; 0x2506 <DIO_SetPortVal+0x84>
	} else {
		switch (Copy_Port) {
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	3d 83       	std	Y+5, r19	; 0x05
    24aa:	2c 83       	std	Y+4, r18	; 0x04
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	9d 81       	ldd	r25, Y+5	; 0x05
    24b0:	81 30       	cpi	r24, 0x01	; 1
    24b2:	91 05       	cpc	r25, r1
    24b4:	d1 f0       	breq	.+52     	; 0x24ea <DIO_SetPortVal+0x68>
    24b6:	2c 81       	ldd	r18, Y+4	; 0x04
    24b8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ba:	22 30       	cpi	r18, 0x02	; 2
    24bc:	31 05       	cpc	r19, r1
    24be:	2c f4       	brge	.+10     	; 0x24ca <DIO_SetPortVal+0x48>
    24c0:	8c 81       	ldd	r24, Y+4	; 0x04
    24c2:	9d 81       	ldd	r25, Y+5	; 0x05
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	61 f0       	breq	.+24     	; 0x24e0 <DIO_SetPortVal+0x5e>
    24c8:	1e c0       	rjmp	.+60     	; 0x2506 <DIO_SetPortVal+0x84>
    24ca:	2c 81       	ldd	r18, Y+4	; 0x04
    24cc:	3d 81       	ldd	r19, Y+5	; 0x05
    24ce:	22 30       	cpi	r18, 0x02	; 2
    24d0:	31 05       	cpc	r19, r1
    24d2:	81 f0       	breq	.+32     	; 0x24f4 <DIO_SetPortVal+0x72>
    24d4:	8c 81       	ldd	r24, Y+4	; 0x04
    24d6:	9d 81       	ldd	r25, Y+5	; 0x05
    24d8:	83 30       	cpi	r24, 0x03	; 3
    24da:	91 05       	cpc	r25, r1
    24dc:	81 f0       	breq	.+32     	; 0x24fe <DIO_SetPortVal+0x7c>
    24de:	13 c0       	rjmp	.+38     	; 0x2506 <DIO_SetPortVal+0x84>
		case DIO_PORTA:
			PORTA = Copy_uint8Value;
    24e0:	eb e3       	ldi	r30, 0x3B	; 59
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	80 83       	st	Z, r24
    24e8:	0e c0       	rjmp	.+28     	; 0x2506 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTB:
			PORTB = Copy_uint8Value;
    24ea:	e8 e3       	ldi	r30, 0x38	; 56
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	80 83       	st	Z, r24
    24f2:	09 c0       	rjmp	.+18     	; 0x2506 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTC:
			PORTC = Copy_uint8Value;
    24f4:	e5 e3       	ldi	r30, 0x35	; 53
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	80 83       	st	Z, r24
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTD:
			PORTD = Copy_uint8Value;
    24fe:	e2 e3       	ldi	r30, 0x32	; 50
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	80 83       	st	Z, r24
			break;
		}
	}

	return Local_uint8ErrorState;
    2506:	89 81       	ldd	r24, Y+1	; 0x01
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <DIO_SetPinVal>:

status_t DIO_SetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8 Copy_uint8Value) {
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	28 97       	sbiw	r28, 0x08	; 8
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	6b 83       	std	Y+3, r22	; 0x03
    2530:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    2532:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	84 30       	cpi	r24, 0x04	; 4
    2538:	18 f0       	brcs	.+6      	; 0x2540 <DIO_SetPinVal+0x28>
		Local_uint8ErrorState = DIO_SetErr;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	f0 c0       	rjmp	.+480    	; 0x2720 <DIO_SetPinVal+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	88 30       	cpi	r24, 0x08	; 8
    2544:	18 f0       	brcs	.+6      	; 0x254c <DIO_SetPinVal+0x34>
		Local_uint8ErrorState = DIO_SetErr;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	ea c0       	rjmp	.+468    	; 0x2720 <DIO_SetPinVal+0x208>
	} else {
		if (DIO_HIGH == Copy_uint8Value) {
    254c:	8c 81       	ldd	r24, Y+4	; 0x04
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	09 f0       	breq	.+2      	; 0x2554 <DIO_SetPinVal+0x3c>
    2552:	6f c0       	rjmp	.+222    	; 0x2632 <DIO_SetPinVal+0x11a>
			switch (Copy_Port) {
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	38 87       	std	Y+8, r19	; 0x08
    255c:	2f 83       	std	Y+7, r18	; 0x07
    255e:	8f 81       	ldd	r24, Y+7	; 0x07
    2560:	98 85       	ldd	r25, Y+8	; 0x08
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	91 05       	cpc	r25, r1
    2566:	49 f1       	breq	.+82     	; 0x25ba <DIO_SetPinVal+0xa2>
    2568:	2f 81       	ldd	r18, Y+7	; 0x07
    256a:	38 85       	ldd	r19, Y+8	; 0x08
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	2c f4       	brge	.+10     	; 0x257c <DIO_SetPinVal+0x64>
    2572:	8f 81       	ldd	r24, Y+7	; 0x07
    2574:	98 85       	ldd	r25, Y+8	; 0x08
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	61 f0       	breq	.+24     	; 0x2592 <DIO_SetPinVal+0x7a>
    257a:	d2 c0       	rjmp	.+420    	; 0x2720 <DIO_SetPinVal+0x208>
    257c:	2f 81       	ldd	r18, Y+7	; 0x07
    257e:	38 85       	ldd	r19, Y+8	; 0x08
    2580:	22 30       	cpi	r18, 0x02	; 2
    2582:	31 05       	cpc	r19, r1
    2584:	71 f1       	breq	.+92     	; 0x25e2 <DIO_SetPinVal+0xca>
    2586:	8f 81       	ldd	r24, Y+7	; 0x07
    2588:	98 85       	ldd	r25, Y+8	; 0x08
    258a:	83 30       	cpi	r24, 0x03	; 3
    258c:	91 05       	cpc	r25, r1
    258e:	e9 f1       	breq	.+122    	; 0x260a <DIO_SetPinVal+0xf2>
    2590:	c7 c0       	rjmp	.+398    	; 0x2720 <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				SET_BIT(PORTA, Copy_Pin);
    2592:	ab e3       	ldi	r26, 0x3B	; 59
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	eb e3       	ldi	r30, 0x3B	; 59
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	48 2f       	mov	r20, r24
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	02 2e       	mov	r0, r18
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <DIO_SetPinVal+0x98>
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	0a 94       	dec	r0
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <DIO_SetPinVal+0x94>
    25b4:	84 2b       	or	r24, r20
    25b6:	8c 93       	st	X, r24
    25b8:	b3 c0       	rjmp	.+358    	; 0x2720 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB, Copy_Pin);
    25ba:	a8 e3       	ldi	r26, 0x38	; 56
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e8 e3       	ldi	r30, 0x38	; 56
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	48 2f       	mov	r20, r24
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	02 2e       	mov	r0, r18
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <DIO_SetPinVal+0xc0>
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	0a 94       	dec	r0
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <DIO_SetPinVal+0xbc>
    25dc:	84 2b       	or	r24, r20
    25de:	8c 93       	st	X, r24
    25e0:	9f c0       	rjmp	.+318    	; 0x2720 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC, Copy_Pin);
    25e2:	a5 e3       	ldi	r26, 0x35	; 53
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e5 e3       	ldi	r30, 0x35	; 53
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_SetPinVal+0xe8>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_SetPinVal+0xe4>
    2604:	84 2b       	or	r24, r20
    2606:	8c 93       	st	X, r24
    2608:	8b c0       	rjmp	.+278    	; 0x2720 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD, Copy_Pin);
    260a:	a2 e3       	ldi	r26, 0x32	; 50
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e2 e3       	ldi	r30, 0x32	; 50
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	48 2f       	mov	r20, r24
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	02 2e       	mov	r0, r18
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <DIO_SetPinVal+0x110>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	0a 94       	dec	r0
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <DIO_SetPinVal+0x10c>
    262c:	84 2b       	or	r24, r20
    262e:	8c 93       	st	X, r24
    2630:	77 c0       	rjmp	.+238    	; 0x2720 <DIO_SetPinVal+0x208>
				break;
			}
		} else if (DIO_LOW == Copy_uint8Value) {
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	88 23       	and	r24, r24
    2636:	09 f0       	breq	.+2      	; 0x263a <DIO_SetPinVal+0x122>
    2638:	73 c0       	rjmp	.+230    	; 0x2720 <DIO_SetPinVal+0x208>
			switch (Copy_Port) {
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	3e 83       	std	Y+6, r19	; 0x06
    2642:	2d 83       	std	Y+5, r18	; 0x05
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	91 05       	cpc	r25, r1
    264c:	59 f1       	breq	.+86     	; 0x26a4 <DIO_SetPinVal+0x18c>
    264e:	2d 81       	ldd	r18, Y+5	; 0x05
    2650:	3e 81       	ldd	r19, Y+6	; 0x06
    2652:	22 30       	cpi	r18, 0x02	; 2
    2654:	31 05       	cpc	r19, r1
    2656:	2c f4       	brge	.+10     	; 0x2662 <DIO_SetPinVal+0x14a>
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	69 f0       	breq	.+26     	; 0x267a <DIO_SetPinVal+0x162>
    2660:	5f c0       	rjmp	.+190    	; 0x2720 <DIO_SetPinVal+0x208>
    2662:	2d 81       	ldd	r18, Y+5	; 0x05
    2664:	3e 81       	ldd	r19, Y+6	; 0x06
    2666:	22 30       	cpi	r18, 0x02	; 2
    2668:	31 05       	cpc	r19, r1
    266a:	89 f1       	breq	.+98     	; 0x26ce <DIO_SetPinVal+0x1b6>
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	83 30       	cpi	r24, 0x03	; 3
    2672:	91 05       	cpc	r25, r1
    2674:	09 f4       	brne	.+2      	; 0x2678 <DIO_SetPinVal+0x160>
    2676:	40 c0       	rjmp	.+128    	; 0x26f8 <DIO_SetPinVal+0x1e0>
    2678:	53 c0       	rjmp	.+166    	; 0x2720 <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				CLEAR_BIT(PORTA, Copy_Pin);
    267a:	ab e3       	ldi	r26, 0x3B	; 59
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	eb e3       	ldi	r30, 0x3B	; 59
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	48 2f       	mov	r20, r24
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	02 2e       	mov	r0, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <DIO_SetPinVal+0x180>
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	0a 94       	dec	r0
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <DIO_SetPinVal+0x17c>
    269c:	80 95       	com	r24
    269e:	84 23       	and	r24, r20
    26a0:	8c 93       	st	X, r24
    26a2:	3e c0       	rjmp	.+124    	; 0x2720 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB, Copy_Pin);
    26a4:	a8 e3       	ldi	r26, 0x38	; 56
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e8 e3       	ldi	r30, 0x38	; 56
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	48 2f       	mov	r20, r24
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	02 2e       	mov	r0, r18
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <DIO_SetPinVal+0x1aa>
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	0a 94       	dec	r0
    26c4:	e2 f7       	brpl	.-8      	; 0x26be <DIO_SetPinVal+0x1a6>
    26c6:	80 95       	com	r24
    26c8:	84 23       	and	r24, r20
    26ca:	8c 93       	st	X, r24
    26cc:	29 c0       	rjmp	.+82     	; 0x2720 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC, Copy_Pin);
    26ce:	a5 e3       	ldi	r26, 0x35	; 53
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e5 e3       	ldi	r30, 0x35	; 53
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	48 2f       	mov	r20, r24
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	02 2e       	mov	r0, r18
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <DIO_SetPinVal+0x1d4>
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	0a 94       	dec	r0
    26ee:	e2 f7       	brpl	.-8      	; 0x26e8 <DIO_SetPinVal+0x1d0>
    26f0:	80 95       	com	r24
    26f2:	84 23       	and	r24, r20
    26f4:	8c 93       	st	X, r24
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD, Copy_Pin);
    26f8:	a2 e3       	ldi	r26, 0x32	; 50
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e2 e3       	ldi	r30, 0x32	; 50
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	48 2f       	mov	r20, r24
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	02 2e       	mov	r0, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_SetPinVal+0x1fe>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	0a 94       	dec	r0
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <DIO_SetPinVal+0x1fa>
    271a:	80 95       	com	r24
    271c:	84 23       	and	r24, r20
    271e:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Local_uint8ErrorState;
    2720:	89 81       	ldd	r24, Y+1	; 0x01
}
    2722:	28 96       	adiw	r28, 0x08	; 8
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <DIO_SetPortDir>:

status_t DIO_SetPortDir(Port_t Copy_Port, uint8 Copy_uint8Direction) {
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	00 d0       	rcall	.+0      	; 0x273a <DIO_SetPortDir+0x6>
    273a:	00 d0       	rcall	.+0      	; 0x273c <DIO_SetPortDir+0x8>
    273c:	0f 92       	push	r0
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	8a 83       	std	Y+2, r24	; 0x02
    2744:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    2746:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	84 30       	cpi	r24, 0x04	; 4
    274c:	18 f0       	brcs	.+6      	; 0x2754 <DIO_SetPortDir+0x20>
		Local_uint8ErrorState = DIO_DirErr;
    274e:	83 e0       	ldi	r24, 0x03	; 3
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	32 c0       	rjmp	.+100    	; 0x27b8 <DIO_SetPortDir+0x84>
	} else {
		switch (Copy_Port) {
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	3d 83       	std	Y+5, r19	; 0x05
    275c:	2c 83       	std	Y+4, r18	; 0x04
    275e:	8c 81       	ldd	r24, Y+4	; 0x04
    2760:	9d 81       	ldd	r25, Y+5	; 0x05
    2762:	81 30       	cpi	r24, 0x01	; 1
    2764:	91 05       	cpc	r25, r1
    2766:	d1 f0       	breq	.+52     	; 0x279c <DIO_SetPortDir+0x68>
    2768:	2c 81       	ldd	r18, Y+4	; 0x04
    276a:	3d 81       	ldd	r19, Y+5	; 0x05
    276c:	22 30       	cpi	r18, 0x02	; 2
    276e:	31 05       	cpc	r19, r1
    2770:	2c f4       	brge	.+10     	; 0x277c <DIO_SetPortDir+0x48>
    2772:	8c 81       	ldd	r24, Y+4	; 0x04
    2774:	9d 81       	ldd	r25, Y+5	; 0x05
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	61 f0       	breq	.+24     	; 0x2792 <DIO_SetPortDir+0x5e>
    277a:	1e c0       	rjmp	.+60     	; 0x27b8 <DIO_SetPortDir+0x84>
    277c:	2c 81       	ldd	r18, Y+4	; 0x04
    277e:	3d 81       	ldd	r19, Y+5	; 0x05
    2780:	22 30       	cpi	r18, 0x02	; 2
    2782:	31 05       	cpc	r19, r1
    2784:	81 f0       	breq	.+32     	; 0x27a6 <DIO_SetPortDir+0x72>
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	9d 81       	ldd	r25, Y+5	; 0x05
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	91 05       	cpc	r25, r1
    278e:	81 f0       	breq	.+32     	; 0x27b0 <DIO_SetPortDir+0x7c>
    2790:	13 c0       	rjmp	.+38     	; 0x27b8 <DIO_SetPortDir+0x84>
		case DIO_PORTA:
			DDRA = Copy_uint8Direction;
    2792:	ea e3       	ldi	r30, 0x3A	; 58
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	80 83       	st	Z, r24
    279a:	0e c0       	rjmp	.+28     	; 0x27b8 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTB:
			DDRB = Copy_uint8Direction;
    279c:	e7 e3       	ldi	r30, 0x37	; 55
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	80 83       	st	Z, r24
    27a4:	09 c0       	rjmp	.+18     	; 0x27b8 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTC:
			DDRC = Copy_uint8Direction;
    27a6:	e4 e3       	ldi	r30, 0x34	; 52
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	80 83       	st	Z, r24
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTD:
			DDRD = Copy_uint8Direction;
    27b0:	e1 e3       	ldi	r30, 0x31	; 49
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_uint8ErrorState;
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <DIO_SetPinDir>:

status_t DIO_SetPinDir(Port_t Copy_Port, Pin_t Copy_Pin, Dir_t Copy_Direction) {
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	28 97       	sbiw	r28, 0x08	; 8
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	8a 83       	std	Y+2, r24	; 0x02
    27e0:	6b 83       	std	Y+3, r22	; 0x03
    27e2:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    27e4:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	84 30       	cpi	r24, 0x04	; 4
    27ea:	18 f0       	brcs	.+6      	; 0x27f2 <DIO_SetPinDir+0x28>
		Local_uint8ErrorState = DIO_DirErr;
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	f0 c0       	rjmp	.+480    	; 0x29d2 <DIO_SetPinDir+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	88 30       	cpi	r24, 0x08	; 8
    27f6:	18 f0       	brcs	.+6      	; 0x27fe <DIO_SetPinDir+0x34>
		Local_uint8ErrorState = DIO_DirErr;
    27f8:	83 e0       	ldi	r24, 0x03	; 3
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	ea c0       	rjmp	.+468    	; 0x29d2 <DIO_SetPinDir+0x208>
	} else {
		if (DIO_INPUT == Copy_Direction) {
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	88 23       	and	r24, r24
    2802:	09 f0       	breq	.+2      	; 0x2806 <DIO_SetPinDir+0x3c>
    2804:	74 c0       	rjmp	.+232    	; 0x28ee <DIO_SetPinDir+0x124>
			switch (Copy_Port) {
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	38 87       	std	Y+8, r19	; 0x08
    280e:	2f 83       	std	Y+7, r18	; 0x07
    2810:	8f 81       	ldd	r24, Y+7	; 0x07
    2812:	98 85       	ldd	r25, Y+8	; 0x08
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	91 05       	cpc	r25, r1
    2818:	59 f1       	breq	.+86     	; 0x2870 <DIO_SetPinDir+0xa6>
    281a:	2f 81       	ldd	r18, Y+7	; 0x07
    281c:	38 85       	ldd	r19, Y+8	; 0x08
    281e:	22 30       	cpi	r18, 0x02	; 2
    2820:	31 05       	cpc	r19, r1
    2822:	2c f4       	brge	.+10     	; 0x282e <DIO_SetPinDir+0x64>
    2824:	8f 81       	ldd	r24, Y+7	; 0x07
    2826:	98 85       	ldd	r25, Y+8	; 0x08
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	69 f0       	breq	.+26     	; 0x2846 <DIO_SetPinDir+0x7c>
    282c:	d2 c0       	rjmp	.+420    	; 0x29d2 <DIO_SetPinDir+0x208>
    282e:	2f 81       	ldd	r18, Y+7	; 0x07
    2830:	38 85       	ldd	r19, Y+8	; 0x08
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 05       	cpc	r19, r1
    2836:	89 f1       	breq	.+98     	; 0x289a <DIO_SetPinDir+0xd0>
    2838:	8f 81       	ldd	r24, Y+7	; 0x07
    283a:	98 85       	ldd	r25, Y+8	; 0x08
    283c:	83 30       	cpi	r24, 0x03	; 3
    283e:	91 05       	cpc	r25, r1
    2840:	09 f4       	brne	.+2      	; 0x2844 <DIO_SetPinDir+0x7a>
    2842:	40 c0       	rjmp	.+128    	; 0x28c4 <DIO_SetPinDir+0xfa>
    2844:	c6 c0       	rjmp	.+396    	; 0x29d2 <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				CLEAR_BIT(DDRA, Copy_Pin);
    2846:	aa e3       	ldi	r26, 0x3A	; 58
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	ea e3       	ldi	r30, 0x3A	; 58
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	48 2f       	mov	r20, r24
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	02 2e       	mov	r0, r18
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <DIO_SetPinDir+0x9a>
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	0a 94       	dec	r0
    2866:	e2 f7       	brpl	.-8      	; 0x2860 <DIO_SetPinDir+0x96>
    2868:	80 95       	com	r24
    286a:	84 23       	and	r24, r20
    286c:	8c 93       	st	X, r24
    286e:	b1 c0       	rjmp	.+354    	; 0x29d2 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB, Copy_Pin);
    2870:	a7 e3       	ldi	r26, 0x37	; 55
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e7 e3       	ldi	r30, 0x37	; 55
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	48 2f       	mov	r20, r24
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <DIO_SetPinDir+0xc4>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <DIO_SetPinDir+0xc0>
    2892:	80 95       	com	r24
    2894:	84 23       	and	r24, r20
    2896:	8c 93       	st	X, r24
    2898:	9c c0       	rjmp	.+312    	; 0x29d2 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC, Copy_Pin);
    289a:	a4 e3       	ldi	r26, 0x34	; 52
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e4 e3       	ldi	r30, 0x34	; 52
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	48 2f       	mov	r20, r24
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	02 2e       	mov	r0, r18
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <DIO_SetPinDir+0xee>
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	0a 94       	dec	r0
    28ba:	e2 f7       	brpl	.-8      	; 0x28b4 <DIO_SetPinDir+0xea>
    28bc:	80 95       	com	r24
    28be:	84 23       	and	r24, r20
    28c0:	8c 93       	st	X, r24
    28c2:	87 c0       	rjmp	.+270    	; 0x29d2 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD, Copy_Pin);
    28c4:	a1 e3       	ldi	r26, 0x31	; 49
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e1 e3       	ldi	r30, 0x31	; 49
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	48 2f       	mov	r20, r24
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 2e       	mov	r0, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <DIO_SetPinDir+0x118>
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	0a 94       	dec	r0
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <DIO_SetPinDir+0x114>
    28e6:	80 95       	com	r24
    28e8:	84 23       	and	r24, r20
    28ea:	8c 93       	st	X, r24
    28ec:	72 c0       	rjmp	.+228    	; 0x29d2 <DIO_SetPinDir+0x208>
				break;
			}
		} else if (DIO_OUTPUT == Copy_Direction) {
    28ee:	8c 81       	ldd	r24, Y+4	; 0x04
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <DIO_SetPinDir+0x12c>
    28f4:	6e c0       	rjmp	.+220    	; 0x29d2 <DIO_SetPinDir+0x208>
			switch (Copy_Port) {
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	3e 83       	std	Y+6, r19	; 0x06
    28fe:	2d 83       	std	Y+5, r18	; 0x05
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	91 05       	cpc	r25, r1
    2908:	49 f1       	breq	.+82     	; 0x295c <DIO_SetPinDir+0x192>
    290a:	2d 81       	ldd	r18, Y+5	; 0x05
    290c:	3e 81       	ldd	r19, Y+6	; 0x06
    290e:	22 30       	cpi	r18, 0x02	; 2
    2910:	31 05       	cpc	r19, r1
    2912:	2c f4       	brge	.+10     	; 0x291e <DIO_SetPinDir+0x154>
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	61 f0       	breq	.+24     	; 0x2934 <DIO_SetPinDir+0x16a>
    291c:	5a c0       	rjmp	.+180    	; 0x29d2 <DIO_SetPinDir+0x208>
    291e:	2d 81       	ldd	r18, Y+5	; 0x05
    2920:	3e 81       	ldd	r19, Y+6	; 0x06
    2922:	22 30       	cpi	r18, 0x02	; 2
    2924:	31 05       	cpc	r19, r1
    2926:	71 f1       	breq	.+92     	; 0x2984 <DIO_SetPinDir+0x1ba>
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	83 30       	cpi	r24, 0x03	; 3
    292e:	91 05       	cpc	r25, r1
    2930:	e9 f1       	breq	.+122    	; 0x29ac <DIO_SetPinDir+0x1e2>
    2932:	4f c0       	rjmp	.+158    	; 0x29d2 <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				SET_BIT(DDRA, Copy_Pin);
    2934:	aa e3       	ldi	r26, 0x3A	; 58
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	ea e3       	ldi	r30, 0x3A	; 58
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	48 2f       	mov	r20, r24
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	02 2e       	mov	r0, r18
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <DIO_SetPinDir+0x188>
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	0a 94       	dec	r0
    2954:	e2 f7       	brpl	.-8      	; 0x294e <DIO_SetPinDir+0x184>
    2956:	84 2b       	or	r24, r20
    2958:	8c 93       	st	X, r24
    295a:	3b c0       	rjmp	.+118    	; 0x29d2 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB, Copy_Pin);
    295c:	a7 e3       	ldi	r26, 0x37	; 55
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e7 e3       	ldi	r30, 0x37	; 55
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	48 2f       	mov	r20, r24
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	02 2e       	mov	r0, r18
    2974:	02 c0       	rjmp	.+4      	; 0x297a <DIO_SetPinDir+0x1b0>
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	0a 94       	dec	r0
    297c:	e2 f7       	brpl	.-8      	; 0x2976 <DIO_SetPinDir+0x1ac>
    297e:	84 2b       	or	r24, r20
    2980:	8c 93       	st	X, r24
    2982:	27 c0       	rjmp	.+78     	; 0x29d2 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC, Copy_Pin);
    2984:	a4 e3       	ldi	r26, 0x34	; 52
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e4 e3       	ldi	r30, 0x34	; 52
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	48 2f       	mov	r20, r24
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	02 2e       	mov	r0, r18
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <DIO_SetPinDir+0x1d8>
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	0a 94       	dec	r0
    29a4:	e2 f7       	brpl	.-8      	; 0x299e <DIO_SetPinDir+0x1d4>
    29a6:	84 2b       	or	r24, r20
    29a8:	8c 93       	st	X, r24
    29aa:	13 c0       	rjmp	.+38     	; 0x29d2 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD, Copy_Pin);
    29ac:	a1 e3       	ldi	r26, 0x31	; 49
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e1 e3       	ldi	r30, 0x31	; 49
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	48 2f       	mov	r20, r24
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	02 2e       	mov	r0, r18
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <DIO_SetPinDir+0x200>
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	0a 94       	dec	r0
    29cc:	e2 f7       	brpl	.-8      	; 0x29c6 <DIO_SetPinDir+0x1fc>
    29ce:	84 2b       	or	r24, r20
    29d0:	8c 93       	st	X, r24
				break;
			}
		}
	}
	return Local_uint8ErrorState;
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d4:	28 96       	adiw	r28, 0x08	; 8
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	de bf       	out	0x3e, r29	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <DIO_GetPinVal>:


status_t DIO_GetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8* Copy_pvValue)
{
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	27 97       	sbiw	r28, 0x07	; 7
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	8a 83       	std	Y+2, r24	; 0x02
    29fc:	6b 83       	std	Y+3, r22	; 0x03
    29fe:	5d 83       	std	Y+5, r21	; 0x05
    2a00:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    2a02:	19 82       	std	Y+1, r1	; 0x01

		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	84 30       	cpi	r24, 0x04	; 4
    2a08:	18 f0       	brcs	.+6      	; 0x2a10 <DIO_GetPinVal+0x2a>
			Local_uint8ErrorState = DIO_GetErr;
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	76 c0       	rjmp	.+236    	; 0x2afc <DIO_GetPinVal+0x116>
		} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	88 30       	cpi	r24, 0x08	; 8
    2a14:	18 f0       	brcs	.+6      	; 0x2a1c <DIO_GetPinVal+0x36>
			Local_uint8ErrorState = DIO_GetErr;
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	70 c0       	rjmp	.+224    	; 0x2afc <DIO_GetPinVal+0x116>
		} else {
			switch (Copy_Port)
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	3f 83       	std	Y+7, r19	; 0x07
    2a24:	2e 83       	std	Y+6, r18	; 0x06
    2a26:	4e 81       	ldd	r20, Y+6	; 0x06
    2a28:	5f 81       	ldd	r21, Y+7	; 0x07
    2a2a:	41 30       	cpi	r20, 0x01	; 1
    2a2c:	51 05       	cpc	r21, r1
    2a2e:	59 f1       	breq	.+86     	; 0x2a86 <DIO_GetPinVal+0xa0>
    2a30:	8e 81       	ldd	r24, Y+6	; 0x06
    2a32:	9f 81       	ldd	r25, Y+7	; 0x07
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	91 05       	cpc	r25, r1
    2a38:	34 f4       	brge	.+12     	; 0x2a46 <DIO_GetPinVal+0x60>
    2a3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a3e:	21 15       	cp	r18, r1
    2a40:	31 05       	cpc	r19, r1
    2a42:	69 f0       	breq	.+26     	; 0x2a5e <DIO_GetPinVal+0x78>
    2a44:	5b c0       	rjmp	.+182    	; 0x2afc <DIO_GetPinVal+0x116>
    2a46:	4e 81       	ldd	r20, Y+6	; 0x06
    2a48:	5f 81       	ldd	r21, Y+7	; 0x07
    2a4a:	42 30       	cpi	r20, 0x02	; 2
    2a4c:	51 05       	cpc	r21, r1
    2a4e:	79 f1       	breq	.+94     	; 0x2aae <DIO_GetPinVal+0xc8>
    2a50:	8e 81       	ldd	r24, Y+6	; 0x06
    2a52:	9f 81       	ldd	r25, Y+7	; 0x07
    2a54:	83 30       	cpi	r24, 0x03	; 3
    2a56:	91 05       	cpc	r25, r1
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <DIO_GetPinVal+0x76>
    2a5a:	3d c0       	rjmp	.+122    	; 0x2ad6 <DIO_GetPinVal+0xf0>
    2a5c:	4f c0       	rjmp	.+158    	; 0x2afc <DIO_GetPinVal+0x116>
			{case DIO_PORTA : *Copy_pvValue=GET_BIT(PINA,Copy_Pin);break;
    2a5e:	e9 e3       	ldi	r30, 0x39	; 57
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a9 01       	movw	r20, r18
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <DIO_GetPinVal+0x90>
    2a72:	55 95       	asr	r21
    2a74:	47 95       	ror	r20
    2a76:	8a 95       	dec	r24
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <DIO_GetPinVal+0x8c>
    2a7a:	ca 01       	movw	r24, r20
    2a7c:	81 70       	andi	r24, 0x01	; 1
    2a7e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a80:	fd 81       	ldd	r31, Y+5	; 0x05
    2a82:	80 83       	st	Z, r24
    2a84:	3b c0       	rjmp	.+118    	; 0x2afc <DIO_GetPinVal+0x116>
			case DIO_PORTB : *Copy_pvValue=GET_BIT(PINB,Copy_Pin);break;
    2a86:	e6 e3       	ldi	r30, 0x36	; 54
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a9 01       	movw	r20, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <DIO_GetPinVal+0xb8>
    2a9a:	55 95       	asr	r21
    2a9c:	47 95       	ror	r20
    2a9e:	8a 95       	dec	r24
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <DIO_GetPinVal+0xb4>
    2aa2:	ca 01       	movw	r24, r20
    2aa4:	81 70       	andi	r24, 0x01	; 1
    2aa6:	ec 81       	ldd	r30, Y+4	; 0x04
    2aa8:	fd 81       	ldd	r31, Y+5	; 0x05
    2aaa:	80 83       	st	Z, r24
    2aac:	27 c0       	rjmp	.+78     	; 0x2afc <DIO_GetPinVal+0x116>
			case DIO_PORTC : *Copy_pvValue=GET_BIT(PINC,Copy_Pin);break;
    2aae:	e3 e3       	ldi	r30, 0x33	; 51
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a9 01       	movw	r20, r18
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <DIO_GetPinVal+0xe0>
    2ac2:	55 95       	asr	r21
    2ac4:	47 95       	ror	r20
    2ac6:	8a 95       	dec	r24
    2ac8:	e2 f7       	brpl	.-8      	; 0x2ac2 <DIO_GetPinVal+0xdc>
    2aca:	ca 01       	movw	r24, r20
    2acc:	81 70       	andi	r24, 0x01	; 1
    2ace:	ec 81       	ldd	r30, Y+4	; 0x04
    2ad0:	fd 81       	ldd	r31, Y+5	; 0x05
    2ad2:	80 83       	st	Z, r24
    2ad4:	13 c0       	rjmp	.+38     	; 0x2afc <DIO_GetPinVal+0x116>
			case DIO_PORTD : *Copy_pvValue=GET_BIT(PIND,Copy_Pin);break;
    2ad6:	e0 e3       	ldi	r30, 0x30	; 48
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	28 2f       	mov	r18, r24
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a9 01       	movw	r20, r18
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <DIO_GetPinVal+0x108>
    2aea:	55 95       	asr	r21
    2aec:	47 95       	ror	r20
    2aee:	8a 95       	dec	r24
    2af0:	e2 f7       	brpl	.-8      	; 0x2aea <DIO_GetPinVal+0x104>
    2af2:	ca 01       	movw	r24, r20
    2af4:	81 70       	andi	r24, 0x01	; 1
    2af6:	ec 81       	ldd	r30, Y+4	; 0x04
    2af8:	fd 81       	ldd	r31, Y+5	; 0x05
    2afa:	80 83       	st	Z, r24

			}
		}
return Local_uint8ErrorState;
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afe:	27 96       	adiw	r28, 0x07	; 7
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <DIO_GetPortVal>:


uint8 DIO_GetPortVal(Port_t Copy_Port,uint8* Copy_pvValue)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <DIO_GetPortVal+0x6>
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <DIO_GetPortVal+0x8>
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <DIO_GetPortVal+0xa>
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	8a 83       	std	Y+2, r24	; 0x02
    2b20:	7c 83       	std	Y+4, r23	; 0x04
    2b22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8ErrorState = 0;
    2b24:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	84 30       	cpi	r24, 0x04	; 4
    2b2a:	18 f0       	brcs	.+6      	; 0x2b32 <DIO_GetPortVal+0x22>
			Local_uint8ErrorState = 1;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	3a c0       	rjmp	.+116    	; 0x2ba6 <DIO_GetPortVal+0x96>
		} else {
			switch(Copy_Port)
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	28 2f       	mov	r18, r24
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	3e 83       	std	Y+6, r19	; 0x06
    2b3a:	2d 83       	std	Y+5, r18	; 0x05
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	91 05       	cpc	r25, r1
    2b44:	e1 f0       	breq	.+56     	; 0x2b7e <DIO_GetPortVal+0x6e>
    2b46:	2d 81       	ldd	r18, Y+5	; 0x05
    2b48:	3e 81       	ldd	r19, Y+6	; 0x06
    2b4a:	22 30       	cpi	r18, 0x02	; 2
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <DIO_GetPortVal+0x4a>
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	61 f0       	breq	.+24     	; 0x2b70 <DIO_GetPortVal+0x60>
    2b58:	26 c0       	rjmp	.+76     	; 0x2ba6 <DIO_GetPortVal+0x96>
    2b5a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b5c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	31 05       	cpc	r19, r1
    2b62:	a1 f0       	breq	.+40     	; 0x2b8c <DIO_GetPortVal+0x7c>
    2b64:	8d 81       	ldd	r24, Y+5	; 0x05
    2b66:	9e 81       	ldd	r25, Y+6	; 0x06
    2b68:	83 30       	cpi	r24, 0x03	; 3
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	b1 f0       	breq	.+44     	; 0x2b9a <DIO_GetPortVal+0x8a>
    2b6e:	1b c0       	rjmp	.+54     	; 0x2ba6 <DIO_GetPortVal+0x96>
			{case DIO_PORTA:*Copy_pvValue=PINA;break;
    2b70:	e9 e3       	ldi	r30, 0x39	; 57
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	eb 81       	ldd	r30, Y+3	; 0x03
    2b78:	fc 81       	ldd	r31, Y+4	; 0x04
    2b7a:	80 83       	st	Z, r24
    2b7c:	14 c0       	rjmp	.+40     	; 0x2ba6 <DIO_GetPortVal+0x96>
			case DIO_PORTB:*Copy_pvValue=PINB;break;
    2b7e:	e6 e3       	ldi	r30, 0x36	; 54
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	eb 81       	ldd	r30, Y+3	; 0x03
    2b86:	fc 81       	ldd	r31, Y+4	; 0x04
    2b88:	80 83       	st	Z, r24
    2b8a:	0d c0       	rjmp	.+26     	; 0x2ba6 <DIO_GetPortVal+0x96>
			case DIO_PORTC:*Copy_pvValue=PINC;break;
    2b8c:	e3 e3       	ldi	r30, 0x33	; 51
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	eb 81       	ldd	r30, Y+3	; 0x03
    2b94:	fc 81       	ldd	r31, Y+4	; 0x04
    2b96:	80 83       	st	Z, r24
    2b98:	06 c0       	rjmp	.+12     	; 0x2ba6 <DIO_GetPortVal+0x96>
			case DIO_PORTD:*Copy_pvValue=PIND;break;
    2b9a:	e0 e3       	ldi	r30, 0x30	; 48
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba4:	80 83       	st	Z, r24
			}
		}

return Local_uint8ErrorState;
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba8:	26 96       	adiw	r28, 0x06	; 6
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <ADC_voidInit>:
#include "../inc/ADC_interface.h"
#include "../inc/ADC_register.h"
#include "../inc/ADC_config.h"
#include "../inc/ADC_private.h"

void ADC_voidInit(void) {
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
	/*PRE-SCALER SELECTION*/
	ADCSRA_Reg->ADPS = DESIRED_PRE_SCALER;
    2bc2:	e6 e2       	ldi	r30, 0x26	; 38
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 7f       	andi	r24, 0xF8	; 248
    2bca:	83 60       	ori	r24, 0x03	; 3
    2bcc:	80 83       	st	Z, r24

	/*Choosing the voltage reference*/
	ADMUX_Reg->REFS = DESIRED_VOLTAGE_REF;
    2bce:	e7 e2       	ldi	r30, 0x27	; 39
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	8f 73       	andi	r24, 0x3F	; 63
    2bd6:	80 64       	ori	r24, 0x40	; 64
    2bd8:	80 83       	st	Z, r24
	/*choose the Resolution*/
	ADMUX_Reg->ADLAR = RIGHT;
    2bda:	e7 e2       	ldi	r30, 0x27	; 39
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	8f 7d       	andi	r24, 0xDF	; 223
    2be2:	80 83       	st	Z, r24

#ifdef AUTO_TREGERED

	ADCSRA_Reg->ADATE=ENABLE;
    2be4:	e6 e2       	ldi	r30, 0x26	; 38
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	80 62       	ori	r24, 0x20	; 32
    2bec:	80 83       	st	Z, r24

	ADC_SFIOR_Reg->ADTS  =  AUTO_TRIGER_SOURCE;
    2bee:	e0 e5       	ldi	r30, 0x50	; 80
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8f 71       	andi	r24, 0x1F	; 31
    2bf6:	80 68       	ori	r24, 0x80	; 128
    2bf8:	80 83       	st	Z, r24

#endif
	/*ENABLE THE ADC*/
	ADCSRA_Reg->ADEN = ENABLE;
    2bfa:	e6 e2       	ldi	r30, 0x26	; 38
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	80 68       	ori	r24, 0x80	; 128
    2c02:	80 83       	st	Z, r24

}
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <ADC_uint8StartConversionSynchronus>:
ADC_Status_t ADC_uint8StartConversionSynchronus(Channel_t Copy_uint8channel,uint16* copy_uint16PuReading) {
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	28 97       	sbiw	r28, 0x08	; 8
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	8e 83       	std	Y+6, r24	; 0x06
    2c20:	78 87       	std	Y+8, r23	; 0x08
    2c22:	6f 83       	std	Y+7, r22	; 0x07
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    2c24:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_uint32Counter = 0;
    2c26:	19 82       	std	Y+1, r1	; 0x01
    2c28:	1a 82       	std	Y+2, r1	; 0x02
    2c2a:	1b 82       	std	Y+3, r1	; 0x03
    2c2c:	1c 82       	std	Y+4, r1	; 0x04
	if (NULL == copy_uint16PuReading) {
    2c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c30:	98 85       	ldd	r25, Y+8	; 0x08
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	19 f4       	brne	.+6      	; 0x2c3c <ADC_uint8StartConversionSynchronus+0x32>
		Local_ErrorStatus = ADC_POINTER_Err;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	4a c0       	rjmp	.+148    	; 0x2cd0 <ADC_uint8StartConversionSynchronus+0xc6>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	88 30       	cpi	r24, 0x08	; 8
    2c40:	18 f0       	brcs	.+6      	; 0x2c48 <ADC_uint8StartConversionSynchronus+0x3e>
		Local_ErrorStatus = ADC_ChannelErr;
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	44 c0       	rjmp	.+136    	; 0x2cd0 <ADC_uint8StartConversionSynchronus+0xc6>
	} else {
		/*Select the Channel*/
		ADMUX_Reg->MUX = Copy_uint8channel;
    2c48:	e7 e2       	ldi	r30, 0x27	; 39
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4e:	8f 71       	andi	r24, 0x1F	; 31
    2c50:	98 2f       	mov	r25, r24
    2c52:	9f 71       	andi	r25, 0x1F	; 31
    2c54:	80 81       	ld	r24, Z
    2c56:	80 7e       	andi	r24, 0xE0	; 224
    2c58:	89 2b       	or	r24, r25
    2c5a:	80 83       	st	Z, r24
    2c5c:	0b c0       	rjmp	.+22     	; 0x2c74 <ADC_uint8StartConversionSynchronus+0x6a>
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
			Local_uint32Counter++;
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	ab 81       	ldd	r26, Y+3	; 0x03
    2c64:	bc 81       	ldd	r27, Y+4	; 0x04
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	a1 1d       	adc	r26, r1
    2c6a:	b1 1d       	adc	r27, r1
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	ab 83       	std	Y+3, r26	; 0x03
    2c72:	bc 83       	std	Y+4, r27	; 0x04
#ifndef AUTO_TREGERED
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
    2c74:	e6 e2       	ldi	r30, 0x26	; 38
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	80 71       	andi	r24, 0x10	; 16
    2c7c:	88 23       	and	r24, r24
    2c7e:	61 f4       	brne	.+24     	; 0x2c98 <ADC_uint8StartConversionSynchronus+0x8e>
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	ab 81       	ldd	r26, Y+3	; 0x03
    2c86:	bc 81       	ldd	r27, Y+4	; 0x04
    2c88:	84 3f       	cpi	r24, 0xF4	; 244
    2c8a:	21 e0       	ldi	r18, 0x01	; 1
    2c8c:	92 07       	cpc	r25, r18
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	a2 07       	cpc	r26, r18
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	b2 07       	cpc	r27, r18
    2c96:	18 f3       	brcs	.-58     	; 0x2c5e <ADC_uint8StartConversionSynchronus+0x54>
			Local_uint32Counter++;
		}
		if (Local_uint32Counter == TIME_OUT) {
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c9e:	bc 81       	ldd	r27, Y+4	; 0x04
    2ca0:	84 3f       	cpi	r24, 0xF4	; 244
    2ca2:	21 e0       	ldi	r18, 0x01	; 1
    2ca4:	92 07       	cpc	r25, r18
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	a2 07       	cpc	r26, r18
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	b2 07       	cpc	r27, r18
    2cae:	19 f4       	brne	.+6      	; 0x2cb6 <ADC_uint8StartConversionSynchronus+0xac>
			Local_ErrorStatus = ADC_TIME_OUTErr;
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	0d c0       	rjmp	.+26     	; 0x2cd0 <ADC_uint8StartConversionSynchronus+0xc6>
		} else {
			/*Clear the valg*/
			ADCSRA_Reg->ADIF = ENABLE;
    2cb6:	e6 e2       	ldi	r30, 0x26	; 38
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 61       	ori	r24, 0x10	; 16
    2cbe:	80 83       	st	Z, r24

#if     DATA_SIZE == BIT_10_MACRO
			*copy_uint16PuReading=ADC;
    2cc0:	e4 e2       	ldi	r30, 0x24	; 36
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	ef 81       	ldd	r30, Y+7	; 0x07
    2cca:	f8 85       	ldd	r31, Y+8	; 0x08
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24

		}

	}

	return Local_ErrorStatus;
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2cd2:	28 96       	adiw	r28, 0x08	; 8
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <ADC_uint8StartConversionASynchronus>:

ADC_Status_t ADC_uint8StartConversionASynchronus(Channel_t Copy_uint8channel,void (*copy_PvNotifacation)(void), uint16* copy_uint16PuReading) {
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <ADC_uint8StartConversionASynchronus+0x6>
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <ADC_uint8StartConversionASynchronus+0x8>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <ADC_uint8StartConversionASynchronus+0xa>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	8a 83       	std	Y+2, r24	; 0x02
    2cf4:	7c 83       	std	Y+4, r23	; 0x04
    2cf6:	6b 83       	std	Y+3, r22	; 0x03
    2cf8:	5e 83       	std	Y+6, r21	; 0x06
    2cfa:	4d 83       	std	Y+5, r20	; 0x05
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    2cfc:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == copy_uint16PuReading) {
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	19 f4       	brne	.+6      	; 0x2d0c <ADC_uint8StartConversionASynchronus+0x28>
		Local_ErrorStatus = ADC_POINTER_Err;
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	1e c0       	rjmp	.+60     	; 0x2d48 <ADC_uint8StartConversionASynchronus+0x64>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	88 30       	cpi	r24, 0x08	; 8
    2d10:	18 f0       	brcs	.+6      	; 0x2d18 <ADC_uint8StartConversionASynchronus+0x34>
		Local_ErrorStatus = ADC_ChannelErr;
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	18 c0       	rjmp	.+48     	; 0x2d48 <ADC_uint8StartConversionASynchronus+0x64>
	} else if (NULL == copy_PvNotifacation) {
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	19 f4       	brne	.+6      	; 0x2d26 <ADC_uint8StartConversionASynchronus+0x42>
		Local_ErrorStatus = ADC_POINTER_Err;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	11 c0       	rjmp	.+34     	; 0x2d48 <ADC_uint8StartConversionASynchronus+0x64>
	} else {

		Global_PvNotifacation = copy_PvNotifacation;
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2a:	90 93 73 03 	sts	0x0373, r25
    2d2e:	80 93 72 03 	sts	0x0372, r24

		/*Assign Address of Receive Variable in Global Pointer to be used in ISR*/
		Global_uint16PuReading = copy_uint16PuReading;
    2d32:	8d 81       	ldd	r24, Y+5	; 0x05
    2d34:	9e 81       	ldd	r25, Y+6	; 0x06
    2d36:	90 93 75 03 	sts	0x0375, r25
    2d3a:	80 93 74 03 	sts	0x0374, r24


		/* ADC Conversion Complete Interrupt Enable*/
		ADCSRA_Reg->ADIE = ENABLE;
    2d3e:	e6 e2       	ldi	r30, 0x26	; 38
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	88 60       	ori	r24, 0x08	; 8
    2d46:	80 83       	st	Z, r24
#ifndef AUTO_TREGERED
		/*ADC Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
	}
	return Local_ErrorStatus;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d4a:	26 96       	adiw	r28, 0x06	; 6
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <__vector_16>:



void __vector_16(void) {
    2d5c:	1f 92       	push	r1
    2d5e:	0f 92       	push	r0
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	0f 92       	push	r0
    2d64:	11 24       	eor	r1, r1
    2d66:	2f 93       	push	r18
    2d68:	3f 93       	push	r19
    2d6a:	4f 93       	push	r20
    2d6c:	5f 93       	push	r21
    2d6e:	6f 93       	push	r22
    2d70:	7f 93       	push	r23
    2d72:	8f 93       	push	r24
    2d74:	9f 93       	push	r25
    2d76:	af 93       	push	r26
    2d78:	bf 93       	push	r27
    2d7a:	ef 93       	push	r30
    2d7c:	ff 93       	push	r31
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
#if     DATA_SIZE == BIT_10_MACRO
	*Global_uint16PuReading=ADC;
    2d86:	a0 91 74 03 	lds	r26, 0x0374
    2d8a:	b0 91 75 03 	lds	r27, 0x0375
    2d8e:	e4 e2       	ldi	r30, 0x24	; 36
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	8d 93       	st	X+, r24
    2d98:	9c 93       	st	X, r25
#elif  DATA_SIZE == BIT_8_MACRO
	*Global_uint16PuReading = ADC >> 2;
#endif

	/*Execute Notification Function*/
	Global_PvNotifacation();
    2d9a:	e0 91 72 03 	lds	r30, 0x0372
    2d9e:	f0 91 73 03 	lds	r31, 0x0373
    2da2:	09 95       	icall
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	ff 91       	pop	r31
    2daa:	ef 91       	pop	r30
    2dac:	bf 91       	pop	r27
    2dae:	af 91       	pop	r26
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	7f 91       	pop	r23
    2db6:	6f 91       	pop	r22
    2db8:	5f 91       	pop	r21
    2dba:	4f 91       	pop	r20
    2dbc:	3f 91       	pop	r19
    2dbe:	2f 91       	pop	r18
    2dc0:	0f 90       	pop	r0
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	0f 90       	pop	r0
    2dc6:	1f 90       	pop	r1
    2dc8:	18 95       	reti

00002dca <Sleep_Mode>:
#include "Power_Management/inc/PwrMng.h"

void Sleep_Mode(void)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
//	MCUCR_PwrMg->SE=1;
//	MCUCR_PwrMg->SE=SlEEP_MODE;

	MCUCR_PwrMg=160;
    2dd2:	e5 e5       	ldi	r30, 0x55	; 85
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 ea       	ldi	r24, 0xA0	; 160
    2dd8:	80 83       	st	Z, r24
}
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <SSD1306_Init>:
    {0x61, 0x51, 0x49, 0x45, 0x43}, // z
};


void SSD1306_Init(void)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    TWI_voidMasterInit();
    2de8:	0e 94 13 0b 	call	0x1626	; 0x1626 <TWI_voidMasterInit>

    TWI_voidStartCondition();
    2dec:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_voidStartCondition>
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    2df0:	88 e7       	ldi	r24, 0x78	; 120
    2df2:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
    TWI_voidSendData(0x00); // Command mode
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>

    // Initialization sequence for SSD1306
    SSD1306_SendCommand(SSD1306_DISPLAY_OFF);
    2dfc:	8e ea       	ldi	r24, 0xAE	; 174
    2dfe:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV);
    2e02:	85 ed       	ldi	r24, 0xD5	; 213
    2e04:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0x80); // Suggested ratio
    2e08:	80 e8       	ldi	r24, 0x80	; 128
    2e0a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_MULTIPLEX);
    2e0e:	88 ea       	ldi	r24, 0xA8	; 168
    2e10:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0x3F); // 1/64 duty
    2e14:	8f e3       	ldi	r24, 0x3F	; 63
    2e16:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_DISPLAY_OFFSET);
    2e1a:	83 ed       	ldi	r24, 0xD3	; 211
    2e1c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0x00); // No offset
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_START_LINE | 0x00);
    2e26:	80 e4       	ldi	r24, 0x40	; 64
    2e28:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_CHARGE_PUMP);
    2e2c:	8d e8       	ldi	r24, 0x8D	; 141
    2e2e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0x14); // Enable charge pump
    2e32:	84 e1       	ldi	r24, 0x14	; 20
    2e34:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_MEMORY_MODE);
    2e38:	80 e2       	ldi	r24, 0x20	; 32
    2e3a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0x00); // Horizontal addressing mode
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SEG_REMAP);
    2e44:	81 ea       	ldi	r24, 0xA1	; 161
    2e46:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_COM_SCAN_DEC);
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_COM_PINS);
    2e50:	8a ed       	ldi	r24, 0xDA	; 218
    2e52:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0x12);
    2e56:	82 e1       	ldi	r24, 0x12	; 18
    2e58:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_CONTRAST);
    2e5c:	81 e8       	ldi	r24, 0x81	; 129
    2e5e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0xCF);
    2e62:	8f ec       	ldi	r24, 0xCF	; 207
    2e64:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_PRECHARGE);
    2e68:	89 ed       	ldi	r24, 0xD9	; 217
    2e6a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0xF1);
    2e6e:	81 ef       	ldi	r24, 0xF1	; 241
    2e70:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_SET_VCOM_DETECT);
    2e74:	8b ed       	ldi	r24, 0xDB	; 219
    2e76:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(0x40);
    2e7a:	80 e4       	ldi	r24, 0x40	; 64
    2e7c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
    2e80:	84 ea       	ldi	r24, 0xA4	; 164
    2e82:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_NORMAL_DISPLAY);
    2e86:	86 ea       	ldi	r24, 0xA6	; 166
    2e88:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(SSD1306_DISPLAY_ON);
    2e8c:	8f ea       	ldi	r24, 0xAF	; 175
    2e8e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>

    TWI_voidStopCondition();
    2e92:	0e 94 39 0b 	call	0x1672	; 0x1672 <TWI_voidStopCondition>
}
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <SSD1306_SendCommand>:

void SSD1306_SendCommand(uint8 command)
{
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	0f 92       	push	r0
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    TWI_voidStartCondition();
    2ea8:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_voidStartCondition>
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    2eac:	88 e7       	ldi	r24, 0x78	; 120
    2eae:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
    TWI_voidSendData(0x00); // Command mode
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
    TWI_voidSendData(command);
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
    TWI_voidStopCondition();
    2ebe:	0e 94 39 0b 	call	0x1672	; 0x1672 <TWI_voidStopCondition>
}
    2ec2:	0f 90       	pop	r0
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <SSD1306_SendData>:

void SSD1306_SendData(uint8 data)
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	0f 92       	push	r0
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    TWI_voidStartCondition();
    2ed6:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_voidStartCondition>
    TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    2eda:	88 e7       	ldi	r24, 0x78	; 120
    2edc:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
    TWI_voidSendData(0x40); // Data mode
    2ee0:	80 e4       	ldi	r24, 0x40	; 64
    2ee2:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
    TWI_voidSendData(data);
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
    TWI_voidStopCondition();
    2eec:	0e 94 39 0b 	call	0x1672	; 0x1672 <TWI_voidStopCondition>
}
    2ef0:	0f 90       	pop	r0
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <SSD1306_ClearDisplay>:

void SSD1306_ClearDisplay(void)
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <SSD1306_ClearDisplay+0x6>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    for (uint8 page = 0; page < 8; page++)
    2f02:	1a 82       	std	Y+2, r1	; 0x02
    2f04:	1c c0       	rjmp	.+56     	; 0x2f3e <SSD1306_ClearDisplay+0x46>
    {
        SSD1306_SetCursor(page, 0); // Set cursor to the beginning of the page
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <SSD1306_SetCursor>

        // Start a burst write for the entire row
        TWI_voidStartCondition();
    2f0e:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_voidStartCondition>
        TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
    2f12:	88 e7       	ldi	r24, 0x78	; 120
    2f14:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
        TWI_voidSendData(0x40); // Data mode
    2f18:	80 e4       	ldi	r24, 0x40	; 64
    2f1a:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>

        for (uint8 col = 0; col < 128; col++)
    2f1e:	19 82       	std	Y+1, r1	; 0x01
    2f20:	06 c0       	rjmp	.+12     	; 0x2f2e <SSD1306_ClearDisplay+0x36>
        {
            TWI_voidSendData(0x00); // Send blank data
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
        // Start a burst write for the entire row
        TWI_voidStartCondition();
        TWI_voidSendData((SSD1306_ADDRESS << 1) | 0); // SLA+W
        TWI_voidSendData(0x40); // Data mode

        for (uint8 col = 0; col < 128; col++)
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	8f 5f       	subi	r24, 0xFF	; 255
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	88 23       	and	r24, r24
    2f32:	bc f7       	brge	.-18     	; 0x2f22 <SSD1306_ClearDisplay+0x2a>
        {
            TWI_voidSendData(0x00); // Send blank data
        }

        TWI_voidStopCondition(); // Stop after writing the row
    2f34:	0e 94 39 0b 	call	0x1672	; 0x1672 <TWI_voidStopCondition>
    TWI_voidStopCondition();
}

void SSD1306_ClearDisplay(void)
{
    for (uint8 page = 0; page < 8; page++)
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	88 30       	cpi	r24, 0x08	; 8
    2f42:	08 f3       	brcs	.-62     	; 0x2f06 <SSD1306_ClearDisplay+0xe>
            TWI_voidSendData(0x00); // Send blank data
        }

        TWI_voidStopCondition(); // Stop after writing the row
    }
}
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <SSD1306_SetCursor>:


void SSD1306_SetCursor(uint8 page, uint8 column)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <SSD1306_SetCursor+0x6>
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	6a 83       	std	Y+2, r22	; 0x02
    SSD1306_SendCommand(SSD1306_PAGE_ADDR);
    2f5c:	82 e2       	ldi	r24, 0x22	; 34
    2f5e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(page);
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(page);
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>

    SSD1306_SendCommand(SSD1306_COLUMN_ADDR);
    2f6e:	81 e2       	ldi	r24, 0x21	; 33
    2f70:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(column);
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
    SSD1306_SendCommand(127);
    2f7a:	8f e7       	ldi	r24, 0x7F	; 127
    2f7c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <SSD1306_SendCommand>
}
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	cf 91       	pop	r28
    2f86:	df 91       	pop	r29
    2f88:	08 95       	ret

00002f8a <SSD1306_DisplayNumber>:

void SSD1306_DisplayNumber(int number, uint8 page, uint8 column)
{
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	63 97       	sbiw	r28, 0x13	; 19
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	99 8b       	std	Y+17, r25	; 0x11
    2fa0:	88 8b       	std	Y+16, r24	; 0x10
    2fa2:	6a 8b       	std	Y+18, r22	; 0x12
    2fa4:	4b 8b       	std	Y+19, r20	; 0x13
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "%d", number);  // Convert number to string
    2fa6:	8d b7       	in	r24, 0x3d	; 61
    2fa8:	9e b7       	in	r25, 0x3e	; 62
    2faa:	08 97       	sbiw	r24, 0x08	; 8
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	9e bf       	out	0x3e, r25	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	8d bf       	out	0x3d, r24	; 61
    2fb6:	ed b7       	in	r30, 0x3d	; 61
    2fb8:	fe b7       	in	r31, 0x3e	; 62
    2fba:	31 96       	adiw	r30, 0x01	; 1
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	06 96       	adiw	r24, 0x06	; 6
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	80 83       	st	Z, r24
    2fc4:	8a e0       	ldi	r24, 0x0A	; 10
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	93 83       	std	Z+3, r25	; 0x03
    2fca:	82 83       	std	Z+2, r24	; 0x02
    2fcc:	80 e8       	ldi	r24, 0x80	; 128
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	95 83       	std	Z+5, r25	; 0x05
    2fd2:	84 83       	std	Z+4, r24	; 0x04
    2fd4:	88 89       	ldd	r24, Y+16	; 0x10
    2fd6:	99 89       	ldd	r25, Y+17	; 0x11
    2fd8:	97 83       	std	Z+7, r25	; 0x07
    2fda:	86 83       	std	Z+6, r24	; 0x06
    2fdc:	0e 94 73 21 	call	0x42e6	; 0x42e6 <snprintf>
    2fe0:	8d b7       	in	r24, 0x3d	; 61
    2fe2:	9e b7       	in	r25, 0x3e	; 62
    2fe4:	08 96       	adiw	r24, 0x08	; 8
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	9e bf       	out	0x3e, r25	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	8d bf       	out	0x3d, r24	; 61

    uint8 num_length = strlen(buffer);  // Get length of the number
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	06 96       	adiw	r24, 0x06	; 6
    2ff4:	0e 94 55 21 	call	0x42aa	; 0x42aa <strlen>
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    SSD1306_SetCursor(page, column);
    2ffa:	8a 89       	ldd	r24, Y+18	; 0x12
    2ffc:	6b 89       	ldd	r22, Y+19	; 0x13
    2ffe:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <SSD1306_SetCursor>

    // Print the number
    for (uint8 i = 0; buffer[i] != '\0'; i++)
    3002:	1c 82       	std	Y+4, r1	; 0x04
    3004:	44 c0       	rjmp	.+136    	; 0x308e <SSD1306_DisplayNumber+0x104>
    {
        if (buffer[i] >= '0' && buffer[i] <= '9')
    3006:	8c 81       	ldd	r24, Y+4	; 0x04
    3008:	28 2f       	mov	r18, r24
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	ce 01       	movw	r24, r28
    300e:	06 96       	adiw	r24, 0x06	; 6
    3010:	fc 01       	movw	r30, r24
    3012:	e2 0f       	add	r30, r18
    3014:	f3 1f       	adc	r31, r19
    3016:	80 81       	ld	r24, Z
    3018:	80 33       	cpi	r24, 0x30	; 48
    301a:	b0 f1       	brcs	.+108    	; 0x3088 <SSD1306_DisplayNumber+0xfe>
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	ce 01       	movw	r24, r28
    3024:	06 96       	adiw	r24, 0x06	; 6
    3026:	fc 01       	movw	r30, r24
    3028:	e2 0f       	add	r30, r18
    302a:	f3 1f       	adc	r31, r19
    302c:	80 81       	ld	r24, Z
    302e:	8a 33       	cpi	r24, 0x3A	; 58
    3030:	58 f5       	brcc	.+86     	; 0x3088 <SSD1306_DisplayNumber+0xfe>
        {
            uint8 digit = buffer[i] - '0' + 16;
    3032:	8c 81       	ldd	r24, Y+4	; 0x04
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	ce 01       	movw	r24, r28
    303a:	06 96       	adiw	r24, 0x06	; 6
    303c:	fc 01       	movw	r30, r24
    303e:	e2 0f       	add	r30, r18
    3040:	f3 1f       	adc	r31, r19
    3042:	80 81       	ld	r24, Z
    3044:	80 52       	subi	r24, 0x20	; 32
    3046:	8b 83       	std	Y+3, r24	; 0x03
            for (uint8 j = 0; j < 5; j++) // Each digit is 5 pixels wide
    3048:	1a 82       	std	Y+2, r1	; 0x02
    304a:	18 c0       	rjmp	.+48     	; 0x307c <SSD1306_DisplayNumber+0xf2>
            {
                SSD1306_SendData(Font_5x7[digit][j]);
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	48 2f       	mov	r20, r24
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	c9 01       	movw	r24, r18
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	82 0f       	add	r24, r18
    3064:	93 1f       	adc	r25, r19
    3066:	84 0f       	add	r24, r20
    3068:	95 1f       	adc	r25, r21
    306a:	fc 01       	movw	r30, r24
    306c:	eb 56       	subi	r30, 0x6B	; 107
    306e:	fe 4f       	sbci	r31, 0xFE	; 254
    3070:	80 81       	ld	r24, Z
    3072:	0e 94 65 17 	call	0x2eca	; 0x2eca <SSD1306_SendData>
    for (uint8 i = 0; buffer[i] != '\0'; i++)
    {
        if (buffer[i] >= '0' && buffer[i] <= '9')
        {
            uint8 digit = buffer[i] - '0' + 16;
            for (uint8 j = 0; j < 5; j++) // Each digit is 5 pixels wide
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	8f 5f       	subi	r24, 0xFF	; 255
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	85 30       	cpi	r24, 0x05	; 5
    3080:	28 f3       	brcs	.-54     	; 0x304c <SSD1306_DisplayNumber+0xc2>
            {
                SSD1306_SendData(Font_5x7[digit][j]);
            }
            SSD1306_SendData(0x00); // Add a column of spacing
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	0e 94 65 17 	call	0x2eca	; 0x2eca <SSD1306_SendData>

    uint8 num_length = strlen(buffer);  // Get length of the number
    SSD1306_SetCursor(page, column);

    // Print the number
    for (uint8 i = 0; buffer[i] != '\0'; i++)
    3088:	8c 81       	ldd	r24, Y+4	; 0x04
    308a:	8f 5f       	subi	r24, 0xFF	; 255
    308c:	8c 83       	std	Y+4, r24	; 0x04
    308e:	8c 81       	ldd	r24, Y+4	; 0x04
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	ce 01       	movw	r24, r28
    3096:	06 96       	adiw	r24, 0x06	; 6
    3098:	fc 01       	movw	r30, r24
    309a:	e2 0f       	add	r30, r18
    309c:	f3 1f       	adc	r31, r19
    309e:	80 81       	ld	r24, Z
    30a0:	88 23       	and	r24, r24
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <SSD1306_DisplayNumber+0x11c>
    30a4:	b0 cf       	rjmp	.-160    	; 0x3006 <SSD1306_DisplayNumber+0x7c>
            SSD1306_SendData(0x00); // Add a column of spacing
        }
    }

    // Overwrite remaining old digits with blank spaces (only if needed)
    for (uint8 i = num_length * 6; i < 18; i++) // Max 3-digit numbers
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	c9 01       	movw	r24, r18
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	82 0f       	add	r24, r18
    30b4:	93 1f       	adc	r25, r19
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	06 c0       	rjmp	.+12     	; 0x30ca <SSD1306_DisplayNumber+0x140>
    {
        SSD1306_SendData(0x00);
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	0e 94 65 17 	call	0x2eca	; 0x2eca <SSD1306_SendData>
            SSD1306_SendData(0x00); // Add a column of spacing
        }
    }

    // Overwrite remaining old digits with blank spaces (only if needed)
    for (uint8 i = num_length * 6; i < 18; i++) // Max 3-digit numbers
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	8f 5f       	subi	r24, 0xFF	; 255
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	82 31       	cpi	r24, 0x12	; 18
    30ce:	b8 f3       	brcs	.-18     	; 0x30be <SSD1306_DisplayNumber+0x134>
    {
        SSD1306_SendData(0x00);
    }
}
    30d0:	63 96       	adiw	r28, 0x13	; 19
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <SSD1306_DisplayChar>:



void SSD1306_DisplayChar(uint8 c,uint8 page, uint8 column)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <SSD1306_DisplayChar+0x6>
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <SSD1306_DisplayChar+0x8>
    30ea:	0f 92       	push	r0
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	8b 83       	std	Y+3, r24	; 0x03
    30f2:	6c 83       	std	Y+4, r22	; 0x04
    30f4:	4d 83       	std	Y+5, r20	; 0x05
    // Validate character range (only printable ASCII characters 32-126)

    	 SSD1306_SetCursor(page, column);
    30f6:	8c 81       	ldd	r24, Y+4	; 0x04
    30f8:	6d 81       	ldd	r22, Y+5	; 0x05
    30fa:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <SSD1306_SetCursor>

    	    // Get character index in the font array
    	    uint8 charIndex = c - 32;
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	80 52       	subi	r24, 0x20	; 32
    3102:	8a 83       	std	Y+2, r24	; 0x02

    	    // Send each column of the character to the OLED
    	    for (uint8 i = 0; i < 5; i++)
    3104:	19 82       	std	Y+1, r1	; 0x01
    3106:	18 c0       	rjmp	.+48     	; 0x3138 <SSD1306_DisplayChar+0x56>
    	    {
    	        SSD1306_SendData(Font_5x7[charIndex][i]);
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	28 2f       	mov	r18, r24
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	48 2f       	mov	r20, r24
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	c9 01       	movw	r24, r18
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	82 0f       	add	r24, r18
    3120:	93 1f       	adc	r25, r19
    3122:	84 0f       	add	r24, r20
    3124:	95 1f       	adc	r25, r21
    3126:	fc 01       	movw	r30, r24
    3128:	eb 56       	subi	r30, 0x6B	; 107
    312a:	fe 4f       	sbci	r31, 0xFE	; 254
    312c:	80 81       	ld	r24, Z
    312e:	0e 94 65 17 	call	0x2eca	; 0x2eca <SSD1306_SendData>

    	    // Get character index in the font array
    	    uint8 charIndex = c - 32;

    	    // Send each column of the character to the OLED
    	    for (uint8 i = 0; i < 5; i++)
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	8f 5f       	subi	r24, 0xFF	; 255
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	85 30       	cpi	r24, 0x05	; 5
    313c:	28 f3       	brcs	.-54     	; 0x3108 <SSD1306_DisplayChar+0x26>
    	    {
    	        SSD1306_SendData(Font_5x7[charIndex][i]);
    	    }

    	    // Add a column of spacing after the character
    	    SSD1306_SendData(0x00);
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	0e 94 65 17 	call	0x2eca	; 0x2eca <SSD1306_SendData>



}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <SSD1306_DisplayString>:

void SSD1306_DisplayString(const uint8 *str, uint8 page, uint8 column)
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	00 d0       	rcall	.+0      	; 0x315a <SSD1306_DisplayString+0x6>
    315a:	00 d0       	rcall	.+0      	; 0x315c <SSD1306_DisplayString+0x8>
    315c:	0f 92       	push	r0
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	9b 83       	std	Y+3, r25	; 0x03
    3164:	8a 83       	std	Y+2, r24	; 0x02
    3166:	6c 83       	std	Y+4, r22	; 0x04
    3168:	4d 83       	std	Y+5, r20	; 0x05

	uint8 Local_uint8Counter=0;
    316a:	19 82       	std	Y+1, r1	; 0x01
    316c:	1a c0       	rjmp	.+52     	; 0x31a2 <SSD1306_DisplayString+0x4e>
	while(str[Local_uint8Counter]!='\0')
    {
        // Check if there's space for the next character
        if (column >= 128)
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	88 23       	and	r24, r24
    3172:	24 f4       	brge	.+8      	; 0x317c <SSD1306_DisplayString+0x28>
        {
            page++;
    3174:	8c 81       	ldd	r24, Y+4	; 0x04
    3176:	8f 5f       	subi	r24, 0xFF	; 255
    3178:	8c 83       	std	Y+4, r24	; 0x04
            column = 0;
    317a:	1d 82       	std	Y+5, r1	; 0x05
        }

        // Display the character
        SSD1306_DisplayChar(str[Local_uint8Counter], page, column);
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	28 2f       	mov	r18, r24
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	9b 81       	ldd	r25, Y+3	; 0x03
    3186:	fc 01       	movw	r30, r24
    3188:	e2 0f       	add	r30, r18
    318a:	f3 1f       	adc	r31, r19
    318c:	80 81       	ld	r24, Z
    318e:	6c 81       	ldd	r22, Y+4	; 0x04
    3190:	4d 81       	ldd	r20, Y+5	; 0x05
    3192:	0e 94 71 18 	call	0x30e2	; 0x30e2 <SSD1306_DisplayChar>

        // Advance the column by the width of a character (5 pixels + 1 spacing)
        column += 6;
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	8a 5f       	subi	r24, 0xFA	; 250
    319a:	8d 83       	std	Y+5, r24	; 0x05

        // Move to the next character
        Local_uint8Counter++;
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	8f 5f       	subi	r24, 0xFF	; 255
    31a0:	89 83       	std	Y+1, r24	; 0x01

void SSD1306_DisplayString(const uint8 *str, uint8 page, uint8 column)
{

	uint8 Local_uint8Counter=0;
	while(str[Local_uint8Counter]!='\0')
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	fc 01       	movw	r30, r24
    31ae:	e2 0f       	add	r30, r18
    31b0:	f3 1f       	adc	r31, r19
    31b2:	80 81       	ld	r24, Z
    31b4:	88 23       	and	r24, r24
    31b6:	d9 f6       	brne	.-74     	; 0x316e <SSD1306_DisplayString+0x1a>
        column += 6;

        // Move to the next character
        Local_uint8Counter++;
    }
}
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <EEPROM_write>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "../inc/Int_EEPROM.h"

void EEPROM_write(uint16 uiAddress, uint8 ucData)
{
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <EEPROM_write+0x6>
    31ce:	0f 92       	push	r0
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	89 83       	std	Y+1, r24	; 0x01
    31d8:	6b 83       	std	Y+3, r22	; 0x03
    /* Wait for completion of previous write */
    while (EECR & (1 << EEWE )); // EEWE  (was EEWE in old versions)
    31da:	ec e3       	ldi	r30, 0x3C	; 60
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	82 70       	andi	r24, 0x02	; 2
    31e6:	90 70       	andi	r25, 0x00	; 0
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	b9 f7       	brne	.-18     	; 0x31da <EEPROM_write+0x12>

    /* Set up address and data registers */
    EEARH = (uiAddress >> 8);   // Higher byte
    31ec:	ef e3       	ldi	r30, 0x3F	; 63
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	9a 81       	ldd	r25, Y+2	; 0x02
    31f4:	89 2f       	mov	r24, r25
    31f6:	99 27       	eor	r25, r25
    31f8:	80 83       	st	Z, r24
    EEARL = (uiAddress & 0xFF); // Lower byte
    31fa:	ee e3       	ldi	r30, 0x3E	; 62
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	80 83       	st	Z, r24
    EEDR = ucData;
    3202:	ed e3       	ldi	r30, 0x3D	; 61
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	80 83       	st	Z, r24

    /* Write logical one to EEMPE (Master Write Enable) */
    EECR |= (1 << EEMWE); // EEMPE (was EEMWE in old versions)
    320a:	ac e3       	ldi	r26, 0x3C	; 60
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	ec e3       	ldi	r30, 0x3C	; 60
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	84 60       	ori	r24, 0x04	; 4
    3216:	8c 93       	st	X, r24

    /* Start EEPROM write by setting EEWE  */
    EECR |= (1 << EEWE );
    3218:	ac e3       	ldi	r26, 0x3C	; 60
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	ec e3       	ldi	r30, 0x3C	; 60
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	82 60       	ori	r24, 0x02	; 2
    3224:	8c 93       	st	X, r24
}
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <EEPROM_read>:

uint8 EEPROM_read(uint16 uiAddress)
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	00 d0       	rcall	.+0      	; 0x3238 <EEPROM_read+0x6>
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	9a 83       	std	Y+2, r25	; 0x02
    323e:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for completion of previous write */
   // while (EECR & (1 << EEWE )); // EEWE  (was EEWE in old versions)

    /* Set up address register */
    EEARH = (uiAddress >> 8);   // Higher byte
    3240:	ef e3       	ldi	r30, 0x3F	; 63
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	9a 81       	ldd	r25, Y+2	; 0x02
    3248:	89 2f       	mov	r24, r25
    324a:	99 27       	eor	r25, r25
    324c:	80 83       	st	Z, r24
    EEARL = (uiAddress & 0xFF); // Lower byte
    324e:	ee e3       	ldi	r30, 0x3E	; 62
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	80 83       	st	Z, r24

    /* Start EEPROM read by writing EERE */
    EECR |= (1 << EERE);
    3256:	ac e3       	ldi	r26, 0x3C	; 60
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	ec e3       	ldi	r30, 0x3C	; 60
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	81 60       	ori	r24, 0x01	; 1
    3262:	8c 93       	st	X, r24

    /* Return data from data register */
    return EEDR;
    3264:	ed e3       	ldi	r30, 0x3D	; 61
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
}
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <Test_Code>:
#include "EEPROM/inc/EEPROM_interface.h"


void static Test_Code(void)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
static int i=1;
EEPROM_voidSendData(0x111,i++);
    327e:	80 91 91 01 	lds	r24, 0x0191
    3282:	90 91 92 01 	lds	r25, 0x0192
    3286:	28 2f       	mov	r18, r24
    3288:	01 96       	adiw	r24, 0x01	; 1
    328a:	90 93 92 01 	sts	0x0192, r25
    328e:	80 93 91 01 	sts	0x0191, r24
    3292:	81 e1       	ldi	r24, 0x11	; 17
    3294:	91 e0       	ldi	r25, 0x01	; 1
    3296:	62 2f       	mov	r22, r18
    3298:	0e 94 60 19 	call	0x32c0	; 0x32c0 <EEPROM_voidSendData>
	//TIMER0_Delay(50);
uint8 x=EEPROM_voidReceiveData(0x111);
    329c:	81 e1       	ldi	r24, 0x11	; 17
    329e:	91 e0       	ldi	r25, 0x01	; 1
    32a0:	0e 94 7f 19 	call	0x32fe	; 0x32fe <EEPROM_voidReceiveData>
    32a4:	89 83       	std	Y+1, r24	; 0x01

}
    32a6:	0f 90       	pop	r0
    32a8:	cf 91       	pop	r28
    32aa:	df 91       	pop	r29
    32ac:	08 95       	ret

000032ae <EEPROM_Init>:

void EEPROM_Init(void)
{
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    32b6:	0e 94 13 0b 	call	0x1626	; 0x1626 <TWI_voidMasterInit>
}
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <EEPROM_voidSendData>:

void EEPROM_voidSendData(uint16 Copy_u16Address,uint8 Copy_u8Data)
{
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <EEPROM_voidSendData+0x6>
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <EEPROM_voidSendData+0x8>
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	9b 83       	std	Y+3, r25	; 0x03
    32ce:	8a 83       	std	Y+2, r24	; 0x02
    32d0:	6c 83       	std	Y+4, r22	; 0x04
	//int static a=0;
	/*1010(A2)(B1)(B0)(W/R)*/
	uint8 SLV_W=0b10100000;
    32d2:	80 ea       	ldi	r24, 0xA0	; 160
    32d4:	89 83       	std	Y+1, r24	; 0x01

	TWI_voidStartCondition();
    32d6:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_voidStartCondition>
//	CLCD_voidGoToXY(0,0);
//	CLCD_voidWriteNumber(++a);

	/*BLOCK SELECTION WITH WRITE*/
	TWI_voidSendData(SLV_W);
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>

	/*BYTE SELECTION IN THE DESIRED BLOCK*/
	TWI_voidSendData((uint8)Copy_u16Address);
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>

	/*SENDING THE DATA*/
	TWI_voidSendData(Copy_u8Data);
    32e6:	8c 81       	ldd	r24, Y+4	; 0x04
    32e8:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
	TWI_voidStopCondition();
    32ec:	0e 94 39 0b 	call	0x1672	; 0x1672 <TWI_voidStopCondition>

}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <EEPROM_voidReceiveData>:

uint8 EEPROM_voidReceiveData(uint16 Copy_u16Address)
{
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	00 d0       	rcall	.+0      	; 0x3304 <EEPROM_voidReceiveData+0x6>
    3304:	00 d0       	rcall	.+0      	; 0x3306 <EEPROM_voidReceiveData+0x8>
    3306:	0f 92       	push	r0
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	9d 83       	std	Y+5, r25	; 0x05
    330e:	8c 83       	std	Y+4, r24	; 0x04
	uint8 SLV_W=0b10100000;
    3310:	80 ea       	ldi	r24, 0xA0	; 160
    3312:	8b 83       	std	Y+3, r24	; 0x03
	uint8 SLV_R=SLV_W+1;
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	8f 5f       	subi	r24, 0xFF	; 255
    3318:	8a 83       	std	Y+2, r24	; 0x02
	TWI_voidStartCondition();
    331a:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_voidStartCondition>

	TWI_voidSendData(SLV_W);
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>
	TWI_voidSendData((uint8)Copy_u16Address);
    3324:	8c 81       	ldd	r24, Y+4	; 0x04
    3326:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>

	TWI_voidStartCondition();
    332a:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_voidStartCondition>
	TWI_voidSendData(SLV_R);
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	0e 94 44 0b 	call	0x1688	; 0x1688 <TWI_voidSendData>

	uint8 Data=TWI_u8ReceiveData();
    3334:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <TWI_u8ReceiveData>
    3338:	89 83       	std	Y+1, r24	; 0x01

	TWI_voidStopCondition();
    333a:	0e 94 39 0b 	call	0x1672	; 0x1672 <TWI_voidStopCondition>
	return Data;
    333e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <delay_ms>:
#include "../../../LIB/STD_TYPES.h"
#include "../../../LIB/BIT_MATH.h"
#include "../inc/CLCD_interface.h"
#include "../../../MCAL/DIO/inc/DIO_INTERFACE.h"

void delay_ms(uint16 milliseconds) {
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	2c 97       	sbiw	r28, 0x0c	; 12
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	9c 87       	std	Y+12, r25	; 0x0c
    3366:	8b 87       	std	Y+11, r24	; 0x0b
    // Assuming 4 cycles per loop iteration for an 8 MHz clock
    const uint16 cycles_per_ms = 100; // Calculated for 1 ms delay
    3368:	84 e6       	ldi	r24, 0x64	; 100
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
    uint32 total_iterations = milliseconds * cycles_per_ms;
    3370:	2b 85       	ldd	r18, Y+11	; 0x0b
    3372:	3c 85       	ldd	r19, Y+12	; 0x0c
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	ac 01       	movw	r20, r24
    337a:	24 9f       	mul	r18, r20
    337c:	c0 01       	movw	r24, r0
    337e:	25 9f       	mul	r18, r21
    3380:	90 0d       	add	r25, r0
    3382:	34 9f       	mul	r19, r20
    3384:	90 0d       	add	r25, r0
    3386:	11 24       	eor	r1, r1
    3388:	cc 01       	movw	r24, r24
    338a:	a0 e0       	ldi	r26, 0x00	; 0
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	89 83       	std	Y+1, r24	; 0x01
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	ab 83       	std	Y+3, r26	; 0x03
    3394:	bc 83       	std	Y+4, r27	; 0x04

    // Loop for the calculated number of iterations
    for (volatile uint32 i = 0; i < total_iterations; i++) {
    3396:	1f 82       	std	Y+7, r1	; 0x07
    3398:	18 86       	std	Y+8, r1	; 0x08
    339a:	19 86       	std	Y+9, r1	; 0x09
    339c:	1a 86       	std	Y+10, r1	; 0x0a
    339e:	0b c0       	rjmp	.+22     	; 0x33b6 <delay_ms+0x66>
    33a0:	8f 81       	ldd	r24, Y+7	; 0x07
    33a2:	98 85       	ldd	r25, Y+8	; 0x08
    33a4:	a9 85       	ldd	r26, Y+9	; 0x09
    33a6:	ba 85       	ldd	r27, Y+10	; 0x0a
    33a8:	01 96       	adiw	r24, 0x01	; 1
    33aa:	a1 1d       	adc	r26, r1
    33ac:	b1 1d       	adc	r27, r1
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	a9 87       	std	Y+9, r26	; 0x09
    33b4:	ba 87       	std	Y+10, r27	; 0x0a
    33b6:	2f 81       	ldd	r18, Y+7	; 0x07
    33b8:	38 85       	ldd	r19, Y+8	; 0x08
    33ba:	49 85       	ldd	r20, Y+9	; 0x09
    33bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	ab 81       	ldd	r26, Y+3	; 0x03
    33c4:	bc 81       	ldd	r27, Y+4	; 0x04
    33c6:	28 17       	cp	r18, r24
    33c8:	39 07       	cpc	r19, r25
    33ca:	4a 07       	cpc	r20, r26
    33cc:	5b 07       	cpc	r21, r27
    33ce:	40 f3       	brcs	.-48     	; 0x33a0 <delay_ms+0x50>
        // Empty loop to create the delay
    }
}
    33d0:	2c 96       	adiw	r28, 0x0c	; 12
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	de bf       	out	0x3e, r29	; 62
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	cd bf       	out	0x3d, r28	; 61
    33dc:	cf 91       	pop	r28
    33de:	df 91       	pop	r29
    33e0:	08 95       	ret

000033e2 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(uint8 copy_uint8Command)
{
    33e2:	df 93       	push	r29
    33e4:	cf 93       	push	r28
    33e6:	0f 92       	push	r0
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	89 83       	std	Y+1, r24	; 0x01
	/*Setting RS pin to low*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
/*Setting RW pin low for write*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	61 e0       	ldi	r22, 0x01	; 1
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>

/*Set command data pins*/
DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Command);
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	69 81       	ldd	r22, Y+1	; 0x01
    3406:	0e 94 41 12 	call	0x2482	; 0x2482 <DIO_SetPortVal>

/*Send Enable pulse*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	62 e0       	ldi	r22, 0x02	; 2
    340e:	41 e0       	ldi	r20, 0x01	; 1
    3410:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
delay_ms(2);
    3414:	82 e0       	ldi	r24, 0x02	; 2
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 a8 19 	call	0x3350	; 0x3350 <delay_ms>
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	62 e0       	ldi	r22, 0x02	; 2
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
}
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
	/*Wait more that 30 ms*/
	delay_ms(40);
    3436:	88 e2       	ldi	r24, 0x28	; 40
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 a8 19 	call	0x3350	; 0x3350 <delay_ms>

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
    343e:	88 e3       	ldi	r24, 0x38	; 56
    3440:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
    3444:	8c e0       	ldi	r24, 0x0C	; 12
    3446:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(0b1);
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <CLCD_voidSendCommand>



}
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <CLCD_voidSendData>:


void CLCD_voidSendData(uint8 copy_uint8Data)
{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	0f 92       	push	r0
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	89 83       	std	Y+1, r24	; 0x01

	/*Setting RS pin to HIGH*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	60 e0       	ldi	r22, 0x00	; 0
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
	/*Setting RW pin low for write*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>

	/*Set data pins*/
	DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Data);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	69 81       	ldd	r22, Y+1	; 0x01
    347a:	0e 94 41 12 	call	0x2482	; 0x2482 <DIO_SetPortVal>

	/*Send Enable pulse*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	62 e0       	ldi	r22, 0x02	; 2
    3482:	41 e0       	ldi	r20, 0x01	; 1
    3484:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
	delay_ms(2);
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 a8 19 	call	0x3350	; 0x3350 <delay_ms>
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	62 e0       	ldi	r22, 0x02	; 2
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>


}
    349a:	0f 90       	pop	r0
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	08 95       	ret

000034a2 <CLCD_voidSendString>:

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	00 d0       	rcall	.+0      	; 0x34a8 <CLCD_voidSendString+0x6>
    34a8:	0f 92       	push	r0
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    34ae:	9b 83       	std	Y+3, r25	; 0x03
    34b0:	8a 83       	std	Y+2, r24	; 0x02
uint8 Local_uint8Counter=0;
    34b2:	19 82       	std	Y+1, r1	; 0x01
    34b4:	0e c0       	rjmp	.+28     	; 0x34d2 <CLCD_voidSendString+0x30>
while(Copy_uint8String[Local_uint8Counter]!='\0')
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	28 2f       	mov	r18, r24
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	9b 81       	ldd	r25, Y+3	; 0x03
    34c0:	fc 01       	movw	r30, r24
    34c2:	e2 0f       	add	r30, r18
    34c4:	f3 1f       	adc	r31, r19
    34c6:	80 81       	ld	r24, Z
    34c8:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
    Local_uint8Counter++;
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	8f 5f       	subi	r24, 0xFF	; 255
    34d0:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
uint8 Local_uint8Counter=0;
while(Copy_uint8String[Local_uint8Counter]!='\0')
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	28 2f       	mov	r18, r24
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	9b 81       	ldd	r25, Y+3	; 0x03
    34dc:	fc 01       	movw	r30, r24
    34de:	e2 0f       	add	r30, r18
    34e0:	f3 1f       	adc	r31, r19
    34e2:	80 81       	ld	r24, Z
    34e4:	88 23       	and	r24, r24
    34e6:	39 f7       	brne	.-50     	; 0x34b6 <CLCD_voidSendString+0x14>
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    Local_uint8Counter++;
}

}
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition)
{
    34f4:	df 93       	push	r29
    34f6:	cf 93       	push	r28
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <CLCD_voidGoToXY+0x6>
    34fa:	0f 92       	push	r0
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	8a 83       	std	Y+2, r24	; 0x02
    3502:	6b 83       	std	Y+3, r22	; 0x03
  uint8 Local_uint8Address;

  if(Copy_uint8Xposition==0)
    3504:	8a 81       	ldd	r24, Y+2	; 0x02
    3506:	88 23       	and	r24, r24
    3508:	19 f4       	brne	.+6      	; 0x3510 <CLCD_voidGoToXY+0x1c>
  {
	  Local_uint8Address=Copy_uint8Yposition;
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	89 83       	std	Y+1, r24	; 0x01
    350e:	06 c0       	rjmp	.+12     	; 0x351c <CLCD_voidGoToXY+0x28>
  }
  else if(Copy_uint8Xposition==1)
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	81 30       	cpi	r24, 0x01	; 1
    3514:	19 f4       	brne	.+6      	; 0x351c <CLCD_voidGoToXY+0x28>

  {
	  Local_uint8Address=Copy_uint8Yposition+0x40;
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	80 5c       	subi	r24, 0xC0	; 192
    351a:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_voidSendCommand(Local_uint8Address|(1<<7));
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	80 68       	ori	r24, 0x80	; 128
    3520:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <CLCD_voidSendCommand>
}
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(float copy_f32Number)
{
    3530:	0f 93       	push	r16
    3532:	1f 93       	push	r17
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	a8 97       	sbiw	r28, 0x28	; 40
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	6d a3       	std	Y+37, r22	; 0x25
    354a:	7e a3       	std	Y+38, r23	; 0x26
    354c:	8f a3       	std	Y+39, r24	; 0x27
    354e:	98 a7       	std	Y+40, r25	; 0x28
    // Handle negative numbers
    if (copy_f32Number < 0)
    3550:	6d a1       	ldd	r22, Y+37	; 0x25
    3552:	7e a1       	ldd	r23, Y+38	; 0x26
    3554:	8f a1       	ldd	r24, Y+39	; 0x27
    3556:	98 a5       	ldd	r25, Y+40	; 0x28
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e0       	ldi	r20, 0x00	; 0
    355e:	50 e0       	ldi	r21, 0x00	; 0
    3560:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__ltsf2>
    3564:	88 23       	and	r24, r24
    3566:	64 f4       	brge	.+24     	; 0x3580 <CLCD_voidWriteNumber+0x50>
    {
        CLCD_voidSendData('-');
    3568:	8d e2       	ldi	r24, 0x2D	; 45
    356a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
        copy_f32Number = -copy_f32Number;
    356e:	8d a1       	ldd	r24, Y+37	; 0x25
    3570:	9e a1       	ldd	r25, Y+38	; 0x26
    3572:	af a1       	ldd	r26, Y+39	; 0x27
    3574:	b8 a5       	ldd	r27, Y+40	; 0x28
    3576:	b0 58       	subi	r27, 0x80	; 128
    3578:	8d a3       	std	Y+37, r24	; 0x25
    357a:	9e a3       	std	Y+38, r25	; 0x26
    357c:	af a3       	std	Y+39, r26	; 0x27
    357e:	b8 a7       	std	Y+40, r27	; 0x28
    }

    // Separate the integer and fractional parts
    sint32 integerPart = (sint32)copy_f32Number; // Extract the integer part
    3580:	6d a1       	ldd	r22, Y+37	; 0x25
    3582:	7e a1       	ldd	r23, Y+38	; 0x26
    3584:	8f a1       	ldd	r24, Y+39	; 0x27
    3586:	98 a5       	ldd	r25, Y+40	; 0x28
    3588:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	8d 87       	std	Y+13, r24	; 0x0d
    3592:	9e 87       	std	Y+14, r25	; 0x0e
    3594:	af 87       	std	Y+15, r26	; 0x0f
    3596:	b8 8b       	std	Y+16, r27	; 0x10
    float fractionalPart = copy_f32Number - integerPart; // Extract the fractional part
    3598:	6d 85       	ldd	r22, Y+13	; 0x0d
    359a:	7e 85       	ldd	r23, Y+14	; 0x0e
    359c:	8f 85       	ldd	r24, Y+15	; 0x0f
    359e:	98 89       	ldd	r25, Y+16	; 0x10
    35a0:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    35a4:	9b 01       	movw	r18, r22
    35a6:	ac 01       	movw	r20, r24
    35a8:	6d a1       	ldd	r22, Y+37	; 0x25
    35aa:	7e a1       	ldd	r23, Y+38	; 0x26
    35ac:	8f a1       	ldd	r24, Y+39	; 0x27
    35ae:	98 a5       	ldd	r25, Y+40	; 0x28
    35b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	89 87       	std	Y+9, r24	; 0x09
    35ba:	9a 87       	std	Y+10, r25	; 0x0a
    35bc:	ab 87       	std	Y+11, r26	; 0x0b
    35be:	bc 87       	std	Y+12, r27	; 0x0c

    // Handle the integer part (reusing existing logic)
    if (integerPart == 0)
    35c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c4:	af 85       	ldd	r26, Y+15	; 0x0f
    35c6:	b8 89       	ldd	r27, Y+16	; 0x10
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	a1 05       	cpc	r26, r1
    35cc:	b1 05       	cpc	r27, r1
    35ce:	21 f4       	brne	.+8      	; 0x35d8 <CLCD_voidWriteNumber+0xa8>
    {
        CLCD_voidSendData('0');
    35d0:	80 e3       	ldi	r24, 0x30	; 48
    35d2:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
    35d6:	50 c0       	rjmp	.+160    	; 0x3678 <CLCD_voidWriteNumber+0x148>
    }
    else
    {
        uint8 NUM[10];
        uint8 Local_uint8Counter = 0;
    35d8:	1c 82       	std	Y+4, r1	; 0x04
    35da:	2e c0       	rjmp	.+92     	; 0x3638 <CLCD_voidWriteNumber+0x108>

        while (integerPart > 0)
        {
            NUM[Local_uint8Counter++] = (integerPart % 10) + '0';
    35dc:	8c 81       	ldd	r24, Y+4	; 0x04
    35de:	08 2f       	mov	r16, r24
    35e0:	10 e0       	ldi	r17, 0x00	; 0
    35e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e6:	af 85       	ldd	r26, Y+15	; 0x0f
    35e8:	b8 89       	ldd	r27, Y+16	; 0x10
    35ea:	2a e0       	ldi	r18, 0x0A	; 10
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	50 e0       	ldi	r21, 0x00	; 0
    35f2:	bc 01       	movw	r22, r24
    35f4:	cd 01       	movw	r24, r26
    35f6:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__divmodsi4>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	28 2f       	mov	r18, r24
    3600:	20 5d       	subi	r18, 0xD0	; 208
    3602:	ce 01       	movw	r24, r28
    3604:	41 96       	adiw	r24, 0x11	; 17
    3606:	fc 01       	movw	r30, r24
    3608:	e0 0f       	add	r30, r16
    360a:	f1 1f       	adc	r31, r17
    360c:	20 83       	st	Z, r18
    360e:	8c 81       	ldd	r24, Y+4	; 0x04
    3610:	8f 5f       	subi	r24, 0xFF	; 255
    3612:	8c 83       	std	Y+4, r24	; 0x04
            integerPart /= 10;
    3614:	8d 85       	ldd	r24, Y+13	; 0x0d
    3616:	9e 85       	ldd	r25, Y+14	; 0x0e
    3618:	af 85       	ldd	r26, Y+15	; 0x0f
    361a:	b8 89       	ldd	r27, Y+16	; 0x10
    361c:	2a e0       	ldi	r18, 0x0A	; 10
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	bc 01       	movw	r22, r24
    3626:	cd 01       	movw	r24, r26
    3628:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__divmodsi4>
    362c:	da 01       	movw	r26, r20
    362e:	c9 01       	movw	r24, r18
    3630:	8d 87       	std	Y+13, r24	; 0x0d
    3632:	9e 87       	std	Y+14, r25	; 0x0e
    3634:	af 87       	std	Y+15, r26	; 0x0f
    3636:	b8 8b       	std	Y+16, r27	; 0x10
    else
    {
        uint8 NUM[10];
        uint8 Local_uint8Counter = 0;

        while (integerPart > 0)
    3638:	8d 85       	ldd	r24, Y+13	; 0x0d
    363a:	9e 85       	ldd	r25, Y+14	; 0x0e
    363c:	af 85       	ldd	r26, Y+15	; 0x0f
    363e:	b8 89       	ldd	r27, Y+16	; 0x10
    3640:	18 16       	cp	r1, r24
    3642:	19 06       	cpc	r1, r25
    3644:	1a 06       	cpc	r1, r26
    3646:	1b 06       	cpc	r1, r27
    3648:	4c f2       	brlt	.-110    	; 0x35dc <CLCD_voidWriteNumber+0xac>
            NUM[Local_uint8Counter++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        // Reverse and display the integer part
        for (uint8 i = Local_uint8Counter; i > 0; i--)
    364a:	8c 81       	ldd	r24, Y+4	; 0x04
    364c:	8b 83       	std	Y+3, r24	; 0x03
    364e:	11 c0       	rjmp	.+34     	; 0x3672 <CLCD_voidWriteNumber+0x142>
        {
            CLCD_voidSendData(NUM[i - 1]);
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9c 01       	movw	r18, r24
    3658:	21 50       	subi	r18, 0x01	; 1
    365a:	30 40       	sbci	r19, 0x00	; 0
    365c:	ce 01       	movw	r24, r28
    365e:	41 96       	adiw	r24, 0x11	; 17
    3660:	fc 01       	movw	r30, r24
    3662:	e2 0f       	add	r30, r18
    3664:	f3 1f       	adc	r31, r19
    3666:	80 81       	ld	r24, Z
    3668:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
            NUM[Local_uint8Counter++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        // Reverse and display the integer part
        for (uint8 i = Local_uint8Counter; i > 0; i--)
    366c:	8b 81       	ldd	r24, Y+3	; 0x03
    366e:	81 50       	subi	r24, 0x01	; 1
    3670:	8b 83       	std	Y+3, r24	; 0x03
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	88 23       	and	r24, r24
    3676:	61 f7       	brne	.-40     	; 0x3650 <CLCD_voidWriteNumber+0x120>
            CLCD_voidSendData(NUM[i - 1]);
        }
    }

    // Handle the fractional part
    CLCD_voidSendData('.'); // Display the decimal point
    3678:	8e e2       	ldi	r24, 0x2E	; 46
    367a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>

    fractionalPart *= 1000; // Scale to display three decimal places
    367e:	69 85       	ldd	r22, Y+9	; 0x09
    3680:	7a 85       	ldd	r23, Y+10	; 0x0a
    3682:	8b 85       	ldd	r24, Y+11	; 0x0b
    3684:	9c 85       	ldd	r25, Y+12	; 0x0c
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	4a e7       	ldi	r20, 0x7A	; 122
    368c:	54 e4       	ldi	r21, 0x44	; 68
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	89 87       	std	Y+9, r24	; 0x09
    3698:	9a 87       	std	Y+10, r25	; 0x0a
    369a:	ab 87       	std	Y+11, r26	; 0x0b
    369c:	bc 87       	std	Y+12, r27	; 0x0c
    sint32 fractionalPartAsInt = (sint32)(fractionalPart + 0.5); // Round the fractional part
    369e:	69 85       	ldd	r22, Y+9	; 0x09
    36a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    36a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	5f e3       	ldi	r21, 0x3F	; 63
    36ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	8d 83       	std	Y+5, r24	; 0x05
    36c4:	9e 83       	std	Y+6, r25	; 0x06
    36c6:	af 83       	std	Y+7, r26	; 0x07
    36c8:	b8 87       	std	Y+8, r27	; 0x08

    if (fractionalPartAsInt == 0)
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	af 81       	ldd	r26, Y+7	; 0x07
    36d0:	b8 85       	ldd	r27, Y+8	; 0x08
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	a1 05       	cpc	r26, r1
    36d6:	b1 05       	cpc	r27, r1
    36d8:	51 f4       	brne	.+20     	; 0x36ee <CLCD_voidWriteNumber+0x1be>
    {
        // Display trailing zeros if the fractional part is zero
        CLCD_voidSendData('0');
    36da:	80 e3       	ldi	r24, 0x30	; 48
    36dc:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
        CLCD_voidSendData('0');
    36e0:	80 e3       	ldi	r24, 0x30	; 48
    36e2:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
        CLCD_voidSendData('0');
    36e6:	80 e3       	ldi	r24, 0x30	; 48
    36e8:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
    36ec:	50 c0       	rjmp	.+160    	; 0x378e <CLCD_voidWriteNumber+0x25e>
    }
    else
    {
        uint8 FRACT[10];
        uint8 Local_uint8FracCounter = 0;
    36ee:	1a 82       	std	Y+2, r1	; 0x02
    36f0:	2e c0       	rjmp	.+92     	; 0x374e <CLCD_voidWriteNumber+0x21e>

        while (fractionalPartAsInt > 0)
        {
            FRACT[Local_uint8FracCounter++] = (fractionalPartAsInt % 10) + '0';
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	08 2f       	mov	r16, r24
    36f6:	10 e0       	ldi	r17, 0x00	; 0
    36f8:	8d 81       	ldd	r24, Y+5	; 0x05
    36fa:	9e 81       	ldd	r25, Y+6	; 0x06
    36fc:	af 81       	ldd	r26, Y+7	; 0x07
    36fe:	b8 85       	ldd	r27, Y+8	; 0x08
    3700:	2a e0       	ldi	r18, 0x0A	; 10
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	bc 01       	movw	r22, r24
    370a:	cd 01       	movw	r24, r26
    370c:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__divmodsi4>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	28 2f       	mov	r18, r24
    3716:	20 5d       	subi	r18, 0xD0	; 208
    3718:	ce 01       	movw	r24, r28
    371a:	4b 96       	adiw	r24, 0x1b	; 27
    371c:	fc 01       	movw	r30, r24
    371e:	e0 0f       	add	r30, r16
    3720:	f1 1f       	adc	r31, r17
    3722:	20 83       	st	Z, r18
    3724:	8a 81       	ldd	r24, Y+2	; 0x02
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	8a 83       	std	Y+2, r24	; 0x02
            fractionalPartAsInt /= 10;
    372a:	8d 81       	ldd	r24, Y+5	; 0x05
    372c:	9e 81       	ldd	r25, Y+6	; 0x06
    372e:	af 81       	ldd	r26, Y+7	; 0x07
    3730:	b8 85       	ldd	r27, Y+8	; 0x08
    3732:	2a e0       	ldi	r18, 0x0A	; 10
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e0       	ldi	r20, 0x00	; 0
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	bc 01       	movw	r22, r24
    373c:	cd 01       	movw	r24, r26
    373e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__divmodsi4>
    3742:	da 01       	movw	r26, r20
    3744:	c9 01       	movw	r24, r18
    3746:	8d 83       	std	Y+5, r24	; 0x05
    3748:	9e 83       	std	Y+6, r25	; 0x06
    374a:	af 83       	std	Y+7, r26	; 0x07
    374c:	b8 87       	std	Y+8, r27	; 0x08
    else
    {
        uint8 FRACT[10];
        uint8 Local_uint8FracCounter = 0;

        while (fractionalPartAsInt > 0)
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	9e 81       	ldd	r25, Y+6	; 0x06
    3752:	af 81       	ldd	r26, Y+7	; 0x07
    3754:	b8 85       	ldd	r27, Y+8	; 0x08
    3756:	18 16       	cp	r1, r24
    3758:	19 06       	cpc	r1, r25
    375a:	1a 06       	cpc	r1, r26
    375c:	1b 06       	cpc	r1, r27
    375e:	4c f2       	brlt	.-110    	; 0x36f2 <CLCD_voidWriteNumber+0x1c2>
            FRACT[Local_uint8FracCounter++] = (fractionalPartAsInt % 10) + '0';
            fractionalPartAsInt /= 10;
        }

        // Reverse and display the fractional part
        for (uint8 i = Local_uint8FracCounter; i > 0; i--)
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	89 83       	std	Y+1, r24	; 0x01
    3764:	11 c0       	rjmp	.+34     	; 0x3788 <CLCD_voidWriteNumber+0x258>
        {
            CLCD_voidSendData(FRACT[i - 1]);
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	88 2f       	mov	r24, r24
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9c 01       	movw	r18, r24
    376e:	21 50       	subi	r18, 0x01	; 1
    3770:	30 40       	sbci	r19, 0x00	; 0
    3772:	ce 01       	movw	r24, r28
    3774:	4b 96       	adiw	r24, 0x1b	; 27
    3776:	fc 01       	movw	r30, r24
    3778:	e2 0f       	add	r30, r18
    377a:	f3 1f       	adc	r31, r19
    377c:	80 81       	ld	r24, Z
    377e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
            FRACT[Local_uint8FracCounter++] = (fractionalPartAsInt % 10) + '0';
            fractionalPartAsInt /= 10;
        }

        // Reverse and display the fractional part
        for (uint8 i = Local_uint8FracCounter; i > 0; i--)
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	81 50       	subi	r24, 0x01	; 1
    3786:	89 83       	std	Y+1, r24	; 0x01
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	88 23       	and	r24, r24
    378c:	61 f7       	brne	.-40     	; 0x3766 <CLCD_voidWriteNumber+0x236>
        {
            CLCD_voidSendData(FRACT[i - 1]);
        }
    }
}
    378e:	a8 96       	adiw	r28, 0x28	; 40
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	08 95       	ret

000037a4 <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar(uint8* copy_puint8Pattern,uint8 copy_uint8PatternNumber,uint8 copy_uint8Xposition,uint8 copy_uint8Yposition)
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	27 97       	sbiw	r28, 0x07	; 7
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	f8 94       	cli
    37b2:	de bf       	out	0x3e, r29	; 62
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	cd bf       	out	0x3d, r28	; 61
    37b8:	9c 83       	std	Y+4, r25	; 0x04
    37ba:	8b 83       	std	Y+3, r24	; 0x03
    37bc:	6d 83       	std	Y+5, r22	; 0x05
    37be:	4e 83       	std	Y+6, r20	; 0x06
    37c0:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_uint8CGRAM_Address=0;
    37c2:	1a 82       	std	Y+2, r1	; 0x02
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	8a 83       	std	Y+2, r24	; 0x02
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));
    37d8:	8a 81       	ldd	r24, Y+2	; 0x02
    37da:	80 64       	ori	r24, 0x40	; 64
    37dc:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <CLCD_voidSendCommand>

for(uint8 i=0;i<8;i++)
    37e0:	19 82       	std	Y+1, r1	; 0x01
    37e2:	0e c0       	rjmp	.+28     	; 0x3800 <CLCD_voidWriteSpecialChar+0x5c>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	28 2f       	mov	r18, r24
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	9c 81       	ldd	r25, Y+4	; 0x04
    37ee:	fc 01       	movw	r30, r24
    37f0:	e2 0f       	add	r30, r18
    37f2:	f3 1f       	adc	r31, r19
    37f4:	80 81       	ld	r24, Z
    37f6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>
	uint8 Local_uint8CGRAM_Address=0;
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));

for(uint8 i=0;i<8;i++)
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	8f 5f       	subi	r24, 0xFF	; 255
    37fe:	89 83       	std	Y+1, r24	; 0x01
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	88 30       	cpi	r24, 0x08	; 8
    3804:	78 f3       	brcs	.-34     	; 0x37e4 <CLCD_voidWriteSpecialChar+0x40>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
}
/*go back to DDRAM to display the Arr*/
 CLCD_voidGoToXY(copy_uint8Xposition,copy_uint8Yposition);
    3806:	8e 81       	ldd	r24, Y+6	; 0x06
    3808:	6f 81       	ldd	r22, Y+7	; 0x07
    380a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <CLCD_voidGoToXY>

CLCD_voidSendData(copy_uint8PatternNumber);
    380e:	8d 81       	ldd	r24, Y+5	; 0x05
    3810:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CLCD_voidSendData>

}
    3814:	27 96       	adiw	r28, 0x07	; 7
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	08 95       	ret

00003826 <HandleGreenState>:
#define GREEN_DURATION  5
#define YELLOW_DURATION 5
#define RED_DURATION    5

static void HandleGreenState(void)
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    382e:	82 e0       	ldi	r24, 0x02	; 2
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_HIGH);
    3838:	82 e0       	ldi	r24, 0x02	; 2
    383a:	62 e0       	ldi	r22, 0x02	; 2
    383c:	41 e0       	ldi	r20, 0x01	; 1
    383e:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
}
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <HandleRedState>:
static void HandleRedState(void)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    3850:	82 e0       	ldi	r24, 0x02	; 2
    3852:	62 e0       	ldi	r22, 0x02	; 2
    3854:	40 e0       	ldi	r20, 0x00	; 0
    3856:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_LOW);
    385a:	82 e0       	ldi	r24, 0x02	; 2
    385c:	61 e0       	ldi	r22, 0x01	; 1
    385e:	40 e0       	ldi	r20, 0x00	; 0
    3860:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_HIGH);
    3864:	82 e0       	ldi	r24, 0x02	; 2
    3866:	60 e0       	ldi	r22, 0x00	; 0
    3868:	41 e0       	ldi	r20, 0x01	; 1
    386a:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
}
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <HandleyellowState>:
static void HandleyellowState(void)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    387c:	82 e0       	ldi	r24, 0x02	; 2
    387e:	62 e0       	ldi	r22, 0x02	; 2
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    3886:	82 e0       	ldi	r24, 0x02	; 2
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	40 e0       	ldi	r20, 0x00	; 0
    388c:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_HIGH);
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	61 e0       	ldi	r22, 0x01	; 1
    3894:	41 e0       	ldi	r20, 0x01	; 1
    3896:	0e 94 8c 12 	call	0x2518	; 0x2518 <DIO_SetPinVal>
}
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <TimerISR>:
StackEntry Local_Variable;     // Current state function
int last_handled_time = -1;    // Tracks the last time the state was handled

/* ISR Function */
void TimerISR(void)
{
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	cd b7       	in	r28, 0x3d	; 61
    38a6:	de b7       	in	r29, 0x3e	; 62
    timer_counter++; // Increment timer counter every second
    38a8:	80 91 76 03 	lds	r24, 0x0376
    38ac:	90 91 77 03 	lds	r25, 0x0377
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	90 93 77 03 	sts	0x0377, r25
    38b6:	80 93 76 03 	sts	0x0376, r24
}
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	08 95       	ret

000038c0 <TrafficLightInit>:

/* Traffic Light Initialization */
void TrafficLightInit(void)
{
    38c0:	df 93       	push	r29
    38c2:	cf 93       	push	r28
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62
    /* System initialization */
    PORT_voidInit();
    38c8:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <PORT_voidInit>
    CLCD_voidInit();
    38cc:	0e 94 17 1a 	call	0x342e	; 0x342e <CLCD_voidInit>
    GIE_Enable();
    38d0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GIE_Enable>
    TIMER1_voidInit();
    38d4:	0e 94 8f 0c 	call	0x191e	; 0x191e <TIMER1_voidInit>
    TIMER1_voidSetChannelACompMatch(31250); // Configure Timer1 for 1-second intervals
    38d8:	82 e1       	ldi	r24, 0x12	; 18
    38da:	9a e7       	ldi	r25, 0x7A	; 122
    38dc:	0e 94 b6 0c 	call	0x196c	; 0x196c <TIMER1_voidSetChannelACompMatch>
    TIMER1_CTCASetCallBck(&TimerISR);
    38e0:	80 e5       	ldi	r24, 0x50	; 80
    38e2:	9c e1       	ldi	r25, 0x1C	; 28
    38e4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <TIMER1_CTCASetCallBck>

    /* Stack initialization */
    Stack_Creation(&TrafficStack);
    38e8:	8f e7       	ldi	r24, 0x7F	; 127
    38ea:	93 e0       	ldi	r25, 0x03	; 3
    38ec:	0e 94 6a 07 	call	0xed4	; 0xed4 <Stack_Creation>
    Stack_Push(&TrafficStack, HandleGreenState); // Start with the green state
    38f0:	8f e7       	ldi	r24, 0x7F	; 127
    38f2:	93 e0       	ldi	r25, 0x03	; 3
    38f4:	23 e1       	ldi	r18, 0x13	; 19
    38f6:	3c e1       	ldi	r19, 0x1C	; 28
    38f8:	b9 01       	movw	r22, r18
    38fa:	0e 94 8a 07 	call	0xf14	; 0xf14 <Stack_Push>
}
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	08 95       	ret

00003904 <Traffic_Handler>:

/* Traffic Light State Handler */
void Traffic_Handler(void)
{
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
    if (timer_counter == GREEN_DURATION && last_handled_time != GREEN_DURATION)
    390c:	80 91 76 03 	lds	r24, 0x0376
    3910:	90 91 77 03 	lds	r25, 0x0377
    3914:	85 30       	cpi	r24, 0x05	; 5
    3916:	91 05       	cpc	r25, r1
    3918:	a9 f4       	brne	.+42     	; 0x3944 <Traffic_Handler+0x40>
    391a:	80 91 93 01 	lds	r24, 0x0193
    391e:	90 91 94 01 	lds	r25, 0x0194
    3922:	85 30       	cpi	r24, 0x05	; 5
    3924:	91 05       	cpc	r25, r1
    3926:	71 f0       	breq	.+28     	; 0x3944 <Traffic_Handler+0x40>
    {
        Stack_Push(&TrafficStack, HandleyellowState);
    3928:	8f e7       	ldi	r24, 0x7F	; 127
    392a:	93 e0       	ldi	r25, 0x03	; 3
    392c:	2a e3       	ldi	r18, 0x3A	; 58
    392e:	3c e1       	ldi	r19, 0x1C	; 28
    3930:	b9 01       	movw	r22, r18
    3932:	0e 94 8a 07 	call	0xf14	; 0xf14 <Stack_Push>
        last_handled_time = GREEN_DURATION; // Mark the transition as handled
    3936:	85 e0       	ldi	r24, 0x05	; 5
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	90 93 94 01 	sts	0x0194, r25
    393e:	80 93 93 01 	sts	0x0193, r24
    3942:	45 c0       	rjmp	.+138    	; 0x39ce <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION)
    3944:	80 91 76 03 	lds	r24, 0x0376
    3948:	90 91 77 03 	lds	r25, 0x0377
    394c:	8a 30       	cpi	r24, 0x0A	; 10
    394e:	91 05       	cpc	r25, r1
    3950:	a9 f4       	brne	.+42     	; 0x397c <Traffic_Handler+0x78>
    3952:	80 91 93 01 	lds	r24, 0x0193
    3956:	90 91 94 01 	lds	r25, 0x0194
    395a:	8a 30       	cpi	r24, 0x0A	; 10
    395c:	91 05       	cpc	r25, r1
    395e:	71 f0       	breq	.+28     	; 0x397c <Traffic_Handler+0x78>
    {
        Stack_Push(&TrafficStack, HandleRedState);
    3960:	8f e7       	ldi	r24, 0x7F	; 127
    3962:	93 e0       	ldi	r25, 0x03	; 3
    3964:	24 e2       	ldi	r18, 0x24	; 36
    3966:	3c e1       	ldi	r19, 0x1C	; 28
    3968:	b9 01       	movw	r22, r18
    396a:	0e 94 8a 07 	call	0xf14	; 0xf14 <Stack_Push>
        last_handled_time = GREEN_DURATION + YELLOW_DURATION; // Mark the transition as handled
    396e:	8a e0       	ldi	r24, 0x0A	; 10
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	90 93 94 01 	sts	0x0194, r25
    3976:	80 93 93 01 	sts	0x0193, r24
    397a:	29 c0       	rjmp	.+82     	; 0x39ce <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION + RED_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION + RED_DURATION)
    397c:	80 91 76 03 	lds	r24, 0x0376
    3980:	90 91 77 03 	lds	r25, 0x0377
    3984:	8f 30       	cpi	r24, 0x0F	; 15
    3986:	91 05       	cpc	r25, r1
    3988:	11 f5       	brne	.+68     	; 0x39ce <Traffic_Handler+0xca>
    398a:	80 91 93 01 	lds	r24, 0x0193
    398e:	90 91 94 01 	lds	r25, 0x0194
    3992:	8f 30       	cpi	r24, 0x0F	; 15
    3994:	91 05       	cpc	r25, r1
    3996:	d9 f0       	breq	.+54     	; 0x39ce <Traffic_Handler+0xca>
    {
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove red state
    3998:	8f e7       	ldi	r24, 0x7F	; 127
    399a:	93 e0       	ldi	r25, 0x03	; 3
    399c:	2d e7       	ldi	r18, 0x7D	; 125
    399e:	33 e0       	ldi	r19, 0x03	; 3
    39a0:	b9 01       	movw	r22, r18
    39a2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Stack_Pop>
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove yellow state
    39a6:	8f e7       	ldi	r24, 0x7F	; 127
    39a8:	93 e0       	ldi	r25, 0x03	; 3
    39aa:	2d e7       	ldi	r18, 0x7D	; 125
    39ac:	33 e0       	ldi	r19, 0x03	; 3
    39ae:	b9 01       	movw	r22, r18
    39b0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Stack_Pop>
        timer_counter = 0; // Reset timer
    39b4:	10 92 77 03 	sts	0x0377, r1
    39b8:	10 92 76 03 	sts	0x0376, r1
        last_handled_time = -1; // Reset last handled time
    39bc:	8f ef       	ldi	r24, 0xFF	; 255
    39be:	9f ef       	ldi	r25, 0xFF	; 255
    39c0:	90 93 94 01 	sts	0x0194, r25
    39c4:	80 93 93 01 	sts	0x0193, r24
        CLCD_voidSendCommand(1); // Clear display
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <CLCD_voidSendCommand>
    }
}
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	08 95       	ret

000039d4 <TrafficLightMainFunction>:

/* Main Traffic Light Control Function */
void TrafficLightMainFunction(void)
{
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    Local_Variable = TrafficStack.top->entry; // Get the current state function
    39dc:	e0 91 7f 03 	lds	r30, 0x037F
    39e0:	f0 91 80 03 	lds	r31, 0x0380
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	90 93 7e 03 	sts	0x037E, r25
    39ec:	80 93 7d 03 	sts	0x037D, r24
    Local_Variable(); // Execute the state function
    39f0:	e0 91 7d 03 	lds	r30, 0x037D
    39f4:	f0 91 7e 03 	lds	r31, 0x037E
    39f8:	09 95       	icall

    Traffic_Handler(); // Handle state transitions
    39fa:	0e 94 82 1c 	call	0x3904	; 0x3904 <Traffic_Handler>

    /* Display timer and stack size */
    CLCD_voidGoToXY(0, 0);
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(timer_counter);
    3a06:	80 91 76 03 	lds	r24, 0x0376
    3a0a:	90 91 77 03 	lds	r25, 0x0377
    3a0e:	aa 27       	eor	r26, r26
    3a10:	97 fd       	sbrc	r25, 7
    3a12:	a0 95       	com	r26
    3a14:	ba 2f       	mov	r27, r26
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 98 1a 	call	0x3530	; 0x3530 <CLCD_voidWriteNumber>
    CLCD_voidGoToXY(1, 0);
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	60 e0       	ldi	r22, 0x00	; 0
    3a2e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(TrafficStack.Size);
    3a32:	80 91 81 03 	lds	r24, 0x0381
    3a36:	90 91 82 03 	lds	r25, 0x0382
    3a3a:	a0 91 83 03 	lds	r26, 0x0383
    3a3e:	b0 91 84 03 	lds	r27, 0x0384
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	bc 01       	movw	r22, r24
    3a50:	cd 01       	movw	r24, r26
    3a52:	0e 94 98 1a 	call	0x3530	; 0x3530 <CLCD_voidWriteNumber>
}
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	08 95       	ret

00003a5c <Fixed_FromFloat>:
#include "../inc/FixedPoint_interface.h"

fixed16_t static Fixed_FromFloat(float value)
{
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <Fixed_FromFloat+0x6>
    3a62:	00 d0       	rcall	.+0      	; 0x3a64 <Fixed_FromFloat+0x8>
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	69 83       	std	Y+1, r22	; 0x01
    3a6a:	7a 83       	std	Y+2, r23	; 0x02
    3a6c:	8b 83       	std	Y+3, r24	; 0x03
    3a6e:	9c 83       	std	Y+4, r25	; 0x04
	return FLOAT_TO_FIXP(value);
    3a70:	69 81       	ldd	r22, Y+1	; 0x01
    3a72:	7a 81       	ldd	r23, Y+2	; 0x02
    3a74:	8b 81       	ldd	r24, Y+3	; 0x03
    3a76:	9c 81       	ldd	r25, Y+4	; 0x04
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	53 e4       	ldi	r21, 0x43	; 67
    3a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	5f e3       	ldi	r21, 0x3F	; 63
    3a94:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
}
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <Fixed_FromInt>:
fixed16_t static Fixed_FromInt(uint8 integer)
{
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	0f 92       	push	r0
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	89 83       	std	Y+1, r24	; 0x01
	 return INT_TO_FIXP(integer);
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	88 2f       	mov	r24, r24
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	98 2f       	mov	r25, r24
    3aca:	88 27       	eor	r24, r24
}
    3acc:	0f 90       	pop	r0
    3ace:	cf 91       	pop	r28
    3ad0:	df 91       	pop	r29
    3ad2:	08 95       	ret

00003ad4 <Fixed_ToInt>:

uint32 static Fixed_ToInt(fixed16_t fixed)
{
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	00 d0       	rcall	.+0      	; 0x3ada <Fixed_ToInt+0x6>
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	9a 83       	std	Y+2, r25	; 0x02
    3ae0:	89 83       	std	Y+1, r24	; 0x01
	return (fixed>>FixedPoint_SHIFT);
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae6:	89 2f       	mov	r24, r25
    3ae8:	99 27       	eor	r25, r25
    3aea:	cc 01       	movw	r24, r24
    3aec:	a0 e0       	ldi	r26, 0x00	; 0
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
}
    3af0:	bc 01       	movw	r22, r24
    3af2:	cd 01       	movw	r24, r26
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <Fixed_ToFloat>:
float static Fixed_ToFloat(fixed16_t fixed)
{
    3afe:	ef 92       	push	r14
    3b00:	ff 92       	push	r15
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	df 93       	push	r29
    3b08:	cf 93       	push	r28
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	2c 97       	sbiw	r28, 0x0c	; 12
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	9c 87       	std	Y+12, r25	; 0x0c
    3b1c:	8b 87       	std	Y+11, r24	; 0x0b
	float Ret_Value=0;
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	a0 e0       	ldi	r26, 0x00	; 0
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	8f 83       	std	Y+7, r24	; 0x07
    3b28:	98 87       	std	Y+8, r25	; 0x08
    3b2a:	a9 87       	std	Y+9, r26	; 0x09
    3b2c:	ba 87       	std	Y+10, r27	; 0x0a
	uint32 Fraction=0;
    3b2e:	1b 82       	std	Y+3, r1	; 0x03
    3b30:	1c 82       	std	Y+4, r1	; 0x04
    3b32:	1d 82       	std	Y+5, r1	; 0x05
    3b34:	1e 82       	std	Y+6, r1	; 0x06
	uint16 Local_Variable=(fixed>>FixedPoint_SHIFT);
    3b36:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b38:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b3a:	89 2f       	mov	r24, r25
    3b3c:	99 27       	eor	r25, r25
    3b3e:	9a 83       	std	Y+2, r25	; 0x02
    3b40:	89 83       	std	Y+1, r24	; 0x01
	Fraction=(((fixed & 0x0000ffff)*100/(FixedPoint_SCALE)));
    3b42:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b44:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b46:	84 e6       	ldi	r24, 0x64	; 100
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	ac 01       	movw	r20, r24
    3b4c:	24 9f       	mul	r18, r20
    3b4e:	c0 01       	movw	r24, r0
    3b50:	25 9f       	mul	r18, r21
    3b52:	90 0d       	add	r25, r0
    3b54:	34 9f       	mul	r19, r20
    3b56:	90 0d       	add	r25, r0
    3b58:	11 24       	eor	r1, r1
    3b5a:	89 2f       	mov	r24, r25
    3b5c:	99 27       	eor	r25, r25
    3b5e:	cc 01       	movw	r24, r24
    3b60:	a0 e0       	ldi	r26, 0x00	; 0
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	8b 83       	std	Y+3, r24	; 0x03
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	ad 83       	std	Y+5, r26	; 0x05
    3b6a:	be 83       	std	Y+6, r27	; 0x06
	Ret_Value=((float)Local_Variable+((float)Fraction+1.0)/100.0);
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b70:	cc 01       	movw	r24, r24
    3b72:	a0 e0       	ldi	r26, 0x00	; 0
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	bc 01       	movw	r22, r24
    3b78:	cd 01       	movw	r24, r26
    3b7a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3b7e:	7b 01       	movw	r14, r22
    3b80:	8c 01       	movw	r16, r24
    3b82:	6b 81       	ldd	r22, Y+3	; 0x03
    3b84:	7c 81       	ldd	r23, Y+4	; 0x04
    3b86:	8d 81       	ldd	r24, Y+5	; 0x05
    3b88:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	bc 01       	movw	r22, r24
    3b94:	cd 01       	movw	r24, r26
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e8       	ldi	r20, 0x80	; 128
    3b9c:	5f e3       	ldi	r21, 0x3F	; 63
    3b9e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	48 ec       	ldi	r20, 0xC8	; 200
    3bb0:	52 e4       	ldi	r21, 0x42	; 66
    3bb2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9c 01       	movw	r18, r24
    3bbc:	ad 01       	movw	r20, r26
    3bbe:	c8 01       	movw	r24, r16
    3bc0:	b7 01       	movw	r22, r14
    3bc2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	8f 83       	std	Y+7, r24	; 0x07
    3bcc:	98 87       	std	Y+8, r25	; 0x08
    3bce:	a9 87       	std	Y+9, r26	; 0x09
    3bd0:	ba 87       	std	Y+10, r27	; 0x0a
	return (Ret_Value);
    3bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    3bd4:	98 85       	ldd	r25, Y+8	; 0x08
    3bd6:	a9 85       	ldd	r26, Y+9	; 0x09
    3bd8:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	2c 96       	adiw	r28, 0x0c	; 12
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	08 95       	ret

00003bf8 <Fixed_Add>:


fixed16_t Fixed_Add(float a, float b)
{
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	2c 97       	sbiw	r28, 0x0c	; 12
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	6d 83       	std	Y+5, r22	; 0x05
    3c0e:	7e 83       	std	Y+6, r23	; 0x06
    3c10:	8f 83       	std	Y+7, r24	; 0x07
    3c12:	98 87       	std	Y+8, r25	; 0x08
    3c14:	29 87       	std	Y+9, r18	; 0x09
    3c16:	3a 87       	std	Y+10, r19	; 0x0a
    3c18:	4b 87       	std	Y+11, r20	; 0x0b
    3c1a:	5c 87       	std	Y+12, r21	; 0x0c
	fixed16_t Val1=0;
    3c1c:	1c 82       	std	Y+4, r1	; 0x04
    3c1e:	1b 82       	std	Y+3, r1	; 0x03
	fixed16_t Val2=0;
    3c20:	1a 82       	std	Y+2, r1	; 0x02
    3c22:	19 82       	std	Y+1, r1	; 0x01
	Val1=Fixed_FromFloat(a);
    3c24:	8d 81       	ldd	r24, Y+5	; 0x05
    3c26:	9e 81       	ldd	r25, Y+6	; 0x06
    3c28:	af 81       	ldd	r26, Y+7	; 0x07
    3c2a:	b8 85       	ldd	r27, Y+8	; 0x08
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <Fixed_FromFloat>
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	8b 83       	std	Y+3, r24	; 0x03
	Val2=Fixed_FromFloat(b);
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3c3e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <Fixed_FromFloat>
    3c48:	9a 83       	std	Y+2, r25	; 0x02
    3c4a:	89 83       	std	Y+1, r24	; 0x01

	return (Val1+Val2);
    3c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    3c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	9a 81       	ldd	r25, Y+2	; 0x02
    3c54:	82 0f       	add	r24, r18
    3c56:	93 1f       	adc	r25, r19
}
    3c58:	2c 96       	adiw	r28, 0x0c	; 12
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	08 95       	ret

00003c6a <Fixed_Sub>:

fixed16_t Fixed_Sub(float a, float b)
{
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	2c 97       	sbiw	r28, 0x0c	; 12
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	cd bf       	out	0x3d, r28	; 61
    3c7e:	6d 83       	std	Y+5, r22	; 0x05
    3c80:	7e 83       	std	Y+6, r23	; 0x06
    3c82:	8f 83       	std	Y+7, r24	; 0x07
    3c84:	98 87       	std	Y+8, r25	; 0x08
    3c86:	29 87       	std	Y+9, r18	; 0x09
    3c88:	3a 87       	std	Y+10, r19	; 0x0a
    3c8a:	4b 87       	std	Y+11, r20	; 0x0b
    3c8c:	5c 87       	std	Y+12, r21	; 0x0c
	fixed16_t Val1=0;
    3c8e:	1c 82       	std	Y+4, r1	; 0x04
    3c90:	1b 82       	std	Y+3, r1	; 0x03
	fixed16_t Val2=0;
    3c92:	1a 82       	std	Y+2, r1	; 0x02
    3c94:	19 82       	std	Y+1, r1	; 0x01
	Val1=Fixed_FromFloat(a);
    3c96:	8d 81       	ldd	r24, Y+5	; 0x05
    3c98:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9a:	af 81       	ldd	r26, Y+7	; 0x07
    3c9c:	b8 85       	ldd	r27, Y+8	; 0x08
    3c9e:	bc 01       	movw	r22, r24
    3ca0:	cd 01       	movw	r24, r26
    3ca2:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <Fixed_FromFloat>
    3ca6:	9c 83       	std	Y+4, r25	; 0x04
    3ca8:	8b 83       	std	Y+3, r24	; 0x03
	Val2=Fixed_FromFloat(b);
    3caa:	89 85       	ldd	r24, Y+9	; 0x09
    3cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cae:	ab 85       	ldd	r26, Y+11	; 0x0b
    3cb0:	bc 85       	ldd	r27, Y+12	; 0x0c
    3cb2:	bc 01       	movw	r22, r24
    3cb4:	cd 01       	movw	r24, r26
    3cb6:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <Fixed_FromFloat>
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01

	return (Val1-Val2);
    3cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    3cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc6:	a9 01       	movw	r20, r18
    3cc8:	48 1b       	sub	r20, r24
    3cca:	59 0b       	sbc	r21, r25
    3ccc:	ca 01       	movw	r24, r20


}
    3cce:	2c 96       	adiw	r28, 0x0c	; 12
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	f8 94       	cli
    3cd4:	de bf       	out	0x3e, r29	; 62
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	cd bf       	out	0x3d, r28	; 61
    3cda:	cf 91       	pop	r28
    3cdc:	df 91       	pop	r29
    3cde:	08 95       	ret

00003ce0 <Fixed_Mul>:

fixed16_t Fixed_Mul(float a, float b)
{
    3ce0:	ef 92       	push	r14
    3ce2:	ff 92       	push	r15
    3ce4:	0f 93       	push	r16
    3ce6:	1f 93       	push	r17
    3ce8:	df 93       	push	r29
    3cea:	cf 93       	push	r28
    3cec:	cd b7       	in	r28, 0x3d	; 61
    3cee:	de b7       	in	r29, 0x3e	; 62
    3cf0:	60 97       	sbiw	r28, 0x10	; 16
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
    3cfc:	69 87       	std	Y+9, r22	; 0x09
    3cfe:	7a 87       	std	Y+10, r23	; 0x0a
    3d00:	8b 87       	std	Y+11, r24	; 0x0b
    3d02:	9c 87       	std	Y+12, r25	; 0x0c
    3d04:	2d 87       	std	Y+13, r18	; 0x0d
    3d06:	3e 87       	std	Y+14, r19	; 0x0e
    3d08:	4f 87       	std	Y+15, r20	; 0x0f
    3d0a:	58 8b       	std	Y+16, r21	; 0x10
	fixed16_t Val1=0;
    3d0c:	18 86       	std	Y+8, r1	; 0x08
    3d0e:	1f 82       	std	Y+7, r1	; 0x07
	fixed16_t Val2=0;
    3d10:	1e 82       	std	Y+6, r1	; 0x06
    3d12:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Result=0;
    3d14:	19 82       	std	Y+1, r1	; 0x01
    3d16:	1a 82       	std	Y+2, r1	; 0x02
    3d18:	1b 82       	std	Y+3, r1	; 0x03
    3d1a:	1c 82       	std	Y+4, r1	; 0x04
	Val1=Fixed_FromFloat(a);
    3d1c:	89 85       	ldd	r24, Y+9	; 0x09
    3d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d20:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d22:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <Fixed_FromFloat>
    3d2c:	98 87       	std	Y+8, r25	; 0x08
    3d2e:	8f 83       	std	Y+7, r24	; 0x07
	Val2=Fixed_FromFloat(b);
    3d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d34:	af 85       	ldd	r26, Y+15	; 0x0f
    3d36:	b8 89       	ldd	r27, Y+16	; 0x10
    3d38:	bc 01       	movw	r22, r24
    3d3a:	cd 01       	movw	r24, r26
    3d3c:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <Fixed_FromFloat>
    3d40:	9e 83       	std	Y+6, r25	; 0x06
    3d42:	8d 83       	std	Y+5, r24	; 0x05
	Result= MULT_FIXED(Val1,Val2);
    3d44:	8f 81       	ldd	r24, Y+7	; 0x07
    3d46:	98 85       	ldd	r25, Y+8	; 0x08
    3d48:	7c 01       	movw	r14, r24
    3d4a:	00 e0       	ldi	r16, 0x00	; 0
    3d4c:	10 e0       	ldi	r17, 0x00	; 0
    3d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d50:	9e 81       	ldd	r25, Y+6	; 0x06
    3d52:	9c 01       	movw	r18, r24
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	50 e0       	ldi	r21, 0x00	; 0
    3d58:	c8 01       	movw	r24, r16
    3d5a:	b7 01       	movw	r22, r14
    3d5c:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <__mulsi3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	89 2f       	mov	r24, r25
    3d66:	9a 2f       	mov	r25, r26
    3d68:	ab 2f       	mov	r26, r27
    3d6a:	bb 27       	eor	r27, r27
    3d6c:	cc 01       	movw	r24, r24
    3d6e:	a0 e0       	ldi	r26, 0x00	; 0
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	89 83       	std	Y+1, r24	; 0x01
    3d74:	9a 83       	std	Y+2, r25	; 0x02
    3d76:	ab 83       	std	Y+3, r26	; 0x03
    3d78:	bc 83       	std	Y+4, r27	; 0x04
return (Result);
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d7e:	60 96       	adiw	r28, 0x10	; 16
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	ff 90       	pop	r15
    3d94:	ef 90       	pop	r14
    3d96:	08 95       	ret

00003d98 <Fixed_Div>:

fixed16_t Fixed_Div(float a, float b)
{
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	2a 97       	sbiw	r28, 0x0a	; 10
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	69 83       	std	Y+1, r22	; 0x01
    3dae:	7a 83       	std	Y+2, r23	; 0x02
    3db0:	8b 83       	std	Y+3, r24	; 0x03
    3db2:	9c 83       	std	Y+4, r25	; 0x04
    3db4:	2d 83       	std	Y+5, r18	; 0x05
    3db6:	3e 83       	std	Y+6, r19	; 0x06
    3db8:	4f 83       	std	Y+7, r20	; 0x07
    3dba:	58 87       	std	Y+8, r21	; 0x08


}
    3dbc:	2a 96       	adiw	r28, 0x0a	; 10
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	08 95       	ret

00003dce <ExtEventBased>:

Queue My_Queue;
Queue_Entry Data=0;

void ExtEventBased(void)
{
    3dce:	df 93       	push	r29
    3dd0:	cf 93       	push	r28
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
	if(!Queue_Full(&My_Queue))
    3dd6:	85 e8       	ldi	r24, 0x85	; 133
    3dd8:	93 e0       	ldi	r25, 0x03	; 3
    3dda:	0e 94 0f 09 	call	0x121e	; 0x121e <Queue_Full>
    3dde:	88 23       	and	r24, r24
    3de0:	41 f4       	brne	.+16     	; 0x3df2 <ExtEventBased+0x24>
	{
		Queue_Append(&My_Queue,EXT_EVENT);
    3de2:	85 e8       	ldi	r24, 0x85	; 133
    3de4:	93 e0       	ldi	r25, 0x03	; 3
    3de6:	4d e0       	ldi	r20, 0x0D	; 13
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	70 e0       	ldi	r23, 0x00	; 0
    3dee:	0e 94 26 09 	call	0x124c	; 0x124c <Queue_Append>
	{

	 // do nothing
	}

}
    3df2:	cf 91       	pop	r28
    3df4:	df 91       	pop	r29
    3df6:	08 95       	ret

00003df8 <TimerEventBased>:
void TimerEventBased(void)
{
    3df8:	df 93       	push	r29
    3dfa:	cf 93       	push	r28
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
	static uint8 Loc_Counter=0;
	Loc_Counter++;
    3e00:	80 91 7c 03 	lds	r24, 0x037C
    3e04:	8f 5f       	subi	r24, 0xFF	; 255
    3e06:	80 93 7c 03 	sts	0x037C, r24
	if(Loc_Counter==120) //500 ms
    3e0a:	80 91 7c 03 	lds	r24, 0x037C
    3e0e:	88 37       	cpi	r24, 0x78	; 120
    3e10:	81 f4       	brne	.+32     	; 0x3e32 <TimerEventBased+0x3a>
	{
		if(!Queue_Full(&My_Queue))
    3e12:	85 e8       	ldi	r24, 0x85	; 133
    3e14:	93 e0       	ldi	r25, 0x03	; 3
    3e16:	0e 94 0f 09 	call	0x121e	; 0x121e <Queue_Full>
    3e1a:	88 23       	and	r24, r24
    3e1c:	41 f4       	brne	.+16     	; 0x3e2e <TimerEventBased+0x36>
		{
		Queue_Append(&My_Queue,TIMER_EVENT);
    3e1e:	85 e8       	ldi	r24, 0x85	; 133
    3e20:	93 e0       	ldi	r25, 0x03	; 3
    3e22:	45 e0       	ldi	r20, 0x05	; 5
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	70 e0       	ldi	r23, 0x00	; 0
    3e2a:	0e 94 26 09 	call	0x124c	; 0x124c <Queue_Append>
		else
		{
			// do nothing

		}
		Loc_Counter=0;
    3e2e:	10 92 7c 03 	sts	0x037C, r1
	}

}
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <EB_voidInit>:

void EB_voidInit(void)
{
    3e38:	df 93       	push	r29
    3e3a:	cf 93       	push	r28
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
	GIE_Enable();
    3e40:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GIE_Enable>
	PORT_voidInit();
    3e44:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <PORT_voidInit>
	//timer0 will fire the interrupt every 100 ms
	TIMER0_voiSetCompareMatchValue(255);
    3e48:	8f ef       	ldi	r24, 0xFF	; 255
    3e4a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <TIMER0_voiSetCompareMatchValue>
	TIMER0_voidInit();
    3e4e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <TIMER0_voidInit>
	Timer0_Timer0CTCCallBackFunc(&TimerEventBased);
    3e52:	8c ef       	ldi	r24, 0xFC	; 252
    3e54:	9e e1       	ldi	r25, 0x1E	; 30
    3e56:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Timer0_Timer0CTCCallBackFunc>
	//ext will fire interrupt on change
	EXTI_voidInt0Init();
    3e5a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <EXTI_voidInt0Init>
	EXTI_uint8Int0SetCallBack(&ExtEventBased);
    3e5e:	87 ee       	ldi	r24, 0xE7	; 231
    3e60:	9e e1       	ldi	r25, 0x1E	; 30
    3e62:	0e 94 51 11 	call	0x22a2	; 0x22a2 <EXTI_uint8Int0SetCallBack>
	SSD1306_Init();
    3e66:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <SSD1306_Init>
	Queue_Creation(&My_Queue);
    3e6a:	85 e8       	ldi	r24, 0x85	; 133
    3e6c:	93 e0       	ldi	r25, 0x03	; 3
    3e6e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Queue_Creation>


}
    3e72:	cf 91       	pop	r28
    3e74:	df 91       	pop	r29
    3e76:	08 95       	ret

00003e78 <EB_VoidRunnable>:
void EB_VoidRunnable(void)
{
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <EB_VoidRunnable+0x6>
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <EB_VoidRunnable+0x8>
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
	// TraverseQueue(&My_Queue,queue_display);
	 SSD1306_DisplayNumber(My_Queue.Queue_Size,0, 0);
    3e84:	80 91 87 03 	lds	r24, 0x0387
    3e88:	88 2f       	mov	r24, r24
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	40 e0       	ldi	r20, 0x00	; 0
    3e90:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <SSD1306_DisplayNumber>

	if(Queue_empty==Queue_Empty(&My_Queue))
    3e94:	85 e8       	ldi	r24, 0x85	; 133
    3e96:	93 e0       	ldi	r25, 0x03	; 3
    3e98:	0e 94 f7 08 	call	0x11ee	; 0x11ee <Queue_Empty>
    3e9c:	88 23       	and	r24, r24
    3e9e:	31 f4       	brne	.+12     	; 0x3eac <EB_VoidRunnable+0x34>
	{
		 SSD1306_DisplayChar('c',100,100);
    3ea0:	83 e6       	ldi	r24, 0x63	; 99
    3ea2:	64 e6       	ldi	r22, 0x64	; 100
    3ea4:	44 e6       	ldi	r20, 0x64	; 100
    3ea6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <SSD1306_DisplayChar>
    3eaa:	30 c0       	rjmp	.+96     	; 0x3f0c <EB_VoidRunnable+0x94>

	}
	else
	{
		Queue_Server(&My_Queue,&Data);
    3eac:	85 e8       	ldi	r24, 0x85	; 133
    3eae:	93 e0       	ldi	r25, 0x03	; 3
    3eb0:	28 e7       	ldi	r18, 0x78	; 120
    3eb2:	33 e0       	ldi	r19, 0x03	; 3
    3eb4:	b9 01       	movw	r22, r18
    3eb6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <Queue_Server>
			switch(Data)
    3eba:	80 91 78 03 	lds	r24, 0x0378
    3ebe:	90 91 79 03 	lds	r25, 0x0379
    3ec2:	a0 91 7a 03 	lds	r26, 0x037A
    3ec6:	b0 91 7b 03 	lds	r27, 0x037B
    3eca:	89 83       	std	Y+1, r24	; 0x01
    3ecc:	9a 83       	std	Y+2, r25	; 0x02
    3ece:	ab 83       	std	Y+3, r26	; 0x03
    3ed0:	bc 83       	std	Y+4, r27	; 0x04
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ed8:	bc 81       	ldd	r27, Y+4	; 0x04
    3eda:	85 30       	cpi	r24, 0x05	; 5
    3edc:	91 05       	cpc	r25, r1
    3ede:	a1 05       	cpc	r26, r1
    3ee0:	b1 05       	cpc	r27, r1
    3ee2:	79 f0       	breq	.+30     	; 0x3f02 <EB_VoidRunnable+0x8a>
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee8:	ab 81       	ldd	r26, Y+3	; 0x03
    3eea:	bc 81       	ldd	r27, Y+4	; 0x04
    3eec:	8d 30       	cpi	r24, 0x0D	; 13
    3eee:	91 05       	cpc	r25, r1
    3ef0:	a1 05       	cpc	r26, r1
    3ef2:	b1 05       	cpc	r27, r1
    3ef4:	59 f4       	brne	.+22     	; 0x3f0c <EB_VoidRunnable+0x94>
			{
				case EXT_EVENT :
				{
					 SSD1306_DisplayChar('a',100,100);
    3ef6:	81 e6       	ldi	r24, 0x61	; 97
    3ef8:	64 e6       	ldi	r22, 0x64	; 100
    3efa:	44 e6       	ldi	r20, 0x64	; 100
    3efc:	0e 94 71 18 	call	0x30e2	; 0x30e2 <SSD1306_DisplayChar>
    3f00:	05 c0       	rjmp	.+10     	; 0x3f0c <EB_VoidRunnable+0x94>
					 break;
				}
				case TIMER_EVENT :
				{
					 SSD1306_DisplayChar('b',100,100);
    3f02:	82 e6       	ldi	r24, 0x62	; 98
    3f04:	64 e6       	ldi	r22, 0x64	; 100
    3f06:	44 e6       	ldi	r20, 0x64	; 100
    3f08:	0e 94 71 18 	call	0x30e2	; 0x30e2 <SSD1306_DisplayChar>


	}


}
    3f0c:	0f 90       	pop	r0
    3f0e:	0f 90       	pop	r0
    3f10:	0f 90       	pop	r0
    3f12:	0f 90       	pop	r0
    3f14:	cf 91       	pop	r28
    3f16:	df 91       	pop	r29
    3f18:	08 95       	ret

00003f1a <main>:
#include "Event_Based/inc/Event_Based.h"
int main(void)
{
    3f1a:	df 93       	push	r29
    3f1c:	cf 93       	push	r28
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
     EB_voidInit();
    3f22:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <EB_voidInit>

      while (1)
      {
    	  EB_VoidRunnable();
    3f26:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <EB_VoidRunnable>
    3f2a:	fd cf       	rjmp	.-6      	; 0x3f26 <main+0xc>

00003f2c <__mulsi3>:
    3f2c:	62 9f       	mul	r22, r18
    3f2e:	d0 01       	movw	r26, r0
    3f30:	73 9f       	mul	r23, r19
    3f32:	f0 01       	movw	r30, r0
    3f34:	82 9f       	mul	r24, r18
    3f36:	e0 0d       	add	r30, r0
    3f38:	f1 1d       	adc	r31, r1
    3f3a:	64 9f       	mul	r22, r20
    3f3c:	e0 0d       	add	r30, r0
    3f3e:	f1 1d       	adc	r31, r1
    3f40:	92 9f       	mul	r25, r18
    3f42:	f0 0d       	add	r31, r0
    3f44:	83 9f       	mul	r24, r19
    3f46:	f0 0d       	add	r31, r0
    3f48:	74 9f       	mul	r23, r20
    3f4a:	f0 0d       	add	r31, r0
    3f4c:	65 9f       	mul	r22, r21
    3f4e:	f0 0d       	add	r31, r0
    3f50:	99 27       	eor	r25, r25
    3f52:	72 9f       	mul	r23, r18
    3f54:	b0 0d       	add	r27, r0
    3f56:	e1 1d       	adc	r30, r1
    3f58:	f9 1f       	adc	r31, r25
    3f5a:	63 9f       	mul	r22, r19
    3f5c:	b0 0d       	add	r27, r0
    3f5e:	e1 1d       	adc	r30, r1
    3f60:	f9 1f       	adc	r31, r25
    3f62:	bd 01       	movw	r22, r26
    3f64:	cf 01       	movw	r24, r30
    3f66:	11 24       	eor	r1, r1
    3f68:	08 95       	ret

00003f6a <__udivmodhi4>:
    3f6a:	aa 1b       	sub	r26, r26
    3f6c:	bb 1b       	sub	r27, r27
    3f6e:	51 e1       	ldi	r21, 0x11	; 17
    3f70:	07 c0       	rjmp	.+14     	; 0x3f80 <__udivmodhi4_ep>

00003f72 <__udivmodhi4_loop>:
    3f72:	aa 1f       	adc	r26, r26
    3f74:	bb 1f       	adc	r27, r27
    3f76:	a6 17       	cp	r26, r22
    3f78:	b7 07       	cpc	r27, r23
    3f7a:	10 f0       	brcs	.+4      	; 0x3f80 <__udivmodhi4_ep>
    3f7c:	a6 1b       	sub	r26, r22
    3f7e:	b7 0b       	sbc	r27, r23

00003f80 <__udivmodhi4_ep>:
    3f80:	88 1f       	adc	r24, r24
    3f82:	99 1f       	adc	r25, r25
    3f84:	5a 95       	dec	r21
    3f86:	a9 f7       	brne	.-22     	; 0x3f72 <__udivmodhi4_loop>
    3f88:	80 95       	com	r24
    3f8a:	90 95       	com	r25
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	08 95       	ret

00003f92 <__divmodhi4>:
    3f92:	97 fb       	bst	r25, 7
    3f94:	09 2e       	mov	r0, r25
    3f96:	07 26       	eor	r0, r23
    3f98:	0a d0       	rcall	.+20     	; 0x3fae <__divmodhi4_neg1>
    3f9a:	77 fd       	sbrc	r23, 7
    3f9c:	04 d0       	rcall	.+8      	; 0x3fa6 <__divmodhi4_neg2>
    3f9e:	e5 df       	rcall	.-54     	; 0x3f6a <__udivmodhi4>
    3fa0:	06 d0       	rcall	.+12     	; 0x3fae <__divmodhi4_neg1>
    3fa2:	00 20       	and	r0, r0
    3fa4:	1a f4       	brpl	.+6      	; 0x3fac <__divmodhi4_exit>

00003fa6 <__divmodhi4_neg2>:
    3fa6:	70 95       	com	r23
    3fa8:	61 95       	neg	r22
    3faa:	7f 4f       	sbci	r23, 0xFF	; 255

00003fac <__divmodhi4_exit>:
    3fac:	08 95       	ret

00003fae <__divmodhi4_neg1>:
    3fae:	f6 f7       	brtc	.-4      	; 0x3fac <__divmodhi4_exit>
    3fb0:	90 95       	com	r25
    3fb2:	81 95       	neg	r24
    3fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb6:	08 95       	ret

00003fb8 <__divmodsi4>:
    3fb8:	97 fb       	bst	r25, 7
    3fba:	09 2e       	mov	r0, r25
    3fbc:	05 26       	eor	r0, r21
    3fbe:	0e d0       	rcall	.+28     	; 0x3fdc <__divmodsi4_neg1>
    3fc0:	57 fd       	sbrc	r21, 7
    3fc2:	04 d0       	rcall	.+8      	; 0x3fcc <__divmodsi4_neg2>
    3fc4:	14 d0       	rcall	.+40     	; 0x3fee <__udivmodsi4>
    3fc6:	0a d0       	rcall	.+20     	; 0x3fdc <__divmodsi4_neg1>
    3fc8:	00 1c       	adc	r0, r0
    3fca:	38 f4       	brcc	.+14     	; 0x3fda <__divmodsi4_exit>

00003fcc <__divmodsi4_neg2>:
    3fcc:	50 95       	com	r21
    3fce:	40 95       	com	r20
    3fd0:	30 95       	com	r19
    3fd2:	21 95       	neg	r18
    3fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    3fd8:	5f 4f       	sbci	r21, 0xFF	; 255

00003fda <__divmodsi4_exit>:
    3fda:	08 95       	ret

00003fdc <__divmodsi4_neg1>:
    3fdc:	f6 f7       	brtc	.-4      	; 0x3fda <__divmodsi4_exit>
    3fde:	90 95       	com	r25
    3fe0:	80 95       	com	r24
    3fe2:	70 95       	com	r23
    3fe4:	61 95       	neg	r22
    3fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fea:	9f 4f       	sbci	r25, 0xFF	; 255
    3fec:	08 95       	ret

00003fee <__udivmodsi4>:
    3fee:	a1 e2       	ldi	r26, 0x21	; 33
    3ff0:	1a 2e       	mov	r1, r26
    3ff2:	aa 1b       	sub	r26, r26
    3ff4:	bb 1b       	sub	r27, r27
    3ff6:	fd 01       	movw	r30, r26
    3ff8:	0d c0       	rjmp	.+26     	; 0x4014 <__udivmodsi4_ep>

00003ffa <__udivmodsi4_loop>:
    3ffa:	aa 1f       	adc	r26, r26
    3ffc:	bb 1f       	adc	r27, r27
    3ffe:	ee 1f       	adc	r30, r30
    4000:	ff 1f       	adc	r31, r31
    4002:	a2 17       	cp	r26, r18
    4004:	b3 07       	cpc	r27, r19
    4006:	e4 07       	cpc	r30, r20
    4008:	f5 07       	cpc	r31, r21
    400a:	20 f0       	brcs	.+8      	; 0x4014 <__udivmodsi4_ep>
    400c:	a2 1b       	sub	r26, r18
    400e:	b3 0b       	sbc	r27, r19
    4010:	e4 0b       	sbc	r30, r20
    4012:	f5 0b       	sbc	r31, r21

00004014 <__udivmodsi4_ep>:
    4014:	66 1f       	adc	r22, r22
    4016:	77 1f       	adc	r23, r23
    4018:	88 1f       	adc	r24, r24
    401a:	99 1f       	adc	r25, r25
    401c:	1a 94       	dec	r1
    401e:	69 f7       	brne	.-38     	; 0x3ffa <__udivmodsi4_loop>
    4020:	60 95       	com	r22
    4022:	70 95       	com	r23
    4024:	80 95       	com	r24
    4026:	90 95       	com	r25
    4028:	9b 01       	movw	r18, r22
    402a:	ac 01       	movw	r20, r24
    402c:	bd 01       	movw	r22, r26
    402e:	cf 01       	movw	r24, r30
    4030:	08 95       	ret

00004032 <__prologue_saves__>:
    4032:	2f 92       	push	r2
    4034:	3f 92       	push	r3
    4036:	4f 92       	push	r4
    4038:	5f 92       	push	r5
    403a:	6f 92       	push	r6
    403c:	7f 92       	push	r7
    403e:	8f 92       	push	r8
    4040:	9f 92       	push	r9
    4042:	af 92       	push	r10
    4044:	bf 92       	push	r11
    4046:	cf 92       	push	r12
    4048:	df 92       	push	r13
    404a:	ef 92       	push	r14
    404c:	ff 92       	push	r15
    404e:	0f 93       	push	r16
    4050:	1f 93       	push	r17
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	cd b7       	in	r28, 0x3d	; 61
    4058:	de b7       	in	r29, 0x3e	; 62
    405a:	ca 1b       	sub	r28, r26
    405c:	db 0b       	sbc	r29, r27
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	f8 94       	cli
    4062:	de bf       	out	0x3e, r29	; 62
    4064:	0f be       	out	0x3f, r0	; 63
    4066:	cd bf       	out	0x3d, r28	; 61
    4068:	09 94       	ijmp

0000406a <__epilogue_restores__>:
    406a:	2a 88       	ldd	r2, Y+18	; 0x12
    406c:	39 88       	ldd	r3, Y+17	; 0x11
    406e:	48 88       	ldd	r4, Y+16	; 0x10
    4070:	5f 84       	ldd	r5, Y+15	; 0x0f
    4072:	6e 84       	ldd	r6, Y+14	; 0x0e
    4074:	7d 84       	ldd	r7, Y+13	; 0x0d
    4076:	8c 84       	ldd	r8, Y+12	; 0x0c
    4078:	9b 84       	ldd	r9, Y+11	; 0x0b
    407a:	aa 84       	ldd	r10, Y+10	; 0x0a
    407c:	b9 84       	ldd	r11, Y+9	; 0x09
    407e:	c8 84       	ldd	r12, Y+8	; 0x08
    4080:	df 80       	ldd	r13, Y+7	; 0x07
    4082:	ee 80       	ldd	r14, Y+6	; 0x06
    4084:	fd 80       	ldd	r15, Y+5	; 0x05
    4086:	0c 81       	ldd	r16, Y+4	; 0x04
    4088:	1b 81       	ldd	r17, Y+3	; 0x03
    408a:	aa 81       	ldd	r26, Y+2	; 0x02
    408c:	b9 81       	ldd	r27, Y+1	; 0x01
    408e:	ce 0f       	add	r28, r30
    4090:	d1 1d       	adc	r29, r1
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	f8 94       	cli
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	cd bf       	out	0x3d, r28	; 61
    409c:	ed 01       	movw	r28, r26
    409e:	08 95       	ret

000040a0 <malloc>:
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	bc 01       	movw	r22, r24
    40a6:	82 30       	cpi	r24, 0x02	; 2
    40a8:	91 05       	cpc	r25, r1
    40aa:	10 f4       	brcc	.+4      	; 0x40b0 <malloc+0x10>
    40ac:	62 e0       	ldi	r22, 0x02	; 2
    40ae:	70 e0       	ldi	r23, 0x00	; 0
    40b0:	a0 91 b2 03 	lds	r26, 0x03B2
    40b4:	b0 91 b3 03 	lds	r27, 0x03B3
    40b8:	ed 01       	movw	r28, r26
    40ba:	e0 e0       	ldi	r30, 0x00	; 0
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	40 e0       	ldi	r20, 0x00	; 0
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	21 c0       	rjmp	.+66     	; 0x4106 <malloc+0x66>
    40c4:	88 81       	ld	r24, Y
    40c6:	99 81       	ldd	r25, Y+1	; 0x01
    40c8:	86 17       	cp	r24, r22
    40ca:	97 07       	cpc	r25, r23
    40cc:	69 f4       	brne	.+26     	; 0x40e8 <malloc+0x48>
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	9b 81       	ldd	r25, Y+3	; 0x03
    40d2:	30 97       	sbiw	r30, 0x00	; 0
    40d4:	19 f0       	breq	.+6      	; 0x40dc <malloc+0x3c>
    40d6:	93 83       	std	Z+3, r25	; 0x03
    40d8:	82 83       	std	Z+2, r24	; 0x02
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <malloc+0x44>
    40dc:	90 93 b3 03 	sts	0x03B3, r25
    40e0:	80 93 b2 03 	sts	0x03B2, r24
    40e4:	fe 01       	movw	r30, r28
    40e6:	34 c0       	rjmp	.+104    	; 0x4150 <malloc+0xb0>
    40e8:	68 17       	cp	r22, r24
    40ea:	79 07       	cpc	r23, r25
    40ec:	38 f4       	brcc	.+14     	; 0x40fc <malloc+0x5c>
    40ee:	41 15       	cp	r20, r1
    40f0:	51 05       	cpc	r21, r1
    40f2:	19 f0       	breq	.+6      	; 0x40fa <malloc+0x5a>
    40f4:	84 17       	cp	r24, r20
    40f6:	95 07       	cpc	r25, r21
    40f8:	08 f4       	brcc	.+2      	; 0x40fc <malloc+0x5c>
    40fa:	ac 01       	movw	r20, r24
    40fc:	fe 01       	movw	r30, r28
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	9c 01       	movw	r18, r24
    4104:	e9 01       	movw	r28, r18
    4106:	20 97       	sbiw	r28, 0x00	; 0
    4108:	e9 f6       	brne	.-70     	; 0x40c4 <malloc+0x24>
    410a:	41 15       	cp	r20, r1
    410c:	51 05       	cpc	r21, r1
    410e:	a9 f1       	breq	.+106    	; 0x417a <malloc+0xda>
    4110:	ca 01       	movw	r24, r20
    4112:	86 1b       	sub	r24, r22
    4114:	97 0b       	sbc	r25, r23
    4116:	04 97       	sbiw	r24, 0x04	; 4
    4118:	08 f4       	brcc	.+2      	; 0x411c <malloc+0x7c>
    411a:	ba 01       	movw	r22, r20
    411c:	e0 e0       	ldi	r30, 0x00	; 0
    411e:	f0 e0       	ldi	r31, 0x00	; 0
    4120:	2a c0       	rjmp	.+84     	; 0x4176 <malloc+0xd6>
    4122:	8d 91       	ld	r24, X+
    4124:	9c 91       	ld	r25, X
    4126:	11 97       	sbiw	r26, 0x01	; 1
    4128:	84 17       	cp	r24, r20
    412a:	95 07       	cpc	r25, r21
    412c:	f9 f4       	brne	.+62     	; 0x416c <malloc+0xcc>
    412e:	64 17       	cp	r22, r20
    4130:	75 07       	cpc	r23, r21
    4132:	81 f4       	brne	.+32     	; 0x4154 <malloc+0xb4>
    4134:	12 96       	adiw	r26, 0x02	; 2
    4136:	8d 91       	ld	r24, X+
    4138:	9c 91       	ld	r25, X
    413a:	13 97       	sbiw	r26, 0x03	; 3
    413c:	30 97       	sbiw	r30, 0x00	; 0
    413e:	19 f0       	breq	.+6      	; 0x4146 <malloc+0xa6>
    4140:	93 83       	std	Z+3, r25	; 0x03
    4142:	82 83       	std	Z+2, r24	; 0x02
    4144:	04 c0       	rjmp	.+8      	; 0x414e <malloc+0xae>
    4146:	90 93 b3 03 	sts	0x03B3, r25
    414a:	80 93 b2 03 	sts	0x03B2, r24
    414e:	fd 01       	movw	r30, r26
    4150:	32 96       	adiw	r30, 0x02	; 2
    4152:	4f c0       	rjmp	.+158    	; 0x41f2 <malloc+0x152>
    4154:	ca 01       	movw	r24, r20
    4156:	86 1b       	sub	r24, r22
    4158:	97 0b       	sbc	r25, r23
    415a:	fd 01       	movw	r30, r26
    415c:	e8 0f       	add	r30, r24
    415e:	f9 1f       	adc	r31, r25
    4160:	61 93       	st	Z+, r22
    4162:	71 93       	st	Z+, r23
    4164:	02 97       	sbiw	r24, 0x02	; 2
    4166:	8d 93       	st	X+, r24
    4168:	9c 93       	st	X, r25
    416a:	43 c0       	rjmp	.+134    	; 0x41f2 <malloc+0x152>
    416c:	fd 01       	movw	r30, r26
    416e:	82 81       	ldd	r24, Z+2	; 0x02
    4170:	93 81       	ldd	r25, Z+3	; 0x03
    4172:	9c 01       	movw	r18, r24
    4174:	d9 01       	movw	r26, r18
    4176:	10 97       	sbiw	r26, 0x00	; 0
    4178:	a1 f6       	brne	.-88     	; 0x4122 <malloc+0x82>
    417a:	80 91 b0 03 	lds	r24, 0x03B0
    417e:	90 91 b1 03 	lds	r25, 0x03B1
    4182:	89 2b       	or	r24, r25
    4184:	41 f4       	brne	.+16     	; 0x4196 <malloc+0xf6>
    4186:	80 91 8d 01 	lds	r24, 0x018D
    418a:	90 91 8e 01 	lds	r25, 0x018E
    418e:	90 93 b1 03 	sts	0x03B1, r25
    4192:	80 93 b0 03 	sts	0x03B0, r24
    4196:	40 91 8f 01 	lds	r20, 0x018F
    419a:	50 91 90 01 	lds	r21, 0x0190
    419e:	41 15       	cp	r20, r1
    41a0:	51 05       	cpc	r21, r1
    41a2:	41 f4       	brne	.+16     	; 0x41b4 <malloc+0x114>
    41a4:	4d b7       	in	r20, 0x3d	; 61
    41a6:	5e b7       	in	r21, 0x3e	; 62
    41a8:	80 91 8b 01 	lds	r24, 0x018B
    41ac:	90 91 8c 01 	lds	r25, 0x018C
    41b0:	48 1b       	sub	r20, r24
    41b2:	59 0b       	sbc	r21, r25
    41b4:	20 91 b0 03 	lds	r18, 0x03B0
    41b8:	30 91 b1 03 	lds	r19, 0x03B1
    41bc:	24 17       	cp	r18, r20
    41be:	35 07       	cpc	r19, r21
    41c0:	b0 f4       	brcc	.+44     	; 0x41ee <malloc+0x14e>
    41c2:	ca 01       	movw	r24, r20
    41c4:	82 1b       	sub	r24, r18
    41c6:	93 0b       	sbc	r25, r19
    41c8:	86 17       	cp	r24, r22
    41ca:	97 07       	cpc	r25, r23
    41cc:	80 f0       	brcs	.+32     	; 0x41ee <malloc+0x14e>
    41ce:	ab 01       	movw	r20, r22
    41d0:	4e 5f       	subi	r20, 0xFE	; 254
    41d2:	5f 4f       	sbci	r21, 0xFF	; 255
    41d4:	84 17       	cp	r24, r20
    41d6:	95 07       	cpc	r25, r21
    41d8:	50 f0       	brcs	.+20     	; 0x41ee <malloc+0x14e>
    41da:	42 0f       	add	r20, r18
    41dc:	53 1f       	adc	r21, r19
    41de:	50 93 b1 03 	sts	0x03B1, r21
    41e2:	40 93 b0 03 	sts	0x03B0, r20
    41e6:	f9 01       	movw	r30, r18
    41e8:	61 93       	st	Z+, r22
    41ea:	71 93       	st	Z+, r23
    41ec:	02 c0       	rjmp	.+4      	; 0x41f2 <malloc+0x152>
    41ee:	e0 e0       	ldi	r30, 0x00	; 0
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	cf 01       	movw	r24, r30
    41f4:	df 91       	pop	r29
    41f6:	cf 91       	pop	r28
    41f8:	08 95       	ret

000041fa <free>:
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	00 97       	sbiw	r24, 0x00	; 0
    4200:	09 f4       	brne	.+2      	; 0x4204 <free+0xa>
    4202:	50 c0       	rjmp	.+160    	; 0x42a4 <free+0xaa>
    4204:	ec 01       	movw	r28, r24
    4206:	22 97       	sbiw	r28, 0x02	; 2
    4208:	1b 82       	std	Y+3, r1	; 0x03
    420a:	1a 82       	std	Y+2, r1	; 0x02
    420c:	a0 91 b2 03 	lds	r26, 0x03B2
    4210:	b0 91 b3 03 	lds	r27, 0x03B3
    4214:	10 97       	sbiw	r26, 0x00	; 0
    4216:	09 f1       	breq	.+66     	; 0x425a <free+0x60>
    4218:	40 e0       	ldi	r20, 0x00	; 0
    421a:	50 e0       	ldi	r21, 0x00	; 0
    421c:	ac 17       	cp	r26, r28
    421e:	bd 07       	cpc	r27, r29
    4220:	08 f1       	brcs	.+66     	; 0x4264 <free+0x6a>
    4222:	bb 83       	std	Y+3, r27	; 0x03
    4224:	aa 83       	std	Y+2, r26	; 0x02
    4226:	fe 01       	movw	r30, r28
    4228:	21 91       	ld	r18, Z+
    422a:	31 91       	ld	r19, Z+
    422c:	e2 0f       	add	r30, r18
    422e:	f3 1f       	adc	r31, r19
    4230:	ae 17       	cp	r26, r30
    4232:	bf 07       	cpc	r27, r31
    4234:	79 f4       	brne	.+30     	; 0x4254 <free+0x5a>
    4236:	8d 91       	ld	r24, X+
    4238:	9c 91       	ld	r25, X
    423a:	11 97       	sbiw	r26, 0x01	; 1
    423c:	28 0f       	add	r18, r24
    423e:	39 1f       	adc	r19, r25
    4240:	2e 5f       	subi	r18, 0xFE	; 254
    4242:	3f 4f       	sbci	r19, 0xFF	; 255
    4244:	39 83       	std	Y+1, r19	; 0x01
    4246:	28 83       	st	Y, r18
    4248:	12 96       	adiw	r26, 0x02	; 2
    424a:	8d 91       	ld	r24, X+
    424c:	9c 91       	ld	r25, X
    424e:	13 97       	sbiw	r26, 0x03	; 3
    4250:	9b 83       	std	Y+3, r25	; 0x03
    4252:	8a 83       	std	Y+2, r24	; 0x02
    4254:	41 15       	cp	r20, r1
    4256:	51 05       	cpc	r21, r1
    4258:	71 f4       	brne	.+28     	; 0x4276 <free+0x7c>
    425a:	d0 93 b3 03 	sts	0x03B3, r29
    425e:	c0 93 b2 03 	sts	0x03B2, r28
    4262:	20 c0       	rjmp	.+64     	; 0x42a4 <free+0xaa>
    4264:	12 96       	adiw	r26, 0x02	; 2
    4266:	8d 91       	ld	r24, X+
    4268:	9c 91       	ld	r25, X
    426a:	13 97       	sbiw	r26, 0x03	; 3
    426c:	ad 01       	movw	r20, r26
    426e:	00 97       	sbiw	r24, 0x00	; 0
    4270:	11 f0       	breq	.+4      	; 0x4276 <free+0x7c>
    4272:	dc 01       	movw	r26, r24
    4274:	d3 cf       	rjmp	.-90     	; 0x421c <free+0x22>
    4276:	fa 01       	movw	r30, r20
    4278:	d3 83       	std	Z+3, r29	; 0x03
    427a:	c2 83       	std	Z+2, r28	; 0x02
    427c:	21 91       	ld	r18, Z+
    427e:	31 91       	ld	r19, Z+
    4280:	e2 0f       	add	r30, r18
    4282:	f3 1f       	adc	r31, r19
    4284:	ce 17       	cp	r28, r30
    4286:	df 07       	cpc	r29, r31
    4288:	69 f4       	brne	.+26     	; 0x42a4 <free+0xaa>
    428a:	88 81       	ld	r24, Y
    428c:	99 81       	ldd	r25, Y+1	; 0x01
    428e:	28 0f       	add	r18, r24
    4290:	39 1f       	adc	r19, r25
    4292:	2e 5f       	subi	r18, 0xFE	; 254
    4294:	3f 4f       	sbci	r19, 0xFF	; 255
    4296:	fa 01       	movw	r30, r20
    4298:	31 83       	std	Z+1, r19	; 0x01
    429a:	20 83       	st	Z, r18
    429c:	8a 81       	ldd	r24, Y+2	; 0x02
    429e:	9b 81       	ldd	r25, Y+3	; 0x03
    42a0:	93 83       	std	Z+3, r25	; 0x03
    42a2:	82 83       	std	Z+2, r24	; 0x02
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	08 95       	ret

000042aa <strlen>:
    42aa:	fc 01       	movw	r30, r24
    42ac:	01 90       	ld	r0, Z+
    42ae:	00 20       	and	r0, r0
    42b0:	e9 f7       	brne	.-6      	; 0x42ac <strlen+0x2>
    42b2:	80 95       	com	r24
    42b4:	90 95       	com	r25
    42b6:	8e 0f       	add	r24, r30
    42b8:	9f 1f       	adc	r25, r31
    42ba:	08 95       	ret

000042bc <printf>:
    42bc:	a0 e0       	ldi	r26, 0x00	; 0
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	e4 e6       	ldi	r30, 0x64	; 100
    42c2:	f1 e2       	ldi	r31, 0x21	; 33
    42c4:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__prologue_saves__+0x20>
    42c8:	fe 01       	movw	r30, r28
    42ca:	35 96       	adiw	r30, 0x05	; 5
    42cc:	61 91       	ld	r22, Z+
    42ce:	71 91       	ld	r23, Z+
    42d0:	80 91 b6 03 	lds	r24, 0x03B6
    42d4:	90 91 b7 03 	lds	r25, 0x03B7
    42d8:	af 01       	movw	r20, r30
    42da:	0e 94 a4 21 	call	0x4348	; 0x4348 <vfprintf>
    42de:	20 96       	adiw	r28, 0x00	; 0
    42e0:	e2 e0       	ldi	r30, 0x02	; 2
    42e2:	0c 94 45 20 	jmp	0x408a	; 0x408a <__epilogue_restores__+0x20>

000042e6 <snprintf>:
    42e6:	ae e0       	ldi	r26, 0x0E	; 14
    42e8:	b0 e0       	ldi	r27, 0x00	; 0
    42ea:	e9 e7       	ldi	r30, 0x79	; 121
    42ec:	f1 e2       	ldi	r31, 0x21	; 33
    42ee:	0c 94 27 20 	jmp	0x404e	; 0x404e <__prologue_saves__+0x1c>
    42f2:	0d 89       	ldd	r16, Y+21	; 0x15
    42f4:	1e 89       	ldd	r17, Y+22	; 0x16
    42f6:	8f 89       	ldd	r24, Y+23	; 0x17
    42f8:	98 8d       	ldd	r25, Y+24	; 0x18
    42fa:	97 ff       	sbrs	r25, 7
    42fc:	02 c0       	rjmp	.+4      	; 0x4302 <snprintf+0x1c>
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	90 e8       	ldi	r25, 0x80	; 128
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	9e 83       	std	Y+6, r25	; 0x06
    4306:	8d 83       	std	Y+5, r24	; 0x05
    4308:	1a 83       	std	Y+2, r17	; 0x02
    430a:	09 83       	std	Y+1, r16	; 0x01
    430c:	86 e0       	ldi	r24, 0x06	; 6
    430e:	8c 83       	std	Y+4, r24	; 0x04
    4310:	9e 01       	movw	r18, r28
    4312:	25 5e       	subi	r18, 0xE5	; 229
    4314:	3f 4f       	sbci	r19, 0xFF	; 255
    4316:	ce 01       	movw	r24, r28
    4318:	01 96       	adiw	r24, 0x01	; 1
    431a:	69 8d       	ldd	r22, Y+25	; 0x19
    431c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    431e:	a9 01       	movw	r20, r18
    4320:	0e 94 a4 21 	call	0x4348	; 0x4348 <vfprintf>
    4324:	4d 81       	ldd	r20, Y+5	; 0x05
    4326:	5e 81       	ldd	r21, Y+6	; 0x06
    4328:	57 fd       	sbrc	r21, 7
    432a:	0a c0       	rjmp	.+20     	; 0x4340 <snprintf+0x5a>
    432c:	2f 81       	ldd	r18, Y+7	; 0x07
    432e:	38 85       	ldd	r19, Y+8	; 0x08
    4330:	42 17       	cp	r20, r18
    4332:	53 07       	cpc	r21, r19
    4334:	0c f4       	brge	.+2      	; 0x4338 <snprintf+0x52>
    4336:	9a 01       	movw	r18, r20
    4338:	02 0f       	add	r16, r18
    433a:	13 1f       	adc	r17, r19
    433c:	f8 01       	movw	r30, r16
    433e:	10 82       	st	Z, r1
    4340:	2e 96       	adiw	r28, 0x0e	; 14
    4342:	e4 e0       	ldi	r30, 0x04	; 4
    4344:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__epilogue_restores__+0x1c>

00004348 <vfprintf>:
    4348:	ab e0       	ldi	r26, 0x0B	; 11
    434a:	b0 e0       	ldi	r27, 0x00	; 0
    434c:	ea ea       	ldi	r30, 0xAA	; 170
    434e:	f1 e2       	ldi	r31, 0x21	; 33
    4350:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__>
    4354:	3c 01       	movw	r6, r24
    4356:	2b 01       	movw	r4, r22
    4358:	5a 01       	movw	r10, r20
    435a:	fc 01       	movw	r30, r24
    435c:	17 82       	std	Z+7, r1	; 0x07
    435e:	16 82       	std	Z+6, r1	; 0x06
    4360:	83 81       	ldd	r24, Z+3	; 0x03
    4362:	81 fd       	sbrc	r24, 1
    4364:	03 c0       	rjmp	.+6      	; 0x436c <vfprintf+0x24>
    4366:	6f ef       	ldi	r22, 0xFF	; 255
    4368:	7f ef       	ldi	r23, 0xFF	; 255
    436a:	c6 c1       	rjmp	.+908    	; 0x46f8 <vfprintf+0x3b0>
    436c:	9a e0       	ldi	r25, 0x0A	; 10
    436e:	89 2e       	mov	r8, r25
    4370:	1e 01       	movw	r2, r28
    4372:	08 94       	sec
    4374:	21 1c       	adc	r2, r1
    4376:	31 1c       	adc	r3, r1
    4378:	f3 01       	movw	r30, r6
    437a:	23 81       	ldd	r18, Z+3	; 0x03
    437c:	f2 01       	movw	r30, r4
    437e:	23 fd       	sbrc	r18, 3
    4380:	85 91       	lpm	r24, Z+
    4382:	23 ff       	sbrs	r18, 3
    4384:	81 91       	ld	r24, Z+
    4386:	2f 01       	movw	r4, r30
    4388:	88 23       	and	r24, r24
    438a:	09 f4       	brne	.+2      	; 0x438e <vfprintf+0x46>
    438c:	b2 c1       	rjmp	.+868    	; 0x46f2 <vfprintf+0x3aa>
    438e:	85 32       	cpi	r24, 0x25	; 37
    4390:	39 f4       	brne	.+14     	; 0x43a0 <vfprintf+0x58>
    4392:	23 fd       	sbrc	r18, 3
    4394:	85 91       	lpm	r24, Z+
    4396:	23 ff       	sbrs	r18, 3
    4398:	81 91       	ld	r24, Z+
    439a:	2f 01       	movw	r4, r30
    439c:	85 32       	cpi	r24, 0x25	; 37
    439e:	29 f4       	brne	.+10     	; 0x43aa <vfprintf+0x62>
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	b3 01       	movw	r22, r6
    43a4:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    43a8:	e7 cf       	rjmp	.-50     	; 0x4378 <vfprintf+0x30>
    43aa:	98 2f       	mov	r25, r24
    43ac:	ff 24       	eor	r15, r15
    43ae:	ee 24       	eor	r14, r14
    43b0:	99 24       	eor	r9, r9
    43b2:	ff e1       	ldi	r31, 0x1F	; 31
    43b4:	ff 15       	cp	r31, r15
    43b6:	d0 f0       	brcs	.+52     	; 0x43ec <vfprintf+0xa4>
    43b8:	9b 32       	cpi	r25, 0x2B	; 43
    43ba:	69 f0       	breq	.+26     	; 0x43d6 <vfprintf+0x8e>
    43bc:	9c 32       	cpi	r25, 0x2C	; 44
    43be:	28 f4       	brcc	.+10     	; 0x43ca <vfprintf+0x82>
    43c0:	90 32       	cpi	r25, 0x20	; 32
    43c2:	59 f0       	breq	.+22     	; 0x43da <vfprintf+0x92>
    43c4:	93 32       	cpi	r25, 0x23	; 35
    43c6:	91 f4       	brne	.+36     	; 0x43ec <vfprintf+0xa4>
    43c8:	0e c0       	rjmp	.+28     	; 0x43e6 <vfprintf+0x9e>
    43ca:	9d 32       	cpi	r25, 0x2D	; 45
    43cc:	49 f0       	breq	.+18     	; 0x43e0 <vfprintf+0x98>
    43ce:	90 33       	cpi	r25, 0x30	; 48
    43d0:	69 f4       	brne	.+26     	; 0x43ec <vfprintf+0xa4>
    43d2:	41 e0       	ldi	r20, 0x01	; 1
    43d4:	24 c0       	rjmp	.+72     	; 0x441e <vfprintf+0xd6>
    43d6:	52 e0       	ldi	r21, 0x02	; 2
    43d8:	f5 2a       	or	r15, r21
    43da:	84 e0       	ldi	r24, 0x04	; 4
    43dc:	f8 2a       	or	r15, r24
    43de:	28 c0       	rjmp	.+80     	; 0x4430 <vfprintf+0xe8>
    43e0:	98 e0       	ldi	r25, 0x08	; 8
    43e2:	f9 2a       	or	r15, r25
    43e4:	25 c0       	rjmp	.+74     	; 0x4430 <vfprintf+0xe8>
    43e6:	e0 e1       	ldi	r30, 0x10	; 16
    43e8:	fe 2a       	or	r15, r30
    43ea:	22 c0       	rjmp	.+68     	; 0x4430 <vfprintf+0xe8>
    43ec:	f7 fc       	sbrc	r15, 7
    43ee:	29 c0       	rjmp	.+82     	; 0x4442 <vfprintf+0xfa>
    43f0:	89 2f       	mov	r24, r25
    43f2:	80 53       	subi	r24, 0x30	; 48
    43f4:	8a 30       	cpi	r24, 0x0A	; 10
    43f6:	70 f4       	brcc	.+28     	; 0x4414 <vfprintf+0xcc>
    43f8:	f6 fe       	sbrs	r15, 6
    43fa:	05 c0       	rjmp	.+10     	; 0x4406 <vfprintf+0xbe>
    43fc:	98 9c       	mul	r9, r8
    43fe:	90 2c       	mov	r9, r0
    4400:	11 24       	eor	r1, r1
    4402:	98 0e       	add	r9, r24
    4404:	15 c0       	rjmp	.+42     	; 0x4430 <vfprintf+0xe8>
    4406:	e8 9c       	mul	r14, r8
    4408:	e0 2c       	mov	r14, r0
    440a:	11 24       	eor	r1, r1
    440c:	e8 0e       	add	r14, r24
    440e:	f0 e2       	ldi	r31, 0x20	; 32
    4410:	ff 2a       	or	r15, r31
    4412:	0e c0       	rjmp	.+28     	; 0x4430 <vfprintf+0xe8>
    4414:	9e 32       	cpi	r25, 0x2E	; 46
    4416:	29 f4       	brne	.+10     	; 0x4422 <vfprintf+0xda>
    4418:	f6 fc       	sbrc	r15, 6
    441a:	6b c1       	rjmp	.+726    	; 0x46f2 <vfprintf+0x3aa>
    441c:	40 e4       	ldi	r20, 0x40	; 64
    441e:	f4 2a       	or	r15, r20
    4420:	07 c0       	rjmp	.+14     	; 0x4430 <vfprintf+0xe8>
    4422:	9c 36       	cpi	r25, 0x6C	; 108
    4424:	19 f4       	brne	.+6      	; 0x442c <vfprintf+0xe4>
    4426:	50 e8       	ldi	r21, 0x80	; 128
    4428:	f5 2a       	or	r15, r21
    442a:	02 c0       	rjmp	.+4      	; 0x4430 <vfprintf+0xe8>
    442c:	98 36       	cpi	r25, 0x68	; 104
    442e:	49 f4       	brne	.+18     	; 0x4442 <vfprintf+0xfa>
    4430:	f2 01       	movw	r30, r4
    4432:	23 fd       	sbrc	r18, 3
    4434:	95 91       	lpm	r25, Z+
    4436:	23 ff       	sbrs	r18, 3
    4438:	91 91       	ld	r25, Z+
    443a:	2f 01       	movw	r4, r30
    443c:	99 23       	and	r25, r25
    443e:	09 f0       	breq	.+2      	; 0x4442 <vfprintf+0xfa>
    4440:	b8 cf       	rjmp	.-144    	; 0x43b2 <vfprintf+0x6a>
    4442:	89 2f       	mov	r24, r25
    4444:	85 54       	subi	r24, 0x45	; 69
    4446:	83 30       	cpi	r24, 0x03	; 3
    4448:	18 f0       	brcs	.+6      	; 0x4450 <vfprintf+0x108>
    444a:	80 52       	subi	r24, 0x20	; 32
    444c:	83 30       	cpi	r24, 0x03	; 3
    444e:	38 f4       	brcc	.+14     	; 0x445e <vfprintf+0x116>
    4450:	44 e0       	ldi	r20, 0x04	; 4
    4452:	50 e0       	ldi	r21, 0x00	; 0
    4454:	a4 0e       	add	r10, r20
    4456:	b5 1e       	adc	r11, r21
    4458:	5f e3       	ldi	r21, 0x3F	; 63
    445a:	59 83       	std	Y+1, r21	; 0x01
    445c:	0f c0       	rjmp	.+30     	; 0x447c <vfprintf+0x134>
    445e:	93 36       	cpi	r25, 0x63	; 99
    4460:	31 f0       	breq	.+12     	; 0x446e <vfprintf+0x126>
    4462:	93 37       	cpi	r25, 0x73	; 115
    4464:	79 f0       	breq	.+30     	; 0x4484 <vfprintf+0x13c>
    4466:	93 35       	cpi	r25, 0x53	; 83
    4468:	09 f0       	breq	.+2      	; 0x446c <vfprintf+0x124>
    446a:	56 c0       	rjmp	.+172    	; 0x4518 <vfprintf+0x1d0>
    446c:	20 c0       	rjmp	.+64     	; 0x44ae <vfprintf+0x166>
    446e:	f5 01       	movw	r30, r10
    4470:	80 81       	ld	r24, Z
    4472:	89 83       	std	Y+1, r24	; 0x01
    4474:	42 e0       	ldi	r20, 0x02	; 2
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	a4 0e       	add	r10, r20
    447a:	b5 1e       	adc	r11, r21
    447c:	61 01       	movw	r12, r2
    447e:	01 e0       	ldi	r16, 0x01	; 1
    4480:	10 e0       	ldi	r17, 0x00	; 0
    4482:	12 c0       	rjmp	.+36     	; 0x44a8 <vfprintf+0x160>
    4484:	f5 01       	movw	r30, r10
    4486:	c0 80       	ld	r12, Z
    4488:	d1 80       	ldd	r13, Z+1	; 0x01
    448a:	f6 fc       	sbrc	r15, 6
    448c:	03 c0       	rjmp	.+6      	; 0x4494 <vfprintf+0x14c>
    448e:	6f ef       	ldi	r22, 0xFF	; 255
    4490:	7f ef       	ldi	r23, 0xFF	; 255
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <vfprintf+0x150>
    4494:	69 2d       	mov	r22, r9
    4496:	70 e0       	ldi	r23, 0x00	; 0
    4498:	42 e0       	ldi	r20, 0x02	; 2
    449a:	50 e0       	ldi	r21, 0x00	; 0
    449c:	a4 0e       	add	r10, r20
    449e:	b5 1e       	adc	r11, r21
    44a0:	c6 01       	movw	r24, r12
    44a2:	0e 94 8c 23 	call	0x4718	; 0x4718 <strnlen>
    44a6:	8c 01       	movw	r16, r24
    44a8:	5f e7       	ldi	r21, 0x7F	; 127
    44aa:	f5 22       	and	r15, r21
    44ac:	14 c0       	rjmp	.+40     	; 0x44d6 <vfprintf+0x18e>
    44ae:	f5 01       	movw	r30, r10
    44b0:	c0 80       	ld	r12, Z
    44b2:	d1 80       	ldd	r13, Z+1	; 0x01
    44b4:	f6 fc       	sbrc	r15, 6
    44b6:	03 c0       	rjmp	.+6      	; 0x44be <vfprintf+0x176>
    44b8:	6f ef       	ldi	r22, 0xFF	; 255
    44ba:	7f ef       	ldi	r23, 0xFF	; 255
    44bc:	02 c0       	rjmp	.+4      	; 0x44c2 <vfprintf+0x17a>
    44be:	69 2d       	mov	r22, r9
    44c0:	70 e0       	ldi	r23, 0x00	; 0
    44c2:	42 e0       	ldi	r20, 0x02	; 2
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	a4 0e       	add	r10, r20
    44c8:	b5 1e       	adc	r11, r21
    44ca:	c6 01       	movw	r24, r12
    44cc:	0e 94 81 23 	call	0x4702	; 0x4702 <strnlen_P>
    44d0:	8c 01       	movw	r16, r24
    44d2:	50 e8       	ldi	r21, 0x80	; 128
    44d4:	f5 2a       	or	r15, r21
    44d6:	f3 fe       	sbrs	r15, 3
    44d8:	07 c0       	rjmp	.+14     	; 0x44e8 <vfprintf+0x1a0>
    44da:	1a c0       	rjmp	.+52     	; 0x4510 <vfprintf+0x1c8>
    44dc:	80 e2       	ldi	r24, 0x20	; 32
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	b3 01       	movw	r22, r6
    44e2:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    44e6:	ea 94       	dec	r14
    44e8:	8e 2d       	mov	r24, r14
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	08 17       	cp	r16, r24
    44ee:	19 07       	cpc	r17, r25
    44f0:	a8 f3       	brcs	.-22     	; 0x44dc <vfprintf+0x194>
    44f2:	0e c0       	rjmp	.+28     	; 0x4510 <vfprintf+0x1c8>
    44f4:	f6 01       	movw	r30, r12
    44f6:	f7 fc       	sbrc	r15, 7
    44f8:	85 91       	lpm	r24, Z+
    44fa:	f7 fe       	sbrs	r15, 7
    44fc:	81 91       	ld	r24, Z+
    44fe:	6f 01       	movw	r12, r30
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	b3 01       	movw	r22, r6
    4504:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    4508:	e1 10       	cpse	r14, r1
    450a:	ea 94       	dec	r14
    450c:	01 50       	subi	r16, 0x01	; 1
    450e:	10 40       	sbci	r17, 0x00	; 0
    4510:	01 15       	cp	r16, r1
    4512:	11 05       	cpc	r17, r1
    4514:	79 f7       	brne	.-34     	; 0x44f4 <vfprintf+0x1ac>
    4516:	ea c0       	rjmp	.+468    	; 0x46ec <vfprintf+0x3a4>
    4518:	94 36       	cpi	r25, 0x64	; 100
    451a:	11 f0       	breq	.+4      	; 0x4520 <vfprintf+0x1d8>
    451c:	99 36       	cpi	r25, 0x69	; 105
    451e:	69 f5       	brne	.+90     	; 0x457a <vfprintf+0x232>
    4520:	f7 fe       	sbrs	r15, 7
    4522:	08 c0       	rjmp	.+16     	; 0x4534 <vfprintf+0x1ec>
    4524:	f5 01       	movw	r30, r10
    4526:	20 81       	ld	r18, Z
    4528:	31 81       	ldd	r19, Z+1	; 0x01
    452a:	42 81       	ldd	r20, Z+2	; 0x02
    452c:	53 81       	ldd	r21, Z+3	; 0x03
    452e:	84 e0       	ldi	r24, 0x04	; 4
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	0a c0       	rjmp	.+20     	; 0x4548 <vfprintf+0x200>
    4534:	f5 01       	movw	r30, r10
    4536:	80 81       	ld	r24, Z
    4538:	91 81       	ldd	r25, Z+1	; 0x01
    453a:	9c 01       	movw	r18, r24
    453c:	44 27       	eor	r20, r20
    453e:	37 fd       	sbrc	r19, 7
    4540:	40 95       	com	r20
    4542:	54 2f       	mov	r21, r20
    4544:	82 e0       	ldi	r24, 0x02	; 2
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	a8 0e       	add	r10, r24
    454a:	b9 1e       	adc	r11, r25
    454c:	9f e6       	ldi	r25, 0x6F	; 111
    454e:	f9 22       	and	r15, r25
    4550:	57 ff       	sbrs	r21, 7
    4552:	09 c0       	rjmp	.+18     	; 0x4566 <vfprintf+0x21e>
    4554:	50 95       	com	r21
    4556:	40 95       	com	r20
    4558:	30 95       	com	r19
    455a:	21 95       	neg	r18
    455c:	3f 4f       	sbci	r19, 0xFF	; 255
    455e:	4f 4f       	sbci	r20, 0xFF	; 255
    4560:	5f 4f       	sbci	r21, 0xFF	; 255
    4562:	e0 e8       	ldi	r30, 0x80	; 128
    4564:	fe 2a       	or	r15, r30
    4566:	ca 01       	movw	r24, r20
    4568:	b9 01       	movw	r22, r18
    456a:	a1 01       	movw	r20, r2
    456c:	2a e0       	ldi	r18, 0x0A	; 10
    456e:	30 e0       	ldi	r19, 0x00	; 0
    4570:	0e 94 c3 23 	call	0x4786	; 0x4786 <__ultoa_invert>
    4574:	d8 2e       	mov	r13, r24
    4576:	d2 18       	sub	r13, r2
    4578:	40 c0       	rjmp	.+128    	; 0x45fa <vfprintf+0x2b2>
    457a:	95 37       	cpi	r25, 0x75	; 117
    457c:	29 f4       	brne	.+10     	; 0x4588 <vfprintf+0x240>
    457e:	1f 2d       	mov	r17, r15
    4580:	1f 7e       	andi	r17, 0xEF	; 239
    4582:	2a e0       	ldi	r18, 0x0A	; 10
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	1d c0       	rjmp	.+58     	; 0x45c2 <vfprintf+0x27a>
    4588:	1f 2d       	mov	r17, r15
    458a:	19 7f       	andi	r17, 0xF9	; 249
    458c:	9f 36       	cpi	r25, 0x6F	; 111
    458e:	61 f0       	breq	.+24     	; 0x45a8 <vfprintf+0x260>
    4590:	90 37       	cpi	r25, 0x70	; 112
    4592:	20 f4       	brcc	.+8      	; 0x459c <vfprintf+0x254>
    4594:	98 35       	cpi	r25, 0x58	; 88
    4596:	09 f0       	breq	.+2      	; 0x459a <vfprintf+0x252>
    4598:	ac c0       	rjmp	.+344    	; 0x46f2 <vfprintf+0x3aa>
    459a:	0f c0       	rjmp	.+30     	; 0x45ba <vfprintf+0x272>
    459c:	90 37       	cpi	r25, 0x70	; 112
    459e:	39 f0       	breq	.+14     	; 0x45ae <vfprintf+0x266>
    45a0:	98 37       	cpi	r25, 0x78	; 120
    45a2:	09 f0       	breq	.+2      	; 0x45a6 <vfprintf+0x25e>
    45a4:	a6 c0       	rjmp	.+332    	; 0x46f2 <vfprintf+0x3aa>
    45a6:	04 c0       	rjmp	.+8      	; 0x45b0 <vfprintf+0x268>
    45a8:	28 e0       	ldi	r18, 0x08	; 8
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	0a c0       	rjmp	.+20     	; 0x45c2 <vfprintf+0x27a>
    45ae:	10 61       	ori	r17, 0x10	; 16
    45b0:	14 fd       	sbrc	r17, 4
    45b2:	14 60       	ori	r17, 0x04	; 4
    45b4:	20 e1       	ldi	r18, 0x10	; 16
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	04 c0       	rjmp	.+8      	; 0x45c2 <vfprintf+0x27a>
    45ba:	14 fd       	sbrc	r17, 4
    45bc:	16 60       	ori	r17, 0x06	; 6
    45be:	20 e1       	ldi	r18, 0x10	; 16
    45c0:	32 e0       	ldi	r19, 0x02	; 2
    45c2:	17 ff       	sbrs	r17, 7
    45c4:	08 c0       	rjmp	.+16     	; 0x45d6 <vfprintf+0x28e>
    45c6:	f5 01       	movw	r30, r10
    45c8:	60 81       	ld	r22, Z
    45ca:	71 81       	ldd	r23, Z+1	; 0x01
    45cc:	82 81       	ldd	r24, Z+2	; 0x02
    45ce:	93 81       	ldd	r25, Z+3	; 0x03
    45d0:	44 e0       	ldi	r20, 0x04	; 4
    45d2:	50 e0       	ldi	r21, 0x00	; 0
    45d4:	08 c0       	rjmp	.+16     	; 0x45e6 <vfprintf+0x29e>
    45d6:	f5 01       	movw	r30, r10
    45d8:	80 81       	ld	r24, Z
    45da:	91 81       	ldd	r25, Z+1	; 0x01
    45dc:	bc 01       	movw	r22, r24
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	42 e0       	ldi	r20, 0x02	; 2
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	a4 0e       	add	r10, r20
    45e8:	b5 1e       	adc	r11, r21
    45ea:	a1 01       	movw	r20, r2
    45ec:	0e 94 c3 23 	call	0x4786	; 0x4786 <__ultoa_invert>
    45f0:	d8 2e       	mov	r13, r24
    45f2:	d2 18       	sub	r13, r2
    45f4:	8f e7       	ldi	r24, 0x7F	; 127
    45f6:	f8 2e       	mov	r15, r24
    45f8:	f1 22       	and	r15, r17
    45fa:	f6 fe       	sbrs	r15, 6
    45fc:	0b c0       	rjmp	.+22     	; 0x4614 <vfprintf+0x2cc>
    45fe:	5e ef       	ldi	r21, 0xFE	; 254
    4600:	f5 22       	and	r15, r21
    4602:	d9 14       	cp	r13, r9
    4604:	38 f4       	brcc	.+14     	; 0x4614 <vfprintf+0x2cc>
    4606:	f4 fe       	sbrs	r15, 4
    4608:	07 c0       	rjmp	.+14     	; 0x4618 <vfprintf+0x2d0>
    460a:	f2 fc       	sbrc	r15, 2
    460c:	05 c0       	rjmp	.+10     	; 0x4618 <vfprintf+0x2d0>
    460e:	8f ee       	ldi	r24, 0xEF	; 239
    4610:	f8 22       	and	r15, r24
    4612:	02 c0       	rjmp	.+4      	; 0x4618 <vfprintf+0x2d0>
    4614:	1d 2d       	mov	r17, r13
    4616:	01 c0       	rjmp	.+2      	; 0x461a <vfprintf+0x2d2>
    4618:	19 2d       	mov	r17, r9
    461a:	f4 fe       	sbrs	r15, 4
    461c:	0d c0       	rjmp	.+26     	; 0x4638 <vfprintf+0x2f0>
    461e:	fe 01       	movw	r30, r28
    4620:	ed 0d       	add	r30, r13
    4622:	f1 1d       	adc	r31, r1
    4624:	80 81       	ld	r24, Z
    4626:	80 33       	cpi	r24, 0x30	; 48
    4628:	19 f4       	brne	.+6      	; 0x4630 <vfprintf+0x2e8>
    462a:	99 ee       	ldi	r25, 0xE9	; 233
    462c:	f9 22       	and	r15, r25
    462e:	08 c0       	rjmp	.+16     	; 0x4640 <vfprintf+0x2f8>
    4630:	1f 5f       	subi	r17, 0xFF	; 255
    4632:	f2 fe       	sbrs	r15, 2
    4634:	05 c0       	rjmp	.+10     	; 0x4640 <vfprintf+0x2f8>
    4636:	03 c0       	rjmp	.+6      	; 0x463e <vfprintf+0x2f6>
    4638:	8f 2d       	mov	r24, r15
    463a:	86 78       	andi	r24, 0x86	; 134
    463c:	09 f0       	breq	.+2      	; 0x4640 <vfprintf+0x2f8>
    463e:	1f 5f       	subi	r17, 0xFF	; 255
    4640:	0f 2d       	mov	r16, r15
    4642:	f3 fc       	sbrc	r15, 3
    4644:	14 c0       	rjmp	.+40     	; 0x466e <vfprintf+0x326>
    4646:	f0 fe       	sbrs	r15, 0
    4648:	0f c0       	rjmp	.+30     	; 0x4668 <vfprintf+0x320>
    464a:	1e 15       	cp	r17, r14
    464c:	10 f0       	brcs	.+4      	; 0x4652 <vfprintf+0x30a>
    464e:	9d 2c       	mov	r9, r13
    4650:	0b c0       	rjmp	.+22     	; 0x4668 <vfprintf+0x320>
    4652:	9d 2c       	mov	r9, r13
    4654:	9e 0c       	add	r9, r14
    4656:	91 1a       	sub	r9, r17
    4658:	1e 2d       	mov	r17, r14
    465a:	06 c0       	rjmp	.+12     	; 0x4668 <vfprintf+0x320>
    465c:	80 e2       	ldi	r24, 0x20	; 32
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	b3 01       	movw	r22, r6
    4662:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    4666:	1f 5f       	subi	r17, 0xFF	; 255
    4668:	1e 15       	cp	r17, r14
    466a:	c0 f3       	brcs	.-16     	; 0x465c <vfprintf+0x314>
    466c:	04 c0       	rjmp	.+8      	; 0x4676 <vfprintf+0x32e>
    466e:	1e 15       	cp	r17, r14
    4670:	10 f4       	brcc	.+4      	; 0x4676 <vfprintf+0x32e>
    4672:	e1 1a       	sub	r14, r17
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <vfprintf+0x330>
    4676:	ee 24       	eor	r14, r14
    4678:	04 ff       	sbrs	r16, 4
    467a:	0f c0       	rjmp	.+30     	; 0x469a <vfprintf+0x352>
    467c:	80 e3       	ldi	r24, 0x30	; 48
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	b3 01       	movw	r22, r6
    4682:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    4686:	02 ff       	sbrs	r16, 2
    4688:	1d c0       	rjmp	.+58     	; 0x46c4 <vfprintf+0x37c>
    468a:	01 fd       	sbrc	r16, 1
    468c:	03 c0       	rjmp	.+6      	; 0x4694 <vfprintf+0x34c>
    468e:	88 e7       	ldi	r24, 0x78	; 120
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	0e c0       	rjmp	.+28     	; 0x46b0 <vfprintf+0x368>
    4694:	88 e5       	ldi	r24, 0x58	; 88
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	0b c0       	rjmp	.+22     	; 0x46b0 <vfprintf+0x368>
    469a:	80 2f       	mov	r24, r16
    469c:	86 78       	andi	r24, 0x86	; 134
    469e:	91 f0       	breq	.+36     	; 0x46c4 <vfprintf+0x37c>
    46a0:	01 ff       	sbrs	r16, 1
    46a2:	02 c0       	rjmp	.+4      	; 0x46a8 <vfprintf+0x360>
    46a4:	8b e2       	ldi	r24, 0x2B	; 43
    46a6:	01 c0       	rjmp	.+2      	; 0x46aa <vfprintf+0x362>
    46a8:	80 e2       	ldi	r24, 0x20	; 32
    46aa:	f7 fc       	sbrc	r15, 7
    46ac:	8d e2       	ldi	r24, 0x2D	; 45
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	b3 01       	movw	r22, r6
    46b2:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    46b6:	06 c0       	rjmp	.+12     	; 0x46c4 <vfprintf+0x37c>
    46b8:	80 e3       	ldi	r24, 0x30	; 48
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	b3 01       	movw	r22, r6
    46be:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    46c2:	9a 94       	dec	r9
    46c4:	d9 14       	cp	r13, r9
    46c6:	c0 f3       	brcs	.-16     	; 0x46b8 <vfprintf+0x370>
    46c8:	da 94       	dec	r13
    46ca:	f1 01       	movw	r30, r2
    46cc:	ed 0d       	add	r30, r13
    46ce:	f1 1d       	adc	r31, r1
    46d0:	80 81       	ld	r24, Z
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	b3 01       	movw	r22, r6
    46d6:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    46da:	dd 20       	and	r13, r13
    46dc:	a9 f7       	brne	.-22     	; 0x46c8 <vfprintf+0x380>
    46de:	06 c0       	rjmp	.+12     	; 0x46ec <vfprintf+0x3a4>
    46e0:	80 e2       	ldi	r24, 0x20	; 32
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	b3 01       	movw	r22, r6
    46e6:	0e 94 97 23 	call	0x472e	; 0x472e <fputc>
    46ea:	ea 94       	dec	r14
    46ec:	ee 20       	and	r14, r14
    46ee:	c1 f7       	brne	.-16     	; 0x46e0 <vfprintf+0x398>
    46f0:	43 ce       	rjmp	.-890    	; 0x4378 <vfprintf+0x30>
    46f2:	f3 01       	movw	r30, r6
    46f4:	66 81       	ldd	r22, Z+6	; 0x06
    46f6:	77 81       	ldd	r23, Z+7	; 0x07
    46f8:	cb 01       	movw	r24, r22
    46fa:	2b 96       	adiw	r28, 0x0b	; 11
    46fc:	e2 e1       	ldi	r30, 0x12	; 18
    46fe:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__>

00004702 <strnlen_P>:
    4702:	fc 01       	movw	r30, r24
    4704:	05 90       	lpm	r0, Z+
    4706:	61 50       	subi	r22, 0x01	; 1
    4708:	70 40       	sbci	r23, 0x00	; 0
    470a:	01 10       	cpse	r0, r1
    470c:	d8 f7       	brcc	.-10     	; 0x4704 <strnlen_P+0x2>
    470e:	80 95       	com	r24
    4710:	90 95       	com	r25
    4712:	8e 0f       	add	r24, r30
    4714:	9f 1f       	adc	r25, r31
    4716:	08 95       	ret

00004718 <strnlen>:
    4718:	fc 01       	movw	r30, r24
    471a:	61 50       	subi	r22, 0x01	; 1
    471c:	70 40       	sbci	r23, 0x00	; 0
    471e:	01 90       	ld	r0, Z+
    4720:	01 10       	cpse	r0, r1
    4722:	d8 f7       	brcc	.-10     	; 0x471a <strnlen+0x2>
    4724:	80 95       	com	r24
    4726:	90 95       	com	r25
    4728:	8e 0f       	add	r24, r30
    472a:	9f 1f       	adc	r25, r31
    472c:	08 95       	ret

0000472e <fputc>:
    472e:	0f 93       	push	r16
    4730:	1f 93       	push	r17
    4732:	cf 93       	push	r28
    4734:	df 93       	push	r29
    4736:	8c 01       	movw	r16, r24
    4738:	eb 01       	movw	r28, r22
    473a:	8b 81       	ldd	r24, Y+3	; 0x03
    473c:	81 ff       	sbrs	r24, 1
    473e:	1b c0       	rjmp	.+54     	; 0x4776 <fputc+0x48>
    4740:	82 ff       	sbrs	r24, 2
    4742:	0d c0       	rjmp	.+26     	; 0x475e <fputc+0x30>
    4744:	2e 81       	ldd	r18, Y+6	; 0x06
    4746:	3f 81       	ldd	r19, Y+7	; 0x07
    4748:	8c 81       	ldd	r24, Y+4	; 0x04
    474a:	9d 81       	ldd	r25, Y+5	; 0x05
    474c:	28 17       	cp	r18, r24
    474e:	39 07       	cpc	r19, r25
    4750:	64 f4       	brge	.+24     	; 0x476a <fputc+0x3c>
    4752:	e8 81       	ld	r30, Y
    4754:	f9 81       	ldd	r31, Y+1	; 0x01
    4756:	01 93       	st	Z+, r16
    4758:	f9 83       	std	Y+1, r31	; 0x01
    475a:	e8 83       	st	Y, r30
    475c:	06 c0       	rjmp	.+12     	; 0x476a <fputc+0x3c>
    475e:	e8 85       	ldd	r30, Y+8	; 0x08
    4760:	f9 85       	ldd	r31, Y+9	; 0x09
    4762:	80 2f       	mov	r24, r16
    4764:	09 95       	icall
    4766:	89 2b       	or	r24, r25
    4768:	31 f4       	brne	.+12     	; 0x4776 <fputc+0x48>
    476a:	8e 81       	ldd	r24, Y+6	; 0x06
    476c:	9f 81       	ldd	r25, Y+7	; 0x07
    476e:	01 96       	adiw	r24, 0x01	; 1
    4770:	9f 83       	std	Y+7, r25	; 0x07
    4772:	8e 83       	std	Y+6, r24	; 0x06
    4774:	02 c0       	rjmp	.+4      	; 0x477a <fputc+0x4c>
    4776:	0f ef       	ldi	r16, 0xFF	; 255
    4778:	1f ef       	ldi	r17, 0xFF	; 255
    477a:	c8 01       	movw	r24, r16
    477c:	df 91       	pop	r29
    477e:	cf 91       	pop	r28
    4780:	1f 91       	pop	r17
    4782:	0f 91       	pop	r16
    4784:	08 95       	ret

00004786 <__ultoa_invert>:
    4786:	fa 01       	movw	r30, r20
    4788:	aa 27       	eor	r26, r26
    478a:	28 30       	cpi	r18, 0x08	; 8
    478c:	51 f1       	breq	.+84     	; 0x47e2 <__ultoa_invert+0x5c>
    478e:	20 31       	cpi	r18, 0x10	; 16
    4790:	81 f1       	breq	.+96     	; 0x47f2 <__ultoa_invert+0x6c>
    4792:	e8 94       	clt
    4794:	6f 93       	push	r22
    4796:	6e 7f       	andi	r22, 0xFE	; 254
    4798:	6e 5f       	subi	r22, 0xFE	; 254
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	8f 4f       	sbci	r24, 0xFF	; 255
    479e:	9f 4f       	sbci	r25, 0xFF	; 255
    47a0:	af 4f       	sbci	r26, 0xFF	; 255
    47a2:	b1 e0       	ldi	r27, 0x01	; 1
    47a4:	3e d0       	rcall	.+124    	; 0x4822 <__ultoa_invert+0x9c>
    47a6:	b4 e0       	ldi	r27, 0x04	; 4
    47a8:	3c d0       	rcall	.+120    	; 0x4822 <__ultoa_invert+0x9c>
    47aa:	67 0f       	add	r22, r23
    47ac:	78 1f       	adc	r23, r24
    47ae:	89 1f       	adc	r24, r25
    47b0:	9a 1f       	adc	r25, r26
    47b2:	a1 1d       	adc	r26, r1
    47b4:	68 0f       	add	r22, r24
    47b6:	79 1f       	adc	r23, r25
    47b8:	8a 1f       	adc	r24, r26
    47ba:	91 1d       	adc	r25, r1
    47bc:	a1 1d       	adc	r26, r1
    47be:	6a 0f       	add	r22, r26
    47c0:	71 1d       	adc	r23, r1
    47c2:	81 1d       	adc	r24, r1
    47c4:	91 1d       	adc	r25, r1
    47c6:	a1 1d       	adc	r26, r1
    47c8:	20 d0       	rcall	.+64     	; 0x480a <__ultoa_invert+0x84>
    47ca:	09 f4       	brne	.+2      	; 0x47ce <__ultoa_invert+0x48>
    47cc:	68 94       	set
    47ce:	3f 91       	pop	r19
    47d0:	2a e0       	ldi	r18, 0x0A	; 10
    47d2:	26 9f       	mul	r18, r22
    47d4:	11 24       	eor	r1, r1
    47d6:	30 19       	sub	r19, r0
    47d8:	30 5d       	subi	r19, 0xD0	; 208
    47da:	31 93       	st	Z+, r19
    47dc:	de f6       	brtc	.-74     	; 0x4794 <__ultoa_invert+0xe>
    47de:	cf 01       	movw	r24, r30
    47e0:	08 95       	ret
    47e2:	46 2f       	mov	r20, r22
    47e4:	47 70       	andi	r20, 0x07	; 7
    47e6:	40 5d       	subi	r20, 0xD0	; 208
    47e8:	41 93       	st	Z+, r20
    47ea:	b3 e0       	ldi	r27, 0x03	; 3
    47ec:	0f d0       	rcall	.+30     	; 0x480c <__ultoa_invert+0x86>
    47ee:	c9 f7       	brne	.-14     	; 0x47e2 <__ultoa_invert+0x5c>
    47f0:	f6 cf       	rjmp	.-20     	; 0x47de <__ultoa_invert+0x58>
    47f2:	46 2f       	mov	r20, r22
    47f4:	4f 70       	andi	r20, 0x0F	; 15
    47f6:	40 5d       	subi	r20, 0xD0	; 208
    47f8:	4a 33       	cpi	r20, 0x3A	; 58
    47fa:	18 f0       	brcs	.+6      	; 0x4802 <__ultoa_invert+0x7c>
    47fc:	49 5d       	subi	r20, 0xD9	; 217
    47fe:	31 fd       	sbrc	r19, 1
    4800:	40 52       	subi	r20, 0x20	; 32
    4802:	41 93       	st	Z+, r20
    4804:	02 d0       	rcall	.+4      	; 0x480a <__ultoa_invert+0x84>
    4806:	a9 f7       	brne	.-22     	; 0x47f2 <__ultoa_invert+0x6c>
    4808:	ea cf       	rjmp	.-44     	; 0x47de <__ultoa_invert+0x58>
    480a:	b4 e0       	ldi	r27, 0x04	; 4
    480c:	a6 95       	lsr	r26
    480e:	97 95       	ror	r25
    4810:	87 95       	ror	r24
    4812:	77 95       	ror	r23
    4814:	67 95       	ror	r22
    4816:	ba 95       	dec	r27
    4818:	c9 f7       	brne	.-14     	; 0x480c <__ultoa_invert+0x86>
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	61 05       	cpc	r22, r1
    481e:	71 05       	cpc	r23, r1
    4820:	08 95       	ret
    4822:	9b 01       	movw	r18, r22
    4824:	ac 01       	movw	r20, r24
    4826:	0a 2e       	mov	r0, r26
    4828:	06 94       	lsr	r0
    482a:	57 95       	ror	r21
    482c:	47 95       	ror	r20
    482e:	37 95       	ror	r19
    4830:	27 95       	ror	r18
    4832:	ba 95       	dec	r27
    4834:	c9 f7       	brne	.-14     	; 0x4828 <__ultoa_invert+0xa2>
    4836:	62 0f       	add	r22, r18
    4838:	73 1f       	adc	r23, r19
    483a:	84 1f       	adc	r24, r20
    483c:	95 1f       	adc	r25, r21
    483e:	a0 1d       	adc	r26, r0
    4840:	08 95       	ret

00004842 <_exit>:
    4842:	f8 94       	cli

00004844 <__stop_program>:
    4844:	ff cf       	rjmp	.-2      	; 0x4844 <__stop_program>
