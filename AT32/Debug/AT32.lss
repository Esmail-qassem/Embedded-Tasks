
AT32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00003d12  00003da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800190  00800190  00003ed6  2**0
                  ALLOC
  3 .stab         00005010  00000000  00000000  00003ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000040eb  00000000  00000000  00008ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000cfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  0000d173  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  0000d369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  0000f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  00011e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  00012167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012b45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__vector_1>
       8:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <__vector_2>
       c:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__vector_3>
      10:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__vector_4>
      14:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__vector_5>
      18:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_6>
      1c:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_7>
      20:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__vector_8>
      24:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_9>
      28:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_10>
      2c:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 1a 	call	0x3484	; 0x3484 <main>
      8a:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__epilogue_restores__+0x18>

000007ea <__ltsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__ltsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__ltsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__ltsf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__epilogue_restores__+0x18>

0000084a <__floatsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__prologue_saves__+0x12>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	da 01       	movw	r26, r20
     860:	c9 01       	movw	r24, r18
     862:	88 27       	eor	r24, r24
     864:	b7 fd       	sbrc	r27, 7
     866:	83 95       	inc	r24
     868:	99 27       	eor	r25, r25
     86a:	aa 27       	eor	r26, r26
     86c:	bb 27       	eor	r27, r27
     86e:	b8 2e       	mov	r11, r24
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	41 05       	cpc	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	19 f4       	brne	.+6      	; 0x880 <__stack+0x21>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__stack+0x95>
     880:	88 23       	and	r24, r24
     882:	a9 f0       	breq	.+42     	; 0x8ae <__stack+0x4f>
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	58 07       	cpc	r21, r24
     892:	29 f4       	brne	.+10     	; 0x89e <__stack+0x3f>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9f ec       	ldi	r25, 0xCF	; 207
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <__stack+0x9f>
     89e:	ee 24       	eor	r14, r14
     8a0:	ff 24       	eor	r15, r15
     8a2:	87 01       	movw	r16, r14
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	79 01       	movw	r14, r18
     8b0:	8a 01       	movw	r16, r20
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	c8 2e       	mov	r12, r24
     8b6:	d1 2c       	mov	r13, r1
     8b8:	dc 82       	std	Y+4, r13	; 0x04
     8ba:	cb 82       	std	Y+3, r12	; 0x03
     8bc:	ed 82       	std	Y+5, r14	; 0x05
     8be:	fe 82       	std	Y+6, r15	; 0x06
     8c0:	0f 83       	std	Y+7, r16	; 0x07
     8c2:	18 87       	std	Y+8, r17	; 0x08
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x95>
     8d4:	08 2e       	mov	r0, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	ee 0c       	add	r14, r14
     8da:	ff 1c       	adc	r15, r15
     8dc:	00 1f       	adc	r16, r16
     8de:	11 1f       	adc	r17, r17
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d9 0a       	sbc	r13, r25
     8f0:	dc 82       	std	Y+4, r13	; 0x04
     8f2:	cb 82       	std	Y+3, r12	; 0x03
     8f4:	ba 82       	std	Y+2, r11	; 0x02
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     8fe:	28 96       	adiw	r28, 0x08	; 8
     900:	e9 e0       	ldi	r30, 0x09	; 9
     902:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__epilogue_restores__+0x12>

00000906 <__fixsfsi>:
     906:	ac e0       	ldi	r26, 0x0C	; 12
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__prologue_saves__+0x20>
     912:	69 83       	std	Y+1, r22	; 0x01
     914:	7a 83       	std	Y+2, r23	; 0x02
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	be 01       	movw	r22, r28
     920:	6b 5f       	subi	r22, 0xFB	; 251
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	61 f1       	breq	.+88     	; 0x986 <__fixsfsi+0x80>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	50 f1       	brcs	.+84     	; 0x986 <__fixsfsi+0x80>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	21 f4       	brne	.+8      	; 0x93e <__fixsfsi+0x38>
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	88 23       	and	r24, r24
     93a:	51 f1       	breq	.+84     	; 0x990 <__fixsfsi+0x8a>
     93c:	2e c0       	rjmp	.+92     	; 0x99a <__fixsfsi+0x94>
     93e:	2f 81       	ldd	r18, Y+7	; 0x07
     940:	38 85       	ldd	r19, Y+8	; 0x08
     942:	37 fd       	sbrc	r19, 7
     944:	20 c0       	rjmp	.+64     	; 0x986 <__fixsfsi+0x80>
     946:	6e 81       	ldd	r22, Y+6	; 0x06
     948:	2f 31       	cpi	r18, 0x1F	; 31
     94a:	31 05       	cpc	r19, r1
     94c:	1c f0       	brlt	.+6      	; 0x954 <__fixsfsi+0x4e>
     94e:	66 23       	and	r22, r22
     950:	f9 f0       	breq	.+62     	; 0x990 <__fixsfsi+0x8a>
     952:	23 c0       	rjmp	.+70     	; 0x99a <__fixsfsi+0x94>
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	29 85       	ldd	r18, Y+9	; 0x09
     95e:	3a 85       	ldd	r19, Y+10	; 0x0a
     960:	4b 85       	ldd	r20, Y+11	; 0x0b
     962:	5c 85       	ldd	r21, Y+12	; 0x0c
     964:	04 c0       	rjmp	.+8      	; 0x96e <__fixsfsi+0x68>
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__fixsfsi+0x60>
     972:	66 23       	and	r22, r22
     974:	b1 f0       	breq	.+44     	; 0x9a2 <__fixsfsi+0x9c>
     976:	50 95       	com	r21
     978:	40 95       	com	r20
     97a:	30 95       	com	r19
     97c:	21 95       	neg	r18
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__fixsfsi+0x9c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__fixsfsi+0x9c>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e8       	ldi	r21, 0x80	; 128
     9a2:	b9 01       	movw	r22, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	2c 96       	adiw	r28, 0x0c	; 12
     9a8:	e2 e0       	ldi	r30, 0x02	; 2
     9aa:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__epilogue_restores__+0x20>

000009ae <__floatunsisf>:
     9ae:	a8 e0       	ldi	r26, 0x08	; 8
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__prologue_saves__+0x10>
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	81 05       	cpc	r24, r1
     9c4:	91 05       	cpc	r25, r1
     9c6:	19 f4       	brne	.+6      	; 0x9ce <__floatunsisf+0x20>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	60 c0       	rjmp	.+192    	; 0xa8e <__floatunsisf+0xe0>
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	f7 ff       	sbrs	r31, 7
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <__floatunsisf+0xbc>
     9f4:	22 27       	eor	r18, r18
     9f6:	33 27       	eor	r19, r19
     9f8:	2e 1b       	sub	r18, r30
     9fa:	3f 0b       	sbc	r19, r31
     9fc:	57 01       	movw	r10, r14
     9fe:	68 01       	movw	r12, r16
     a00:	02 2e       	mov	r0, r18
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__floatunsisf+0x5e>
     a04:	d6 94       	lsr	r13
     a06:	c7 94       	ror	r12
     a08:	b7 94       	ror	r11
     a0a:	a7 94       	ror	r10
     a0c:	0a 94       	dec	r0
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__floatunsisf+0x56>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatunsisf+0x7c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	2a 95       	dec	r18
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatunsisf+0x74>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8e 21       	and	r24, r14
     a36:	9f 21       	and	r25, r15
     a38:	a0 23       	and	r26, r16
     a3a:	b1 23       	and	r27, r17
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	21 f0       	breq	.+8      	; 0xa4c <__floatunsisf+0x9e>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	4a 29       	or	r20, r10
     a4e:	5b 29       	or	r21, r11
     a50:	6c 29       	or	r22, r12
     a52:	7d 29       	or	r23, r13
     a54:	4d 83       	std	Y+5, r20	; 0x05
     a56:	5e 83       	std	Y+6, r21	; 0x06
     a58:	6f 83       	std	Y+7, r22	; 0x07
     a5a:	78 87       	std	Y+8, r23	; 0x08
     a5c:	8e e1       	ldi	r24, 0x1E	; 30
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	8e 1b       	sub	r24, r30
     a62:	9f 0b       	sbc	r25, r31
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	12 c0       	rjmp	.+36     	; 0xa8e <__floatunsisf+0xe0>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	81 f0       	breq	.+32     	; 0xa8e <__floatunsisf+0xe0>
     a6e:	0e 2e       	mov	r0, r30
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0xcc>
     a72:	ee 0c       	add	r14, r14
     a74:	ff 1c       	adc	r15, r15
     a76:	00 1f       	adc	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0xc4>
     a7e:	ed 82       	std	Y+5, r14	; 0x05
     a80:	fe 82       	std	Y+6, r15	; 0x06
     a82:	0f 83       	std	Y+7, r16	; 0x07
     a84:	18 87       	std	Y+8, r17	; 0x08
     a86:	ce 1a       	sub	r12, r30
     a88:	df 0a       	sbc	r13, r31
     a8a:	dc 82       	std	Y+4, r13	; 0x04
     a8c:	cb 82       	std	Y+3, r12	; 0x03
     a8e:	1a 82       	std	Y+2, r1	; 0x02
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	ea e0       	ldi	r30, 0x0A	; 10
     a9c:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__epilogue_restores__+0x10>

00000aa0 <__clzsi2>:
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e8 16       	cp	r14, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	f8 06       	cpc	r15, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 07       	cpc	r16, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	18 07       	cpc	r17, r24
     abc:	88 f4       	brcc	.+34     	; 0xae0 <__clzsi2+0x40>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	e8 16       	cp	r14, r24
     ac2:	f1 04       	cpc	r15, r1
     ac4:	01 05       	cpc	r16, r1
     ac6:	11 05       	cpc	r17, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <__clzsi2+0x36>
     aca:	28 f0       	brcs	.+10     	; 0xad6 <__clzsi2+0x36>
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a0 e0       	ldi	r26, 0x00	; 0
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__clzsi2+0x64>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <__clzsi2+0x64>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	e8 16       	cp	r14, r24
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	f8 06       	cpc	r15, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 07       	cpc	r16, r24
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	18 07       	cpc	r17, r24
     af0:	28 f0       	brcs	.+10     	; 0xafc <__clzsi2+0x5c>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__clzsi2+0x64>
     afc:	80 e1       	ldi	r24, 0x10	; 16
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	20 e2       	ldi	r18, 0x20	; 32
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	4a 0b       	sbc	r20, r26
     b12:	5b 0b       	sbc	r21, r27
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__clzsi2+0x7e>
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__clzsi2+0x76>
     b22:	f7 01       	movw	r30, r14
     b24:	e8 57       	subi	r30, 0x78	; 120
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	80 81       	ld	r24, Z
     b2a:	28 1b       	sub	r18, r24
     b2c:	31 09       	sbc	r19, r1
     b2e:	41 09       	sbc	r20, r1
     b30:	51 09       	sbc	r21, r1
     b32:	c9 01       	movw	r24, r18
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <__pack_f>:
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	fc 01       	movw	r30, r24
     b4a:	e4 80       	ldd	r14, Z+4	; 0x04
     b4c:	f5 80       	ldd	r15, Z+5	; 0x05
     b4e:	06 81       	ldd	r16, Z+6	; 0x06
     b50:	17 81       	ldd	r17, Z+7	; 0x07
     b52:	d1 80       	ldd	r13, Z+1	; 0x01
     b54:	80 81       	ld	r24, Z
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	48 f4       	brcc	.+18     	; 0xb6c <__pack_f+0x2e>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e1       	ldi	r26, 0x10	; 16
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 2a       	or	r14, r24
     b64:	f9 2a       	or	r15, r25
     b66:	0a 2b       	or	r16, r26
     b68:	1b 2b       	or	r17, r27
     b6a:	a5 c0       	rjmp	.+330    	; 0xcb6 <__pack_f+0x178>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__pack_f+0x34>
     b70:	9f c0       	rjmp	.+318    	; 0xcb0 <__pack_f+0x172>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	21 f4       	brne	.+8      	; 0xb7e <__pack_f+0x40>
     b76:	ee 24       	eor	r14, r14
     b78:	ff 24       	eor	r15, r15
     b7a:	87 01       	movw	r16, r14
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__pack_f+0x4a>
     b7e:	e1 14       	cp	r14, r1
     b80:	f1 04       	cpc	r15, r1
     b82:	01 05       	cpc	r16, r1
     b84:	11 05       	cpc	r17, r1
     b86:	19 f4       	brne	.+6      	; 0xb8e <__pack_f+0x50>
     b88:	e0 e0       	ldi	r30, 0x00	; 0
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	96 c0       	rjmp	.+300    	; 0xcba <__pack_f+0x17c>
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	73 81       	ldd	r23, Z+3	; 0x03
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	62 38       	cpi	r22, 0x82	; 130
     b96:	79 07       	cpc	r23, r25
     b98:	0c f0       	brlt	.+2      	; 0xb9c <__pack_f+0x5e>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <__pack_f+0x114>
     b9c:	22 e8       	ldi	r18, 0x82	; 130
     b9e:	3f ef       	ldi	r19, 0xFF	; 255
     ba0:	26 1b       	sub	r18, r22
     ba2:	37 0b       	sbc	r19, r23
     ba4:	2a 31       	cpi	r18, 0x1A	; 26
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <__pack_f+0x76>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	2a c0       	rjmp	.+84     	; 0xc08 <__pack_f+0xca>
     bb4:	b8 01       	movw	r22, r16
     bb6:	a7 01       	movw	r20, r14
     bb8:	02 2e       	mov	r0, r18
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__pack_f+0x86>
     bbc:	76 95       	lsr	r23
     bbe:	67 95       	ror	r22
     bc0:	57 95       	ror	r21
     bc2:	47 95       	ror	r20
     bc4:	0a 94       	dec	r0
     bc6:	d2 f7       	brpl	.-12     	; 0xbbc <__pack_f+0x7e>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__pack_f+0x9c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__pack_f+0x94>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__pack_f+0xbe>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	9a 01       	movw	r18, r20
     bfe:	ab 01       	movw	r20, r22
     c00:	28 2b       	or	r18, r24
     c02:	39 2b       	or	r19, r25
     c04:	4a 2b       	or	r20, r26
     c06:	5b 2b       	or	r21, r27
     c08:	da 01       	movw	r26, r20
     c0a:	c9 01       	movw	r24, r18
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	91 05       	cpc	r25, r1
     c18:	a1 05       	cpc	r26, r1
     c1a:	b1 05       	cpc	r27, r1
     c1c:	39 f4       	brne	.+14     	; 0xc2c <__pack_f+0xee>
     c1e:	27 ff       	sbrs	r18, 7
     c20:	09 c0       	rjmp	.+18     	; 0xc34 <__pack_f+0xf6>
     c22:	20 5c       	subi	r18, 0xC0	; 192
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	4f 4f       	sbci	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__pack_f+0xf6>
     c2c:	21 5c       	subi	r18, 0xC1	; 193
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	4f 4f       	sbci	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	20 30       	cpi	r18, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	3a 07       	cpc	r19, r26
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	4a 07       	cpc	r20, r26
     c42:	a0 e4       	ldi	r26, 0x40	; 64
     c44:	5a 07       	cpc	r21, r26
     c46:	10 f0       	brcs	.+4      	; 0xc4c <__pack_f+0x10e>
     c48:	e1 e0       	ldi	r30, 0x01	; 1
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	79 01       	movw	r14, r18
     c4e:	8a 01       	movw	r16, r20
     c50:	27 c0       	rjmp	.+78     	; 0xca0 <__pack_f+0x162>
     c52:	60 38       	cpi	r22, 0x80	; 128
     c54:	71 05       	cpc	r23, r1
     c56:	64 f5       	brge	.+88     	; 0xcb0 <__pack_f+0x172>
     c58:	fb 01       	movw	r30, r22
     c5a:	e1 58       	subi	r30, 0x81	; 129
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	d8 01       	movw	r26, r16
     c60:	c7 01       	movw	r24, r14
     c62:	8f 77       	andi	r24, 0x7F	; 127
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	a0 70       	andi	r26, 0x00	; 0
     c68:	b0 70       	andi	r27, 0x00	; 0
     c6a:	80 34       	cpi	r24, 0x40	; 64
     c6c:	91 05       	cpc	r25, r1
     c6e:	a1 05       	cpc	r26, r1
     c70:	b1 05       	cpc	r27, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <__pack_f+0x144>
     c74:	e7 fe       	sbrs	r14, 7
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <__pack_f+0x154>
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__pack_f+0x14c>
     c82:	8f e3       	ldi	r24, 0x3F	; 63
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 0e       	add	r14, r24
     c8c:	f9 1e       	adc	r15, r25
     c8e:	0a 1f       	adc	r16, r26
     c90:	1b 1f       	adc	r17, r27
     c92:	17 ff       	sbrs	r17, 7
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <__pack_f+0x162>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	16 95       	lsr	r17
     ca4:	07 95       	ror	r16
     ca6:	f7 94       	ror	r15
     ca8:	e7 94       	ror	r14
     caa:	8a 95       	dec	r24
     cac:	d1 f7       	brne	.-12     	; 0xca2 <__pack_f+0x164>
     cae:	05 c0       	rjmp	.+10     	; 0xcba <__pack_f+0x17c>
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	87 01       	movw	r16, r14
     cb6:	ef ef       	ldi	r30, 0xFF	; 255
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	6e 2f       	mov	r22, r30
     cbc:	67 95       	ror	r22
     cbe:	66 27       	eor	r22, r22
     cc0:	67 95       	ror	r22
     cc2:	90 2f       	mov	r25, r16
     cc4:	9f 77       	andi	r25, 0x7F	; 127
     cc6:	d7 94       	ror	r13
     cc8:	dd 24       	eor	r13, r13
     cca:	d7 94       	ror	r13
     ccc:	8e 2f       	mov	r24, r30
     cce:	86 95       	lsr	r24
     cd0:	49 2f       	mov	r20, r25
     cd2:	46 2b       	or	r20, r22
     cd4:	58 2f       	mov	r21, r24
     cd6:	5d 29       	or	r21, r13
     cd8:	b7 01       	movw	r22, r14
     cda:	ca 01       	movw	r24, r20
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <__unpack_f>:
     ce8:	fc 01       	movw	r30, r24
     cea:	db 01       	movw	r26, r22
     cec:	40 81       	ld	r20, Z
     cee:	51 81       	ldd	r21, Z+1	; 0x01
     cf0:	22 81       	ldd	r18, Z+2	; 0x02
     cf2:	62 2f       	mov	r22, r18
     cf4:	6f 77       	andi	r22, 0x7F	; 127
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	22 1f       	adc	r18, r18
     cfa:	22 27       	eor	r18, r18
     cfc:	22 1f       	adc	r18, r18
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	89 2f       	mov	r24, r25
     d02:	88 0f       	add	r24, r24
     d04:	82 2b       	or	r24, r18
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	99 1f       	adc	r25, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	99 1f       	adc	r25, r25
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	a9 f5       	brne	.+106    	; 0xd86 <__unpack_f+0x9e>
     d1c:	41 15       	cp	r20, r1
     d1e:	51 05       	cpc	r21, r1
     d20:	61 05       	cpc	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <__unpack_f+0x42>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <__unpack_f+0xb0>
     d2a:	82 e8       	ldi	r24, 0x82	; 130
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	9a 01       	movw	r18, r20
     d38:	ab 01       	movw	r20, r22
     d3a:	67 e0       	ldi	r22, 0x07	; 7
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	6a 95       	dec	r22
     d46:	d1 f7       	brne	.-12     	; 0xd3c <__unpack_f+0x54>
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	8c 93       	st	X, r24
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__unpack_f+0x80>
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	9c 93       	st	X, r25
     d64:	8e 93       	st	-X, r24
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	20 30       	cpi	r18, 0x00	; 0
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	38 07       	cpc	r19, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	48 07       	cpc	r20, r24
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	58 07       	cpc	r21, r24
     d76:	58 f3       	brcs	.-42     	; 0xd4e <__unpack_f+0x66>
     d78:	14 96       	adiw	r26, 0x04	; 4
     d7a:	2d 93       	st	X+, r18
     d7c:	3d 93       	st	X+, r19
     d7e:	4d 93       	st	X+, r20
     d80:	5c 93       	st	X, r21
     d82:	17 97       	sbiw	r26, 0x07	; 7
     d84:	08 95       	ret
     d86:	2f 3f       	cpi	r18, 0xFF	; 255
     d88:	31 05       	cpc	r19, r1
     d8a:	79 f4       	brne	.+30     	; 0xdaa <__unpack_f+0xc2>
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	61 05       	cpc	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	19 f4       	brne	.+6      	; 0xd9c <__unpack_f+0xb4>
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	8c 93       	st	X, r24
     d9a:	08 95       	ret
     d9c:	64 ff       	sbrs	r22, 4
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <__unpack_f+0xbe>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
     da4:	12 c0       	rjmp	.+36     	; 0xdca <__unpack_f+0xe2>
     da6:	1c 92       	st	X, r1
     da8:	10 c0       	rjmp	.+32     	; 0xdca <__unpack_f+0xe2>
     daa:	2f 57       	subi	r18, 0x7F	; 127
     dac:	30 40       	sbci	r19, 0x00	; 0
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	3c 93       	st	X, r19
     db2:	2e 93       	st	-X, r18
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	8c 93       	st	X, r24
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	8a 95       	dec	r24
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <__unpack_f+0xd4>
     dc8:	70 64       	ori	r23, 0x40	; 64
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	4d 93       	st	X+, r20
     dce:	5d 93       	st	X+, r21
     dd0:	6d 93       	st	X+, r22
     dd2:	7c 93       	st	X, r23
     dd4:	17 97       	sbiw	r26, 0x07	; 7
     dd6:	08 95       	ret

00000dd8 <__fpcmp_parts_f>:
     dd8:	1f 93       	push	r17
     dda:	dc 01       	movw	r26, r24
     ddc:	fb 01       	movw	r30, r22
     dde:	9c 91       	ld	r25, X
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	08 f4       	brcc	.+2      	; 0xde6 <__fpcmp_parts_f+0xe>
     de4:	47 c0       	rjmp	.+142    	; 0xe74 <__fpcmp_parts_f+0x9c>
     de6:	80 81       	ld	r24, Z
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	08 f4       	brcc	.+2      	; 0xdee <__fpcmp_parts_f+0x16>
     dec:	43 c0       	rjmp	.+134    	; 0xe74 <__fpcmp_parts_f+0x9c>
     dee:	94 30       	cpi	r25, 0x04	; 4
     df0:	51 f4       	brne	.+20     	; 0xe06 <__fpcmp_parts_f+0x2e>
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	1c 91       	ld	r17, X
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	99 f5       	brne	.+102    	; 0xe60 <__fpcmp_parts_f+0x88>
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	68 2f       	mov	r22, r24
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	61 1b       	sub	r22, r17
     e02:	71 09       	sbc	r23, r1
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <__fpcmp_parts_f+0xac>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	21 f0       	breq	.+8      	; 0xe12 <__fpcmp_parts_f+0x3a>
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__fpcmp_parts_f+0x42>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	b9 f1       	breq	.+110    	; 0xe80 <__fpcmp_parts_f+0xa8>
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	88 23       	and	r24, r24
     e16:	89 f1       	breq	.+98     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e18:	2d c0       	rjmp	.+90     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	1c 91       	ld	r17, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	f1 f0       	breq	.+60     	; 0xe60 <__fpcmp_parts_f+0x88>
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	18 17       	cp	r17, r24
     e28:	d9 f4       	brne	.+54     	; 0xe60 <__fpcmp_parts_f+0x88>
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	94 f0       	brlt	.+36     	; 0xe60 <__fpcmp_parts_f+0x88>
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	bc f0       	brlt	.+46     	; 0xe70 <__fpcmp_parts_f+0x98>
     e42:	14 96       	adiw	r26, 0x04	; 4
     e44:	8d 91       	ld	r24, X+
     e46:	9d 91       	ld	r25, X+
     e48:	0d 90       	ld	r0, X+
     e4a:	bc 91       	ld	r27, X
     e4c:	a0 2d       	mov	r26, r0
     e4e:	24 81       	ldd	r18, Z+4	; 0x04
     e50:	35 81       	ldd	r19, Z+5	; 0x05
     e52:	46 81       	ldd	r20, Z+6	; 0x06
     e54:	57 81       	ldd	r21, Z+7	; 0x07
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	4a 07       	cpc	r20, r26
     e5c:	5b 07       	cpc	r21, r27
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <__fpcmp_parts_f+0x8e>
     e60:	11 23       	and	r17, r17
     e62:	41 f0       	breq	.+16     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	a4 07       	cpc	r26, r20
     e6c:	b5 07       	cpc	r27, r21
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fpcmp_parts_f+0xa8>
     e70:	11 23       	and	r17, r17
     e72:	19 f0       	breq	.+6      	; 0xe7a <__fpcmp_parts_f+0xa2>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <__fpcmp_parts_f+0xac>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__fpcmp_parts_f+0xac>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	cb 01       	movw	r24, r22
     e86:	1f 91       	pop	r17
     e88:	08 95       	ret

00000e8a <Stack_Full>:
#include "stdio.h"
#include "../../BSW/LIB/STD_TYPES.h"
#include "Stack.h"

uint8 static Stack_Full(Stack* My_Stack)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <Stack_Full+0x6>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
    return 0;
     e98:	80 e0       	ldi	r24, 0x00	; 0
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <Stack_Empty>:
uint8 static Stack_Empty(Stack* My_Stack)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <Stack_Empty+0x6>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
    return (My_Stack->top==NULL);
     eb4:	e9 81       	ldd	r30, Y+1	; 0x01
     eb6:	fa 81       	ldd	r31, Y+2	; 0x02
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	1b 82       	std	Y+3, r1	; 0x03
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <Stack_Empty+0x22>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Stack_Creation>:

Status Stack_Creation(Stack* My_Stack)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Stack_Creation+0x6>
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9b 83       	std	Y+3, r25	; 0x03
     ee2:	8a 83       	std	Y+2, r24	; 0x02
    Status Local=E_NOT_OK;
     ee4:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	61 f0       	breq	.+24     	; 0xf06 <Stack_Creation+0x32>
    {
        //do nothing
    }
    else
    {
        My_Stack->Size=0;
     eee:	ea 81       	ldd	r30, Y+2	; 0x02
     ef0:	fb 81       	ldd	r31, Y+3	; 0x03
     ef2:	12 82       	std	Z+2, r1	; 0x02
     ef4:	13 82       	std	Z+3, r1	; 0x03
     ef6:	14 82       	std	Z+4, r1	; 0x04
     ef8:	15 82       	std	Z+5, r1	; 0x05
        My_Stack->top=NULL;
     efa:	ea 81       	ldd	r30, Y+2	; 0x02
     efc:	fb 81       	ldd	r31, Y+3	; 0x03
     efe:	11 82       	std	Z+1, r1	; 0x01
     f00:	10 82       	st	Z, r1
         Local=E_OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01

    }
return Local;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <Stack_Push>:
Status Stack_Push(Stack* My_Stack,StackEntry Variable)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	27 97       	sbiw	r28, 0x07	; 7
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	9d 83       	std	Y+5, r25	; 0x05
     f2a:	8c 83       	std	Y+4, r24	; 0x04
     f2c:	7f 83       	std	Y+7, r23	; 0x07
     f2e:	6e 83       	std	Y+6, r22	; 0x06
    Status Local=E_NOT_OK;
     f30:	1b 82       	std	Y+3, r1	; 0x03
    StackNode * Local_Pointer=(StackNode*)malloc(sizeof(StackNode));
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <malloc>
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01

    if(NULL==My_Stack|| Stack_Full(My_Stack))
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	59 f1       	breq	.+86     	; 0xf9c <Stack_Push+0x88>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	0e 94 45 07 	call	0xe8a	; 0xe8a <Stack_Full>
     f4e:	88 23       	and	r24, r24
     f50:	29 f5       	brne	.+74     	; 0xf9c <Stack_Push+0x88>
        //do nothing
    }
    else
    {

        Local_Pointer->entry=Variable;
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	8e 81       	ldd	r24, Y+6	; 0x06
     f58:	9f 81       	ldd	r25, Y+7	; 0x07
     f5a:	93 83       	std	Z+3, r25	; 0x03
     f5c:	82 83       	std	Z+2, r24	; 0x02
        Local_Pointer->Next=My_Stack->top;
     f5e:	ec 81       	ldd	r30, Y+4	; 0x04
     f60:	fd 81       	ldd	r31, Y+5	; 0x05
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
        My_Stack->top=Local_Pointer;
     f6e:	ec 81       	ldd	r30, Y+4	; 0x04
     f70:	fd 81       	ldd	r31, Y+5	; 0x05
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
        My_Stack->Size++;
     f7a:	ec 81       	ldd	r30, Y+4	; 0x04
     f7c:	fd 81       	ldd	r31, Y+5	; 0x05
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	a4 81       	ldd	r26, Z+4	; 0x04
     f84:	b5 81       	ldd	r27, Z+5	; 0x05
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	a1 1d       	adc	r26, r1
     f8a:	b1 1d       	adc	r27, r1
     f8c:	ec 81       	ldd	r30, Y+4	; 0x04
     f8e:	fd 81       	ldd	r31, Y+5	; 0x05
     f90:	82 83       	std	Z+2, r24	; 0x02
     f92:	93 83       	std	Z+3, r25	; 0x03
     f94:	a4 83       	std	Z+4, r26	; 0x04
     f96:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	8b 83       	std	Y+3, r24	; 0x03
    }
return Local;
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03

}
     f9e:	27 96       	adiw	r28, 0x07	; 7
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <Stack_Pop>:
Status Stack_Pop(Stack* My_Stack,StackEntry* Variable)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	27 97       	sbiw	r28, 0x07	; 7
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	9d 83       	std	Y+5, r25	; 0x05
     fc6:	8c 83       	std	Y+4, r24	; 0x04
     fc8:	7f 83       	std	Y+7, r23	; 0x07
     fca:	6e 83       	std	Y+6, r22	; 0x06
    StackNode* Local_Pointer= NULL;
     fcc:	1b 82       	std	Y+3, r1	; 0x03
     fce:	1a 82       	std	Y+2, r1	; 0x02
    Status Local=E_NOT_OK;
     fd0:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack || NULL == Variable|| Stack_Empty(My_Stack))
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d9 f1       	breq	.+118    	; 0x1050 <Stack_Pop+0xa0>
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	b9 f1       	breq	.+110    	; 0x1050 <Stack_Pop+0xa0>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	0e 94 52 07 	call	0xea4	; 0xea4 <Stack_Empty>
     fea:	88 23       	and	r24, r24
     fec:	89 f5       	brne	.+98     	; 0x1050 <Stack_Pop+0xa0>
        //do nothing
    }
    else
    {

        *Variable=My_Stack->top->entry;
     fee:	ec 81       	ldd	r30, Y+4	; 0x04
     ff0:	fd 81       	ldd	r31, Y+5	; 0x05
     ff2:	01 90       	ld	r0, Z+
     ff4:	f0 81       	ld	r31, Z
     ff6:	e0 2d       	mov	r30, r0
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	ee 81       	ldd	r30, Y+6	; 0x06
     ffe:	ff 81       	ldd	r31, Y+7	; 0x07
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
        Local_Pointer= My_Stack->top;
    1004:	ec 81       	ldd	r30, Y+4	; 0x04
    1006:	fd 81       	ldd	r31, Y+5	; 0x05
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02
        My_Stack->top=My_Stack->top->Next;
    1010:	ec 81       	ldd	r30, Y+4	; 0x04
    1012:	fd 81       	ldd	r31, Y+5	; 0x05
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	ec 81       	ldd	r30, Y+4	; 0x04
    1020:	fd 81       	ldd	r31, Y+5	; 0x05
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
        free(Local_Pointer);
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	0e 94 9d 1b 	call	0x373a	; 0x373a <free>
        My_Stack->Size--;
    102e:	ec 81       	ldd	r30, Y+4	; 0x04
    1030:	fd 81       	ldd	r31, Y+5	; 0x05
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	a4 81       	ldd	r26, Z+4	; 0x04
    1038:	b5 81       	ldd	r27, Z+5	; 0x05
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	a1 09       	sbc	r26, r1
    103e:	b1 09       	sbc	r27, r1
    1040:	ec 81       	ldd	r30, Y+4	; 0x04
    1042:	fd 81       	ldd	r31, Y+5	; 0x05
    1044:	82 83       	std	Z+2, r24	; 0x02
    1046:	93 83       	std	Z+3, r25	; 0x03
    1048:	a4 83       	std	Z+4, r26	; 0x04
    104a:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    }
return Local;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	27 96       	adiw	r28, 0x07	; 7
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <Stack_Display>:

Status Stack_Display(Stack* My_Stack) {
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <Stack_Display+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <Stack_Display+0x8>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9d 83       	std	Y+5, r25	; 0x05
    1074:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
    1076:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* temp = NULL;
    1078:	1a 82       	std	Y+2, r1	; 0x02
    107a:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == My_Stack) {
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	99 f1       	breq	.+102    	; 0x10ea <Stack_Display+0x86>
        // Do nothing
    } else {
        temp = My_Stack->top;
    1084:	ec 81       	ldd	r30, Y+4	; 0x04
    1086:	fd 81       	ldd	r31, Y+5	; 0x05
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	26 c0       	rjmp	.+76     	; 0x10de <Stack_Display+0x7a>
        while (temp != NULL) {
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
    1092:	e9 81       	ldd	r30, Y+1	; 0x01
    1094:	fa 81       	ldd	r31, Y+2	; 0x02
    1096:	40 81       	ld	r20, Z
    1098:	51 81       	ldd	r21, Z+1	; 0x01
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	22 81       	ldd	r18, Z+2	; 0x02
    10a0:	33 81       	ldd	r19, Z+3	; 0x03
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <Stack_Display+0x40>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <Stack_Display+0x42>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <Stack_Display+0x44>
    10a8:	ed b7       	in	r30, 0x3d	; 61
    10aa:	fe b7       	in	r31, 0x3e	; 62
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	80 e6       	ldi	r24, 0x60	; 96
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
    10b6:	53 83       	std	Z+3, r21	; 0x03
    10b8:	42 83       	std	Z+2, r20	; 0x02
    10ba:	35 83       	std	Z+5, r19	; 0x05
    10bc:	24 83       	std	Z+4, r18	; 0x04
    10be:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <printf>
    10c2:	8d b7       	in	r24, 0x3d	; 61
    10c4:	9e b7       	in	r25, 0x3e	; 62
    10c6:	06 96       	adiw	r24, 0x06	; 6
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	9e bf       	out	0x3e, r25	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	8d bf       	out	0x3d, r24	; 61
            temp = temp->Next;
    10d2:	e9 81       	ldd	r30, Y+1	; 0x01
    10d4:	fa 81       	ldd	r31, Y+2	; 0x02
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
    StackNode* temp = NULL;
    if (NULL == My_Stack) {
        // Do nothing
    } else {
        temp = My_Stack->top;
        while (temp != NULL) {
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	b1 f6       	brne	.-84     	; 0x1092 <Stack_Display+0x2e>
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
            temp = temp->Next;
        }
        Local = E_OK;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <Clear_Stack>:
Status Clear_Stack(Stack* My_Stack)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <Clear_Stack+0x6>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <Clear_Stack+0x8>
    1104:	0f 92       	push	r0
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	9d 83       	std	Y+5, r25	; 0x05
    110c:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
    110e:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* Local_pointer = NULL;
    1110:	1a 82       	std	Y+2, r1	; 0x02
    1112:	19 82       	std	Y+1, r1	; 0x01

   Local_pointer=My_Stack->top;
    1114:	ec 81       	ldd	r30, Y+4	; 0x04
    1116:	fd 81       	ldd	r31, Y+5	; 0x05
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == My_Stack)
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	f9 f0       	breq	.+62     	; 0x1166 <Clear_Stack+0x6a>
    1128:	12 c0       	rjmp	.+36     	; 0x114e <Clear_Stack+0x52>
    }
    else
    {
        while(Local_pointer)
        {
           Local_pointer= Local_pointer->Next;
    112a:	e9 81       	ldd	r30, Y+1	; 0x01
    112c:	fa 81       	ldd	r31, Y+2	; 0x02
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
            free(My_Stack->top);
    1136:	ec 81       	ldd	r30, Y+4	; 0x04
    1138:	fd 81       	ldd	r31, Y+5	; 0x05
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	0e 94 9d 1b 	call	0x373a	; 0x373a <free>
            My_Stack->top=Local_pointer;
    1142:	ec 81       	ldd	r30, Y+4	; 0x04
    1144:	fd 81       	ldd	r31, Y+5	; 0x05
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	80 83       	st	Z, r24
    {
        // Do nothing
    }
    else
    {
        while(Local_pointer)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	51 f7       	brne	.-44     	; 0x112a <Clear_Stack+0x2e>
        {
           Local_pointer= Local_pointer->Next;
            free(My_Stack->top);
            My_Stack->top=Local_pointer;
        }
        My_Stack->Size=0;
    1156:	ec 81       	ldd	r30, Y+4	; 0x04
    1158:	fd 81       	ldd	r31, Y+5	; 0x05
    115a:	12 82       	std	Z+2, r1	; 0x02
    115c:	13 82       	std	Z+3, r1	; 0x03
    115e:	14 82       	std	Z+4, r1	; 0x04
    1160:	15 82       	std	Z+5, r1	; 0x05
        Local = E_OK;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <Stack_Size>:
Status Stack_Size(Stack* My_Stack,StackEntry* Variable)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	00 d0       	rcall	.+0      	; 0x117e <Stack_Size+0x6>
    117e:	00 d0       	rcall	.+0      	; 0x1180 <Stack_Size+0x8>
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9b 83       	std	Y+3, r25	; 0x03
    1188:	8a 83       	std	Y+2, r24	; 0x02
    118a:	7d 83       	std	Y+5, r23	; 0x05
    118c:	6c 83       	std	Y+4, r22	; 0x04
     Status Local = E_NOT_OK;
    118e:	19 82       	std	Y+1, r1	; 0x01

    if (NULL == My_Stack)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <Stack_Size+0x38>
    {
        // Do nothing
    }
    else
    {
        *Variable  =My_Stack->Size;
    1198:	ea 81       	ldd	r30, Y+2	; 0x02
    119a:	fb 81       	ldd	r31, Y+3	; 0x03
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	a4 81       	ldd	r26, Z+4	; 0x04
    11a2:	b5 81       	ldd	r27, Z+5	; 0x05
    11a4:	ec 81       	ldd	r30, Y+4	; 0x04
    11a6:	fd 81       	ldd	r31, Y+5	; 0x05
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
         Local = E_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <TWI_voidMasterInit>:
#include "../inc/TWI_interface.h"
void TWI_voidMasterInit(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
/*SCL CLOCK*/
TWBR_Reg =255;
    11ca:	e0 e2       	ldi	r30, 0x20	; 32
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	80 83       	st	Z, r24
TWSR_Reg->TWPSX=PRESCALER_BY_1;
    11d2:	e1 e2       	ldi	r30, 0x21	; 33
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8c 7f       	andi	r24, 0xFC	; 252
    11da:	80 83       	st	Z, r24
/*ENABLE*/
TWCR_Reg->TWEN=1;
    11dc:	e6 e5       	ldi	r30, 0x56	; 86
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	84 60       	ori	r24, 0x04	; 4
    11e4:	80 83       	st	Z, r24
}
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <TWI_voidStartCondition>:

void TWI_voidStartCondition(void)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
	/*TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT)*/
    TWCR_Reg->TWCR_8bit_Reg  = 164;
    11f4:	e6 e5       	ldi	r30, 0x56	; 86
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	84 ea       	ldi	r24, 0xA4	; 164
    11fa:	80 83       	st	Z, r24
    // Wait for TWINT to be set (operation complete)
    while (TWCR_Reg->TWINT == 0);
    11fc:	e6 e5       	ldi	r30, 0x56	; 86
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 78       	andi	r24, 0x80	; 128
    1204:	88 23       	and	r24, r24
    1206:	d1 f3       	breq	.-12     	; 0x11fc <TWI_voidStartCondition+0x10>
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <TWI_voidStopCondition>:


void TWI_voidStopCondition(void)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	/*TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT)*/
	TWCR_Reg->TWCR_8bit_Reg=148;
    1216:	e6 e5       	ldi	r30, 0x56	; 86
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	84 e9       	ldi	r24, 0x94	; 148
    121c:	80 83       	st	Z, r24
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <TWI_voidSendData>:
void TWI_voidSendData(uint8 Copy_u8Data)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	0f 92       	push	r0
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
	TWDR_Reg=Copy_u8Data;
    1230:	e3 e2       	ldi	r30, 0x23	; 35
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	80 83       	st	Z, r24
	/*TWCR=(1<<TWEN)|(1<<TWINT)*/
    TWCR_Reg->TWCR_8bit_Reg  = 132;
    1238:	e6 e5       	ldi	r30, 0x56	; 86
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	84 e8       	ldi	r24, 0x84	; 132
    123e:	80 83       	st	Z, r24

while(TWCR_Reg->TWINT==0);
    1240:	e6 e5       	ldi	r30, 0x56	; 86
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 78       	andi	r24, 0x80	; 128
    1248:	88 23       	and	r24, r24
    124a:	d1 f3       	breq	.-12     	; 0x1240 <TWI_voidSendData+0x1c>
}
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <TWI_u8ReceiveData>:
uint8 TWI_u8ReceiveData(void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	/*TWCR=(1<<TWEN)|(1<<TWINT)*/
	TWCR_Reg->TWCR_8bit_Reg  = 132;
    125c:	e6 e5       	ldi	r30, 0x56	; 86
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	84 e8       	ldi	r24, 0x84	; 132
    1262:	80 83       	st	Z, r24
	while(TWCR_Reg->TWINT==0);
    1264:	e6 e5       	ldi	r30, 0x56	; 86
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 78       	andi	r24, 0x80	; 128
    126c:	88 23       	and	r24, r24
    126e:	d1 f3       	breq	.-12     	; 0x1264 <TWI_u8ReceiveData+0x10>
return TWDR_Reg;
    1270:	e3 e2       	ldi	r30, 0x23	; 35
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TIMER2_DutyCycle>:
#include "../inc/TIMER2_interface.h"
#include "../inc/TIMER2_private.h"
#include "../inc/TIMER2_register.h"

void TIMER2_DutyCycle(uint8 Copy_uint8Duty)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <TIMER2_DutyCycle+0x6>
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	98 2f       	mov	r25, r24
    1296:	88 27       	eor	r24, r24
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	24 e6       	ldi	r18, 0x64	; 100
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	b9 01       	movw	r22, r18
    12a6:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__udivmodhi4>
    12aa:	cb 01       	movw	r24, r22
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Local_VCalue;
    12b0:	e3 e4       	ldi	r30, 0x43	; 67
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	80 83       	st	Z, r24
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <TIMER2_Delay>:


void TIMER2_Delay(uint16 Copy_uint16Delay)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <TIMER2_Delay+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <TIMER2_Delay+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	9c 83       	std	Y+4, r25	; 0x04
    12d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
    12d4:	1a 82       	std	Y+2, r1	; 0x02
    12d6:	19 82       	std	Y+1, r1	; 0x01
    12d8:	10 c0       	rjmp	.+32     	; 0x12fa <TIMER2_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIFR_Reg->OCF2 == 0);
    12da:	e8 e5       	ldi	r30, 0x58	; 88
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	80 78       	andi	r24, 0x80	; 128
    12e2:	88 23       	and	r24, r24
    12e4:	d1 f3       	breq	.-12     	; 0x12da <TIMER2_Delay+0x16>
	TIFR_Reg->OCF2 =1;
    12e6:	e8 e5       	ldi	r30, 0x58	; 88
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 68       	ori	r24, 0x80	; 128
    12ee:	80 83       	st	Z, r24
	Counter++;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
void TIMER2_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
    12fa:	29 81       	ldd	r18, Y+1	; 0x01
    12fc:	3a 81       	ldd	r19, Y+2	; 0x02
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	48 f3       	brcs	.-46     	; 0x12da <TIMER2_Delay+0x16>
	Counter++;


	}

}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Reg->CS2x= CLCK_SELECTION;
    131e:	e5 e4       	ldi	r30, 0x45	; 69
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	88 7f       	andi	r24, 0xF8	; 248
    1326:	84 60       	ori	r24, 0x04	; 4
    1328:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=DISABLE;
TCCR2_Reg->COM2x=CORRECT_PWM_OUTPUT_MODE;


#elif TIMER_MODE==CTC_MODE
TCCR2_Reg->WGM20=DISABLE;
    132a:	e5 e4       	ldi	r30, 0x45	; 69
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8f 7b       	andi	r24, 0xBF	; 191
    1332:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=ENABLE;
    1334:	e5 e4       	ldi	r30, 0x45	; 69
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 60       	ori	r24, 0x08	; 8
    133c:	80 83       	st	Z, r24
TCCR2_Reg->COM2x=CTC_OUTPUT_MODE;
    133e:	e5 e4       	ldi	r30, 0x45	; 69
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8f 7c       	andi	r24, 0xCF	; 207
    1346:	80 61       	ori	r24, 0x10	; 16
    1348:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
TIMSK_Reg->TOIE2=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
TIMSK_Reg->OCIE2=ENABLE;
    134a:	e9 e5       	ldi	r30, 0x59	; 89
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	80 83       	st	Z, r24
#endif


}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <TIMER2_voiSetPreLoadValue>:


void TIMER2_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Reg=Copy_uint8Value;
    1366:	e4 e4       	ldi	r30, 0x44	; 68
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	80 83       	st	Z, r24
}
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <TIMER2_voiSetCompareMatchValue>:


void TIMER2_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	0f 92       	push	r0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Copy_uint8Value;
    1382:	e3 e4       	ldi	r30, 0x43	; 67
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	80 83       	st	Z, r24
}
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <Timer2_Timer2OVFCallBackFunc>:

Status_t Timer2_Timer2OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <Timer2_Timer2OVFCallBackFunc+0x6>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	9b 83       	std	Y+3, r25	; 0x03
    13a0:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
    13a2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	9b 81       	ldd	r25, Y+3	; 0x03
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	19 f4       	brne	.+6      	; 0x13b2 <Timer2_Timer2OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER2_POINTER_Err;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <Timer2_Timer2OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	90 93 93 01 	sts	0x0193, r25
    13ba:	80 93 92 01 	sts	0x0192, r24
	}

	return Local_ErrorState;
    13be:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <Timer2_Timer2CTCCallBackFunc>:

Status_t Timer2_Timer2CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <Timer2_Timer2CTCCallBackFunc+0x6>
    13d2:	0f 92       	push	r0
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	9b 83       	std	Y+3, r25	; 0x03
    13da:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
    13dc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	9b 81       	ldd	r25, Y+3	; 0x03
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	19 f4       	brne	.+6      	; 0x13ec <Timer2_Timer2CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER2_POINTER_Err;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <Timer2_Timer2CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	90 93 91 01 	sts	0x0191, r25
    13f4:	80 93 90 01 	sts	0x0190, r24
		}

	return Local_ErrorState;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <__vector_4>:




/*TIMER0 COMPARE MATCH*/
void __vector_4(void){
    1406:	1f 92       	push	r1
    1408:	0f 92       	push	r0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	2f 93       	push	r18
    1412:	3f 93       	push	r19
    1414:	4f 93       	push	r20
    1416:	5f 93       	push	r21
    1418:	6f 93       	push	r22
    141a:	7f 93       	push	r23
    141c:	8f 93       	push	r24
    141e:	9f 93       	push	r25
    1420:	af 93       	push	r26
    1422:	bf 93       	push	r27
    1424:	ef 93       	push	r30
    1426:	ff 93       	push	r31
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    1430:	e0 91 90 01 	lds	r30, 0x0190
    1434:	f0 91 91 01 	lds	r31, 0x0191
    1438:	09 95       	icall
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	4f 91       	pop	r20
    1452:	3f 91       	pop	r19
    1454:	2f 91       	pop	r18
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <__vector_5>:

/*TIMER0 OVERFLOW*/
void __vector_5(void){
    1460:	1f 92       	push	r1
    1462:	0f 92       	push	r0
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	0f 92       	push	r0
    1468:	11 24       	eor	r1, r1
    146a:	2f 93       	push	r18
    146c:	3f 93       	push	r19
    146e:	4f 93       	push	r20
    1470:	5f 93       	push	r21
    1472:	6f 93       	push	r22
    1474:	7f 93       	push	r23
    1476:	8f 93       	push	r24
    1478:	9f 93       	push	r25
    147a:	af 93       	push	r26
    147c:	bf 93       	push	r27
    147e:	ef 93       	push	r30
    1480:	ff 93       	push	r31
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    148a:	e0 91 92 01 	lds	r30, 0x0192
    148e:	f0 91 93 01 	lds	r31, 0x0193
    1492:	09 95       	icall
}
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	ff 91       	pop	r31
    149a:	ef 91       	pop	r30
    149c:	bf 91       	pop	r27
    149e:	af 91       	pop	r26
    14a0:	9f 91       	pop	r25
    14a2:	8f 91       	pop	r24
    14a4:	7f 91       	pop	r23
    14a6:	6f 91       	pop	r22
    14a8:	5f 91       	pop	r21
    14aa:	4f 91       	pop	r20
    14ac:	3f 91       	pop	r19
    14ae:	2f 91       	pop	r18
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <TIMER1_voidInit>:
#include "../inc/TIMER1_register.h"
#include "../inc/TIMER1_config.h"


void TIMER1_voidInit(void)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	/*Clock selection*/
TCCR1B_Reg->CS1X= CLCK_SELECT;
    14c2:	ee e4       	ldi	r30, 0x4E	; 78
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	88 7f       	andi	r24, 0xF8	; 248
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	80 83       	st	Z, r24

/*Waveform generation mode*/
TCCR1A_Reg->WGM1X=WAVE_GEN & 0b0011;
    14ce:	ef e4       	ldi	r30, 0x4F	; 79
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8c 7f       	andi	r24, 0xFC	; 252
    14d6:	80 83       	st	Z, r24
TCCR1B_Reg->WGM1XX=(WAVE_GEN>>2) & 0b0011;
    14d8:	ee e4       	ldi	r30, 0x4E	; 78
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	87 7e       	andi	r24, 0xE7	; 231
    14e0:	88 60       	ori	r24, 0x08	; 8
    14e2:	80 83       	st	Z, r24

#ifdef CHANNEL_A

#if TIMER1A_MODE == TIMER1_NON_PWM

TCCR1A_Reg->COM1AX=TIMER1A_OUT_MODE;
    14e4:	ef e4       	ldi	r30, 0x4F	; 79
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 73       	andi	r24, 0x3F	; 63
    14ec:	80 83       	st	Z, r24

#ifdef CHANNEL_B

#if TIMER1B_MODE == TIMER1_NON_PWM

		TCCR1A_Reg->COM1BX=TIMER1B_OUT_MODE;
    14ee:	ef e4       	ldi	r30, 0x4F	; 79
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 7c       	andi	r24, 0xCF	; 207
    14f6:	80 83       	st	Z, r24
#endif

/*INTERRUPT ENABLE*/
#ifdef TIMER1_COMPARE_MATCH_A_ISR_ENABLE

		TIMSK_Reg->OCIE1A=Enable;
    14f8:	e9 e5       	ldi	r30, 0x59	; 89
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 61       	ori	r24, 0x10	; 16
    1500:	80 83       	st	Z, r24
#ifdef TIMER1_INPUT_CAPTURE_INTERRUPT
		TIMSK_Reg->TICIE1=Enable;
#endif


}
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <TIMER1_voidSetChannelACompMatch>:


void TIMER1_voidSetChannelACompMatch(uint16 Copy_uint16Data)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <TIMER1_voidSetChannelACompMatch+0x6>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Reg=Copy_uint16Data;
    1516:	ea e4       	ldi	r30, 0x4A	; 74
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(uint16 Copy_uint16Data)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <TIMER1_voidSetChannelBCompMatch+0x6>
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Reg=Copy_uint16Data;
    153a:	e8 e4       	ldi	r30, 0x48	; 72
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(uint16 Copy_uint16ICR)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <TIMER1_voidSetICR+0x6>
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Reg=Copy_uint16ICR;
    155e:	e6 e4       	ldi	r30, 0x46	; 70
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <TIMER1_voidSetTimerValue>:
void TIMER1_voidSetTimerValue(uint16 Copy_uint16Value)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <TIMER1_voidSetTimerValue+0x6>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Reg=	Copy_uint16Value;
    1582:	ec e4       	ldi	r30, 0x4C	; 76
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	80 83       	st	Z, r24
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <TIMER1_uint16GetTimerValue>:
uint16 TIMER1_uint16GetTimerValue(void)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
return TCNT1_Reg;
    15a0:	ec e4       	ldi	r30, 0x4C	; 76
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <TIMER1_CTCASetCallBck>:


Timer1_status TIMER1_CTCASetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <TIMER1_CTCASetCallBck+0x6>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	9b 83       	std	Y+3, r25	; 0x03
    15bc:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    15be:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Copy_pvCallBackFunc)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	19 f4       	brne	.+6      	; 0x15ce <TIMER1_CTCASetCallBck+0x20>
	{
		Local_ErrorState=TIMER1_PONTER_ERR;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <TIMER1_CTCASetCallBck+0x2c>
	}
	else
	{
		TIMER1_pvCallBackFunc_CTC_A=Copy_pvCallBackFunc;
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	9b 81       	ldd	r25, Y+3	; 0x03
    15d2:	90 93 95 01 	sts	0x0195, r25
    15d6:	80 93 94 01 	sts	0x0194, r24
	}
return Local_ErrorState;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <TIMER1_CTCBSetCallBck>:
Timer1_status TIMER1_CTCBSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <TIMER1_CTCBSetCallBck+0x6>
    15ee:	0f 92       	push	r0
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	9b 83       	std	Y+3, r25	; 0x03
    15f6:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_status Local_ErrorState=TIMER1_OK;
    15f8:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	19 f4       	brne	.+6      	; 0x1608 <TIMER1_CTCBSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <TIMER1_CTCBSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CTC_B=Copy_pvCallBackFunc;
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	90 93 97 01 	sts	0x0197, r25
    1610:	80 93 96 01 	sts	0x0196, r24
		}
	return Local_ErrorState;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <TIMER1_OVSetCallBck>:


Timer1_status TIMER1_OVSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <TIMER1_OVSetCallBck+0x6>
    1628:	0f 92       	push	r0
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	9b 83       	std	Y+3, r25	; 0x03
    1630:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    1632:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	19 f4       	brne	.+6      	; 0x1642 <TIMER1_OVSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	06 c0       	rjmp	.+12     	; 0x164e <TIMER1_OVSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_OV=Copy_pvCallBackFunc;
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	90 93 99 01 	sts	0x0199, r25
    164a:	80 93 98 01 	sts	0x0198, r24
		}
	return Local_ErrorState;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <TIMER1_CAPTURESetCallBck>:


Timer1_status TIMER1_CAPTURESetCallBck(void(*Copy_pvCallBackFunc)(void))
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <TIMER1_CAPTURESetCallBck+0x6>
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	9b 83       	std	Y+3, r25	; 0x03
    166a:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
    166c:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	9b 81       	ldd	r25, Y+3	; 0x03
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	19 f4       	brne	.+6      	; 0x167c <TIMER1_CAPTURESetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <TIMER1_CAPTURESetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CaptEvnt=Copy_pvCallBackFunc;
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	90 93 9b 01 	sts	0x019B, r25
    1684:	80 93 9a 01 	sts	0x019A, r24
		}
	return Local_ErrorState;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <__vector_6>:



void __vector_6 (void)
{
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	11 24       	eor	r1, r1
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62

	TIMER1_pvCallBackFunc_CaptEvnt();
    16c0:	e0 91 9a 01 	lds	r30, 0x019A
    16c4:	f0 91 9b 01 	lds	r31, 0x019B
    16c8:	09 95       	icall
	TIFR_Reg->ICF1=Enable;
    16ca:	e8 e5       	ldi	r30, 0x58	; 88
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 62       	ori	r24, 0x20	; 32
    16d2:	80 83       	st	Z, r24
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <__vector_7>:

void __vector_7 (void)
{
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_A();
    1724:	e0 91 94 01 	lds	r30, 0x0194
    1728:	f0 91 95 01 	lds	r31, 0x0195
    172c:	09 95       	icall
}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	ff 91       	pop	r31
    1734:	ef 91       	pop	r30
    1736:	bf 91       	pop	r27
    1738:	af 91       	pop	r26
    173a:	9f 91       	pop	r25
    173c:	8f 91       	pop	r24
    173e:	7f 91       	pop	r23
    1740:	6f 91       	pop	r22
    1742:	5f 91       	pop	r21
    1744:	4f 91       	pop	r20
    1746:	3f 91       	pop	r19
    1748:	2f 91       	pop	r18
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <__vector_8>:

void __vector_8 (void)
{
    1754:	1f 92       	push	r1
    1756:	0f 92       	push	r0
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	0f 92       	push	r0
    175c:	11 24       	eor	r1, r1
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	ef 93       	push	r30
    1774:	ff 93       	push	r31
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_B();
    177e:	e0 91 96 01 	lds	r30, 0x0196
    1782:	f0 91 97 01 	lds	r31, 0x0197
    1786:	09 95       	icall
}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	ff 91       	pop	r31
    178e:	ef 91       	pop	r30
    1790:	bf 91       	pop	r27
    1792:	af 91       	pop	r26
    1794:	9f 91       	pop	r25
    1796:	8f 91       	pop	r24
    1798:	7f 91       	pop	r23
    179a:	6f 91       	pop	r22
    179c:	5f 91       	pop	r21
    179e:	4f 91       	pop	r20
    17a0:	3f 91       	pop	r19
    17a2:	2f 91       	pop	r18
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <__vector_9>:


void __vector_9 (void)
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	2f 93       	push	r18
    17ba:	3f 93       	push	r19
    17bc:	4f 93       	push	r20
    17be:	5f 93       	push	r21
    17c0:	6f 93       	push	r22
    17c2:	7f 93       	push	r23
    17c4:	8f 93       	push	r24
    17c6:	9f 93       	push	r25
    17c8:	af 93       	push	r26
    17ca:	bf 93       	push	r27
    17cc:	ef 93       	push	r30
    17ce:	ff 93       	push	r31
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_OV();
    17d8:	e0 91 98 01 	lds	r30, 0x0198
    17dc:	f0 91 99 01 	lds	r31, 0x0199
    17e0:	09 95       	icall
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	ff 91       	pop	r31
    17e8:	ef 91       	pop	r30
    17ea:	bf 91       	pop	r27
    17ec:	af 91       	pop	r26
    17ee:	9f 91       	pop	r25
    17f0:	8f 91       	pop	r24
    17f2:	7f 91       	pop	r23
    17f4:	6f 91       	pop	r22
    17f6:	5f 91       	pop	r21
    17f8:	4f 91       	pop	r20
    17fa:	3f 91       	pop	r19
    17fc:	2f 91       	pop	r18
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	0f 90       	pop	r0
    1804:	1f 90       	pop	r1
    1806:	18 95       	reti

00001808 <TIMER0_DutyCycle>:
#include "../inc/TIMER0_private.h"
#include "../inc/TIMER0_register.h"
#include "../inc/TIMER0_config.h"

void TIMER0_DutyCycle(uint8 Copy_uint8Duty)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <TIMER0_DutyCycle+0x6>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
    1816:	1a 82       	std	Y+2, r1	; 0x02
    1818:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 2f       	mov	r25, r24
    1822:	88 27       	eor	r24, r24
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	24 e6       	ldi	r18, 0x64	; 100
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	b9 01       	movw	r22, r18
    1832:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__udivmodhi4>
    1836:	cb 01       	movw	r24, r22
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Local_VCalue;
    183c:	ec e5       	ldi	r30, 0x5C	; 92
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	80 83       	st	Z, r24
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <TIMER0_Delay>:


void TIMER0_Delay(uint16 Copy_uint16Delay)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <TIMER0_Delay+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <TIMER0_Delay+0x8>
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
    1860:	1a 82       	std	Y+2, r1	; 0x02
    1862:	19 82       	std	Y+1, r1	; 0x01
    1864:	10 c0       	rjmp	.+32     	; 0x1886 <TIMER0_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIMER0_TIFR_Reg->OCF0 == 0);
    1866:	e8 e5       	ldi	r30, 0x58	; 88
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	82 70       	andi	r24, 0x02	; 2
    186e:	88 23       	and	r24, r24
    1870:	d1 f3       	breq	.-12     	; 0x1866 <TIMER0_Delay+0x16>
	TIMER0_TIFR_Reg->OCF0 =1;
    1872:	e8 e5       	ldi	r30, 0x58	; 88
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	82 60       	ori	r24, 0x02	; 2
    187a:	80 83       	st	Z, r24
	Counter++;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
    1886:	29 81       	ldd	r18, Y+1	; 0x01
    1888:	3a 81       	ldd	r19, Y+2	; 0x02
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	28 17       	cp	r18, r24
    1890:	39 07       	cpc	r19, r25
    1892:	48 f3       	brcs	.-46     	; 0x1866 <TIMER0_Delay+0x16>
	Counter++;


	}

}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <TIMER0_voidInit>:
void TIMER0_voidInit(void)
{
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
	/*clock selection*/
	TIMER0_TCCR0_Reg->CS0x= CLCK_SELECTION;
    18aa:	e3 e5       	ldi	r30, 0x53	; 83
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	88 7f       	andi	r24, 0xF8	; 248
    18b2:	82 60       	ori	r24, 0x02	; 2
    18b4:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM00=DISABLE;
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
	TIMER0_TCCR0_Reg->COM0=CTC_OUTPUT_MODE;

#elif TIMER_MODE==FAST_PWM_MODE
	TIMER0_TCCR0_Reg->WGM00=ENABLE;
    18b6:	e3 e5       	ldi	r30, 0x53	; 83
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 64       	ori	r24, 0x40	; 64
    18be:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
    18c0:	e3 e5       	ldi	r30, 0x53	; 83
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 60       	ori	r24, 0x08	; 8
    18c8:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->COM0=FAST_PWM_OUTPUT_MODE;
    18ca:	e3 e5       	ldi	r30, 0x53	; 83
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 7c       	andi	r24, 0xCF	; 207
    18d2:	80 62       	ori	r24, 0x20	; 32
    18d4:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
	TIMER0_TIMSK_Reg->TOIE0=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
	TIMER0_TIMSK_Reg->OCIE0=ENABLE;
    18d6:	e9 e5       	ldi	r30, 0x59	; 89
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	82 60       	ori	r24, 0x02	; 2
    18de:	80 83       	st	Z, r24
#endif


}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <TIMER0_voiSetPreLoadValue>:


void TIMER0_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_Reg=Copy_uint8Value;
    18f2:	e2 e5       	ldi	r30, 0x52	; 82
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	80 83       	st	Z, r24
}
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <TIMER0_voiSetCompareMatchValue>:


void TIMER0_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	0f 92       	push	r0
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Copy_uint8Value;
    190e:	ec e5       	ldi	r30, 0x5C	; 92
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	80 83       	st	Z, r24
}
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <Timer0_Timer0OVFCallBackFunc>:

Status_t Timer0_Timer0OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <Timer0_Timer0OVFCallBackFunc+0x6>
    1924:	0f 92       	push	r0
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	9b 83       	std	Y+3, r25	; 0x03
    192c:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    192e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	19 f4       	brne	.+6      	; 0x193e <Timer0_Timer0OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER_POINTER_Err;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	06 c0       	rjmp	.+12     	; 0x194a <Timer0_Timer0OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	90 93 9f 01 	sts	0x019F, r25
    1946:	80 93 9e 01 	sts	0x019E, r24
	}

	return Local_ErrorState;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <Timer0_Timer0CTCCallBackFunc>:

Status_t Timer0_Timer0CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <Timer0_Timer0CTCCallBackFunc+0x6>
    195e:	0f 92       	push	r0
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	9b 83       	std	Y+3, r25	; 0x03
    1966:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
    1968:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	19 f4       	brne	.+6      	; 0x1978 <Timer0_Timer0CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER_POINTER_Err;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <Timer0_Timer0CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	90 93 9d 01 	sts	0x019D, r25
    1980:	80 93 9c 01 	sts	0x019C, r24
		}

	return Local_ErrorState;
    1984:	89 81       	ldd	r24, Y+1	; 0x01
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <__vector_10>:




/*TIMER0 COMPARE MATCH*/
void __vector_10(void){
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
    19bc:	e0 91 9c 01 	lds	r30, 0x019C
    19c0:	f0 91 9d 01 	lds	r31, 0x019D
    19c4:	09 95       	icall
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_11>:

/*TIMER0 OVERFLOW*/
void __vector_11(void){
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
    1a16:	e0 91 9e 01 	lds	r30, 0x019E
    1a1a:	f0 91 9f 01 	lds	r31, 0x019F
    1a1e:	09 95       	icall
}
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	ff 91       	pop	r31
    1a26:	ef 91       	pop	r30
    1a28:	bf 91       	pop	r27
    1a2a:	af 91       	pop	r26
    1a2c:	9f 91       	pop	r25
    1a2e:	8f 91       	pop	r24
    1a30:	7f 91       	pop	r23
    1a32:	6f 91       	pop	r22
    1a34:	5f 91       	pop	r21
    1a36:	4f 91       	pop	r20
    1a38:	3f 91       	pop	r19
    1a3a:	2f 91       	pop	r18
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <PORT_voidInit>:
#include"../inc/PORT_config.h"



void PORT_voidInit(void)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62

DDRA=PORTA_DIR;
    1a4e:	ea e3       	ldi	r30, 0x3A	; 58
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	80 83       	st	Z, r24
DDRB=PORTB_DIR;
    1a56:	e7 e3       	ldi	r30, 0x37	; 55
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	87 e0       	ldi	r24, 0x07	; 7
    1a5c:	80 83       	st	Z, r24
DDRC=PORTC_DIR;
    1a5e:	e4 e3       	ldi	r30, 0x34	; 52
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	10 82       	st	Z, r1
DDRD=PORTD_DIR;
    1a64:	e1 e3       	ldi	r30, 0x31	; 49
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	10 82       	st	Z, r1

PORTA=PORTA_INIT_VALUE;
    1a6a:	eb e3       	ldi	r30, 0x3B	; 59
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	10 82       	st	Z, r1
PORTB=PORTB_INIT_VALUE;
    1a70:	e8 e3       	ldi	r30, 0x38	; 56
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
PORTC=PORTC_INIT_VALUE;
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	10 82       	st	Z, r1
PORTD=PORTD_INIT_VALUE;
    1a7c:	e2 e3       	ldi	r30, 0x32	; 50
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	10 82       	st	Z, r1
}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <GIE_Enable>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/GIE_interface.h"
#include "../inc/GIE_register.h"

void GIE_Enable(void)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_I);
    1a90:	af e5       	ldi	r26, 0x5F	; 95
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	ef e5       	ldi	r30, 0x5F	; 95
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 68       	ori	r24, 0x80	; 128
    1a9c:	8c 93       	st	X, r24

}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <GIE_Disable>:
void GIE_Disable(void)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    1aac:	af e5       	ldi	r26, 0x5F	; 95
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	ef e5       	ldi	r30, 0x5F	; 95
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8f 77       	andi	r24, 0x7F	; 127
    1ab8:	8c 93       	st	X, r24
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <EXTI_voidInt0Init>:
#include "../inc/EXTI_interface.h"
#include "../inc/EXTI_config.h"
#include "../inc/EXTI_private.h"

void EXTI_voidInt0Init(void)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62

#if INT0_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    1ac8:	a5 e5       	ldi	r26, 0x55	; 85
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e5 e5       	ldi	r30, 0x55	; 85
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1ad6:	a5 e5       	ldi	r26, 0x55	; 85
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e5       	ldi	r30, 0x55	; 85
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8d 7f       	andi	r24, 0xFD	; 253
    1ae2:	8c 93       	st	X, r24
#else
#error "INT0 Wrong init"
#endif

#if INT0_STATE == INT0_ENABLE
	SET_BIT(GICR,GICR_INT0);
    1ae4:	ab e5       	ldi	r26, 0x5B	; 91
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	eb e5       	ldi	r30, 0x5B	; 91
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	80 64       	ori	r24, 0x40	; 64
    1af0:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT0);
#else
#error "INT0 Wrong init"
#endif

}
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
#if INT1_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC10);
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
    1b00:	a5 e5       	ldi	r26, 0x55	; 85
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e5       	ldi	r30, 0x55	; 85
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	84 60       	ori	r24, 0x04	; 4
    1b0c:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1b0e:	a5 e5       	ldi	r26, 0x55	; 85
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e5 e5       	ldi	r30, 0x55	; 85
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	87 7f       	andi	r24, 0xF7	; 247
    1b1a:	8c 93       	st	X, r24
#elif  INT1_STATE == INT1_DISABLE
	CLEAR_BIT(GICR,GICR_INT1);
#else
#warning "INT1 Wrong init"
#endif
}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62

#if INT2_SENSE == FALLING_EDGE
	CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    1b2a:	a4 e5       	ldi	r26, 0x54	; 84
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e4 e5       	ldi	r30, 0x54	; 84
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	8f 7b       	andi	r24, 0xBF	; 191
    1b36:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT2);
#else
#warning "INT2 Wrong init"
#endif

}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <EXTI_uint8IntSetSenseControl>:

uint8 EXTI_uint8IntSetSenseControl(uint8 Copy_uint8IntNumber,uint8 Copy_uint8Sense)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	29 97       	sbiw	r28, 0x09	; 9
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	8a 83       	std	Y+2, r24	; 0x02
    1b54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState=0;
    1b56:	19 82       	std	Y+1, r1	; 0x01
	if(INT0==Copy_uint8IntNumber)
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <EXTI_uint8IntSetSenseControl+0x22>
    1b5e:	5e c0       	rjmp	.+188    	; 0x1c1c <EXTI_uint8IntSetSenseControl+0xde>
	{
		switch(Copy_uint8Sense)
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	39 87       	std	Y+9, r19	; 0x09
    1b68:	28 87       	std	Y+8, r18	; 0x08
    1b6a:	88 85       	ldd	r24, Y+8	; 0x08
    1b6c:	99 85       	ldd	r25, Y+9	; 0x09
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	91 05       	cpc	r25, r1
    1b72:	21 f1       	breq	.+72     	; 0x1bbc <EXTI_uint8IntSetSenseControl+0x7e>
    1b74:	28 85       	ldd	r18, Y+8	; 0x08
    1b76:	39 85       	ldd	r19, Y+9	; 0x09
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <EXTI_uint8IntSetSenseControl+0x4a>
    1b7e:	88 85       	ldd	r24, Y+8	; 0x08
    1b80:	99 85       	ldd	r25, Y+9	; 0x09
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <EXTI_uint8IntSetSenseControl+0x60>
    1b86:	47 c0       	rjmp	.+142    	; 0x1c16 <EXTI_uint8IntSetSenseControl+0xd8>
    1b88:	28 85       	ldd	r18, Y+8	; 0x08
    1b8a:	39 85       	ldd	r19, Y+9	; 0x09
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	21 f1       	breq	.+72     	; 0x1bda <EXTI_uint8IntSetSenseControl+0x9c>
    1b92:	88 85       	ldd	r24, Y+8	; 0x08
    1b94:	99 85       	ldd	r25, Y+9	; 0x09
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	71 f1       	breq	.+92     	; 0x1bf8 <EXTI_uint8IntSetSenseControl+0xba>
    1b9c:	3c c0       	rjmp	.+120    	; 0x1c16 <EXTI_uint8IntSetSenseControl+0xd8>
		{
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    1b9e:	a5 e5       	ldi	r26, 0x55	; 85
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e5 e5       	ldi	r30, 0x55	; 85
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8e 7f       	andi	r24, 0xFE	; 254
    1baa:	8c 93       	st	X, r24
    1bac:	a5 e5       	ldi	r26, 0x55	; 85
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e5 e5       	ldi	r30, 0x55	; 85
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8d 7f       	andi	r24, 0xFD	; 253
    1bb8:	8c 93       	st	X, r24
    1bba:	ba c0       	rjmp	.+372    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    1bbc:	a5 e5       	ldi	r26, 0x55	; 85
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e5 e5       	ldi	r30, 0x55	; 85
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	81 60       	ori	r24, 0x01	; 1
    1bc8:	8c 93       	st	X, r24
    1bca:	a5 e5       	ldi	r26, 0x55	; 85
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e5 e5       	ldi	r30, 0x55	; 85
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8d 7f       	andi	r24, 0xFD	; 253
    1bd6:	8c 93       	st	X, r24
    1bd8:	ab c0       	rjmp	.+342    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1bda:	a5 e5       	ldi	r26, 0x55	; 85
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e5 e5       	ldi	r30, 0x55	; 85
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8e 7f       	andi	r24, 0xFE	; 254
    1be6:	8c 93       	st	X, r24
    1be8:	a5 e5       	ldi	r26, 0x55	; 85
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e5 e5       	ldi	r30, 0x55	; 85
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	82 60       	ori	r24, 0x02	; 2
    1bf4:	8c 93       	st	X, r24
    1bf6:	9c c0       	rjmp	.+312    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1bf8:	a5 e5       	ldi	r26, 0x55	; 85
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e5 e5       	ldi	r30, 0x55	; 85
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	81 60       	ori	r24, 0x01	; 1
    1c04:	8c 93       	st	X, r24
    1c06:	a5 e5       	ldi	r26, 0x55	; 85
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e5       	ldi	r30, 0x55	; 85
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	82 60       	ori	r24, 0x02	; 2
    1c12:	8c 93       	st	X, r24
    1c14:	8d c0       	rjmp	.+282    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
		default : Local_ErrorState=1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	8a c0       	rjmp	.+276    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
		}
	}
	else if(INT1==Copy_uint8IntNumber)
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <EXTI_uint8IntSetSenseControl+0xe6>
    1c22:	5e c0       	rjmp	.+188    	; 0x1ce0 <EXTI_uint8IntSetSenseControl+0x1a2>
	{
		switch(Copy_uint8Sense)
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3f 83       	std	Y+7, r19	; 0x07
    1c2c:	2e 83       	std	Y+6, r18	; 0x06
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	9f 81       	ldd	r25, Y+7	; 0x07
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	91 05       	cpc	r25, r1
    1c36:	21 f1       	breq	.+72     	; 0x1c80 <EXTI_uint8IntSetSenseControl+0x142>
    1c38:	2e 81       	ldd	r18, Y+6	; 0x06
    1c3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <EXTI_uint8IntSetSenseControl+0x10e>
    1c42:	8e 81       	ldd	r24, Y+6	; 0x06
    1c44:	9f 81       	ldd	r25, Y+7	; 0x07
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	61 f0       	breq	.+24     	; 0x1c62 <EXTI_uint8IntSetSenseControl+0x124>
    1c4a:	47 c0       	rjmp	.+142    	; 0x1cda <EXTI_uint8IntSetSenseControl+0x19c>
    1c4c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c4e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	21 f1       	breq	.+72     	; 0x1c9e <EXTI_uint8IntSetSenseControl+0x160>
    1c56:	8e 81       	ldd	r24, Y+6	; 0x06
    1c58:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	71 f1       	breq	.+92     	; 0x1cbc <EXTI_uint8IntSetSenseControl+0x17e>
    1c60:	3c c0       	rjmp	.+120    	; 0x1cda <EXTI_uint8IntSetSenseControl+0x19c>
	  {
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    1c62:	a5 e5       	ldi	r26, 0x55	; 85
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e5 e5       	ldi	r30, 0x55	; 85
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8b 7f       	andi	r24, 0xFB	; 251
    1c6e:	8c 93       	st	X, r24
    1c70:	a5 e5       	ldi	r26, 0x55	; 85
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e5       	ldi	r30, 0x55	; 85
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	87 7f       	andi	r24, 0xF7	; 247
    1c7c:	8c 93       	st	X, r24
    1c7e:	58 c0       	rjmp	.+176    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    1c80:	a5 e5       	ldi	r26, 0x55	; 85
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e5 e5       	ldi	r30, 0x55	; 85
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	84 60       	ori	r24, 0x04	; 4
    1c8c:	8c 93       	st	X, r24
    1c8e:	a5 e5       	ldi	r26, 0x55	; 85
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e5       	ldi	r30, 0x55	; 85
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	87 7f       	andi	r24, 0xF7	; 247
    1c9a:	8c 93       	st	X, r24
    1c9c:	49 c0       	rjmp	.+146    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1c9e:	a5 e5       	ldi	r26, 0x55	; 85
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e5 e5       	ldi	r30, 0x55	; 85
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8b 7f       	andi	r24, 0xFB	; 251
    1caa:	8c 93       	st	X, r24
    1cac:	a5 e5       	ldi	r26, 0x55	; 85
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e5 e5       	ldi	r30, 0x55	; 85
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 60       	ori	r24, 0x08	; 8
    1cb8:	8c 93       	st	X, r24
    1cba:	3a c0       	rjmp	.+116    	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1cbc:	a5 e5       	ldi	r26, 0x55	; 85
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e5 e5       	ldi	r30, 0x55	; 85
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	84 60       	ori	r24, 0x04	; 4
    1cc8:	8c 93       	st	X, r24
    1cca:	a5 e5       	ldi	r26, 0x55	; 85
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e5       	ldi	r30, 0x55	; 85
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 60       	ori	r24, 0x08	; 8
    1cd6:	8c 93       	st	X, r24
    1cd8:	2b c0       	rjmp	.+86     	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	28 c0       	rjmp	.+80     	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else if(INT2==Copy_uint8IntNumber)
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	83 30       	cpi	r24, 0x03	; 3
    1ce4:	19 f5       	brne	.+70     	; 0x1d2c <EXTI_uint8IntSetSenseControl+0x1ee>
	{switch(Copy_uint8Sense)
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3d 83       	std	Y+5, r19	; 0x05
    1cee:	2c 83       	std	Y+4, r18	; 0x04
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	82 30       	cpi	r24, 0x02	; 2
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	31 f0       	breq	.+12     	; 0x1d06 <EXTI_uint8IntSetSenseControl+0x1c8>
    1cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfe:	23 30       	cpi	r18, 0x03	; 3
    1d00:	31 05       	cpc	r19, r1
    1d02:	49 f0       	breq	.+18     	; 0x1d16 <EXTI_uint8IntSetSenseControl+0x1d8>
    1d04:	10 c0       	rjmp	.+32     	; 0x1d26 <EXTI_uint8IntSetSenseControl+0x1e8>
	  {
	   case EXTI_FALLING:CLEAR_BIT(MCUCSR,MCUCSR_ISC2);break;
    1d06:	a4 e5       	ldi	r26, 0x54	; 84
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e4 e5       	ldi	r30, 0x54	; 84
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8f 7b       	andi	r24, 0xBF	; 191
    1d12:	8c 93       	st	X, r24
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
    1d16:	a4 e5       	ldi	r26, 0x54	; 84
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e4 e5       	ldi	r30, 0x54	; 84
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	80 64       	ori	r24, 0x40	; 64
    1d22:	8c 93       	st	X, r24
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else
	{
		Local_ErrorState=1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_ErrorState;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d32:	29 96       	adiw	r28, 0x09	; 9
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <EXTI_uint8IntEnable>:

uint8 EXTI_uint8IntEnable(uint8 Copy_uint8IntNumber)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <EXTI_uint8IntEnable+0x6>
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <EXTI_uint8IntEnable+0x8>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    1d52:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3c 83       	std	Y+4, r19	; 0x04
    1d5c:	2b 83       	std	Y+3, r18	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	82 30       	cpi	r24, 0x02	; 2
    1d64:	91 05       	cpc	r25, r1
    1d66:	91 f0       	breq	.+36     	; 0x1d8c <EXTI_uint8IntEnable+0x48>
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	23 30       	cpi	r18, 0x03	; 3
    1d6e:	31 05       	cpc	r19, r1
    1d70:	a9 f0       	breq	.+42     	; 0x1d9c <EXTI_uint8IntEnable+0x58>
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	91 05       	cpc	r25, r1
    1d7a:	c1 f4       	brne	.+48     	; 0x1dac <EXTI_uint8IntEnable+0x68>
	case INT0:SET_BIT(GICR,GICR_INT0);break;
    1d7c:	ab e5       	ldi	r26, 0x5B	; 91
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	eb e5       	ldi	r30, 0x5B	; 91
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	80 64       	ori	r24, 0x40	; 64
    1d88:	8c 93       	st	X, r24
    1d8a:	12 c0       	rjmp	.+36     	; 0x1db0 <EXTI_uint8IntEnable+0x6c>
	case INT1:SET_BIT(GICR,GICR_INT1);break;
    1d8c:	ab e5       	ldi	r26, 0x5B	; 91
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	eb e5       	ldi	r30, 0x5B	; 91
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 68       	ori	r24, 0x80	; 128
    1d98:	8c 93       	st	X, r24
    1d9a:	0a c0       	rjmp	.+20     	; 0x1db0 <EXTI_uint8IntEnable+0x6c>
	case INT2:SET_BIT(GICR,GICR_INT2);break;
    1d9c:	ab e5       	ldi	r26, 0x5B	; 91
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e5       	ldi	r30, 0x5B	; 91
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 62       	ori	r24, 0x20	; 32
    1da8:	8c 93       	st	X, r24
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <EXTI_uint8IntEnable+0x6c>
    default  : Local_ErrorState=1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <EXTI_uint8IntDisable>:


uint8 EXTI_uint8IntDisable(uint8 Copy_uint8IntNumber)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <EXTI_uint8IntDisable+0x6>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <EXTI_uint8IntDisable+0x8>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
    1dce:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	3c 83       	std	Y+4, r19	; 0x04
    1dd8:	2b 83       	std	Y+3, r18	; 0x03
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	91 05       	cpc	r25, r1
    1de2:	91 f0       	breq	.+36     	; 0x1e08 <EXTI_uint8IntDisable+0x48>
    1de4:	2b 81       	ldd	r18, Y+3	; 0x03
    1de6:	3c 81       	ldd	r19, Y+4	; 0x04
    1de8:	23 30       	cpi	r18, 0x03	; 3
    1dea:	31 05       	cpc	r19, r1
    1dec:	a9 f0       	breq	.+42     	; 0x1e18 <EXTI_uint8IntDisable+0x58>
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	91 05       	cpc	r25, r1
    1df6:	c1 f4       	brne	.+48     	; 0x1e28 <EXTI_uint8IntDisable+0x68>
	case INT0:CLEAR_BIT(GICR,GICR_INT0);break;
    1df8:	ab e5       	ldi	r26, 0x5B	; 91
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	eb e5       	ldi	r30, 0x5B	; 91
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8f 7b       	andi	r24, 0xBF	; 191
    1e04:	8c 93       	st	X, r24
    1e06:	12 c0       	rjmp	.+36     	; 0x1e2c <EXTI_uint8IntDisable+0x6c>
	case INT1:CLEAR_BIT(GICR,GICR_INT1);break;
    1e08:	ab e5       	ldi	r26, 0x5B	; 91
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	eb e5       	ldi	r30, 0x5B	; 91
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8f 77       	andi	r24, 0x7F	; 127
    1e14:	8c 93       	st	X, r24
    1e16:	0a c0       	rjmp	.+20     	; 0x1e2c <EXTI_uint8IntDisable+0x6c>
	case INT2:CLEAR_BIT(GICR,GICR_INT2);break;
    1e18:	ab e5       	ldi	r26, 0x5B	; 91
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	eb e5       	ldi	r30, 0x5B	; 91
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8f 7d       	andi	r24, 0xDF	; 223
    1e24:	8c 93       	st	X, r24
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <EXTI_uint8IntDisable+0x6c>
    default  : Local_ErrorState=1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <EXTI_uint8Int0SetCallBack>:

uint8 EXTI_uint8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <EXTI_uint8Int0SetCallBack+0x6>
    1e42:	0f 92       	push	r0
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	9b 83       	std	Y+3, r25	; 0x03
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1e4c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	39 f0       	breq	.+14     	; 0x1e64 <EXTI_uint8Int0SetCallBack+0x28>
	{
		Global_EXTI_pvInt0Func=Copy_pvInt0Func;
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	90 93 a1 01 	sts	0x01A1, r25
    1e5e:	80 93 a0 01 	sts	0x01A0, r24
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <EXTI_uint8Int0SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <EXTI_uint8Int1SetCallBack>:



uint8 EXTI_uint8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <EXTI_uint8Int1SetCallBack+0x6>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	9b 83       	std	Y+3, r25	; 0x03
    1e84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1e86:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL)
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	39 f0       	breq	.+14     	; 0x1e9e <EXTI_uint8Int1SetCallBack+0x28>
	{
		Global_EXTI_pvInt1Func=Copy_pvInt1Func;
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	90 93 a3 01 	sts	0x01A3, r25
    1e98:	80 93 a2 01 	sts	0x01A2, r24
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <EXTI_uint8Int1SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <EXTI_uint8Int2SetCallBack>:



uint8 EXTI_uint8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <EXTI_uint8Int2SetCallBack+0x6>
    1eb6:	0f 92       	push	r0
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	9b 83       	std	Y+3, r25	; 0x03
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1ec0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL)
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	39 f0       	breq	.+14     	; 0x1ed8 <EXTI_uint8Int2SetCallBack+0x28>
	{
		Global_EXTI_pvInt2Func=Copy_pvInt2Func;
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ece:	90 93 a5 01 	sts	0x01A5, r25
    1ed2:	80 93 a4 01 	sts	0x01A4, r24
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <EXTI_uint8Int2SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <__vector_1>:


/*ISR of INT0*/

void __vector_1(void)
{
    1eea:	1f 92       	push	r1
    1eec:	0f 92       	push	r0
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	0f 92       	push	r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	2f 93       	push	r18
    1ef6:	3f 93       	push	r19
    1ef8:	4f 93       	push	r20
    1efa:	5f 93       	push	r21
    1efc:	6f 93       	push	r22
    1efe:	7f 93       	push	r23
    1f00:	8f 93       	push	r24
    1f02:	9f 93       	push	r25
    1f04:	af 93       	push	r26
    1f06:	bf 93       	push	r27
    1f08:	ef 93       	push	r30
    1f0a:	ff 93       	push	r31
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt0Func!=NULL)
    1f14:	80 91 a0 01 	lds	r24, 0x01A0
    1f18:	90 91 a1 01 	lds	r25, 0x01A1
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	29 f0       	breq	.+10     	; 0x1f2a <__vector_1+0x40>
	{
		Global_EXTI_pvInt0Func();
    1f20:	e0 91 a0 01 	lds	r30, 0x01A0
    1f24:	f0 91 a1 01 	lds	r31, 0x01A1
    1f28:	09 95       	icall
	else
	{
		//do nothing

	}
}
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	ff 91       	pop	r31
    1f30:	ef 91       	pop	r30
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	7f 91       	pop	r23
    1f3c:	6f 91       	pop	r22
    1f3e:	5f 91       	pop	r21
    1f40:	4f 91       	pop	r20
    1f42:	3f 91       	pop	r19
    1f44:	2f 91       	pop	r18
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	0f 90       	pop	r0
    1f4c:	1f 90       	pop	r1
    1f4e:	18 95       	reti

00001f50 <__vector_2>:

/*ISR of INT1*/

void __vector_2(void)
{
    1f50:	1f 92       	push	r1
    1f52:	0f 92       	push	r0
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	0f 92       	push	r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	2f 93       	push	r18
    1f5c:	3f 93       	push	r19
    1f5e:	4f 93       	push	r20
    1f60:	5f 93       	push	r21
    1f62:	6f 93       	push	r22
    1f64:	7f 93       	push	r23
    1f66:	8f 93       	push	r24
    1f68:	9f 93       	push	r25
    1f6a:	af 93       	push	r26
    1f6c:	bf 93       	push	r27
    1f6e:	ef 93       	push	r30
    1f70:	ff 93       	push	r31
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt1Func!=NULL)
    1f7a:	80 91 a2 01 	lds	r24, 0x01A2
    1f7e:	90 91 a3 01 	lds	r25, 0x01A3
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	29 f0       	breq	.+10     	; 0x1f90 <__vector_2+0x40>
		{
		Global_EXTI_pvInt1Func();
    1f86:	e0 91 a2 01 	lds	r30, 0x01A2
    1f8a:	f0 91 a3 01 	lds	r31, 0x01A3
    1f8e:	09 95       	icall
		{
			//do nothing

		}

	}
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	ff 91       	pop	r31
    1f96:	ef 91       	pop	r30
    1f98:	bf 91       	pop	r27
    1f9a:	af 91       	pop	r26
    1f9c:	9f 91       	pop	r25
    1f9e:	8f 91       	pop	r24
    1fa0:	7f 91       	pop	r23
    1fa2:	6f 91       	pop	r22
    1fa4:	5f 91       	pop	r21
    1fa6:	4f 91       	pop	r20
    1fa8:	3f 91       	pop	r19
    1faa:	2f 91       	pop	r18
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	0f 90       	pop	r0
    1fb2:	1f 90       	pop	r1
    1fb4:	18 95       	reti

00001fb6 <__vector_3>:


/*ISR of INT2*/

void __vector_3(void)
{
    1fb6:	1f 92       	push	r1
    1fb8:	0f 92       	push	r0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	0f 92       	push	r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	2f 93       	push	r18
    1fc2:	3f 93       	push	r19
    1fc4:	4f 93       	push	r20
    1fc6:	5f 93       	push	r21
    1fc8:	6f 93       	push	r22
    1fca:	7f 93       	push	r23
    1fcc:	8f 93       	push	r24
    1fce:	9f 93       	push	r25
    1fd0:	af 93       	push	r26
    1fd2:	bf 93       	push	r27
    1fd4:	ef 93       	push	r30
    1fd6:	ff 93       	push	r31
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62

	if(Global_EXTI_pvInt2Func!=NULL)
    1fe0:	80 91 a4 01 	lds	r24, 0x01A4
    1fe4:	90 91 a5 01 	lds	r25, 0x01A5
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	29 f0       	breq	.+10     	; 0x1ff6 <__vector_3+0x40>
		{
		Global_EXTI_pvInt2Func();
    1fec:	e0 91 a4 01 	lds	r30, 0x01A4
    1ff0:	f0 91 a5 01 	lds	r31, 0x01A5
    1ff4:	09 95       	icall
		{
			//do nothing

		}

}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	ff 91       	pop	r31
    1ffc:	ef 91       	pop	r30
    1ffe:	bf 91       	pop	r27
    2000:	af 91       	pop	r26
    2002:	9f 91       	pop	r25
    2004:	8f 91       	pop	r24
    2006:	7f 91       	pop	r23
    2008:	6f 91       	pop	r22
    200a:	5f 91       	pop	r21
    200c:	4f 91       	pop	r20
    200e:	3f 91       	pop	r19
    2010:	2f 91       	pop	r18
    2012:	0f 90       	pop	r0
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	0f 90       	pop	r0
    2018:	1f 90       	pop	r1
    201a:	18 95       	reti

0000201c <DIO_SetPortVal>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/DIO_interface.h"
#include  "../inc/DIO_private.h"
#include "../inc/DIO_register.h"

status_t DIO_SetPortVal(Port_t Copy_Port, uint8 Copy_uint8Value) {
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <DIO_SetPortVal+0x6>
    2022:	00 d0       	rcall	.+0      	; 0x2024 <DIO_SetPortVal+0x8>
    2024:	0f 92       	push	r0
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	8a 83       	std	Y+2, r24	; 0x02
    202c:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    202e:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	84 30       	cpi	r24, 0x04	; 4
    2034:	18 f0       	brcs	.+6      	; 0x203c <DIO_SetPortVal+0x20>
		Local_uint8ErrorState = DIO_SetErr;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	32 c0       	rjmp	.+100    	; 0x20a0 <DIO_SetPortVal+0x84>
	} else {
		switch (Copy_Port) {
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3d 83       	std	Y+5, r19	; 0x05
    2044:	2c 83       	std	Y+4, r18	; 0x04
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	d1 f0       	breq	.+52     	; 0x2084 <DIO_SetPortVal+0x68>
    2050:	2c 81       	ldd	r18, Y+4	; 0x04
    2052:	3d 81       	ldd	r19, Y+5	; 0x05
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	2c f4       	brge	.+10     	; 0x2064 <DIO_SetPortVal+0x48>
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	9d 81       	ldd	r25, Y+5	; 0x05
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	61 f0       	breq	.+24     	; 0x207a <DIO_SetPortVal+0x5e>
    2062:	1e c0       	rjmp	.+60     	; 0x20a0 <DIO_SetPortVal+0x84>
    2064:	2c 81       	ldd	r18, Y+4	; 0x04
    2066:	3d 81       	ldd	r19, Y+5	; 0x05
    2068:	22 30       	cpi	r18, 0x02	; 2
    206a:	31 05       	cpc	r19, r1
    206c:	81 f0       	breq	.+32     	; 0x208e <DIO_SetPortVal+0x72>
    206e:	8c 81       	ldd	r24, Y+4	; 0x04
    2070:	9d 81       	ldd	r25, Y+5	; 0x05
    2072:	83 30       	cpi	r24, 0x03	; 3
    2074:	91 05       	cpc	r25, r1
    2076:	81 f0       	breq	.+32     	; 0x2098 <DIO_SetPortVal+0x7c>
    2078:	13 c0       	rjmp	.+38     	; 0x20a0 <DIO_SetPortVal+0x84>
		case DIO_PORTA:
			PORTA = Copy_uint8Value;
    207a:	eb e3       	ldi	r30, 0x3B	; 59
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	80 83       	st	Z, r24
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTB:
			PORTB = Copy_uint8Value;
    2084:	e8 e3       	ldi	r30, 0x38	; 56
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	80 83       	st	Z, r24
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTC:
			PORTC = Copy_uint8Value;
    208e:	e5 e3       	ldi	r30, 0x35	; 53
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	80 83       	st	Z, r24
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTD:
			PORTD = Copy_uint8Value;
    2098:	e2 e3       	ldi	r30, 0x32	; 50
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	80 83       	st	Z, r24
			break;
		}
	}

	return Local_uint8ErrorState;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <DIO_SetPinVal>:

status_t DIO_SetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8 Copy_uint8Value) {
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	28 97       	sbiw	r28, 0x08	; 8
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	6b 83       	std	Y+3, r22	; 0x03
    20ca:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    20cc:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	18 f0       	brcs	.+6      	; 0x20da <DIO_SetPinVal+0x28>
		Local_uint8ErrorState = DIO_SetErr;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	f0 c0       	rjmp	.+480    	; 0x22ba <DIO_SetPinVal+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	88 30       	cpi	r24, 0x08	; 8
    20de:	18 f0       	brcs	.+6      	; 0x20e6 <DIO_SetPinVal+0x34>
		Local_uint8ErrorState = DIO_SetErr;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	ea c0       	rjmp	.+468    	; 0x22ba <DIO_SetPinVal+0x208>
	} else {
		if (DIO_HIGH == Copy_uint8Value) {
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	09 f0       	breq	.+2      	; 0x20ee <DIO_SetPinVal+0x3c>
    20ec:	6f c0       	rjmp	.+222    	; 0x21cc <DIO_SetPinVal+0x11a>
			switch (Copy_Port) {
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	38 87       	std	Y+8, r19	; 0x08
    20f6:	2f 83       	std	Y+7, r18	; 0x07
    20f8:	8f 81       	ldd	r24, Y+7	; 0x07
    20fa:	98 85       	ldd	r25, Y+8	; 0x08
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	91 05       	cpc	r25, r1
    2100:	49 f1       	breq	.+82     	; 0x2154 <DIO_SetPinVal+0xa2>
    2102:	2f 81       	ldd	r18, Y+7	; 0x07
    2104:	38 85       	ldd	r19, Y+8	; 0x08
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	2c f4       	brge	.+10     	; 0x2116 <DIO_SetPinVal+0x64>
    210c:	8f 81       	ldd	r24, Y+7	; 0x07
    210e:	98 85       	ldd	r25, Y+8	; 0x08
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	61 f0       	breq	.+24     	; 0x212c <DIO_SetPinVal+0x7a>
    2114:	d2 c0       	rjmp	.+420    	; 0x22ba <DIO_SetPinVal+0x208>
    2116:	2f 81       	ldd	r18, Y+7	; 0x07
    2118:	38 85       	ldd	r19, Y+8	; 0x08
    211a:	22 30       	cpi	r18, 0x02	; 2
    211c:	31 05       	cpc	r19, r1
    211e:	71 f1       	breq	.+92     	; 0x217c <DIO_SetPinVal+0xca>
    2120:	8f 81       	ldd	r24, Y+7	; 0x07
    2122:	98 85       	ldd	r25, Y+8	; 0x08
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	91 05       	cpc	r25, r1
    2128:	e9 f1       	breq	.+122    	; 0x21a4 <DIO_SetPinVal+0xf2>
    212a:	c7 c0       	rjmp	.+398    	; 0x22ba <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				SET_BIT(PORTA, Copy_Pin);
    212c:	ab e3       	ldi	r26, 0x3B	; 59
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	eb e3       	ldi	r30, 0x3B	; 59
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <DIO_SetPinVal+0x98>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <DIO_SetPinVal+0x94>
    214e:	84 2b       	or	r24, r20
    2150:	8c 93       	st	X, r24
    2152:	b3 c0       	rjmp	.+358    	; 0x22ba <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB, Copy_Pin);
    2154:	a8 e3       	ldi	r26, 0x38	; 56
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e8 e3       	ldi	r30, 0x38	; 56
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <DIO_SetPinVal+0xc0>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <DIO_SetPinVal+0xbc>
    2176:	84 2b       	or	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	9f c0       	rjmp	.+318    	; 0x22ba <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC, Copy_Pin);
    217c:	a5 e3       	ldi	r26, 0x35	; 53
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e3       	ldi	r30, 0x35	; 53
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <DIO_SetPinVal+0xe8>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <DIO_SetPinVal+0xe4>
    219e:	84 2b       	or	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	8b c0       	rjmp	.+278    	; 0x22ba <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD, Copy_Pin);
    21a4:	a2 e3       	ldi	r26, 0x32	; 50
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e2 e3       	ldi	r30, 0x32	; 50
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <DIO_SetPinVal+0x110>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <DIO_SetPinVal+0x10c>
    21c6:	84 2b       	or	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	77 c0       	rjmp	.+238    	; 0x22ba <DIO_SetPinVal+0x208>
				break;
			}
		} else if (DIO_LOW == Copy_uint8Value) {
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	88 23       	and	r24, r24
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <DIO_SetPinVal+0x122>
    21d2:	73 c0       	rjmp	.+230    	; 0x22ba <DIO_SetPinVal+0x208>
			switch (Copy_Port) {
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	3e 83       	std	Y+6, r19	; 0x06
    21dc:	2d 83       	std	Y+5, r18	; 0x05
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	91 05       	cpc	r25, r1
    21e6:	59 f1       	breq	.+86     	; 0x223e <DIO_SetPinVal+0x18c>
    21e8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ea:	3e 81       	ldd	r19, Y+6	; 0x06
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	2c f4       	brge	.+10     	; 0x21fc <DIO_SetPinVal+0x14a>
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	69 f0       	breq	.+26     	; 0x2214 <DIO_SetPinVal+0x162>
    21fa:	5f c0       	rjmp	.+190    	; 0x22ba <DIO_SetPinVal+0x208>
    21fc:	2d 81       	ldd	r18, Y+5	; 0x05
    21fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2200:	22 30       	cpi	r18, 0x02	; 2
    2202:	31 05       	cpc	r19, r1
    2204:	89 f1       	breq	.+98     	; 0x2268 <DIO_SetPinVal+0x1b6>
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	91 05       	cpc	r25, r1
    220e:	09 f4       	brne	.+2      	; 0x2212 <DIO_SetPinVal+0x160>
    2210:	40 c0       	rjmp	.+128    	; 0x2292 <DIO_SetPinVal+0x1e0>
    2212:	53 c0       	rjmp	.+166    	; 0x22ba <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				CLEAR_BIT(PORTA, Copy_Pin);
    2214:	ab e3       	ldi	r26, 0x3B	; 59
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	eb e3       	ldi	r30, 0x3B	; 59
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	48 2f       	mov	r20, r24
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	02 2e       	mov	r0, r18
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <DIO_SetPinVal+0x180>
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	0a 94       	dec	r0
    2234:	e2 f7       	brpl	.-8      	; 0x222e <DIO_SetPinVal+0x17c>
    2236:	80 95       	com	r24
    2238:	84 23       	and	r24, r20
    223a:	8c 93       	st	X, r24
    223c:	3e c0       	rjmp	.+124    	; 0x22ba <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB, Copy_Pin);
    223e:	a8 e3       	ldi	r26, 0x38	; 56
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e8 e3       	ldi	r30, 0x38	; 56
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	48 2f       	mov	r20, r24
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 2e       	mov	r0, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <DIO_SetPinVal+0x1aa>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <DIO_SetPinVal+0x1a6>
    2260:	80 95       	com	r24
    2262:	84 23       	and	r24, r20
    2264:	8c 93       	st	X, r24
    2266:	29 c0       	rjmp	.+82     	; 0x22ba <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC, Copy_Pin);
    2268:	a5 e3       	ldi	r26, 0x35	; 53
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e5 e3       	ldi	r30, 0x35	; 53
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	48 2f       	mov	r20, r24
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	02 2e       	mov	r0, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <DIO_SetPinVal+0x1d4>
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <DIO_SetPinVal+0x1d0>
    228a:	80 95       	com	r24
    228c:	84 23       	and	r24, r20
    228e:	8c 93       	st	X, r24
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD, Copy_Pin);
    2292:	a2 e3       	ldi	r26, 0x32	; 50
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e2 e3       	ldi	r30, 0x32	; 50
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	02 2e       	mov	r0, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <DIO_SetPinVal+0x1fe>
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	0a 94       	dec	r0
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <DIO_SetPinVal+0x1fa>
    22b4:	80 95       	com	r24
    22b6:	84 23       	and	r24, r20
    22b8:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Local_uint8ErrorState;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    22bc:	28 96       	adiw	r28, 0x08	; 8
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <DIO_SetPortDir>:

status_t DIO_SetPortDir(Port_t Copy_Port, uint8 Copy_uint8Direction) {
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <DIO_SetPortDir+0x6>
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <DIO_SetPortDir+0x8>
    22d6:	0f 92       	push	r0
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	8a 83       	std	Y+2, r24	; 0x02
    22de:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    22e0:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	18 f0       	brcs	.+6      	; 0x22ee <DIO_SetPortDir+0x20>
		Local_uint8ErrorState = DIO_DirErr;
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	32 c0       	rjmp	.+100    	; 0x2352 <DIO_SetPortDir+0x84>
	} else {
		switch (Copy_Port) {
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	3d 83       	std	Y+5, r19	; 0x05
    22f6:	2c 83       	std	Y+4, r18	; 0x04
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	9d 81       	ldd	r25, Y+5	; 0x05
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	91 05       	cpc	r25, r1
    2300:	d1 f0       	breq	.+52     	; 0x2336 <DIO_SetPortDir+0x68>
    2302:	2c 81       	ldd	r18, Y+4	; 0x04
    2304:	3d 81       	ldd	r19, Y+5	; 0x05
    2306:	22 30       	cpi	r18, 0x02	; 2
    2308:	31 05       	cpc	r19, r1
    230a:	2c f4       	brge	.+10     	; 0x2316 <DIO_SetPortDir+0x48>
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	9d 81       	ldd	r25, Y+5	; 0x05
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	61 f0       	breq	.+24     	; 0x232c <DIO_SetPortDir+0x5e>
    2314:	1e c0       	rjmp	.+60     	; 0x2352 <DIO_SetPortDir+0x84>
    2316:	2c 81       	ldd	r18, Y+4	; 0x04
    2318:	3d 81       	ldd	r19, Y+5	; 0x05
    231a:	22 30       	cpi	r18, 0x02	; 2
    231c:	31 05       	cpc	r19, r1
    231e:	81 f0       	breq	.+32     	; 0x2340 <DIO_SetPortDir+0x72>
    2320:	8c 81       	ldd	r24, Y+4	; 0x04
    2322:	9d 81       	ldd	r25, Y+5	; 0x05
    2324:	83 30       	cpi	r24, 0x03	; 3
    2326:	91 05       	cpc	r25, r1
    2328:	81 f0       	breq	.+32     	; 0x234a <DIO_SetPortDir+0x7c>
    232a:	13 c0       	rjmp	.+38     	; 0x2352 <DIO_SetPortDir+0x84>
		case DIO_PORTA:
			DDRA = Copy_uint8Direction;
    232c:	ea e3       	ldi	r30, 0x3A	; 58
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	80 83       	st	Z, r24
    2334:	0e c0       	rjmp	.+28     	; 0x2352 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTB:
			DDRB = Copy_uint8Direction;
    2336:	e7 e3       	ldi	r30, 0x37	; 55
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	80 83       	st	Z, r24
    233e:	09 c0       	rjmp	.+18     	; 0x2352 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTC:
			DDRC = Copy_uint8Direction;
    2340:	e4 e3       	ldi	r30, 0x34	; 52
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	80 83       	st	Z, r24
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTD:
			DDRD = Copy_uint8Direction;
    234a:	e1 e3       	ldi	r30, 0x31	; 49
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_uint8ErrorState;
    2352:	89 81       	ldd	r24, Y+1	; 0x01
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <DIO_SetPinDir>:

status_t DIO_SetPinDir(Port_t Copy_Port, Pin_t Copy_Pin, Dir_t Copy_Direction) {
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	28 97       	sbiw	r28, 0x08	; 8
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	6b 83       	std	Y+3, r22	; 0x03
    237c:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    237e:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	84 30       	cpi	r24, 0x04	; 4
    2384:	18 f0       	brcs	.+6      	; 0x238c <DIO_SetPinDir+0x28>
		Local_uint8ErrorState = DIO_DirErr;
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	f0 c0       	rjmp	.+480    	; 0x256c <DIO_SetPinDir+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	88 30       	cpi	r24, 0x08	; 8
    2390:	18 f0       	brcs	.+6      	; 0x2398 <DIO_SetPinDir+0x34>
		Local_uint8ErrorState = DIO_DirErr;
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	ea c0       	rjmp	.+468    	; 0x256c <DIO_SetPinDir+0x208>
	} else {
		if (DIO_INPUT == Copy_Direction) {
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	88 23       	and	r24, r24
    239c:	09 f0       	breq	.+2      	; 0x23a0 <DIO_SetPinDir+0x3c>
    239e:	74 c0       	rjmp	.+232    	; 0x2488 <DIO_SetPinDir+0x124>
			switch (Copy_Port) {
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	38 87       	std	Y+8, r19	; 0x08
    23a8:	2f 83       	std	Y+7, r18	; 0x07
    23aa:	8f 81       	ldd	r24, Y+7	; 0x07
    23ac:	98 85       	ldd	r25, Y+8	; 0x08
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	91 05       	cpc	r25, r1
    23b2:	59 f1       	breq	.+86     	; 0x240a <DIO_SetPinDir+0xa6>
    23b4:	2f 81       	ldd	r18, Y+7	; 0x07
    23b6:	38 85       	ldd	r19, Y+8	; 0x08
    23b8:	22 30       	cpi	r18, 0x02	; 2
    23ba:	31 05       	cpc	r19, r1
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <DIO_SetPinDir+0x64>
    23be:	8f 81       	ldd	r24, Y+7	; 0x07
    23c0:	98 85       	ldd	r25, Y+8	; 0x08
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f0       	breq	.+26     	; 0x23e0 <DIO_SetPinDir+0x7c>
    23c6:	d2 c0       	rjmp	.+420    	; 0x256c <DIO_SetPinDir+0x208>
    23c8:	2f 81       	ldd	r18, Y+7	; 0x07
    23ca:	38 85       	ldd	r19, Y+8	; 0x08
    23cc:	22 30       	cpi	r18, 0x02	; 2
    23ce:	31 05       	cpc	r19, r1
    23d0:	89 f1       	breq	.+98     	; 0x2434 <DIO_SetPinDir+0xd0>
    23d2:	8f 81       	ldd	r24, Y+7	; 0x07
    23d4:	98 85       	ldd	r25, Y+8	; 0x08
    23d6:	83 30       	cpi	r24, 0x03	; 3
    23d8:	91 05       	cpc	r25, r1
    23da:	09 f4       	brne	.+2      	; 0x23de <DIO_SetPinDir+0x7a>
    23dc:	40 c0       	rjmp	.+128    	; 0x245e <DIO_SetPinDir+0xfa>
    23de:	c6 c0       	rjmp	.+396    	; 0x256c <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				CLEAR_BIT(DDRA, Copy_Pin);
    23e0:	aa e3       	ldi	r26, 0x3A	; 58
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	ea e3       	ldi	r30, 0x3A	; 58
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	48 2f       	mov	r20, r24
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	02 2e       	mov	r0, r18
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <DIO_SetPinDir+0x9a>
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	0a 94       	dec	r0
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <DIO_SetPinDir+0x96>
    2402:	80 95       	com	r24
    2404:	84 23       	and	r24, r20
    2406:	8c 93       	st	X, r24
    2408:	b1 c0       	rjmp	.+354    	; 0x256c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB, Copy_Pin);
    240a:	a7 e3       	ldi	r26, 0x37	; 55
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e7 e3       	ldi	r30, 0x37	; 55
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	48 2f       	mov	r20, r24
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	02 2e       	mov	r0, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <DIO_SetPinDir+0xc4>
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <DIO_SetPinDir+0xc0>
    242c:	80 95       	com	r24
    242e:	84 23       	and	r24, r20
    2430:	8c 93       	st	X, r24
    2432:	9c c0       	rjmp	.+312    	; 0x256c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC, Copy_Pin);
    2434:	a4 e3       	ldi	r26, 0x34	; 52
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e4 e3       	ldi	r30, 0x34	; 52
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 2e       	mov	r0, r18
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <DIO_SetPinDir+0xee>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	0a 94       	dec	r0
    2454:	e2 f7       	brpl	.-8      	; 0x244e <DIO_SetPinDir+0xea>
    2456:	80 95       	com	r24
    2458:	84 23       	and	r24, r20
    245a:	8c 93       	st	X, r24
    245c:	87 c0       	rjmp	.+270    	; 0x256c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD, Copy_Pin);
    245e:	a1 e3       	ldi	r26, 0x31	; 49
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e1 e3       	ldi	r30, 0x31	; 49
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	48 2f       	mov	r20, r24
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	02 2e       	mov	r0, r18
    2476:	02 c0       	rjmp	.+4      	; 0x247c <DIO_SetPinDir+0x118>
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	0a 94       	dec	r0
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <DIO_SetPinDir+0x114>
    2480:	80 95       	com	r24
    2482:	84 23       	and	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	72 c0       	rjmp	.+228    	; 0x256c <DIO_SetPinDir+0x208>
				break;
			}
		} else if (DIO_OUTPUT == Copy_Direction) {
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	81 30       	cpi	r24, 0x01	; 1
    248c:	09 f0       	breq	.+2      	; 0x2490 <DIO_SetPinDir+0x12c>
    248e:	6e c0       	rjmp	.+220    	; 0x256c <DIO_SetPinDir+0x208>
			switch (Copy_Port) {
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	3e 83       	std	Y+6, r19	; 0x06
    2498:	2d 83       	std	Y+5, r18	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	91 05       	cpc	r25, r1
    24a2:	49 f1       	breq	.+82     	; 0x24f6 <DIO_SetPinDir+0x192>
    24a4:	2d 81       	ldd	r18, Y+5	; 0x05
    24a6:	3e 81       	ldd	r19, Y+6	; 0x06
    24a8:	22 30       	cpi	r18, 0x02	; 2
    24aa:	31 05       	cpc	r19, r1
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <DIO_SetPinDir+0x154>
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	61 f0       	breq	.+24     	; 0x24ce <DIO_SetPinDir+0x16a>
    24b6:	5a c0       	rjmp	.+180    	; 0x256c <DIO_SetPinDir+0x208>
    24b8:	2d 81       	ldd	r18, Y+5	; 0x05
    24ba:	3e 81       	ldd	r19, Y+6	; 0x06
    24bc:	22 30       	cpi	r18, 0x02	; 2
    24be:	31 05       	cpc	r19, r1
    24c0:	71 f1       	breq	.+92     	; 0x251e <DIO_SetPinDir+0x1ba>
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	91 05       	cpc	r25, r1
    24ca:	e9 f1       	breq	.+122    	; 0x2546 <DIO_SetPinDir+0x1e2>
    24cc:	4f c0       	rjmp	.+158    	; 0x256c <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				SET_BIT(DDRA, Copy_Pin);
    24ce:	aa e3       	ldi	r26, 0x3A	; 58
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	ea e3       	ldi	r30, 0x3A	; 58
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	48 2f       	mov	r20, r24
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	02 2e       	mov	r0, r18
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_SetPinDir+0x188>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	0a 94       	dec	r0
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_SetPinDir+0x184>
    24f0:	84 2b       	or	r24, r20
    24f2:	8c 93       	st	X, r24
    24f4:	3b c0       	rjmp	.+118    	; 0x256c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB, Copy_Pin);
    24f6:	a7 e3       	ldi	r26, 0x37	; 55
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e7 e3       	ldi	r30, 0x37	; 55
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	48 2f       	mov	r20, r24
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	02 2e       	mov	r0, r18
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <DIO_SetPinDir+0x1b0>
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	0a 94       	dec	r0
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <DIO_SetPinDir+0x1ac>
    2518:	84 2b       	or	r24, r20
    251a:	8c 93       	st	X, r24
    251c:	27 c0       	rjmp	.+78     	; 0x256c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC, Copy_Pin);
    251e:	a4 e3       	ldi	r26, 0x34	; 52
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e4 e3       	ldi	r30, 0x34	; 52
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	48 2f       	mov	r20, r24
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 2e       	mov	r0, r18
    2536:	02 c0       	rjmp	.+4      	; 0x253c <DIO_SetPinDir+0x1d8>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	0a 94       	dec	r0
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <DIO_SetPinDir+0x1d4>
    2540:	84 2b       	or	r24, r20
    2542:	8c 93       	st	X, r24
    2544:	13 c0       	rjmp	.+38     	; 0x256c <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD, Copy_Pin);
    2546:	a1 e3       	ldi	r26, 0x31	; 49
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e1 e3       	ldi	r30, 0x31	; 49
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	48 2f       	mov	r20, r24
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	02 2e       	mov	r0, r18
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <DIO_SetPinDir+0x200>
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	0a 94       	dec	r0
    2566:	e2 f7       	brpl	.-8      	; 0x2560 <DIO_SetPinDir+0x1fc>
    2568:	84 2b       	or	r24, r20
    256a:	8c 93       	st	X, r24
				break;
			}
		}
	}
	return Local_uint8ErrorState;
    256c:	89 81       	ldd	r24, Y+1	; 0x01
}
    256e:	28 96       	adiw	r28, 0x08	; 8
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <DIO_GetPinVal>:


status_t DIO_GetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8* Copy_pvValue)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	27 97       	sbiw	r28, 0x07	; 7
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	8a 83       	std	Y+2, r24	; 0x02
    2596:	6b 83       	std	Y+3, r22	; 0x03
    2598:	5d 83       	std	Y+5, r21	; 0x05
    259a:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    259c:	19 82       	std	Y+1, r1	; 0x01

		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	84 30       	cpi	r24, 0x04	; 4
    25a2:	18 f0       	brcs	.+6      	; 0x25aa <DIO_GetPinVal+0x2a>
			Local_uint8ErrorState = DIO_GetErr;
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	76 c0       	rjmp	.+236    	; 0x2696 <DIO_GetPinVal+0x116>
		} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	88 30       	cpi	r24, 0x08	; 8
    25ae:	18 f0       	brcs	.+6      	; 0x25b6 <DIO_GetPinVal+0x36>
			Local_uint8ErrorState = DIO_GetErr;
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	70 c0       	rjmp	.+224    	; 0x2696 <DIO_GetPinVal+0x116>
		} else {
			switch (Copy_Port)
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	3f 83       	std	Y+7, r19	; 0x07
    25be:	2e 83       	std	Y+6, r18	; 0x06
    25c0:	4e 81       	ldd	r20, Y+6	; 0x06
    25c2:	5f 81       	ldd	r21, Y+7	; 0x07
    25c4:	41 30       	cpi	r20, 0x01	; 1
    25c6:	51 05       	cpc	r21, r1
    25c8:	59 f1       	breq	.+86     	; 0x2620 <DIO_GetPinVal+0xa0>
    25ca:	8e 81       	ldd	r24, Y+6	; 0x06
    25cc:	9f 81       	ldd	r25, Y+7	; 0x07
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	91 05       	cpc	r25, r1
    25d2:	34 f4       	brge	.+12     	; 0x25e0 <DIO_GetPinVal+0x60>
    25d4:	2e 81       	ldd	r18, Y+6	; 0x06
    25d6:	3f 81       	ldd	r19, Y+7	; 0x07
    25d8:	21 15       	cp	r18, r1
    25da:	31 05       	cpc	r19, r1
    25dc:	69 f0       	breq	.+26     	; 0x25f8 <DIO_GetPinVal+0x78>
    25de:	5b c0       	rjmp	.+182    	; 0x2696 <DIO_GetPinVal+0x116>
    25e0:	4e 81       	ldd	r20, Y+6	; 0x06
    25e2:	5f 81       	ldd	r21, Y+7	; 0x07
    25e4:	42 30       	cpi	r20, 0x02	; 2
    25e6:	51 05       	cpc	r21, r1
    25e8:	79 f1       	breq	.+94     	; 0x2648 <DIO_GetPinVal+0xc8>
    25ea:	8e 81       	ldd	r24, Y+6	; 0x06
    25ec:	9f 81       	ldd	r25, Y+7	; 0x07
    25ee:	83 30       	cpi	r24, 0x03	; 3
    25f0:	91 05       	cpc	r25, r1
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <DIO_GetPinVal+0x76>
    25f4:	3d c0       	rjmp	.+122    	; 0x2670 <DIO_GetPinVal+0xf0>
    25f6:	4f c0       	rjmp	.+158    	; 0x2696 <DIO_GetPinVal+0x116>
			{case DIO_PORTA : *Copy_pvValue=GET_BIT(PINA,Copy_Pin);break;
    25f8:	e9 e3       	ldi	r30, 0x39	; 57
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a9 01       	movw	r20, r18
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <DIO_GetPinVal+0x90>
    260c:	55 95       	asr	r21
    260e:	47 95       	ror	r20
    2610:	8a 95       	dec	r24
    2612:	e2 f7       	brpl	.-8      	; 0x260c <DIO_GetPinVal+0x8c>
    2614:	ca 01       	movw	r24, r20
    2616:	81 70       	andi	r24, 0x01	; 1
    2618:	ec 81       	ldd	r30, Y+4	; 0x04
    261a:	fd 81       	ldd	r31, Y+5	; 0x05
    261c:	80 83       	st	Z, r24
    261e:	3b c0       	rjmp	.+118    	; 0x2696 <DIO_GetPinVal+0x116>
			case DIO_PORTB : *Copy_pvValue=GET_BIT(PINB,Copy_Pin);break;
    2620:	e6 e3       	ldi	r30, 0x36	; 54
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	a9 01       	movw	r20, r18
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <DIO_GetPinVal+0xb8>
    2634:	55 95       	asr	r21
    2636:	47 95       	ror	r20
    2638:	8a 95       	dec	r24
    263a:	e2 f7       	brpl	.-8      	; 0x2634 <DIO_GetPinVal+0xb4>
    263c:	ca 01       	movw	r24, r20
    263e:	81 70       	andi	r24, 0x01	; 1
    2640:	ec 81       	ldd	r30, Y+4	; 0x04
    2642:	fd 81       	ldd	r31, Y+5	; 0x05
    2644:	80 83       	st	Z, r24
    2646:	27 c0       	rjmp	.+78     	; 0x2696 <DIO_GetPinVal+0x116>
			case DIO_PORTC : *Copy_pvValue=GET_BIT(PINC,Copy_Pin);break;
    2648:	e3 e3       	ldi	r30, 0x33	; 51
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	88 2f       	mov	r24, r24
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a9 01       	movw	r20, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_GetPinVal+0xe0>
    265c:	55 95       	asr	r21
    265e:	47 95       	ror	r20
    2660:	8a 95       	dec	r24
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_GetPinVal+0xdc>
    2664:	ca 01       	movw	r24, r20
    2666:	81 70       	andi	r24, 0x01	; 1
    2668:	ec 81       	ldd	r30, Y+4	; 0x04
    266a:	fd 81       	ldd	r31, Y+5	; 0x05
    266c:	80 83       	st	Z, r24
    266e:	13 c0       	rjmp	.+38     	; 0x2696 <DIO_GetPinVal+0x116>
			case DIO_PORTD : *Copy_pvValue=GET_BIT(PIND,Copy_Pin);break;
    2670:	e0 e3       	ldi	r30, 0x30	; 48
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a9 01       	movw	r20, r18
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <DIO_GetPinVal+0x108>
    2684:	55 95       	asr	r21
    2686:	47 95       	ror	r20
    2688:	8a 95       	dec	r24
    268a:	e2 f7       	brpl	.-8      	; 0x2684 <DIO_GetPinVal+0x104>
    268c:	ca 01       	movw	r24, r20
    268e:	81 70       	andi	r24, 0x01	; 1
    2690:	ec 81       	ldd	r30, Y+4	; 0x04
    2692:	fd 81       	ldd	r31, Y+5	; 0x05
    2694:	80 83       	st	Z, r24

			}
		}
return Local_uint8ErrorState;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
}
    2698:	27 96       	adiw	r28, 0x07	; 7
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <DIO_GetPortVal>:


uint8 DIO_GetPortVal(Port_t Copy_Port,uint8* Copy_pvValue)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <DIO_GetPortVal+0x6>
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <DIO_GetPortVal+0x8>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <DIO_GetPortVal+0xa>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	8a 83       	std	Y+2, r24	; 0x02
    26ba:	7c 83       	std	Y+4, r23	; 0x04
    26bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8ErrorState = 0;
    26be:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	18 f0       	brcs	.+6      	; 0x26cc <DIO_GetPortVal+0x22>
			Local_uint8ErrorState = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	3a c0       	rjmp	.+116    	; 0x2740 <DIO_GetPortVal+0x96>
		} else {
			switch(Copy_Port)
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	3e 83       	std	Y+6, r19	; 0x06
    26d4:	2d 83       	std	Y+5, r18	; 0x05
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	81 30       	cpi	r24, 0x01	; 1
    26dc:	91 05       	cpc	r25, r1
    26de:	e1 f0       	breq	.+56     	; 0x2718 <DIO_GetPortVal+0x6e>
    26e0:	2d 81       	ldd	r18, Y+5	; 0x05
    26e2:	3e 81       	ldd	r19, Y+6	; 0x06
    26e4:	22 30       	cpi	r18, 0x02	; 2
    26e6:	31 05       	cpc	r19, r1
    26e8:	2c f4       	brge	.+10     	; 0x26f4 <DIO_GetPortVal+0x4a>
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	61 f0       	breq	.+24     	; 0x270a <DIO_GetPortVal+0x60>
    26f2:	26 c0       	rjmp	.+76     	; 0x2740 <DIO_GetPortVal+0x96>
    26f4:	2d 81       	ldd	r18, Y+5	; 0x05
    26f6:	3e 81       	ldd	r19, Y+6	; 0x06
    26f8:	22 30       	cpi	r18, 0x02	; 2
    26fa:	31 05       	cpc	r19, r1
    26fc:	a1 f0       	breq	.+40     	; 0x2726 <DIO_GetPortVal+0x7c>
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	83 30       	cpi	r24, 0x03	; 3
    2704:	91 05       	cpc	r25, r1
    2706:	b1 f0       	breq	.+44     	; 0x2734 <DIO_GetPortVal+0x8a>
    2708:	1b c0       	rjmp	.+54     	; 0x2740 <DIO_GetPortVal+0x96>
			{case DIO_PORTA:*Copy_pvValue=PINA;break;
    270a:	e9 e3       	ldi	r30, 0x39	; 57
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	eb 81       	ldd	r30, Y+3	; 0x03
    2712:	fc 81       	ldd	r31, Y+4	; 0x04
    2714:	80 83       	st	Z, r24
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <DIO_GetPortVal+0x96>
			case DIO_PORTB:*Copy_pvValue=PINB;break;
    2718:	e6 e3       	ldi	r30, 0x36	; 54
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	eb 81       	ldd	r30, Y+3	; 0x03
    2720:	fc 81       	ldd	r31, Y+4	; 0x04
    2722:	80 83       	st	Z, r24
    2724:	0d c0       	rjmp	.+26     	; 0x2740 <DIO_GetPortVal+0x96>
			case DIO_PORTC:*Copy_pvValue=PINC;break;
    2726:	e3 e3       	ldi	r30, 0x33	; 51
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	eb 81       	ldd	r30, Y+3	; 0x03
    272e:	fc 81       	ldd	r31, Y+4	; 0x04
    2730:	80 83       	st	Z, r24
    2732:	06 c0       	rjmp	.+12     	; 0x2740 <DIO_GetPortVal+0x96>
			case DIO_PORTD:*Copy_pvValue=PIND;break;
    2734:	e0 e3       	ldi	r30, 0x30	; 48
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	eb 81       	ldd	r30, Y+3	; 0x03
    273c:	fc 81       	ldd	r31, Y+4	; 0x04
    273e:	80 83       	st	Z, r24
			}
		}

return Local_uint8ErrorState;
    2740:	89 81       	ldd	r24, Y+1	; 0x01
}
    2742:	26 96       	adiw	r28, 0x06	; 6
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <ADC_voidInit>:
#include "../inc/ADC_interface.h"
#include "../inc/ADC_register.h"
#include "../inc/ADC_config.h"
#include "../inc/ADC_private.h"

void ADC_voidInit(void) {
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	/*PRE-SCALER SELECTION*/
	ADCSRA_Reg->ADPS = DESIRED_PRE_SCALER;
    275c:	e6 e2       	ldi	r30, 0x26	; 38
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 7f       	andi	r24, 0xF8	; 248
    2764:	83 60       	ori	r24, 0x03	; 3
    2766:	80 83       	st	Z, r24

	/*Choosing the voltage reference*/
	ADMUX_Reg->REFS = DESIRED_VOLTAGE_REF;
    2768:	e7 e2       	ldi	r30, 0x27	; 39
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	8f 73       	andi	r24, 0x3F	; 63
    2770:	80 64       	ori	r24, 0x40	; 64
    2772:	80 83       	st	Z, r24
	/*choose the Resolution*/
	ADMUX_Reg->ADLAR = RIGHT;
    2774:	e7 e2       	ldi	r30, 0x27	; 39
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	8f 7d       	andi	r24, 0xDF	; 223
    277c:	80 83       	st	Z, r24

#ifdef AUTO_TREGERED

	ADCSRA_Reg->ADATE=ENABLE;
    277e:	e6 e2       	ldi	r30, 0x26	; 38
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	80 62       	ori	r24, 0x20	; 32
    2786:	80 83       	st	Z, r24

	ADC_SFIOR_Reg->ADTS  =  AUTO_TRIGER_SOURCE;
    2788:	e0 e5       	ldi	r30, 0x50	; 80
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	8f 71       	andi	r24, 0x1F	; 31
    2790:	80 68       	ori	r24, 0x80	; 128
    2792:	80 83       	st	Z, r24

#endif
	/*ENABLE THE ADC*/
	ADCSRA_Reg->ADEN = ENABLE;
    2794:	e6 e2       	ldi	r30, 0x26	; 38
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	80 68       	ori	r24, 0x80	; 128
    279c:	80 83       	st	Z, r24

}
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <ADC_uint8StartConversionSynchronus>:
ADC_Status_t ADC_uint8StartConversionSynchronus(Channel_t Copy_uint8channel,uint16* copy_uint16PuReading) {
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	28 97       	sbiw	r28, 0x08	; 8
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	8e 83       	std	Y+6, r24	; 0x06
    27ba:	78 87       	std	Y+8, r23	; 0x08
    27bc:	6f 83       	std	Y+7, r22	; 0x07
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    27be:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_uint32Counter = 0;
    27c0:	19 82       	std	Y+1, r1	; 0x01
    27c2:	1a 82       	std	Y+2, r1	; 0x02
    27c4:	1b 82       	std	Y+3, r1	; 0x03
    27c6:	1c 82       	std	Y+4, r1	; 0x04
	if (NULL == copy_uint16PuReading) {
    27c8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ca:	98 85       	ldd	r25, Y+8	; 0x08
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	19 f4       	brne	.+6      	; 0x27d6 <ADC_uint8StartConversionSynchronus+0x32>
		Local_ErrorStatus = ADC_POINTER_Err;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	4a c0       	rjmp	.+148    	; 0x286a <ADC_uint8StartConversionSynchronus+0xc6>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    27d6:	8e 81       	ldd	r24, Y+6	; 0x06
    27d8:	88 30       	cpi	r24, 0x08	; 8
    27da:	18 f0       	brcs	.+6      	; 0x27e2 <ADC_uint8StartConversionSynchronus+0x3e>
		Local_ErrorStatus = ADC_ChannelErr;
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	44 c0       	rjmp	.+136    	; 0x286a <ADC_uint8StartConversionSynchronus+0xc6>
	} else {
		/*Select the Channel*/
		ADMUX_Reg->MUX = Copy_uint8channel;
    27e2:	e7 e2       	ldi	r30, 0x27	; 39
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	8e 81       	ldd	r24, Y+6	; 0x06
    27e8:	8f 71       	andi	r24, 0x1F	; 31
    27ea:	98 2f       	mov	r25, r24
    27ec:	9f 71       	andi	r25, 0x1F	; 31
    27ee:	80 81       	ld	r24, Z
    27f0:	80 7e       	andi	r24, 0xE0	; 224
    27f2:	89 2b       	or	r24, r25
    27f4:	80 83       	st	Z, r24
    27f6:	0b c0       	rjmp	.+22     	; 0x280e <ADC_uint8StartConversionSynchronus+0x6a>
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
			Local_uint32Counter++;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	ab 81       	ldd	r26, Y+3	; 0x03
    27fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	a1 1d       	adc	r26, r1
    2804:	b1 1d       	adc	r27, r1
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	ab 83       	std	Y+3, r26	; 0x03
    280c:	bc 83       	std	Y+4, r27	; 0x04
#ifndef AUTO_TREGERED
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
    280e:	e6 e2       	ldi	r30, 0x26	; 38
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	80 71       	andi	r24, 0x10	; 16
    2816:	88 23       	and	r24, r24
    2818:	61 f4       	brne	.+24     	; 0x2832 <ADC_uint8StartConversionSynchronus+0x8e>
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	ab 81       	ldd	r26, Y+3	; 0x03
    2820:	bc 81       	ldd	r27, Y+4	; 0x04
    2822:	84 3f       	cpi	r24, 0xF4	; 244
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	92 07       	cpc	r25, r18
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	a2 07       	cpc	r26, r18
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	b2 07       	cpc	r27, r18
    2830:	18 f3       	brcs	.-58     	; 0x27f8 <ADC_uint8StartConversionSynchronus+0x54>
			Local_uint32Counter++;
		}
		if (Local_uint32Counter == TIME_OUT) {
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	ab 81       	ldd	r26, Y+3	; 0x03
    2838:	bc 81       	ldd	r27, Y+4	; 0x04
    283a:	84 3f       	cpi	r24, 0xF4	; 244
    283c:	21 e0       	ldi	r18, 0x01	; 1
    283e:	92 07       	cpc	r25, r18
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	a2 07       	cpc	r26, r18
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	b2 07       	cpc	r27, r18
    2848:	19 f4       	brne	.+6      	; 0x2850 <ADC_uint8StartConversionSynchronus+0xac>
			Local_ErrorStatus = ADC_TIME_OUTErr;
    284a:	83 e0       	ldi	r24, 0x03	; 3
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	0d c0       	rjmp	.+26     	; 0x286a <ADC_uint8StartConversionSynchronus+0xc6>
		} else {
			/*Clear the valg*/
			ADCSRA_Reg->ADIF = ENABLE;
    2850:	e6 e2       	ldi	r30, 0x26	; 38
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 61       	ori	r24, 0x10	; 16
    2858:	80 83       	st	Z, r24

#if     DATA_SIZE == BIT_10_MACRO
			*copy_uint16PuReading=ADC;
    285a:	e4 e2       	ldi	r30, 0x24	; 36
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	ef 81       	ldd	r30, Y+7	; 0x07
    2864:	f8 85       	ldd	r31, Y+8	; 0x08
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24

		}

	}

	return Local_ErrorStatus;
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    286c:	28 96       	adiw	r28, 0x08	; 8
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <ADC_uint8StartConversionASynchronus>:

ADC_Status_t ADC_uint8StartConversionASynchronus(Channel_t Copy_uint8channel,void (*copy_PvNotifacation)(void), uint16* copy_uint16PuReading) {
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	00 d0       	rcall	.+0      	; 0x2884 <ADC_uint8StartConversionASynchronus+0x6>
    2884:	00 d0       	rcall	.+0      	; 0x2886 <ADC_uint8StartConversionASynchronus+0x8>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <ADC_uint8StartConversionASynchronus+0xa>
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	8a 83       	std	Y+2, r24	; 0x02
    288e:	7c 83       	std	Y+4, r23	; 0x04
    2890:	6b 83       	std	Y+3, r22	; 0x03
    2892:	5e 83       	std	Y+6, r21	; 0x06
    2894:	4d 83       	std	Y+5, r20	; 0x05
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    2896:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == copy_uint16PuReading) {
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	19 f4       	brne	.+6      	; 0x28a6 <ADC_uint8StartConversionASynchronus+0x28>
		Local_ErrorStatus = ADC_POINTER_Err;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	1e c0       	rjmp	.+60     	; 0x28e2 <ADC_uint8StartConversionASynchronus+0x64>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	88 30       	cpi	r24, 0x08	; 8
    28aa:	18 f0       	brcs	.+6      	; 0x28b2 <ADC_uint8StartConversionASynchronus+0x34>
		Local_ErrorStatus = ADC_ChannelErr;
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	18 c0       	rjmp	.+48     	; 0x28e2 <ADC_uint8StartConversionASynchronus+0x64>
	} else if (NULL == copy_PvNotifacation) {
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	19 f4       	brne	.+6      	; 0x28c0 <ADC_uint8StartConversionASynchronus+0x42>
		Local_ErrorStatus = ADC_POINTER_Err;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	11 c0       	rjmp	.+34     	; 0x28e2 <ADC_uint8StartConversionASynchronus+0x64>
	} else {

		Global_PvNotifacation = copy_PvNotifacation;
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	90 93 a7 01 	sts	0x01A7, r25
    28c8:	80 93 a6 01 	sts	0x01A6, r24

		/*Assign Address of Receive Variable in Global Pointer to be used in ISR*/
		Global_uint16PuReading = copy_uint16PuReading;
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	90 93 a9 01 	sts	0x01A9, r25
    28d4:	80 93 a8 01 	sts	0x01A8, r24


		/* ADC Conversion Complete Interrupt Enable*/
		ADCSRA_Reg->ADIE = ENABLE;
    28d8:	e6 e2       	ldi	r30, 0x26	; 38
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	88 60       	ori	r24, 0x08	; 8
    28e0:	80 83       	st	Z, r24
#ifndef AUTO_TREGERED
		/*ADC Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
	}
	return Local_ErrorStatus;
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28e4:	26 96       	adiw	r28, 0x06	; 6
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <__vector_16>:



void __vector_16(void) {
    28f6:	1f 92       	push	r1
    28f8:	0f 92       	push	r0
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	0f 92       	push	r0
    28fe:	11 24       	eor	r1, r1
    2900:	2f 93       	push	r18
    2902:	3f 93       	push	r19
    2904:	4f 93       	push	r20
    2906:	5f 93       	push	r21
    2908:	6f 93       	push	r22
    290a:	7f 93       	push	r23
    290c:	8f 93       	push	r24
    290e:	9f 93       	push	r25
    2910:	af 93       	push	r26
    2912:	bf 93       	push	r27
    2914:	ef 93       	push	r30
    2916:	ff 93       	push	r31
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
#if     DATA_SIZE == BIT_10_MACRO
	*Global_uint16PuReading=ADC;
    2920:	a0 91 a8 01 	lds	r26, 0x01A8
    2924:	b0 91 a9 01 	lds	r27, 0x01A9
    2928:	e4 e2       	ldi	r30, 0x24	; 36
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	8d 93       	st	X+, r24
    2932:	9c 93       	st	X, r25
#elif  DATA_SIZE == BIT_8_MACRO
	*Global_uint16PuReading = ADC >> 2;
#endif

	/*Execute Notification Function*/
	Global_PvNotifacation();
    2934:	e0 91 a6 01 	lds	r30, 0x01A6
    2938:	f0 91 a7 01 	lds	r31, 0x01A7
    293c:	09 95       	icall
}
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	ff 91       	pop	r31
    2944:	ef 91       	pop	r30
    2946:	bf 91       	pop	r27
    2948:	af 91       	pop	r26
    294a:	9f 91       	pop	r25
    294c:	8f 91       	pop	r24
    294e:	7f 91       	pop	r23
    2950:	6f 91       	pop	r22
    2952:	5f 91       	pop	r21
    2954:	4f 91       	pop	r20
    2956:	3f 91       	pop	r19
    2958:	2f 91       	pop	r18
    295a:	0f 90       	pop	r0
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	0f 90       	pop	r0
    2960:	1f 90       	pop	r1
    2962:	18 95       	reti

00002964 <EEPROM_Init>:
//
//
//}

void EEPROM_Init(void)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    296c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <TWI_voidMasterInit>
}
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <EEPROM_voidSendData>:

void EEPROM_voidSendData(uint16 Copy_u16Address,uint8 Copy_u8Data)
{
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	00 d0       	rcall	.+0      	; 0x297c <EEPROM_voidSendData+0x6>
    297c:	00 d0       	rcall	.+0      	; 0x297e <EEPROM_voidSendData+0x8>
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	9b 83       	std	Y+3, r25	; 0x03
    2984:	8a 83       	std	Y+2, r24	; 0x02
    2986:	6c 83       	std	Y+4, r22	; 0x04
	//int static a=0;
	/*1010(A2)(B1)(B0)(W/R)*/
	uint8 SLV_W=0b10100000;
    2988:	80 ea       	ldi	r24, 0xA0	; 160
    298a:	89 83       	std	Y+1, r24	; 0x01

	TWI_voidStartCondition();
    298c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <TWI_voidStartCondition>
//	CLCD_voidGoToXY(0,0);
//	CLCD_voidWriteNumber(++a);

	/*BLOCK SELECTION WITH WRITE*/
	TWI_voidSendData(SLV_W);
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	0e 94 12 09 	call	0x1224	; 0x1224 <TWI_voidSendData>

	/*BYTE SELECTION IN THE DESIRED BLOCK*/
	TWI_voidSendData((uint8)Copy_u16Address);
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	0e 94 12 09 	call	0x1224	; 0x1224 <TWI_voidSendData>

	/*SENDING THE DATA*/
	TWI_voidSendData(Copy_u8Data);
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	0e 94 12 09 	call	0x1224	; 0x1224 <TWI_voidSendData>
	TWI_voidStopCondition();
    29a2:	0e 94 07 09 	call	0x120e	; 0x120e <TWI_voidStopCondition>

}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <EEPROM_voidReceiveData>:

uint8 EEPROM_voidReceiveData(uint16 Copy_u16Address)
{
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <EEPROM_voidReceiveData+0x6>
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <EEPROM_voidReceiveData+0x8>
    29bc:	0f 92       	push	r0
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	9d 83       	std	Y+5, r25	; 0x05
    29c4:	8c 83       	std	Y+4, r24	; 0x04
	uint8 SLV_W=0b10100000;
    29c6:	80 ea       	ldi	r24, 0xA0	; 160
    29c8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 SLV_R=SLV_W+1;
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	8f 5f       	subi	r24, 0xFF	; 255
    29ce:	8a 83       	std	Y+2, r24	; 0x02
	TWI_voidStartCondition();
    29d0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <TWI_voidStartCondition>

	TWI_voidSendData(SLV_W);
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	0e 94 12 09 	call	0x1224	; 0x1224 <TWI_voidSendData>
	TWI_voidSendData((uint8)Copy_u16Address);
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	0e 94 12 09 	call	0x1224	; 0x1224 <TWI_voidSendData>

	TWI_voidStartCondition();
    29e0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <TWI_voidStartCondition>
	TWI_voidSendData(SLV_R);
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	0e 94 12 09 	call	0x1224	; 0x1224 <TWI_voidSendData>

	uint8 Data=TWI_u8ReceiveData();
    29ea:	0e 94 2a 09 	call	0x1254	; 0x1254 <TWI_u8ReceiveData>
    29ee:	89 83       	std	Y+1, r24	; 0x01

	TWI_voidStopCondition();
    29f0:	0e 94 07 09 	call	0x120e	; 0x120e <TWI_voidStopCondition>
	return Data;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <delay_ms>:
#include "../../../LIB/STD_TYPES.h"
#include "../../../LIB/BIT_MATH.h"
#include "../inc/CLCD_interface.h"
#include "../../../MCAL/DIO/inc/DIO_INTERFACE.h"

void delay_ms(uint16 milliseconds) {
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	2c 97       	sbiw	r28, 0x0c	; 12
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	9c 87       	std	Y+12, r25	; 0x0c
    2a1c:	8b 87       	std	Y+11, r24	; 0x0b
    // Assuming 4 cycles per loop iteration for an 8 MHz clock
    const uint16 cycles_per_ms = 100; // Calculated for 1 ms delay
    2a1e:	84 e6       	ldi	r24, 0x64	; 100
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    uint32 total_iterations = milliseconds * cycles_per_ms;
    2a26:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a28:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	ac 01       	movw	r20, r24
    2a30:	24 9f       	mul	r18, r20
    2a32:	c0 01       	movw	r24, r0
    2a34:	25 9f       	mul	r18, r21
    2a36:	90 0d       	add	r25, r0
    2a38:	34 9f       	mul	r19, r20
    2a3a:	90 0d       	add	r25, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	cc 01       	movw	r24, r24
    2a40:	a0 e0       	ldi	r26, 0x00	; 0
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	ab 83       	std	Y+3, r26	; 0x03
    2a4a:	bc 83       	std	Y+4, r27	; 0x04

    // Loop for the calculated number of iterations
    for (volatile uint32 i = 0; i < total_iterations; i++) {
    2a4c:	1f 82       	std	Y+7, r1	; 0x07
    2a4e:	18 86       	std	Y+8, r1	; 0x08
    2a50:	19 86       	std	Y+9, r1	; 0x09
    2a52:	1a 86       	std	Y+10, r1	; 0x0a
    2a54:	0b c0       	rjmp	.+22     	; 0x2a6c <delay_ms+0x66>
    2a56:	8f 81       	ldd	r24, Y+7	; 0x07
    2a58:	98 85       	ldd	r25, Y+8	; 0x08
    2a5a:	a9 85       	ldd	r26, Y+9	; 0x09
    2a5c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	a1 1d       	adc	r26, r1
    2a62:	b1 1d       	adc	r27, r1
    2a64:	8f 83       	std	Y+7, r24	; 0x07
    2a66:	98 87       	std	Y+8, r25	; 0x08
    2a68:	a9 87       	std	Y+9, r26	; 0x09
    2a6a:	ba 87       	std	Y+10, r27	; 0x0a
    2a6c:	2f 81       	ldd	r18, Y+7	; 0x07
    2a6e:	38 85       	ldd	r19, Y+8	; 0x08
    2a70:	49 85       	ldd	r20, Y+9	; 0x09
    2a72:	5a 85       	ldd	r21, Y+10	; 0x0a
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	ab 81       	ldd	r26, Y+3	; 0x03
    2a7a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a7c:	28 17       	cp	r18, r24
    2a7e:	39 07       	cpc	r19, r25
    2a80:	4a 07       	cpc	r20, r26
    2a82:	5b 07       	cpc	r21, r27
    2a84:	40 f3       	brcs	.-48     	; 0x2a56 <delay_ms+0x50>
        // Empty loop to create the delay
    }
}
    2a86:	2c 96       	adiw	r28, 0x0c	; 12
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(uint8 copy_uint8Command)
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	0f 92       	push	r0
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	89 83       	std	Y+1, r24	; 0x01
	/*Setting RS pin to low*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
/*Setting RW pin low for write*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	61 e0       	ldi	r22, 0x01	; 1
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>

/*Set command data pins*/
DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Command);
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	69 81       	ldd	r22, Y+1	; 0x01
    2abc:	0e 94 0e 10 	call	0x201c	; 0x201c <DIO_SetPortVal>

/*Send Enable pulse*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	62 e0       	ldi	r22, 0x02	; 2
    2ac4:	41 e0       	ldi	r20, 0x01	; 1
    2ac6:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
delay_ms(2);
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	0e 94 03 15 	call	0x2a06	; 0x2a06 <delay_ms>
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	62 e0       	ldi	r22, 0x02	; 2
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
}
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	/*Wait more that 30 ms*/
	delay_ms(40);
    2aec:	88 e2       	ldi	r24, 0x28	; 40
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 03 15 	call	0x2a06	; 0x2a06 <delay_ms>

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
    2af4:	88 e3       	ldi	r24, 0x38	; 56
    2af6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
    2afa:	8c e0       	ldi	r24, 0x0C	; 12
    2afc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(0b1);
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <CLCD_voidSendCommand>



}
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <CLCD_voidSendData>:


void CLCD_voidSendData(uint8 copy_uint8Data)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	89 83       	std	Y+1, r24	; 0x01

	/*Setting RS pin to HIGH*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
	/*Setting RW pin low for write*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>

	/*Set data pins*/
	DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Data);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	69 81       	ldd	r22, Y+1	; 0x01
    2b30:	0e 94 0e 10 	call	0x201c	; 0x201c <DIO_SetPortVal>

	/*Send Enable pulse*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	62 e0       	ldi	r22, 0x02	; 2
    2b38:	41 e0       	ldi	r20, 0x01	; 1
    2b3a:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
	delay_ms(2);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 03 15 	call	0x2a06	; 0x2a06 <delay_ms>
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>


}
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <CLCD_voidSendString>:

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <CLCD_voidSendString+0x6>
    2b5e:	0f 92       	push	r0
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	9b 83       	std	Y+3, r25	; 0x03
    2b66:	8a 83       	std	Y+2, r24	; 0x02
uint8 Local_uint8Counter=0;
    2b68:	19 82       	std	Y+1, r1	; 0x01
    2b6a:	0e c0       	rjmp	.+28     	; 0x2b88 <CLCD_voidSendString+0x30>
while(Copy_uint8String[Local_uint8Counter]!='\0')
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	9b 81       	ldd	r25, Y+3	; 0x03
    2b76:	fc 01       	movw	r30, r24
    2b78:	e2 0f       	add	r30, r18
    2b7a:	f3 1f       	adc	r31, r19
    2b7c:	80 81       	ld	r24, Z
    2b7e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
    Local_uint8Counter++;
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	8f 5f       	subi	r24, 0xFF	; 255
    2b86:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
uint8 Local_uint8Counter=0;
while(Copy_uint8String[Local_uint8Counter]!='\0')
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	9b 81       	ldd	r25, Y+3	; 0x03
    2b92:	fc 01       	movw	r30, r24
    2b94:	e2 0f       	add	r30, r18
    2b96:	f3 1f       	adc	r31, r19
    2b98:	80 81       	ld	r24, Z
    2b9a:	88 23       	and	r24, r24
    2b9c:	39 f7       	brne	.-50     	; 0x2b6c <CLCD_voidSendString+0x14>
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    Local_uint8Counter++;
}

}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <CLCD_voidGoToXY+0x6>
    2bb0:	0f 92       	push	r0
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
    2bb8:	6b 83       	std	Y+3, r22	; 0x03
  uint8 Local_uint8Address;

  if(Copy_uint8Xposition==0)
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	88 23       	and	r24, r24
    2bbe:	19 f4       	brne	.+6      	; 0x2bc6 <CLCD_voidGoToXY+0x1c>
  {
	  Local_uint8Address=Copy_uint8Yposition;
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	06 c0       	rjmp	.+12     	; 0x2bd2 <CLCD_voidGoToXY+0x28>
  }
  else if(Copy_uint8Xposition==1)
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	81 30       	cpi	r24, 0x01	; 1
    2bca:	19 f4       	brne	.+6      	; 0x2bd2 <CLCD_voidGoToXY+0x28>

  {
	  Local_uint8Address=Copy_uint8Yposition+0x40;
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	80 5c       	subi	r24, 0xC0	; 192
    2bd0:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_voidSendCommand(Local_uint8Address|(1<<7));
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	80 68       	ori	r24, 0x80	; 128
    2bd6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <CLCD_voidSendCommand>
}
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(float copy_f32Number)
{
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	a8 97       	sbiw	r28, 0x28	; 40
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	6d a3       	std	Y+37, r22	; 0x25
    2c00:	7e a3       	std	Y+38, r23	; 0x26
    2c02:	8f a3       	std	Y+39, r24	; 0x27
    2c04:	98 a7       	std	Y+40, r25	; 0x28
    // Handle negative numbers
    if (copy_f32Number < 0)
    2c06:	6d a1       	ldd	r22, Y+37	; 0x25
    2c08:	7e a1       	ldd	r23, Y+38	; 0x26
    2c0a:	8f a1       	ldd	r24, Y+39	; 0x27
    2c0c:	98 a5       	ldd	r25, Y+40	; 0x28
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	64 f4       	brge	.+24     	; 0x2c36 <CLCD_voidWriteNumber+0x50>
    {
        CLCD_voidSendData('-');
    2c1e:	8d e2       	ldi	r24, 0x2D	; 45
    2c20:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
        copy_f32Number = -copy_f32Number;
    2c24:	8d a1       	ldd	r24, Y+37	; 0x25
    2c26:	9e a1       	ldd	r25, Y+38	; 0x26
    2c28:	af a1       	ldd	r26, Y+39	; 0x27
    2c2a:	b8 a5       	ldd	r27, Y+40	; 0x28
    2c2c:	b0 58       	subi	r27, 0x80	; 128
    2c2e:	8d a3       	std	Y+37, r24	; 0x25
    2c30:	9e a3       	std	Y+38, r25	; 0x26
    2c32:	af a3       	std	Y+39, r26	; 0x27
    2c34:	b8 a7       	std	Y+40, r27	; 0x28
    }

    // Separate the integer and fractional parts
    sint32 integerPart = (sint32)copy_f32Number; // Extract the integer part
    2c36:	6d a1       	ldd	r22, Y+37	; 0x25
    2c38:	7e a1       	ldd	r23, Y+38	; 0x26
    2c3a:	8f a1       	ldd	r24, Y+39	; 0x27
    2c3c:	98 a5       	ldd	r25, Y+40	; 0x28
    2c3e:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8d 87       	std	Y+13, r24	; 0x0d
    2c48:	9e 87       	std	Y+14, r25	; 0x0e
    2c4a:	af 87       	std	Y+15, r26	; 0x0f
    2c4c:	b8 8b       	std	Y+16, r27	; 0x10
    float fractionalPart = copy_f32Number - integerPart; // Extract the fractional part
    2c4e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c50:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c54:	98 89       	ldd	r25, Y+16	; 0x10
    2c56:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    2c5a:	9b 01       	movw	r18, r22
    2c5c:	ac 01       	movw	r20, r24
    2c5e:	6d a1       	ldd	r22, Y+37	; 0x25
    2c60:	7e a1       	ldd	r23, Y+38	; 0x26
    2c62:	8f a1       	ldd	r24, Y+39	; 0x27
    2c64:	98 a5       	ldd	r25, Y+40	; 0x28
    2c66:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	89 87       	std	Y+9, r24	; 0x09
    2c70:	9a 87       	std	Y+10, r25	; 0x0a
    2c72:	ab 87       	std	Y+11, r26	; 0x0b
    2c74:	bc 87       	std	Y+12, r27	; 0x0c

    // Handle the integer part (reusing existing logic)
    if (integerPart == 0)
    2c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7a:	af 85       	ldd	r26, Y+15	; 0x0f
    2c7c:	b8 89       	ldd	r27, Y+16	; 0x10
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	a1 05       	cpc	r26, r1
    2c82:	b1 05       	cpc	r27, r1
    2c84:	21 f4       	brne	.+8      	; 0x2c8e <CLCD_voidWriteNumber+0xa8>
    {
        CLCD_voidSendData('0');
    2c86:	80 e3       	ldi	r24, 0x30	; 48
    2c88:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
    2c8c:	50 c0       	rjmp	.+160    	; 0x2d2e <CLCD_voidWriteNumber+0x148>
    }
    else
    {
        uint8 NUM[10];
        uint8 Local_uint8Counter = 0;
    2c8e:	1c 82       	std	Y+4, r1	; 0x04
    2c90:	2e c0       	rjmp	.+92     	; 0x2cee <CLCD_voidWriteNumber+0x108>

        while (integerPart > 0)
        {
            NUM[Local_uint8Counter++] = (integerPart % 10) + '0';
    2c92:	8c 81       	ldd	r24, Y+4	; 0x04
    2c94:	08 2f       	mov	r16, r24
    2c96:	10 e0       	ldi	r17, 0x00	; 0
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	af 85       	ldd	r26, Y+15	; 0x0f
    2c9e:	b8 89       	ldd	r27, Y+16	; 0x10
    2ca0:	2a e0       	ldi	r18, 0x0A	; 10
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divmodsi4>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	20 5d       	subi	r18, 0xD0	; 208
    2cb8:	ce 01       	movw	r24, r28
    2cba:	41 96       	adiw	r24, 0x11	; 17
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e0 0f       	add	r30, r16
    2cc0:	f1 1f       	adc	r31, r17
    2cc2:	20 83       	st	Z, r18
    2cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	8c 83       	std	Y+4, r24	; 0x04
            integerPart /= 10;
    2cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cce:	af 85       	ldd	r26, Y+15	; 0x0f
    2cd0:	b8 89       	ldd	r27, Y+16	; 0x10
    2cd2:	2a e0       	ldi	r18, 0x0A	; 10
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	bc 01       	movw	r22, r24
    2cdc:	cd 01       	movw	r24, r26
    2cde:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divmodsi4>
    2ce2:	da 01       	movw	r26, r20
    2ce4:	c9 01       	movw	r24, r18
    2ce6:	8d 87       	std	Y+13, r24	; 0x0d
    2ce8:	9e 87       	std	Y+14, r25	; 0x0e
    2cea:	af 87       	std	Y+15, r26	; 0x0f
    2cec:	b8 8b       	std	Y+16, r27	; 0x10
    else
    {
        uint8 NUM[10];
        uint8 Local_uint8Counter = 0;

        while (integerPart > 0)
    2cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf2:	af 85       	ldd	r26, Y+15	; 0x0f
    2cf4:	b8 89       	ldd	r27, Y+16	; 0x10
    2cf6:	18 16       	cp	r1, r24
    2cf8:	19 06       	cpc	r1, r25
    2cfa:	1a 06       	cpc	r1, r26
    2cfc:	1b 06       	cpc	r1, r27
    2cfe:	4c f2       	brlt	.-110    	; 0x2c92 <CLCD_voidWriteNumber+0xac>
            NUM[Local_uint8Counter++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        // Reverse and display the integer part
        for (uint8 i = Local_uint8Counter; i > 0; i--)
    2d00:	8c 81       	ldd	r24, Y+4	; 0x04
    2d02:	8b 83       	std	Y+3, r24	; 0x03
    2d04:	11 c0       	rjmp	.+34     	; 0x2d28 <CLCD_voidWriteNumber+0x142>
        {
            CLCD_voidSendData(NUM[i - 1]);
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	88 2f       	mov	r24, r24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9c 01       	movw	r18, r24
    2d0e:	21 50       	subi	r18, 0x01	; 1
    2d10:	30 40       	sbci	r19, 0x00	; 0
    2d12:	ce 01       	movw	r24, r28
    2d14:	41 96       	adiw	r24, 0x11	; 17
    2d16:	fc 01       	movw	r30, r24
    2d18:	e2 0f       	add	r30, r18
    2d1a:	f3 1f       	adc	r31, r19
    2d1c:	80 81       	ld	r24, Z
    2d1e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
            NUM[Local_uint8Counter++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        // Reverse and display the integer part
        for (uint8 i = Local_uint8Counter; i > 0; i--)
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	81 50       	subi	r24, 0x01	; 1
    2d26:	8b 83       	std	Y+3, r24	; 0x03
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	88 23       	and	r24, r24
    2d2c:	61 f7       	brne	.-40     	; 0x2d06 <CLCD_voidWriteNumber+0x120>
            CLCD_voidSendData(NUM[i - 1]);
        }
    }

    // Handle the fractional part
    CLCD_voidSendData('.'); // Display the decimal point
    2d2e:	8e e2       	ldi	r24, 0x2E	; 46
    2d30:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>

    fractionalPart *= 1000; // Scale to display three decimal places
    2d34:	69 85       	ldd	r22, Y+9	; 0x09
    2d36:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d38:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	4a e7       	ldi	r20, 0x7A	; 122
    2d42:	54 e4       	ldi	r21, 0x44	; 68
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	89 87       	std	Y+9, r24	; 0x09
    2d4e:	9a 87       	std	Y+10, r25	; 0x0a
    2d50:	ab 87       	std	Y+11, r26	; 0x0b
    2d52:	bc 87       	std	Y+12, r27	; 0x0c
    sint32 fractionalPartAsInt = (sint32)(fractionalPart + 0.5); // Round the fractional part
    2d54:	69 85       	ldd	r22, Y+9	; 0x09
    2d56:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	5f e3       	ldi	r21, 0x3F	; 63
    2d64:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	9e 83       	std	Y+6, r25	; 0x06
    2d7c:	af 83       	std	Y+7, r26	; 0x07
    2d7e:	b8 87       	std	Y+8, r27	; 0x08

    if (fractionalPartAsInt == 0)
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	af 81       	ldd	r26, Y+7	; 0x07
    2d86:	b8 85       	ldd	r27, Y+8	; 0x08
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	a1 05       	cpc	r26, r1
    2d8c:	b1 05       	cpc	r27, r1
    2d8e:	51 f4       	brne	.+20     	; 0x2da4 <CLCD_voidWriteNumber+0x1be>
    {
        // Display trailing zeros if the fractional part is zero
        CLCD_voidSendData('0');
    2d90:	80 e3       	ldi	r24, 0x30	; 48
    2d92:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
        CLCD_voidSendData('0');
    2d96:	80 e3       	ldi	r24, 0x30	; 48
    2d98:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
        CLCD_voidSendData('0');
    2d9c:	80 e3       	ldi	r24, 0x30	; 48
    2d9e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
    2da2:	50 c0       	rjmp	.+160    	; 0x2e44 <CLCD_voidWriteNumber+0x25e>
    }
    else
    {
        uint8 FRACT[10];
        uint8 Local_uint8FracCounter = 0;
    2da4:	1a 82       	std	Y+2, r1	; 0x02
    2da6:	2e c0       	rjmp	.+92     	; 0x2e04 <CLCD_voidWriteNumber+0x21e>

        while (fractionalPartAsInt > 0)
        {
            FRACT[Local_uint8FracCounter++] = (fractionalPartAsInt % 10) + '0';
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	08 2f       	mov	r16, r24
    2dac:	10 e0       	ldi	r17, 0x00	; 0
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	af 81       	ldd	r26, Y+7	; 0x07
    2db4:	b8 85       	ldd	r27, Y+8	; 0x08
    2db6:	2a e0       	ldi	r18, 0x0A	; 10
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	50 e0       	ldi	r21, 0x00	; 0
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divmodsi4>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	28 2f       	mov	r18, r24
    2dcc:	20 5d       	subi	r18, 0xD0	; 208
    2dce:	ce 01       	movw	r24, r28
    2dd0:	4b 96       	adiw	r24, 0x1b	; 27
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e0 0f       	add	r30, r16
    2dd6:	f1 1f       	adc	r31, r17
    2dd8:	20 83       	st	Z, r18
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	8f 5f       	subi	r24, 0xFF	; 255
    2dde:	8a 83       	std	Y+2, r24	; 0x02
            fractionalPartAsInt /= 10;
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	af 81       	ldd	r26, Y+7	; 0x07
    2de6:	b8 85       	ldd	r27, Y+8	; 0x08
    2de8:	2a e0       	ldi	r18, 0x0A	; 10
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divmodsi4>
    2df8:	da 01       	movw	r26, r20
    2dfa:	c9 01       	movw	r24, r18
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	af 83       	std	Y+7, r26	; 0x07
    2e02:	b8 87       	std	Y+8, r27	; 0x08
    else
    {
        uint8 FRACT[10];
        uint8 Local_uint8FracCounter = 0;

        while (fractionalPartAsInt > 0)
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	9e 81       	ldd	r25, Y+6	; 0x06
    2e08:	af 81       	ldd	r26, Y+7	; 0x07
    2e0a:	b8 85       	ldd	r27, Y+8	; 0x08
    2e0c:	18 16       	cp	r1, r24
    2e0e:	19 06       	cpc	r1, r25
    2e10:	1a 06       	cpc	r1, r26
    2e12:	1b 06       	cpc	r1, r27
    2e14:	4c f2       	brlt	.-110    	; 0x2da8 <CLCD_voidWriteNumber+0x1c2>
            FRACT[Local_uint8FracCounter++] = (fractionalPartAsInt % 10) + '0';
            fractionalPartAsInt /= 10;
        }

        // Reverse and display the fractional part
        for (uint8 i = Local_uint8FracCounter; i > 0; i--)
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	11 c0       	rjmp	.+34     	; 0x2e3e <CLCD_voidWriteNumber+0x258>
        {
            CLCD_voidSendData(FRACT[i - 1]);
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9c 01       	movw	r18, r24
    2e24:	21 50       	subi	r18, 0x01	; 1
    2e26:	30 40       	sbci	r19, 0x00	; 0
    2e28:	ce 01       	movw	r24, r28
    2e2a:	4b 96       	adiw	r24, 0x1b	; 27
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e2 0f       	add	r30, r18
    2e30:	f3 1f       	adc	r31, r19
    2e32:	80 81       	ld	r24, Z
    2e34:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
            FRACT[Local_uint8FracCounter++] = (fractionalPartAsInt % 10) + '0';
            fractionalPartAsInt /= 10;
        }

        // Reverse and display the fractional part
        for (uint8 i = Local_uint8FracCounter; i > 0; i--)
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	81 50       	subi	r24, 0x01	; 1
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	88 23       	and	r24, r24
    2e42:	61 f7       	brne	.-40     	; 0x2e1c <CLCD_voidWriteNumber+0x236>
        {
            CLCD_voidSendData(FRACT[i - 1]);
        }
    }
}
    2e44:	a8 96       	adiw	r28, 0x28	; 40
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	08 95       	ret

00002e5a <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar(uint8* copy_puint8Pattern,uint8 copy_uint8PatternNumber,uint8 copy_uint8Xposition,uint8 copy_uint8Yposition)
{
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	27 97       	sbiw	r28, 0x07	; 7
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	9c 83       	std	Y+4, r25	; 0x04
    2e70:	8b 83       	std	Y+3, r24	; 0x03
    2e72:	6d 83       	std	Y+5, r22	; 0x05
    2e74:	4e 83       	std	Y+6, r20	; 0x06
    2e76:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_uint8CGRAM_Address=0;
    2e78:	1a 82       	std	Y+2, r1	; 0x02
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	8a 83       	std	Y+2, r24	; 0x02
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	80 64       	ori	r24, 0x40	; 64
    2e92:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <CLCD_voidSendCommand>

for(uint8 i=0;i<8;i++)
    2e96:	19 82       	std	Y+1, r1	; 0x01
    2e98:	0e c0       	rjmp	.+28     	; 0x2eb6 <CLCD_voidWriteSpecialChar+0x5c>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e2 0f       	add	r30, r18
    2ea8:	f3 1f       	adc	r31, r19
    2eaa:	80 81       	ld	r24, Z
    2eac:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>
	uint8 Local_uint8CGRAM_Address=0;
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));

for(uint8 i=0;i<8;i++)
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	88 30       	cpi	r24, 0x08	; 8
    2eba:	78 f3       	brcs	.-34     	; 0x2e9a <CLCD_voidWriteSpecialChar+0x40>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
}
/*go back to DDRAM to display the Arr*/
 CLCD_voidGoToXY(copy_uint8Xposition,copy_uint8Yposition);
    2ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	0e 94 d5 15 	call	0x2baa	; 0x2baa <CLCD_voidGoToXY>

CLCD_voidSendData(copy_uint8PatternNumber);
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <CLCD_voidSendData>

}
    2eca:	27 96       	adiw	r28, 0x07	; 7
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <HandleGreenState>:
#define GREEN_DURATION  5
#define YELLOW_DURATION 5
#define RED_DURATION    5

static void HandleGreenState(void)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_HIGH);
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	62 e0       	ldi	r22, 0x02	; 2
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
}
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <HandleRedState>:
static void HandleRedState(void)
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	62 e0       	ldi	r22, 0x02	; 2
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_LOW);
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	61 e0       	ldi	r22, 0x01	; 1
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_HIGH);
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	41 e0       	ldi	r20, 0x01	; 1
    2f20:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
}
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <HandleyellowState>:
static void HandleyellowState(void)
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    2f32:	82 e0       	ldi	r24, 0x02	; 2
    2f34:	62 e0       	ldi	r22, 0x02	; 2
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_HIGH);
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	61 e0       	ldi	r22, 0x01	; 1
    2f4a:	41 e0       	ldi	r20, 0x01	; 1
    2f4c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <DIO_SetPinVal>
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <TimerISR>:
StackEntry Local_Variable;     // Current state function
int last_handled_time = -1;    // Tracks the last time the state was handled

/* ISR Function */
void TimerISR(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    timer_counter++; // Increment timer counter every second
    2f5e:	80 91 aa 01 	lds	r24, 0x01AA
    2f62:	90 91 ab 01 	lds	r25, 0x01AB
    2f66:	01 96       	adiw	r24, 0x01	; 1
    2f68:	90 93 ab 01 	sts	0x01AB, r25
    2f6c:	80 93 aa 01 	sts	0x01AA, r24
}
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <TrafficLightInit>:

/* Traffic Light Initialization */
void TrafficLightInit(void)
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    /* System initialization */
    PORT_voidInit();
    2f7e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <PORT_voidInit>
    CLCD_voidInit();
    2f82:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <CLCD_voidInit>
    GIE_Enable();
    2f86:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GIE_Enable>
    TIMER1_voidInit();
    2f8a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <TIMER1_voidInit>
    TIMER1_voidSetChannelACompMatch(31250); // Configure Timer1 for 1-second intervals
    2f8e:	82 e1       	ldi	r24, 0x12	; 18
    2f90:	9a e7       	ldi	r25, 0x7A	; 122
    2f92:	0e 94 84 0a 	call	0x1508	; 0x1508 <TIMER1_voidSetChannelACompMatch>
    TIMER1_CTCASetCallBck(&TimerISR);
    2f96:	8b ea       	ldi	r24, 0xAB	; 171
    2f98:	97 e1       	ldi	r25, 0x17	; 23
    2f9a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <TIMER1_CTCASetCallBck>

    /* Stack initialization */
    Stack_Creation(&TrafficStack);
    2f9e:	8e ea       	ldi	r24, 0xAE	; 174
    2fa0:	91 e0       	ldi	r25, 0x01	; 1
    2fa2:	0e 94 6a 07 	call	0xed4	; 0xed4 <Stack_Creation>
    Stack_Push(&TrafficStack, HandleGreenState); // Start with the green state
    2fa6:	8e ea       	ldi	r24, 0xAE	; 174
    2fa8:	91 e0       	ldi	r25, 0x01	; 1
    2faa:	2e e6       	ldi	r18, 0x6E	; 110
    2fac:	37 e1       	ldi	r19, 0x17	; 23
    2fae:	b9 01       	movw	r22, r18
    2fb0:	0e 94 8a 07 	call	0xf14	; 0xf14 <Stack_Push>
}
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <Traffic_Handler>:

/* Traffic Light State Handler */
void Traffic_Handler(void)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    if (timer_counter == GREEN_DURATION && last_handled_time != GREEN_DURATION)
    2fc2:	80 91 aa 01 	lds	r24, 0x01AA
    2fc6:	90 91 ab 01 	lds	r25, 0x01AB
    2fca:	85 30       	cpi	r24, 0x05	; 5
    2fcc:	91 05       	cpc	r25, r1
    2fce:	a9 f4       	brne	.+42     	; 0x2ffa <Traffic_Handler+0x40>
    2fd0:	80 91 8e 01 	lds	r24, 0x018E
    2fd4:	90 91 8f 01 	lds	r25, 0x018F
    2fd8:	85 30       	cpi	r24, 0x05	; 5
    2fda:	91 05       	cpc	r25, r1
    2fdc:	71 f0       	breq	.+28     	; 0x2ffa <Traffic_Handler+0x40>
    {
        Stack_Push(&TrafficStack, HandleyellowState);
    2fde:	8e ea       	ldi	r24, 0xAE	; 174
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	25 e9       	ldi	r18, 0x95	; 149
    2fe4:	37 e1       	ldi	r19, 0x17	; 23
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	0e 94 8a 07 	call	0xf14	; 0xf14 <Stack_Push>
        last_handled_time = GREEN_DURATION; // Mark the transition as handled
    2fec:	85 e0       	ldi	r24, 0x05	; 5
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	90 93 8f 01 	sts	0x018F, r25
    2ff4:	80 93 8e 01 	sts	0x018E, r24
    2ff8:	45 c0       	rjmp	.+138    	; 0x3084 <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION)
    2ffa:	80 91 aa 01 	lds	r24, 0x01AA
    2ffe:	90 91 ab 01 	lds	r25, 0x01AB
    3002:	8a 30       	cpi	r24, 0x0A	; 10
    3004:	91 05       	cpc	r25, r1
    3006:	a9 f4       	brne	.+42     	; 0x3032 <Traffic_Handler+0x78>
    3008:	80 91 8e 01 	lds	r24, 0x018E
    300c:	90 91 8f 01 	lds	r25, 0x018F
    3010:	8a 30       	cpi	r24, 0x0A	; 10
    3012:	91 05       	cpc	r25, r1
    3014:	71 f0       	breq	.+28     	; 0x3032 <Traffic_Handler+0x78>
    {
        Stack_Push(&TrafficStack, HandleRedState);
    3016:	8e ea       	ldi	r24, 0xAE	; 174
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	2f e7       	ldi	r18, 0x7F	; 127
    301c:	37 e1       	ldi	r19, 0x17	; 23
    301e:	b9 01       	movw	r22, r18
    3020:	0e 94 8a 07 	call	0xf14	; 0xf14 <Stack_Push>
        last_handled_time = GREEN_DURATION + YELLOW_DURATION; // Mark the transition as handled
    3024:	8a e0       	ldi	r24, 0x0A	; 10
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	90 93 8f 01 	sts	0x018F, r25
    302c:	80 93 8e 01 	sts	0x018E, r24
    3030:	29 c0       	rjmp	.+82     	; 0x3084 <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION + RED_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION + RED_DURATION)
    3032:	80 91 aa 01 	lds	r24, 0x01AA
    3036:	90 91 ab 01 	lds	r25, 0x01AB
    303a:	8f 30       	cpi	r24, 0x0F	; 15
    303c:	91 05       	cpc	r25, r1
    303e:	11 f5       	brne	.+68     	; 0x3084 <Traffic_Handler+0xca>
    3040:	80 91 8e 01 	lds	r24, 0x018E
    3044:	90 91 8f 01 	lds	r25, 0x018F
    3048:	8f 30       	cpi	r24, 0x0F	; 15
    304a:	91 05       	cpc	r25, r1
    304c:	d9 f0       	breq	.+54     	; 0x3084 <Traffic_Handler+0xca>
    {
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove red state
    304e:	8e ea       	ldi	r24, 0xAE	; 174
    3050:	91 e0       	ldi	r25, 0x01	; 1
    3052:	2c ea       	ldi	r18, 0xAC	; 172
    3054:	31 e0       	ldi	r19, 0x01	; 1
    3056:	b9 01       	movw	r22, r18
    3058:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Stack_Pop>
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove yellow state
    305c:	8e ea       	ldi	r24, 0xAE	; 174
    305e:	91 e0       	ldi	r25, 0x01	; 1
    3060:	2c ea       	ldi	r18, 0xAC	; 172
    3062:	31 e0       	ldi	r19, 0x01	; 1
    3064:	b9 01       	movw	r22, r18
    3066:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Stack_Pop>
        timer_counter = 0; // Reset timer
    306a:	10 92 ab 01 	sts	0x01AB, r1
    306e:	10 92 aa 01 	sts	0x01AA, r1
        last_handled_time = -1; // Reset last handled time
    3072:	8f ef       	ldi	r24, 0xFF	; 255
    3074:	9f ef       	ldi	r25, 0xFF	; 255
    3076:	90 93 8f 01 	sts	0x018F, r25
    307a:	80 93 8e 01 	sts	0x018E, r24
        CLCD_voidSendCommand(1); // Clear display
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <CLCD_voidSendCommand>
    }
}
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	08 95       	ret

0000308a <TrafficLightMainFunction>:

/* Main Traffic Light Control Function */
void TrafficLightMainFunction(void)
{
    308a:	df 93       	push	r29
    308c:	cf 93       	push	r28
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    Local_Variable = TrafficStack.top->entry; // Get the current state function
    3092:	e0 91 ae 01 	lds	r30, 0x01AE
    3096:	f0 91 af 01 	lds	r31, 0x01AF
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	93 81       	ldd	r25, Z+3	; 0x03
    309e:	90 93 ad 01 	sts	0x01AD, r25
    30a2:	80 93 ac 01 	sts	0x01AC, r24
    Local_Variable(); // Execute the state function
    30a6:	e0 91 ac 01 	lds	r30, 0x01AC
    30aa:	f0 91 ad 01 	lds	r31, 0x01AD
    30ae:	09 95       	icall

    Traffic_Handler(); // Handle state transitions
    30b0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <Traffic_Handler>

    /* Display timer and stack size */
    CLCD_voidGoToXY(0, 0);
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	60 e0       	ldi	r22, 0x00	; 0
    30b8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(timer_counter);
    30bc:	80 91 aa 01 	lds	r24, 0x01AA
    30c0:	90 91 ab 01 	lds	r25, 0x01AB
    30c4:	aa 27       	eor	r26, r26
    30c6:	97 fd       	sbrc	r25, 7
    30c8:	a0 95       	com	r26
    30ca:	ba 2f       	mov	r27, r26
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <CLCD_voidWriteNumber>
    CLCD_voidGoToXY(1, 0);
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	60 e0       	ldi	r22, 0x00	; 0
    30e4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(TrafficStack.Size);
    30e8:	80 91 b0 01 	lds	r24, 0x01B0
    30ec:	90 91 b1 01 	lds	r25, 0x01B1
    30f0:	a0 91 b2 01 	lds	r26, 0x01B2
    30f4:	b0 91 b3 01 	lds	r27, 0x01B3
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <CLCD_voidWriteNumber>
}
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <Fixed_FromFloat>:
#include "../inc/FixedPoint_interface.h"

fixed16_t static Fixed_FromFloat(float value)
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	00 d0       	rcall	.+0      	; 0x3118 <Fixed_FromFloat+0x6>
    3118:	00 d0       	rcall	.+0      	; 0x311a <Fixed_FromFloat+0x8>
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	69 83       	std	Y+1, r22	; 0x01
    3120:	7a 83       	std	Y+2, r23	; 0x02
    3122:	8b 83       	std	Y+3, r24	; 0x03
    3124:	9c 83       	std	Y+4, r25	; 0x04
	return FLOAT_TO_FIXP(value);
    3126:	69 81       	ldd	r22, Y+1	; 0x01
    3128:	7a 81       	ldd	r23, Y+2	; 0x02
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e8       	ldi	r20, 0x80	; 128
    3134:	53 e4       	ldi	r21, 0x43	; 67
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	5f e3       	ldi	r21, 0x3F	; 63
    314a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
}
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <Fixed_FromInt>:
fixed16_t static Fixed_FromInt(uint8 integer)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	0f 92       	push	r0
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	89 83       	std	Y+1, r24	; 0x01
	 return INT_TO_FIXP(integer);
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	98 2f       	mov	r25, r24
    3180:	88 27       	eor	r24, r24
}
    3182:	0f 90       	pop	r0
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <Fixed_ToInt>:

uint32 static Fixed_ToInt(fixed16_t fixed)
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	00 d0       	rcall	.+0      	; 0x3190 <Fixed_ToInt+0x6>
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
	return (fixed>>FixedPoint_SHIFT);
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	89 2f       	mov	r24, r25
    319e:	99 27       	eor	r25, r25
    31a0:	cc 01       	movw	r24, r24
    31a2:	a0 e0       	ldi	r26, 0x00	; 0
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
}
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <Fixed_ToFloat>:
float static Fixed_ToFloat(fixed16_t fixed)
{
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	2c 97       	sbiw	r28, 0x0c	; 12
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	9c 87       	std	Y+12, r25	; 0x0c
    31d2:	8b 87       	std	Y+11, r24	; 0x0b
	float Ret_Value=0;
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	a0 e0       	ldi	r26, 0x00	; 0
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	8f 83       	std	Y+7, r24	; 0x07
    31de:	98 87       	std	Y+8, r25	; 0x08
    31e0:	a9 87       	std	Y+9, r26	; 0x09
    31e2:	ba 87       	std	Y+10, r27	; 0x0a
	uint32 Fraction=0;
    31e4:	1b 82       	std	Y+3, r1	; 0x03
    31e6:	1c 82       	std	Y+4, r1	; 0x04
    31e8:	1d 82       	std	Y+5, r1	; 0x05
    31ea:	1e 82       	std	Y+6, r1	; 0x06
	uint16 Local_Variable=(fixed>>FixedPoint_SHIFT);
    31ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    31ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    31f0:	89 2f       	mov	r24, r25
    31f2:	99 27       	eor	r25, r25
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
	Fraction=(((fixed & 0x0000ffff)*100/(FixedPoint_SCALE)));
    31f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    31fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    31fc:	84 e6       	ldi	r24, 0x64	; 100
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	ac 01       	movw	r20, r24
    3202:	24 9f       	mul	r18, r20
    3204:	c0 01       	movw	r24, r0
    3206:	25 9f       	mul	r18, r21
    3208:	90 0d       	add	r25, r0
    320a:	34 9f       	mul	r19, r20
    320c:	90 0d       	add	r25, r0
    320e:	11 24       	eor	r1, r1
    3210:	89 2f       	mov	r24, r25
    3212:	99 27       	eor	r25, r25
    3214:	cc 01       	movw	r24, r24
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	8b 83       	std	Y+3, r24	; 0x03
    321c:	9c 83       	std	Y+4, r25	; 0x04
    321e:	ad 83       	std	Y+5, r26	; 0x05
    3220:	be 83       	std	Y+6, r27	; 0x06
	Ret_Value=((float)Local_Variable+((float)Fraction+1.0)/100.0);
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	9a 81       	ldd	r25, Y+2	; 0x02
    3226:	cc 01       	movw	r24, r24
    3228:	a0 e0       	ldi	r26, 0x00	; 0
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3234:	7b 01       	movw	r14, r22
    3236:	8c 01       	movw	r16, r24
    3238:	6b 81       	ldd	r22, Y+3	; 0x03
    323a:	7c 81       	ldd	r23, Y+4	; 0x04
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e8       	ldi	r20, 0x80	; 128
    3252:	5f e3       	ldi	r21, 0x3F	; 63
    3254:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	48 ec       	ldi	r20, 0xC8	; 200
    3266:	52 e4       	ldi	r21, 0x42	; 66
    3268:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9c 01       	movw	r18, r24
    3272:	ad 01       	movw	r20, r26
    3274:	c8 01       	movw	r24, r16
    3276:	b7 01       	movw	r22, r14
    3278:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	8f 83       	std	Y+7, r24	; 0x07
    3282:	98 87       	std	Y+8, r25	; 0x08
    3284:	a9 87       	std	Y+9, r26	; 0x09
    3286:	ba 87       	std	Y+10, r27	; 0x0a
	return (Ret_Value);
    3288:	8f 81       	ldd	r24, Y+7	; 0x07
    328a:	98 85       	ldd	r25, Y+8	; 0x08
    328c:	a9 85       	ldd	r26, Y+9	; 0x09
    328e:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	2c 96       	adiw	r28, 0x0c	; 12
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	1f 91       	pop	r17
    32a6:	0f 91       	pop	r16
    32a8:	ff 90       	pop	r15
    32aa:	ef 90       	pop	r14
    32ac:	08 95       	ret

000032ae <Fixed_Add>:


fixed16_t Fixed_Add(float a, float b)
{
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	2c 97       	sbiw	r28, 0x0c	; 12
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	6d 83       	std	Y+5, r22	; 0x05
    32c4:	7e 83       	std	Y+6, r23	; 0x06
    32c6:	8f 83       	std	Y+7, r24	; 0x07
    32c8:	98 87       	std	Y+8, r25	; 0x08
    32ca:	29 87       	std	Y+9, r18	; 0x09
    32cc:	3a 87       	std	Y+10, r19	; 0x0a
    32ce:	4b 87       	std	Y+11, r20	; 0x0b
    32d0:	5c 87       	std	Y+12, r21	; 0x0c
	fixed16_t Val1=0;
    32d2:	1c 82       	std	Y+4, r1	; 0x04
    32d4:	1b 82       	std	Y+3, r1	; 0x03
	fixed16_t Val2=0;
    32d6:	1a 82       	std	Y+2, r1	; 0x02
    32d8:	19 82       	std	Y+1, r1	; 0x01
	Val1=Fixed_FromFloat(a);
    32da:	8d 81       	ldd	r24, Y+5	; 0x05
    32dc:	9e 81       	ldd	r25, Y+6	; 0x06
    32de:	af 81       	ldd	r26, Y+7	; 0x07
    32e0:	b8 85       	ldd	r27, Y+8	; 0x08
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 89 18 	call	0x3112	; 0x3112 <Fixed_FromFloat>
    32ea:	9c 83       	std	Y+4, r25	; 0x04
    32ec:	8b 83       	std	Y+3, r24	; 0x03
	Val2=Fixed_FromFloat(b);
    32ee:	89 85       	ldd	r24, Y+9	; 0x09
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    32f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 89 18 	call	0x3112	; 0x3112 <Fixed_FromFloat>
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	89 83       	std	Y+1, r24	; 0x01

	return (Val1+Val2);
    3302:	2b 81       	ldd	r18, Y+3	; 0x03
    3304:	3c 81       	ldd	r19, Y+4	; 0x04
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	9a 81       	ldd	r25, Y+2	; 0x02
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
}
    330e:	2c 96       	adiw	r28, 0x0c	; 12
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <Fixed_Sub>:

fixed16_t Fixed_Sub(float a, float b)
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	2c 97       	sbiw	r28, 0x0c	; 12
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	de bf       	out	0x3e, r29	; 62
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	cd bf       	out	0x3d, r28	; 61
    3334:	6d 83       	std	Y+5, r22	; 0x05
    3336:	7e 83       	std	Y+6, r23	; 0x06
    3338:	8f 83       	std	Y+7, r24	; 0x07
    333a:	98 87       	std	Y+8, r25	; 0x08
    333c:	29 87       	std	Y+9, r18	; 0x09
    333e:	3a 87       	std	Y+10, r19	; 0x0a
    3340:	4b 87       	std	Y+11, r20	; 0x0b
    3342:	5c 87       	std	Y+12, r21	; 0x0c
	fixed16_t Val1=0;
    3344:	1c 82       	std	Y+4, r1	; 0x04
    3346:	1b 82       	std	Y+3, r1	; 0x03
	fixed16_t Val2=0;
    3348:	1a 82       	std	Y+2, r1	; 0x02
    334a:	19 82       	std	Y+1, r1	; 0x01
	Val1=Fixed_FromFloat(a);
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	af 81       	ldd	r26, Y+7	; 0x07
    3352:	b8 85       	ldd	r27, Y+8	; 0x08
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 89 18 	call	0x3112	; 0x3112 <Fixed_FromFloat>
    335c:	9c 83       	std	Y+4, r25	; 0x04
    335e:	8b 83       	std	Y+3, r24	; 0x03
	Val2=Fixed_FromFloat(b);
    3360:	89 85       	ldd	r24, Y+9	; 0x09
    3362:	9a 85       	ldd	r25, Y+10	; 0x0a
    3364:	ab 85       	ldd	r26, Y+11	; 0x0b
    3366:	bc 85       	ldd	r27, Y+12	; 0x0c
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	0e 94 89 18 	call	0x3112	; 0x3112 <Fixed_FromFloat>
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01

	return (Val1-Val2);
    3374:	2b 81       	ldd	r18, Y+3	; 0x03
    3376:	3c 81       	ldd	r19, Y+4	; 0x04
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	a9 01       	movw	r20, r18
    337e:	48 1b       	sub	r20, r24
    3380:	59 0b       	sbc	r21, r25
    3382:	ca 01       	movw	r24, r20


}
    3384:	2c 96       	adiw	r28, 0x0c	; 12
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	08 95       	ret

00003396 <Fixed_Mul>:

fixed16_t Fixed_Mul(float a, float b)
{
    3396:	ef 92       	push	r14
    3398:	ff 92       	push	r15
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	60 97       	sbiw	r28, 0x10	; 16
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	69 87       	std	Y+9, r22	; 0x09
    33b4:	7a 87       	std	Y+10, r23	; 0x0a
    33b6:	8b 87       	std	Y+11, r24	; 0x0b
    33b8:	9c 87       	std	Y+12, r25	; 0x0c
    33ba:	2d 87       	std	Y+13, r18	; 0x0d
    33bc:	3e 87       	std	Y+14, r19	; 0x0e
    33be:	4f 87       	std	Y+15, r20	; 0x0f
    33c0:	58 8b       	std	Y+16, r21	; 0x10
	fixed16_t Val1=0;
    33c2:	18 86       	std	Y+8, r1	; 0x08
    33c4:	1f 82       	std	Y+7, r1	; 0x07
	fixed16_t Val2=0;
    33c6:	1e 82       	std	Y+6, r1	; 0x06
    33c8:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Result=0;
    33ca:	19 82       	std	Y+1, r1	; 0x01
    33cc:	1a 82       	std	Y+2, r1	; 0x02
    33ce:	1b 82       	std	Y+3, r1	; 0x03
    33d0:	1c 82       	std	Y+4, r1	; 0x04
	Val1=Fixed_FromFloat(a);
    33d2:	89 85       	ldd	r24, Y+9	; 0x09
    33d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    33d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    33da:	bc 01       	movw	r22, r24
    33dc:	cd 01       	movw	r24, r26
    33de:	0e 94 89 18 	call	0x3112	; 0x3112 <Fixed_FromFloat>
    33e2:	98 87       	std	Y+8, r25	; 0x08
    33e4:	8f 83       	std	Y+7, r24	; 0x07
	Val2=Fixed_FromFloat(b);
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	af 85       	ldd	r26, Y+15	; 0x0f
    33ec:	b8 89       	ldd	r27, Y+16	; 0x10
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 89 18 	call	0x3112	; 0x3112 <Fixed_FromFloat>
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
	Result= MULT_FIXED(Val1,Val2);
    33fa:	8f 81       	ldd	r24, Y+7	; 0x07
    33fc:	98 85       	ldd	r25, Y+8	; 0x08
    33fe:	7c 01       	movw	r14, r24
    3400:	00 e0       	ldi	r16, 0x00	; 0
    3402:	10 e0       	ldi	r17, 0x00	; 0
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	9e 81       	ldd	r25, Y+6	; 0x06
    3408:	9c 01       	movw	r18, r24
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	c8 01       	movw	r24, r16
    3410:	b7 01       	movw	r22, r14
    3412:	0e 94 49 1a 	call	0x3492	; 0x3492 <__mulsi3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	89 2f       	mov	r24, r25
    341c:	9a 2f       	mov	r25, r26
    341e:	ab 2f       	mov	r26, r27
    3420:	bb 27       	eor	r27, r27
    3422:	cc 01       	movw	r24, r24
    3424:	a0 e0       	ldi	r26, 0x00	; 0
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	ab 83       	std	Y+3, r26	; 0x03
    342e:	bc 83       	std	Y+4, r27	; 0x04
return (Result);
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3434:	60 96       	adiw	r28, 0x10	; 16
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	ff 90       	pop	r15
    344a:	ef 90       	pop	r14
    344c:	08 95       	ret

0000344e <Fixed_Div>:

fixed16_t Fixed_Div(float a, float b)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	2a 97       	sbiw	r28, 0x0a	; 10
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	69 83       	std	Y+1, r22	; 0x01
    3464:	7a 83       	std	Y+2, r23	; 0x02
    3466:	8b 83       	std	Y+3, r24	; 0x03
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	2d 83       	std	Y+5, r18	; 0x05
    346c:	3e 83       	std	Y+6, r19	; 0x06
    346e:	4f 83       	std	Y+7, r20	; 0x07
    3470:	58 87       	std	Y+8, r21	; 0x08


}
    3472:	2a 96       	adiw	r28, 0x0a	; 10
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <main>:
#include  "Fixed_Point/inc/FixedPoint_interface.h"
#include  "EEPROM/inc/EEPROM_interface.h"
#include  <util/delay.h>

int main()
{
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
	TrafficLightInit();
    348c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <TrafficLightInit>
    3490:	ff cf       	rjmp	.-2      	; 0x3490 <main+0xc>

00003492 <__mulsi3>:
    3492:	62 9f       	mul	r22, r18
    3494:	d0 01       	movw	r26, r0
    3496:	73 9f       	mul	r23, r19
    3498:	f0 01       	movw	r30, r0
    349a:	82 9f       	mul	r24, r18
    349c:	e0 0d       	add	r30, r0
    349e:	f1 1d       	adc	r31, r1
    34a0:	64 9f       	mul	r22, r20
    34a2:	e0 0d       	add	r30, r0
    34a4:	f1 1d       	adc	r31, r1
    34a6:	92 9f       	mul	r25, r18
    34a8:	f0 0d       	add	r31, r0
    34aa:	83 9f       	mul	r24, r19
    34ac:	f0 0d       	add	r31, r0
    34ae:	74 9f       	mul	r23, r20
    34b0:	f0 0d       	add	r31, r0
    34b2:	65 9f       	mul	r22, r21
    34b4:	f0 0d       	add	r31, r0
    34b6:	99 27       	eor	r25, r25
    34b8:	72 9f       	mul	r23, r18
    34ba:	b0 0d       	add	r27, r0
    34bc:	e1 1d       	adc	r30, r1
    34be:	f9 1f       	adc	r31, r25
    34c0:	63 9f       	mul	r22, r19
    34c2:	b0 0d       	add	r27, r0
    34c4:	e1 1d       	adc	r30, r1
    34c6:	f9 1f       	adc	r31, r25
    34c8:	bd 01       	movw	r22, r26
    34ca:	cf 01       	movw	r24, r30
    34cc:	11 24       	eor	r1, r1
    34ce:	08 95       	ret

000034d0 <__udivmodhi4>:
    34d0:	aa 1b       	sub	r26, r26
    34d2:	bb 1b       	sub	r27, r27
    34d4:	51 e1       	ldi	r21, 0x11	; 17
    34d6:	07 c0       	rjmp	.+14     	; 0x34e6 <__udivmodhi4_ep>

000034d8 <__udivmodhi4_loop>:
    34d8:	aa 1f       	adc	r26, r26
    34da:	bb 1f       	adc	r27, r27
    34dc:	a6 17       	cp	r26, r22
    34de:	b7 07       	cpc	r27, r23
    34e0:	10 f0       	brcs	.+4      	; 0x34e6 <__udivmodhi4_ep>
    34e2:	a6 1b       	sub	r26, r22
    34e4:	b7 0b       	sbc	r27, r23

000034e6 <__udivmodhi4_ep>:
    34e6:	88 1f       	adc	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	5a 95       	dec	r21
    34ec:	a9 f7       	brne	.-22     	; 0x34d8 <__udivmodhi4_loop>
    34ee:	80 95       	com	r24
    34f0:	90 95       	com	r25
    34f2:	bc 01       	movw	r22, r24
    34f4:	cd 01       	movw	r24, r26
    34f6:	08 95       	ret

000034f8 <__divmodsi4>:
    34f8:	97 fb       	bst	r25, 7
    34fa:	09 2e       	mov	r0, r25
    34fc:	05 26       	eor	r0, r21
    34fe:	0e d0       	rcall	.+28     	; 0x351c <__divmodsi4_neg1>
    3500:	57 fd       	sbrc	r21, 7
    3502:	04 d0       	rcall	.+8      	; 0x350c <__divmodsi4_neg2>
    3504:	14 d0       	rcall	.+40     	; 0x352e <__udivmodsi4>
    3506:	0a d0       	rcall	.+20     	; 0x351c <__divmodsi4_neg1>
    3508:	00 1c       	adc	r0, r0
    350a:	38 f4       	brcc	.+14     	; 0x351a <__divmodsi4_exit>

0000350c <__divmodsi4_neg2>:
    350c:	50 95       	com	r21
    350e:	40 95       	com	r20
    3510:	30 95       	com	r19
    3512:	21 95       	neg	r18
    3514:	3f 4f       	sbci	r19, 0xFF	; 255
    3516:	4f 4f       	sbci	r20, 0xFF	; 255
    3518:	5f 4f       	sbci	r21, 0xFF	; 255

0000351a <__divmodsi4_exit>:
    351a:	08 95       	ret

0000351c <__divmodsi4_neg1>:
    351c:	f6 f7       	brtc	.-4      	; 0x351a <__divmodsi4_exit>
    351e:	90 95       	com	r25
    3520:	80 95       	com	r24
    3522:	70 95       	com	r23
    3524:	61 95       	neg	r22
    3526:	7f 4f       	sbci	r23, 0xFF	; 255
    3528:	8f 4f       	sbci	r24, 0xFF	; 255
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	08 95       	ret

0000352e <__udivmodsi4>:
    352e:	a1 e2       	ldi	r26, 0x21	; 33
    3530:	1a 2e       	mov	r1, r26
    3532:	aa 1b       	sub	r26, r26
    3534:	bb 1b       	sub	r27, r27
    3536:	fd 01       	movw	r30, r26
    3538:	0d c0       	rjmp	.+26     	; 0x3554 <__udivmodsi4_ep>

0000353a <__udivmodsi4_loop>:
    353a:	aa 1f       	adc	r26, r26
    353c:	bb 1f       	adc	r27, r27
    353e:	ee 1f       	adc	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	a2 17       	cp	r26, r18
    3544:	b3 07       	cpc	r27, r19
    3546:	e4 07       	cpc	r30, r20
    3548:	f5 07       	cpc	r31, r21
    354a:	20 f0       	brcs	.+8      	; 0x3554 <__udivmodsi4_ep>
    354c:	a2 1b       	sub	r26, r18
    354e:	b3 0b       	sbc	r27, r19
    3550:	e4 0b       	sbc	r30, r20
    3552:	f5 0b       	sbc	r31, r21

00003554 <__udivmodsi4_ep>:
    3554:	66 1f       	adc	r22, r22
    3556:	77 1f       	adc	r23, r23
    3558:	88 1f       	adc	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	1a 94       	dec	r1
    355e:	69 f7       	brne	.-38     	; 0x353a <__udivmodsi4_loop>
    3560:	60 95       	com	r22
    3562:	70 95       	com	r23
    3564:	80 95       	com	r24
    3566:	90 95       	com	r25
    3568:	9b 01       	movw	r18, r22
    356a:	ac 01       	movw	r20, r24
    356c:	bd 01       	movw	r22, r26
    356e:	cf 01       	movw	r24, r30
    3570:	08 95       	ret

00003572 <__prologue_saves__>:
    3572:	2f 92       	push	r2
    3574:	3f 92       	push	r3
    3576:	4f 92       	push	r4
    3578:	5f 92       	push	r5
    357a:	6f 92       	push	r6
    357c:	7f 92       	push	r7
    357e:	8f 92       	push	r8
    3580:	9f 92       	push	r9
    3582:	af 92       	push	r10
    3584:	bf 92       	push	r11
    3586:	cf 92       	push	r12
    3588:	df 92       	push	r13
    358a:	ef 92       	push	r14
    358c:	ff 92       	push	r15
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	ca 1b       	sub	r28, r26
    359c:	db 0b       	sbc	r29, r27
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	09 94       	ijmp

000035aa <__epilogue_restores__>:
    35aa:	2a 88       	ldd	r2, Y+18	; 0x12
    35ac:	39 88       	ldd	r3, Y+17	; 0x11
    35ae:	48 88       	ldd	r4, Y+16	; 0x10
    35b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    35b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    35b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    35b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    35b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    35bc:	b9 84       	ldd	r11, Y+9	; 0x09
    35be:	c8 84       	ldd	r12, Y+8	; 0x08
    35c0:	df 80       	ldd	r13, Y+7	; 0x07
    35c2:	ee 80       	ldd	r14, Y+6	; 0x06
    35c4:	fd 80       	ldd	r15, Y+5	; 0x05
    35c6:	0c 81       	ldd	r16, Y+4	; 0x04
    35c8:	1b 81       	ldd	r17, Y+3	; 0x03
    35ca:	aa 81       	ldd	r26, Y+2	; 0x02
    35cc:	b9 81       	ldd	r27, Y+1	; 0x01
    35ce:	ce 0f       	add	r28, r30
    35d0:	d1 1d       	adc	r29, r1
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	ed 01       	movw	r28, r26
    35de:	08 95       	ret

000035e0 <malloc>:
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
    35e4:	bc 01       	movw	r22, r24
    35e6:	82 30       	cpi	r24, 0x02	; 2
    35e8:	91 05       	cpc	r25, r1
    35ea:	10 f4       	brcc	.+4      	; 0x35f0 <malloc+0x10>
    35ec:	62 e0       	ldi	r22, 0x02	; 2
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	a0 91 b6 01 	lds	r26, 0x01B6
    35f4:	b0 91 b7 01 	lds	r27, 0x01B7
    35f8:	ed 01       	movw	r28, r26
    35fa:	e0 e0       	ldi	r30, 0x00	; 0
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	21 c0       	rjmp	.+66     	; 0x3646 <malloc+0x66>
    3604:	88 81       	ld	r24, Y
    3606:	99 81       	ldd	r25, Y+1	; 0x01
    3608:	86 17       	cp	r24, r22
    360a:	97 07       	cpc	r25, r23
    360c:	69 f4       	brne	.+26     	; 0x3628 <malloc+0x48>
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	30 97       	sbiw	r30, 0x00	; 0
    3614:	19 f0       	breq	.+6      	; 0x361c <malloc+0x3c>
    3616:	93 83       	std	Z+3, r25	; 0x03
    3618:	82 83       	std	Z+2, r24	; 0x02
    361a:	04 c0       	rjmp	.+8      	; 0x3624 <malloc+0x44>
    361c:	90 93 b7 01 	sts	0x01B7, r25
    3620:	80 93 b6 01 	sts	0x01B6, r24
    3624:	fe 01       	movw	r30, r28
    3626:	34 c0       	rjmp	.+104    	; 0x3690 <malloc+0xb0>
    3628:	68 17       	cp	r22, r24
    362a:	79 07       	cpc	r23, r25
    362c:	38 f4       	brcc	.+14     	; 0x363c <malloc+0x5c>
    362e:	41 15       	cp	r20, r1
    3630:	51 05       	cpc	r21, r1
    3632:	19 f0       	breq	.+6      	; 0x363a <malloc+0x5a>
    3634:	84 17       	cp	r24, r20
    3636:	95 07       	cpc	r25, r21
    3638:	08 f4       	brcc	.+2      	; 0x363c <malloc+0x5c>
    363a:	ac 01       	movw	r20, r24
    363c:	fe 01       	movw	r30, r28
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	9c 01       	movw	r18, r24
    3644:	e9 01       	movw	r28, r18
    3646:	20 97       	sbiw	r28, 0x00	; 0
    3648:	e9 f6       	brne	.-70     	; 0x3604 <malloc+0x24>
    364a:	41 15       	cp	r20, r1
    364c:	51 05       	cpc	r21, r1
    364e:	a9 f1       	breq	.+106    	; 0x36ba <malloc+0xda>
    3650:	ca 01       	movw	r24, r20
    3652:	86 1b       	sub	r24, r22
    3654:	97 0b       	sbc	r25, r23
    3656:	04 97       	sbiw	r24, 0x04	; 4
    3658:	08 f4       	brcc	.+2      	; 0x365c <malloc+0x7c>
    365a:	ba 01       	movw	r22, r20
    365c:	e0 e0       	ldi	r30, 0x00	; 0
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	2a c0       	rjmp	.+84     	; 0x36b6 <malloc+0xd6>
    3662:	8d 91       	ld	r24, X+
    3664:	9c 91       	ld	r25, X
    3666:	11 97       	sbiw	r26, 0x01	; 1
    3668:	84 17       	cp	r24, r20
    366a:	95 07       	cpc	r25, r21
    366c:	f9 f4       	brne	.+62     	; 0x36ac <malloc+0xcc>
    366e:	64 17       	cp	r22, r20
    3670:	75 07       	cpc	r23, r21
    3672:	81 f4       	brne	.+32     	; 0x3694 <malloc+0xb4>
    3674:	12 96       	adiw	r26, 0x02	; 2
    3676:	8d 91       	ld	r24, X+
    3678:	9c 91       	ld	r25, X
    367a:	13 97       	sbiw	r26, 0x03	; 3
    367c:	30 97       	sbiw	r30, 0x00	; 0
    367e:	19 f0       	breq	.+6      	; 0x3686 <malloc+0xa6>
    3680:	93 83       	std	Z+3, r25	; 0x03
    3682:	82 83       	std	Z+2, r24	; 0x02
    3684:	04 c0       	rjmp	.+8      	; 0x368e <malloc+0xae>
    3686:	90 93 b7 01 	sts	0x01B7, r25
    368a:	80 93 b6 01 	sts	0x01B6, r24
    368e:	fd 01       	movw	r30, r26
    3690:	32 96       	adiw	r30, 0x02	; 2
    3692:	4f c0       	rjmp	.+158    	; 0x3732 <malloc+0x152>
    3694:	ca 01       	movw	r24, r20
    3696:	86 1b       	sub	r24, r22
    3698:	97 0b       	sbc	r25, r23
    369a:	fd 01       	movw	r30, r26
    369c:	e8 0f       	add	r30, r24
    369e:	f9 1f       	adc	r31, r25
    36a0:	61 93       	st	Z+, r22
    36a2:	71 93       	st	Z+, r23
    36a4:	02 97       	sbiw	r24, 0x02	; 2
    36a6:	8d 93       	st	X+, r24
    36a8:	9c 93       	st	X, r25
    36aa:	43 c0       	rjmp	.+134    	; 0x3732 <malloc+0x152>
    36ac:	fd 01       	movw	r30, r26
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	9c 01       	movw	r18, r24
    36b4:	d9 01       	movw	r26, r18
    36b6:	10 97       	sbiw	r26, 0x00	; 0
    36b8:	a1 f6       	brne	.-88     	; 0x3662 <malloc+0x82>
    36ba:	80 91 b4 01 	lds	r24, 0x01B4
    36be:	90 91 b5 01 	lds	r25, 0x01B5
    36c2:	89 2b       	or	r24, r25
    36c4:	41 f4       	brne	.+16     	; 0x36d6 <malloc+0xf6>
    36c6:	80 91 8a 01 	lds	r24, 0x018A
    36ca:	90 91 8b 01 	lds	r25, 0x018B
    36ce:	90 93 b5 01 	sts	0x01B5, r25
    36d2:	80 93 b4 01 	sts	0x01B4, r24
    36d6:	40 91 8c 01 	lds	r20, 0x018C
    36da:	50 91 8d 01 	lds	r21, 0x018D
    36de:	41 15       	cp	r20, r1
    36e0:	51 05       	cpc	r21, r1
    36e2:	41 f4       	brne	.+16     	; 0x36f4 <malloc+0x114>
    36e4:	4d b7       	in	r20, 0x3d	; 61
    36e6:	5e b7       	in	r21, 0x3e	; 62
    36e8:	80 91 88 01 	lds	r24, 0x0188
    36ec:	90 91 89 01 	lds	r25, 0x0189
    36f0:	48 1b       	sub	r20, r24
    36f2:	59 0b       	sbc	r21, r25
    36f4:	20 91 b4 01 	lds	r18, 0x01B4
    36f8:	30 91 b5 01 	lds	r19, 0x01B5
    36fc:	24 17       	cp	r18, r20
    36fe:	35 07       	cpc	r19, r21
    3700:	b0 f4       	brcc	.+44     	; 0x372e <malloc+0x14e>
    3702:	ca 01       	movw	r24, r20
    3704:	82 1b       	sub	r24, r18
    3706:	93 0b       	sbc	r25, r19
    3708:	86 17       	cp	r24, r22
    370a:	97 07       	cpc	r25, r23
    370c:	80 f0       	brcs	.+32     	; 0x372e <malloc+0x14e>
    370e:	ab 01       	movw	r20, r22
    3710:	4e 5f       	subi	r20, 0xFE	; 254
    3712:	5f 4f       	sbci	r21, 0xFF	; 255
    3714:	84 17       	cp	r24, r20
    3716:	95 07       	cpc	r25, r21
    3718:	50 f0       	brcs	.+20     	; 0x372e <malloc+0x14e>
    371a:	42 0f       	add	r20, r18
    371c:	53 1f       	adc	r21, r19
    371e:	50 93 b5 01 	sts	0x01B5, r21
    3722:	40 93 b4 01 	sts	0x01B4, r20
    3726:	f9 01       	movw	r30, r18
    3728:	61 93       	st	Z+, r22
    372a:	71 93       	st	Z+, r23
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <malloc+0x152>
    372e:	e0 e0       	ldi	r30, 0x00	; 0
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	cf 01       	movw	r24, r30
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	08 95       	ret

0000373a <free>:
    373a:	cf 93       	push	r28
    373c:	df 93       	push	r29
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	09 f4       	brne	.+2      	; 0x3744 <free+0xa>
    3742:	50 c0       	rjmp	.+160    	; 0x37e4 <free+0xaa>
    3744:	ec 01       	movw	r28, r24
    3746:	22 97       	sbiw	r28, 0x02	; 2
    3748:	1b 82       	std	Y+3, r1	; 0x03
    374a:	1a 82       	std	Y+2, r1	; 0x02
    374c:	a0 91 b6 01 	lds	r26, 0x01B6
    3750:	b0 91 b7 01 	lds	r27, 0x01B7
    3754:	10 97       	sbiw	r26, 0x00	; 0
    3756:	09 f1       	breq	.+66     	; 0x379a <free+0x60>
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	ac 17       	cp	r26, r28
    375e:	bd 07       	cpc	r27, r29
    3760:	08 f1       	brcs	.+66     	; 0x37a4 <free+0x6a>
    3762:	bb 83       	std	Y+3, r27	; 0x03
    3764:	aa 83       	std	Y+2, r26	; 0x02
    3766:	fe 01       	movw	r30, r28
    3768:	21 91       	ld	r18, Z+
    376a:	31 91       	ld	r19, Z+
    376c:	e2 0f       	add	r30, r18
    376e:	f3 1f       	adc	r31, r19
    3770:	ae 17       	cp	r26, r30
    3772:	bf 07       	cpc	r27, r31
    3774:	79 f4       	brne	.+30     	; 0x3794 <free+0x5a>
    3776:	8d 91       	ld	r24, X+
    3778:	9c 91       	ld	r25, X
    377a:	11 97       	sbiw	r26, 0x01	; 1
    377c:	28 0f       	add	r18, r24
    377e:	39 1f       	adc	r19, r25
    3780:	2e 5f       	subi	r18, 0xFE	; 254
    3782:	3f 4f       	sbci	r19, 0xFF	; 255
    3784:	39 83       	std	Y+1, r19	; 0x01
    3786:	28 83       	st	Y, r18
    3788:	12 96       	adiw	r26, 0x02	; 2
    378a:	8d 91       	ld	r24, X+
    378c:	9c 91       	ld	r25, X
    378e:	13 97       	sbiw	r26, 0x03	; 3
    3790:	9b 83       	std	Y+3, r25	; 0x03
    3792:	8a 83       	std	Y+2, r24	; 0x02
    3794:	41 15       	cp	r20, r1
    3796:	51 05       	cpc	r21, r1
    3798:	71 f4       	brne	.+28     	; 0x37b6 <free+0x7c>
    379a:	d0 93 b7 01 	sts	0x01B7, r29
    379e:	c0 93 b6 01 	sts	0x01B6, r28
    37a2:	20 c0       	rjmp	.+64     	; 0x37e4 <free+0xaa>
    37a4:	12 96       	adiw	r26, 0x02	; 2
    37a6:	8d 91       	ld	r24, X+
    37a8:	9c 91       	ld	r25, X
    37aa:	13 97       	sbiw	r26, 0x03	; 3
    37ac:	ad 01       	movw	r20, r26
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	11 f0       	breq	.+4      	; 0x37b6 <free+0x7c>
    37b2:	dc 01       	movw	r26, r24
    37b4:	d3 cf       	rjmp	.-90     	; 0x375c <free+0x22>
    37b6:	fa 01       	movw	r30, r20
    37b8:	d3 83       	std	Z+3, r29	; 0x03
    37ba:	c2 83       	std	Z+2, r28	; 0x02
    37bc:	21 91       	ld	r18, Z+
    37be:	31 91       	ld	r19, Z+
    37c0:	e2 0f       	add	r30, r18
    37c2:	f3 1f       	adc	r31, r19
    37c4:	ce 17       	cp	r28, r30
    37c6:	df 07       	cpc	r29, r31
    37c8:	69 f4       	brne	.+26     	; 0x37e4 <free+0xaa>
    37ca:	88 81       	ld	r24, Y
    37cc:	99 81       	ldd	r25, Y+1	; 0x01
    37ce:	28 0f       	add	r18, r24
    37d0:	39 1f       	adc	r19, r25
    37d2:	2e 5f       	subi	r18, 0xFE	; 254
    37d4:	3f 4f       	sbci	r19, 0xFF	; 255
    37d6:	fa 01       	movw	r30, r20
    37d8:	31 83       	std	Z+1, r19	; 0x01
    37da:	20 83       	st	Z, r18
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	93 83       	std	Z+3, r25	; 0x03
    37e2:	82 83       	std	Z+2, r24	; 0x02
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	08 95       	ret

000037ea <printf>:
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	eb ef       	ldi	r30, 0xFB	; 251
    37f0:	fb e1       	ldi	r31, 0x1B	; 27
    37f2:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__prologue_saves__+0x20>
    37f6:	fe 01       	movw	r30, r28
    37f8:	35 96       	adiw	r30, 0x05	; 5
    37fa:	61 91       	ld	r22, Z+
    37fc:	71 91       	ld	r23, Z+
    37fe:	80 91 ba 01 	lds	r24, 0x01BA
    3802:	90 91 bb 01 	lds	r25, 0x01BB
    3806:	af 01       	movw	r20, r30
    3808:	0e 94 0a 1c 	call	0x3814	; 0x3814 <vfprintf>
    380c:	20 96       	adiw	r28, 0x00	; 0
    380e:	e2 e0       	ldi	r30, 0x02	; 2
    3810:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__epilogue_restores__+0x20>

00003814 <vfprintf>:
    3814:	ab e0       	ldi	r26, 0x0B	; 11
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e0 e1       	ldi	r30, 0x10	; 16
    381a:	fc e1       	ldi	r31, 0x1C	; 28
    381c:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__prologue_saves__>
    3820:	3c 01       	movw	r6, r24
    3822:	2b 01       	movw	r4, r22
    3824:	5a 01       	movw	r10, r20
    3826:	fc 01       	movw	r30, r24
    3828:	17 82       	std	Z+7, r1	; 0x07
    382a:	16 82       	std	Z+6, r1	; 0x06
    382c:	83 81       	ldd	r24, Z+3	; 0x03
    382e:	81 fd       	sbrc	r24, 1
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <vfprintf+0x24>
    3832:	6f ef       	ldi	r22, 0xFF	; 255
    3834:	7f ef       	ldi	r23, 0xFF	; 255
    3836:	c6 c1       	rjmp	.+908    	; 0x3bc4 <vfprintf+0x3b0>
    3838:	9a e0       	ldi	r25, 0x0A	; 10
    383a:	89 2e       	mov	r8, r25
    383c:	1e 01       	movw	r2, r28
    383e:	08 94       	sec
    3840:	21 1c       	adc	r2, r1
    3842:	31 1c       	adc	r3, r1
    3844:	f3 01       	movw	r30, r6
    3846:	23 81       	ldd	r18, Z+3	; 0x03
    3848:	f2 01       	movw	r30, r4
    384a:	23 fd       	sbrc	r18, 3
    384c:	85 91       	lpm	r24, Z+
    384e:	23 ff       	sbrs	r18, 3
    3850:	81 91       	ld	r24, Z+
    3852:	2f 01       	movw	r4, r30
    3854:	88 23       	and	r24, r24
    3856:	09 f4       	brne	.+2      	; 0x385a <vfprintf+0x46>
    3858:	b2 c1       	rjmp	.+868    	; 0x3bbe <vfprintf+0x3aa>
    385a:	85 32       	cpi	r24, 0x25	; 37
    385c:	39 f4       	brne	.+14     	; 0x386c <vfprintf+0x58>
    385e:	23 fd       	sbrc	r18, 3
    3860:	85 91       	lpm	r24, Z+
    3862:	23 ff       	sbrs	r18, 3
    3864:	81 91       	ld	r24, Z+
    3866:	2f 01       	movw	r4, r30
    3868:	85 32       	cpi	r24, 0x25	; 37
    386a:	29 f4       	brne	.+10     	; 0x3876 <vfprintf+0x62>
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	b3 01       	movw	r22, r6
    3870:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    3874:	e7 cf       	rjmp	.-50     	; 0x3844 <vfprintf+0x30>
    3876:	98 2f       	mov	r25, r24
    3878:	ff 24       	eor	r15, r15
    387a:	ee 24       	eor	r14, r14
    387c:	99 24       	eor	r9, r9
    387e:	ff e1       	ldi	r31, 0x1F	; 31
    3880:	ff 15       	cp	r31, r15
    3882:	d0 f0       	brcs	.+52     	; 0x38b8 <vfprintf+0xa4>
    3884:	9b 32       	cpi	r25, 0x2B	; 43
    3886:	69 f0       	breq	.+26     	; 0x38a2 <vfprintf+0x8e>
    3888:	9c 32       	cpi	r25, 0x2C	; 44
    388a:	28 f4       	brcc	.+10     	; 0x3896 <vfprintf+0x82>
    388c:	90 32       	cpi	r25, 0x20	; 32
    388e:	59 f0       	breq	.+22     	; 0x38a6 <vfprintf+0x92>
    3890:	93 32       	cpi	r25, 0x23	; 35
    3892:	91 f4       	brne	.+36     	; 0x38b8 <vfprintf+0xa4>
    3894:	0e c0       	rjmp	.+28     	; 0x38b2 <vfprintf+0x9e>
    3896:	9d 32       	cpi	r25, 0x2D	; 45
    3898:	49 f0       	breq	.+18     	; 0x38ac <vfprintf+0x98>
    389a:	90 33       	cpi	r25, 0x30	; 48
    389c:	69 f4       	brne	.+26     	; 0x38b8 <vfprintf+0xa4>
    389e:	41 e0       	ldi	r20, 0x01	; 1
    38a0:	24 c0       	rjmp	.+72     	; 0x38ea <vfprintf+0xd6>
    38a2:	52 e0       	ldi	r21, 0x02	; 2
    38a4:	f5 2a       	or	r15, r21
    38a6:	84 e0       	ldi	r24, 0x04	; 4
    38a8:	f8 2a       	or	r15, r24
    38aa:	28 c0       	rjmp	.+80     	; 0x38fc <vfprintf+0xe8>
    38ac:	98 e0       	ldi	r25, 0x08	; 8
    38ae:	f9 2a       	or	r15, r25
    38b0:	25 c0       	rjmp	.+74     	; 0x38fc <vfprintf+0xe8>
    38b2:	e0 e1       	ldi	r30, 0x10	; 16
    38b4:	fe 2a       	or	r15, r30
    38b6:	22 c0       	rjmp	.+68     	; 0x38fc <vfprintf+0xe8>
    38b8:	f7 fc       	sbrc	r15, 7
    38ba:	29 c0       	rjmp	.+82     	; 0x390e <vfprintf+0xfa>
    38bc:	89 2f       	mov	r24, r25
    38be:	80 53       	subi	r24, 0x30	; 48
    38c0:	8a 30       	cpi	r24, 0x0A	; 10
    38c2:	70 f4       	brcc	.+28     	; 0x38e0 <vfprintf+0xcc>
    38c4:	f6 fe       	sbrs	r15, 6
    38c6:	05 c0       	rjmp	.+10     	; 0x38d2 <vfprintf+0xbe>
    38c8:	98 9c       	mul	r9, r8
    38ca:	90 2c       	mov	r9, r0
    38cc:	11 24       	eor	r1, r1
    38ce:	98 0e       	add	r9, r24
    38d0:	15 c0       	rjmp	.+42     	; 0x38fc <vfprintf+0xe8>
    38d2:	e8 9c       	mul	r14, r8
    38d4:	e0 2c       	mov	r14, r0
    38d6:	11 24       	eor	r1, r1
    38d8:	e8 0e       	add	r14, r24
    38da:	f0 e2       	ldi	r31, 0x20	; 32
    38dc:	ff 2a       	or	r15, r31
    38de:	0e c0       	rjmp	.+28     	; 0x38fc <vfprintf+0xe8>
    38e0:	9e 32       	cpi	r25, 0x2E	; 46
    38e2:	29 f4       	brne	.+10     	; 0x38ee <vfprintf+0xda>
    38e4:	f6 fc       	sbrc	r15, 6
    38e6:	6b c1       	rjmp	.+726    	; 0x3bbe <vfprintf+0x3aa>
    38e8:	40 e4       	ldi	r20, 0x40	; 64
    38ea:	f4 2a       	or	r15, r20
    38ec:	07 c0       	rjmp	.+14     	; 0x38fc <vfprintf+0xe8>
    38ee:	9c 36       	cpi	r25, 0x6C	; 108
    38f0:	19 f4       	brne	.+6      	; 0x38f8 <vfprintf+0xe4>
    38f2:	50 e8       	ldi	r21, 0x80	; 128
    38f4:	f5 2a       	or	r15, r21
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <vfprintf+0xe8>
    38f8:	98 36       	cpi	r25, 0x68	; 104
    38fa:	49 f4       	brne	.+18     	; 0x390e <vfprintf+0xfa>
    38fc:	f2 01       	movw	r30, r4
    38fe:	23 fd       	sbrc	r18, 3
    3900:	95 91       	lpm	r25, Z+
    3902:	23 ff       	sbrs	r18, 3
    3904:	91 91       	ld	r25, Z+
    3906:	2f 01       	movw	r4, r30
    3908:	99 23       	and	r25, r25
    390a:	09 f0       	breq	.+2      	; 0x390e <vfprintf+0xfa>
    390c:	b8 cf       	rjmp	.-144    	; 0x387e <vfprintf+0x6a>
    390e:	89 2f       	mov	r24, r25
    3910:	85 54       	subi	r24, 0x45	; 69
    3912:	83 30       	cpi	r24, 0x03	; 3
    3914:	18 f0       	brcs	.+6      	; 0x391c <vfprintf+0x108>
    3916:	80 52       	subi	r24, 0x20	; 32
    3918:	83 30       	cpi	r24, 0x03	; 3
    391a:	38 f4       	brcc	.+14     	; 0x392a <vfprintf+0x116>
    391c:	44 e0       	ldi	r20, 0x04	; 4
    391e:	50 e0       	ldi	r21, 0x00	; 0
    3920:	a4 0e       	add	r10, r20
    3922:	b5 1e       	adc	r11, r21
    3924:	5f e3       	ldi	r21, 0x3F	; 63
    3926:	59 83       	std	Y+1, r21	; 0x01
    3928:	0f c0       	rjmp	.+30     	; 0x3948 <vfprintf+0x134>
    392a:	93 36       	cpi	r25, 0x63	; 99
    392c:	31 f0       	breq	.+12     	; 0x393a <vfprintf+0x126>
    392e:	93 37       	cpi	r25, 0x73	; 115
    3930:	79 f0       	breq	.+30     	; 0x3950 <vfprintf+0x13c>
    3932:	93 35       	cpi	r25, 0x53	; 83
    3934:	09 f0       	breq	.+2      	; 0x3938 <vfprintf+0x124>
    3936:	56 c0       	rjmp	.+172    	; 0x39e4 <vfprintf+0x1d0>
    3938:	20 c0       	rjmp	.+64     	; 0x397a <vfprintf+0x166>
    393a:	f5 01       	movw	r30, r10
    393c:	80 81       	ld	r24, Z
    393e:	89 83       	std	Y+1, r24	; 0x01
    3940:	42 e0       	ldi	r20, 0x02	; 2
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	a4 0e       	add	r10, r20
    3946:	b5 1e       	adc	r11, r21
    3948:	61 01       	movw	r12, r2
    394a:	01 e0       	ldi	r16, 0x01	; 1
    394c:	10 e0       	ldi	r17, 0x00	; 0
    394e:	12 c0       	rjmp	.+36     	; 0x3974 <vfprintf+0x160>
    3950:	f5 01       	movw	r30, r10
    3952:	c0 80       	ld	r12, Z
    3954:	d1 80       	ldd	r13, Z+1	; 0x01
    3956:	f6 fc       	sbrc	r15, 6
    3958:	03 c0       	rjmp	.+6      	; 0x3960 <vfprintf+0x14c>
    395a:	6f ef       	ldi	r22, 0xFF	; 255
    395c:	7f ef       	ldi	r23, 0xFF	; 255
    395e:	02 c0       	rjmp	.+4      	; 0x3964 <vfprintf+0x150>
    3960:	69 2d       	mov	r22, r9
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	42 e0       	ldi	r20, 0x02	; 2
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	a4 0e       	add	r10, r20
    396a:	b5 1e       	adc	r11, r21
    396c:	c6 01       	movw	r24, r12
    396e:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <strnlen>
    3972:	8c 01       	movw	r16, r24
    3974:	5f e7       	ldi	r21, 0x7F	; 127
    3976:	f5 22       	and	r15, r21
    3978:	14 c0       	rjmp	.+40     	; 0x39a2 <vfprintf+0x18e>
    397a:	f5 01       	movw	r30, r10
    397c:	c0 80       	ld	r12, Z
    397e:	d1 80       	ldd	r13, Z+1	; 0x01
    3980:	f6 fc       	sbrc	r15, 6
    3982:	03 c0       	rjmp	.+6      	; 0x398a <vfprintf+0x176>
    3984:	6f ef       	ldi	r22, 0xFF	; 255
    3986:	7f ef       	ldi	r23, 0xFF	; 255
    3988:	02 c0       	rjmp	.+4      	; 0x398e <vfprintf+0x17a>
    398a:	69 2d       	mov	r22, r9
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	42 e0       	ldi	r20, 0x02	; 2
    3990:	50 e0       	ldi	r21, 0x00	; 0
    3992:	a4 0e       	add	r10, r20
    3994:	b5 1e       	adc	r11, r21
    3996:	c6 01       	movw	r24, r12
    3998:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strnlen_P>
    399c:	8c 01       	movw	r16, r24
    399e:	50 e8       	ldi	r21, 0x80	; 128
    39a0:	f5 2a       	or	r15, r21
    39a2:	f3 fe       	sbrs	r15, 3
    39a4:	07 c0       	rjmp	.+14     	; 0x39b4 <vfprintf+0x1a0>
    39a6:	1a c0       	rjmp	.+52     	; 0x39dc <vfprintf+0x1c8>
    39a8:	80 e2       	ldi	r24, 0x20	; 32
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	b3 01       	movw	r22, r6
    39ae:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    39b2:	ea 94       	dec	r14
    39b4:	8e 2d       	mov	r24, r14
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	08 17       	cp	r16, r24
    39ba:	19 07       	cpc	r17, r25
    39bc:	a8 f3       	brcs	.-22     	; 0x39a8 <vfprintf+0x194>
    39be:	0e c0       	rjmp	.+28     	; 0x39dc <vfprintf+0x1c8>
    39c0:	f6 01       	movw	r30, r12
    39c2:	f7 fc       	sbrc	r15, 7
    39c4:	85 91       	lpm	r24, Z+
    39c6:	f7 fe       	sbrs	r15, 7
    39c8:	81 91       	ld	r24, Z+
    39ca:	6f 01       	movw	r12, r30
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	b3 01       	movw	r22, r6
    39d0:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    39d4:	e1 10       	cpse	r14, r1
    39d6:	ea 94       	dec	r14
    39d8:	01 50       	subi	r16, 0x01	; 1
    39da:	10 40       	sbci	r17, 0x00	; 0
    39dc:	01 15       	cp	r16, r1
    39de:	11 05       	cpc	r17, r1
    39e0:	79 f7       	brne	.-34     	; 0x39c0 <vfprintf+0x1ac>
    39e2:	ea c0       	rjmp	.+468    	; 0x3bb8 <vfprintf+0x3a4>
    39e4:	94 36       	cpi	r25, 0x64	; 100
    39e6:	11 f0       	breq	.+4      	; 0x39ec <vfprintf+0x1d8>
    39e8:	99 36       	cpi	r25, 0x69	; 105
    39ea:	69 f5       	brne	.+90     	; 0x3a46 <vfprintf+0x232>
    39ec:	f7 fe       	sbrs	r15, 7
    39ee:	08 c0       	rjmp	.+16     	; 0x3a00 <vfprintf+0x1ec>
    39f0:	f5 01       	movw	r30, r10
    39f2:	20 81       	ld	r18, Z
    39f4:	31 81       	ldd	r19, Z+1	; 0x01
    39f6:	42 81       	ldd	r20, Z+2	; 0x02
    39f8:	53 81       	ldd	r21, Z+3	; 0x03
    39fa:	84 e0       	ldi	r24, 0x04	; 4
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	0a c0       	rjmp	.+20     	; 0x3a14 <vfprintf+0x200>
    3a00:	f5 01       	movw	r30, r10
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	9c 01       	movw	r18, r24
    3a08:	44 27       	eor	r20, r20
    3a0a:	37 fd       	sbrc	r19, 7
    3a0c:	40 95       	com	r20
    3a0e:	54 2f       	mov	r21, r20
    3a10:	82 e0       	ldi	r24, 0x02	; 2
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	a8 0e       	add	r10, r24
    3a16:	b9 1e       	adc	r11, r25
    3a18:	9f e6       	ldi	r25, 0x6F	; 111
    3a1a:	f9 22       	and	r15, r25
    3a1c:	57 ff       	sbrs	r21, 7
    3a1e:	09 c0       	rjmp	.+18     	; 0x3a32 <vfprintf+0x21e>
    3a20:	50 95       	com	r21
    3a22:	40 95       	com	r20
    3a24:	30 95       	com	r19
    3a26:	21 95       	neg	r18
    3a28:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2a:	4f 4f       	sbci	r20, 0xFF	; 255
    3a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2e:	e0 e8       	ldi	r30, 0x80	; 128
    3a30:	fe 2a       	or	r15, r30
    3a32:	ca 01       	movw	r24, r20
    3a34:	b9 01       	movw	r22, r18
    3a36:	a1 01       	movw	r20, r2
    3a38:	2a e0       	ldi	r18, 0x0A	; 10
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__ultoa_invert>
    3a40:	d8 2e       	mov	r13, r24
    3a42:	d2 18       	sub	r13, r2
    3a44:	40 c0       	rjmp	.+128    	; 0x3ac6 <vfprintf+0x2b2>
    3a46:	95 37       	cpi	r25, 0x75	; 117
    3a48:	29 f4       	brne	.+10     	; 0x3a54 <vfprintf+0x240>
    3a4a:	1f 2d       	mov	r17, r15
    3a4c:	1f 7e       	andi	r17, 0xEF	; 239
    3a4e:	2a e0       	ldi	r18, 0x0A	; 10
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	1d c0       	rjmp	.+58     	; 0x3a8e <vfprintf+0x27a>
    3a54:	1f 2d       	mov	r17, r15
    3a56:	19 7f       	andi	r17, 0xF9	; 249
    3a58:	9f 36       	cpi	r25, 0x6F	; 111
    3a5a:	61 f0       	breq	.+24     	; 0x3a74 <vfprintf+0x260>
    3a5c:	90 37       	cpi	r25, 0x70	; 112
    3a5e:	20 f4       	brcc	.+8      	; 0x3a68 <vfprintf+0x254>
    3a60:	98 35       	cpi	r25, 0x58	; 88
    3a62:	09 f0       	breq	.+2      	; 0x3a66 <vfprintf+0x252>
    3a64:	ac c0       	rjmp	.+344    	; 0x3bbe <vfprintf+0x3aa>
    3a66:	0f c0       	rjmp	.+30     	; 0x3a86 <vfprintf+0x272>
    3a68:	90 37       	cpi	r25, 0x70	; 112
    3a6a:	39 f0       	breq	.+14     	; 0x3a7a <vfprintf+0x266>
    3a6c:	98 37       	cpi	r25, 0x78	; 120
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <vfprintf+0x25e>
    3a70:	a6 c0       	rjmp	.+332    	; 0x3bbe <vfprintf+0x3aa>
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c <vfprintf+0x268>
    3a74:	28 e0       	ldi	r18, 0x08	; 8
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	0a c0       	rjmp	.+20     	; 0x3a8e <vfprintf+0x27a>
    3a7a:	10 61       	ori	r17, 0x10	; 16
    3a7c:	14 fd       	sbrc	r17, 4
    3a7e:	14 60       	ori	r17, 0x04	; 4
    3a80:	20 e1       	ldi	r18, 0x10	; 16
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	04 c0       	rjmp	.+8      	; 0x3a8e <vfprintf+0x27a>
    3a86:	14 fd       	sbrc	r17, 4
    3a88:	16 60       	ori	r17, 0x06	; 6
    3a8a:	20 e1       	ldi	r18, 0x10	; 16
    3a8c:	32 e0       	ldi	r19, 0x02	; 2
    3a8e:	17 ff       	sbrs	r17, 7
    3a90:	08 c0       	rjmp	.+16     	; 0x3aa2 <vfprintf+0x28e>
    3a92:	f5 01       	movw	r30, r10
    3a94:	60 81       	ld	r22, Z
    3a96:	71 81       	ldd	r23, Z+1	; 0x01
    3a98:	82 81       	ldd	r24, Z+2	; 0x02
    3a9a:	93 81       	ldd	r25, Z+3	; 0x03
    3a9c:	44 e0       	ldi	r20, 0x04	; 4
    3a9e:	50 e0       	ldi	r21, 0x00	; 0
    3aa0:	08 c0       	rjmp	.+16     	; 0x3ab2 <vfprintf+0x29e>
    3aa2:	f5 01       	movw	r30, r10
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	42 e0       	ldi	r20, 0x02	; 2
    3ab0:	50 e0       	ldi	r21, 0x00	; 0
    3ab2:	a4 0e       	add	r10, r20
    3ab4:	b5 1e       	adc	r11, r21
    3ab6:	a1 01       	movw	r20, r2
    3ab8:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__ultoa_invert>
    3abc:	d8 2e       	mov	r13, r24
    3abe:	d2 18       	sub	r13, r2
    3ac0:	8f e7       	ldi	r24, 0x7F	; 127
    3ac2:	f8 2e       	mov	r15, r24
    3ac4:	f1 22       	and	r15, r17
    3ac6:	f6 fe       	sbrs	r15, 6
    3ac8:	0b c0       	rjmp	.+22     	; 0x3ae0 <vfprintf+0x2cc>
    3aca:	5e ef       	ldi	r21, 0xFE	; 254
    3acc:	f5 22       	and	r15, r21
    3ace:	d9 14       	cp	r13, r9
    3ad0:	38 f4       	brcc	.+14     	; 0x3ae0 <vfprintf+0x2cc>
    3ad2:	f4 fe       	sbrs	r15, 4
    3ad4:	07 c0       	rjmp	.+14     	; 0x3ae4 <vfprintf+0x2d0>
    3ad6:	f2 fc       	sbrc	r15, 2
    3ad8:	05 c0       	rjmp	.+10     	; 0x3ae4 <vfprintf+0x2d0>
    3ada:	8f ee       	ldi	r24, 0xEF	; 239
    3adc:	f8 22       	and	r15, r24
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <vfprintf+0x2d0>
    3ae0:	1d 2d       	mov	r17, r13
    3ae2:	01 c0       	rjmp	.+2      	; 0x3ae6 <vfprintf+0x2d2>
    3ae4:	19 2d       	mov	r17, r9
    3ae6:	f4 fe       	sbrs	r15, 4
    3ae8:	0d c0       	rjmp	.+26     	; 0x3b04 <vfprintf+0x2f0>
    3aea:	fe 01       	movw	r30, r28
    3aec:	ed 0d       	add	r30, r13
    3aee:	f1 1d       	adc	r31, r1
    3af0:	80 81       	ld	r24, Z
    3af2:	80 33       	cpi	r24, 0x30	; 48
    3af4:	19 f4       	brne	.+6      	; 0x3afc <vfprintf+0x2e8>
    3af6:	99 ee       	ldi	r25, 0xE9	; 233
    3af8:	f9 22       	and	r15, r25
    3afa:	08 c0       	rjmp	.+16     	; 0x3b0c <vfprintf+0x2f8>
    3afc:	1f 5f       	subi	r17, 0xFF	; 255
    3afe:	f2 fe       	sbrs	r15, 2
    3b00:	05 c0       	rjmp	.+10     	; 0x3b0c <vfprintf+0x2f8>
    3b02:	03 c0       	rjmp	.+6      	; 0x3b0a <vfprintf+0x2f6>
    3b04:	8f 2d       	mov	r24, r15
    3b06:	86 78       	andi	r24, 0x86	; 134
    3b08:	09 f0       	breq	.+2      	; 0x3b0c <vfprintf+0x2f8>
    3b0a:	1f 5f       	subi	r17, 0xFF	; 255
    3b0c:	0f 2d       	mov	r16, r15
    3b0e:	f3 fc       	sbrc	r15, 3
    3b10:	14 c0       	rjmp	.+40     	; 0x3b3a <vfprintf+0x326>
    3b12:	f0 fe       	sbrs	r15, 0
    3b14:	0f c0       	rjmp	.+30     	; 0x3b34 <vfprintf+0x320>
    3b16:	1e 15       	cp	r17, r14
    3b18:	10 f0       	brcs	.+4      	; 0x3b1e <vfprintf+0x30a>
    3b1a:	9d 2c       	mov	r9, r13
    3b1c:	0b c0       	rjmp	.+22     	; 0x3b34 <vfprintf+0x320>
    3b1e:	9d 2c       	mov	r9, r13
    3b20:	9e 0c       	add	r9, r14
    3b22:	91 1a       	sub	r9, r17
    3b24:	1e 2d       	mov	r17, r14
    3b26:	06 c0       	rjmp	.+12     	; 0x3b34 <vfprintf+0x320>
    3b28:	80 e2       	ldi	r24, 0x20	; 32
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	b3 01       	movw	r22, r6
    3b2e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    3b32:	1f 5f       	subi	r17, 0xFF	; 255
    3b34:	1e 15       	cp	r17, r14
    3b36:	c0 f3       	brcs	.-16     	; 0x3b28 <vfprintf+0x314>
    3b38:	04 c0       	rjmp	.+8      	; 0x3b42 <vfprintf+0x32e>
    3b3a:	1e 15       	cp	r17, r14
    3b3c:	10 f4       	brcc	.+4      	; 0x3b42 <vfprintf+0x32e>
    3b3e:	e1 1a       	sub	r14, r17
    3b40:	01 c0       	rjmp	.+2      	; 0x3b44 <vfprintf+0x330>
    3b42:	ee 24       	eor	r14, r14
    3b44:	04 ff       	sbrs	r16, 4
    3b46:	0f c0       	rjmp	.+30     	; 0x3b66 <vfprintf+0x352>
    3b48:	80 e3       	ldi	r24, 0x30	; 48
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	b3 01       	movw	r22, r6
    3b4e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    3b52:	02 ff       	sbrs	r16, 2
    3b54:	1d c0       	rjmp	.+58     	; 0x3b90 <vfprintf+0x37c>
    3b56:	01 fd       	sbrc	r16, 1
    3b58:	03 c0       	rjmp	.+6      	; 0x3b60 <vfprintf+0x34c>
    3b5a:	88 e7       	ldi	r24, 0x78	; 120
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	0e c0       	rjmp	.+28     	; 0x3b7c <vfprintf+0x368>
    3b60:	88 e5       	ldi	r24, 0x58	; 88
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	0b c0       	rjmp	.+22     	; 0x3b7c <vfprintf+0x368>
    3b66:	80 2f       	mov	r24, r16
    3b68:	86 78       	andi	r24, 0x86	; 134
    3b6a:	91 f0       	breq	.+36     	; 0x3b90 <vfprintf+0x37c>
    3b6c:	01 ff       	sbrs	r16, 1
    3b6e:	02 c0       	rjmp	.+4      	; 0x3b74 <vfprintf+0x360>
    3b70:	8b e2       	ldi	r24, 0x2B	; 43
    3b72:	01 c0       	rjmp	.+2      	; 0x3b76 <vfprintf+0x362>
    3b74:	80 e2       	ldi	r24, 0x20	; 32
    3b76:	f7 fc       	sbrc	r15, 7
    3b78:	8d e2       	ldi	r24, 0x2D	; 45
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	b3 01       	movw	r22, r6
    3b7e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    3b82:	06 c0       	rjmp	.+12     	; 0x3b90 <vfprintf+0x37c>
    3b84:	80 e3       	ldi	r24, 0x30	; 48
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	b3 01       	movw	r22, r6
    3b8a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    3b8e:	9a 94       	dec	r9
    3b90:	d9 14       	cp	r13, r9
    3b92:	c0 f3       	brcs	.-16     	; 0x3b84 <vfprintf+0x370>
    3b94:	da 94       	dec	r13
    3b96:	f1 01       	movw	r30, r2
    3b98:	ed 0d       	add	r30, r13
    3b9a:	f1 1d       	adc	r31, r1
    3b9c:	80 81       	ld	r24, Z
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	b3 01       	movw	r22, r6
    3ba2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    3ba6:	dd 20       	and	r13, r13
    3ba8:	a9 f7       	brne	.-22     	; 0x3b94 <vfprintf+0x380>
    3baa:	06 c0       	rjmp	.+12     	; 0x3bb8 <vfprintf+0x3a4>
    3bac:	80 e2       	ldi	r24, 0x20	; 32
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	b3 01       	movw	r22, r6
    3bb2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <fputc>
    3bb6:	ea 94       	dec	r14
    3bb8:	ee 20       	and	r14, r14
    3bba:	c1 f7       	brne	.-16     	; 0x3bac <vfprintf+0x398>
    3bbc:	43 ce       	rjmp	.-890    	; 0x3844 <vfprintf+0x30>
    3bbe:	f3 01       	movw	r30, r6
    3bc0:	66 81       	ldd	r22, Z+6	; 0x06
    3bc2:	77 81       	ldd	r23, Z+7	; 0x07
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	2b 96       	adiw	r28, 0x0b	; 11
    3bc8:	e2 e1       	ldi	r30, 0x12	; 18
    3bca:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__epilogue_restores__>

00003bce <strnlen_P>:
    3bce:	fc 01       	movw	r30, r24
    3bd0:	05 90       	lpm	r0, Z+
    3bd2:	61 50       	subi	r22, 0x01	; 1
    3bd4:	70 40       	sbci	r23, 0x00	; 0
    3bd6:	01 10       	cpse	r0, r1
    3bd8:	d8 f7       	brcc	.-10     	; 0x3bd0 <strnlen_P+0x2>
    3bda:	80 95       	com	r24
    3bdc:	90 95       	com	r25
    3bde:	8e 0f       	add	r24, r30
    3be0:	9f 1f       	adc	r25, r31
    3be2:	08 95       	ret

00003be4 <strnlen>:
    3be4:	fc 01       	movw	r30, r24
    3be6:	61 50       	subi	r22, 0x01	; 1
    3be8:	70 40       	sbci	r23, 0x00	; 0
    3bea:	01 90       	ld	r0, Z+
    3bec:	01 10       	cpse	r0, r1
    3bee:	d8 f7       	brcc	.-10     	; 0x3be6 <strnlen+0x2>
    3bf0:	80 95       	com	r24
    3bf2:	90 95       	com	r25
    3bf4:	8e 0f       	add	r24, r30
    3bf6:	9f 1f       	adc	r25, r31
    3bf8:	08 95       	ret

00003bfa <fputc>:
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	8c 01       	movw	r16, r24
    3c04:	eb 01       	movw	r28, r22
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	81 ff       	sbrs	r24, 1
    3c0a:	1b c0       	rjmp	.+54     	; 0x3c42 <fputc+0x48>
    3c0c:	82 ff       	sbrs	r24, 2
    3c0e:	0d c0       	rjmp	.+26     	; 0x3c2a <fputc+0x30>
    3c10:	2e 81       	ldd	r18, Y+6	; 0x06
    3c12:	3f 81       	ldd	r19, Y+7	; 0x07
    3c14:	8c 81       	ldd	r24, Y+4	; 0x04
    3c16:	9d 81       	ldd	r25, Y+5	; 0x05
    3c18:	28 17       	cp	r18, r24
    3c1a:	39 07       	cpc	r19, r25
    3c1c:	64 f4       	brge	.+24     	; 0x3c36 <fputc+0x3c>
    3c1e:	e8 81       	ld	r30, Y
    3c20:	f9 81       	ldd	r31, Y+1	; 0x01
    3c22:	01 93       	st	Z+, r16
    3c24:	f9 83       	std	Y+1, r31	; 0x01
    3c26:	e8 83       	st	Y, r30
    3c28:	06 c0       	rjmp	.+12     	; 0x3c36 <fputc+0x3c>
    3c2a:	e8 85       	ldd	r30, Y+8	; 0x08
    3c2c:	f9 85       	ldd	r31, Y+9	; 0x09
    3c2e:	80 2f       	mov	r24, r16
    3c30:	09 95       	icall
    3c32:	89 2b       	or	r24, r25
    3c34:	31 f4       	brne	.+12     	; 0x3c42 <fputc+0x48>
    3c36:	8e 81       	ldd	r24, Y+6	; 0x06
    3c38:	9f 81       	ldd	r25, Y+7	; 0x07
    3c3a:	01 96       	adiw	r24, 0x01	; 1
    3c3c:	9f 83       	std	Y+7, r25	; 0x07
    3c3e:	8e 83       	std	Y+6, r24	; 0x06
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <fputc+0x4c>
    3c42:	0f ef       	ldi	r16, 0xFF	; 255
    3c44:	1f ef       	ldi	r17, 0xFF	; 255
    3c46:	c8 01       	movw	r24, r16
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	08 95       	ret

00003c52 <__ultoa_invert>:
    3c52:	fa 01       	movw	r30, r20
    3c54:	aa 27       	eor	r26, r26
    3c56:	28 30       	cpi	r18, 0x08	; 8
    3c58:	51 f1       	breq	.+84     	; 0x3cae <__ultoa_invert+0x5c>
    3c5a:	20 31       	cpi	r18, 0x10	; 16
    3c5c:	81 f1       	breq	.+96     	; 0x3cbe <__ultoa_invert+0x6c>
    3c5e:	e8 94       	clt
    3c60:	6f 93       	push	r22
    3c62:	6e 7f       	andi	r22, 0xFE	; 254
    3c64:	6e 5f       	subi	r22, 0xFE	; 254
    3c66:	7f 4f       	sbci	r23, 0xFF	; 255
    3c68:	8f 4f       	sbci	r24, 0xFF	; 255
    3c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6c:	af 4f       	sbci	r26, 0xFF	; 255
    3c6e:	b1 e0       	ldi	r27, 0x01	; 1
    3c70:	3e d0       	rcall	.+124    	; 0x3cee <__ultoa_invert+0x9c>
    3c72:	b4 e0       	ldi	r27, 0x04	; 4
    3c74:	3c d0       	rcall	.+120    	; 0x3cee <__ultoa_invert+0x9c>
    3c76:	67 0f       	add	r22, r23
    3c78:	78 1f       	adc	r23, r24
    3c7a:	89 1f       	adc	r24, r25
    3c7c:	9a 1f       	adc	r25, r26
    3c7e:	a1 1d       	adc	r26, r1
    3c80:	68 0f       	add	r22, r24
    3c82:	79 1f       	adc	r23, r25
    3c84:	8a 1f       	adc	r24, r26
    3c86:	91 1d       	adc	r25, r1
    3c88:	a1 1d       	adc	r26, r1
    3c8a:	6a 0f       	add	r22, r26
    3c8c:	71 1d       	adc	r23, r1
    3c8e:	81 1d       	adc	r24, r1
    3c90:	91 1d       	adc	r25, r1
    3c92:	a1 1d       	adc	r26, r1
    3c94:	20 d0       	rcall	.+64     	; 0x3cd6 <__ultoa_invert+0x84>
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <__ultoa_invert+0x48>
    3c98:	68 94       	set
    3c9a:	3f 91       	pop	r19
    3c9c:	2a e0       	ldi	r18, 0x0A	; 10
    3c9e:	26 9f       	mul	r18, r22
    3ca0:	11 24       	eor	r1, r1
    3ca2:	30 19       	sub	r19, r0
    3ca4:	30 5d       	subi	r19, 0xD0	; 208
    3ca6:	31 93       	st	Z+, r19
    3ca8:	de f6       	brtc	.-74     	; 0x3c60 <__ultoa_invert+0xe>
    3caa:	cf 01       	movw	r24, r30
    3cac:	08 95       	ret
    3cae:	46 2f       	mov	r20, r22
    3cb0:	47 70       	andi	r20, 0x07	; 7
    3cb2:	40 5d       	subi	r20, 0xD0	; 208
    3cb4:	41 93       	st	Z+, r20
    3cb6:	b3 e0       	ldi	r27, 0x03	; 3
    3cb8:	0f d0       	rcall	.+30     	; 0x3cd8 <__ultoa_invert+0x86>
    3cba:	c9 f7       	brne	.-14     	; 0x3cae <__ultoa_invert+0x5c>
    3cbc:	f6 cf       	rjmp	.-20     	; 0x3caa <__ultoa_invert+0x58>
    3cbe:	46 2f       	mov	r20, r22
    3cc0:	4f 70       	andi	r20, 0x0F	; 15
    3cc2:	40 5d       	subi	r20, 0xD0	; 208
    3cc4:	4a 33       	cpi	r20, 0x3A	; 58
    3cc6:	18 f0       	brcs	.+6      	; 0x3cce <__ultoa_invert+0x7c>
    3cc8:	49 5d       	subi	r20, 0xD9	; 217
    3cca:	31 fd       	sbrc	r19, 1
    3ccc:	40 52       	subi	r20, 0x20	; 32
    3cce:	41 93       	st	Z+, r20
    3cd0:	02 d0       	rcall	.+4      	; 0x3cd6 <__ultoa_invert+0x84>
    3cd2:	a9 f7       	brne	.-22     	; 0x3cbe <__ultoa_invert+0x6c>
    3cd4:	ea cf       	rjmp	.-44     	; 0x3caa <__ultoa_invert+0x58>
    3cd6:	b4 e0       	ldi	r27, 0x04	; 4
    3cd8:	a6 95       	lsr	r26
    3cda:	97 95       	ror	r25
    3cdc:	87 95       	ror	r24
    3cde:	77 95       	ror	r23
    3ce0:	67 95       	ror	r22
    3ce2:	ba 95       	dec	r27
    3ce4:	c9 f7       	brne	.-14     	; 0x3cd8 <__ultoa_invert+0x86>
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	61 05       	cpc	r22, r1
    3cea:	71 05       	cpc	r23, r1
    3cec:	08 95       	ret
    3cee:	9b 01       	movw	r18, r22
    3cf0:	ac 01       	movw	r20, r24
    3cf2:	0a 2e       	mov	r0, r26
    3cf4:	06 94       	lsr	r0
    3cf6:	57 95       	ror	r21
    3cf8:	47 95       	ror	r20
    3cfa:	37 95       	ror	r19
    3cfc:	27 95       	ror	r18
    3cfe:	ba 95       	dec	r27
    3d00:	c9 f7       	brne	.-14     	; 0x3cf4 <__ultoa_invert+0xa2>
    3d02:	62 0f       	add	r22, r18
    3d04:	73 1f       	adc	r23, r19
    3d06:	84 1f       	adc	r24, r20
    3d08:	95 1f       	adc	r25, r21
    3d0a:	a0 1d       	adc	r26, r0
    3d0c:	08 95       	ret

00003d0e <_exit>:
    3d0e:	f8 94       	cli

00003d10 <__stop_program>:
    3d10:	ff cf       	rjmp	.-2      	; 0x3d10 <__stop_program>
