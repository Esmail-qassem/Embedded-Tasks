
AT32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000292c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000292c  000029c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008000a8  008000a8  00002a08  2**0
                  ALLOC
  3 .stab         00004314  00000000  00000000  00002a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000037fc  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_1>
       8:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_2>
       c:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_3>
      10:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_4>
      14:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_5>
      18:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_6>
      1c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_7>
      20:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_8>
      24:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_9>
      28:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__vector_10>
      2c:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <main>
      8a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Stack_Full>:
#include "stdio.h"
#include "../../BSW/LIB/STD_TYPES.h"
#include "Stack.h"

uint8 static Stack_Full(Stack* My_Stack)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <Stack_Full+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
    return 0;
      a0:	80 e0       	ldi	r24, 0x00	; 0
}
      a2:	0f 90       	pop	r0
      a4:	0f 90       	pop	r0
      a6:	cf 91       	pop	r28
      a8:	df 91       	pop	r29
      aa:	08 95       	ret

000000ac <Stack_Empty>:
uint8 static Stack_Empty(Stack* My_Stack)
{
      ac:	df 93       	push	r29
      ae:	cf 93       	push	r28
      b0:	00 d0       	rcall	.+0      	; 0xb2 <Stack_Empty+0x6>
      b2:	0f 92       	push	r0
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	9a 83       	std	Y+2, r25	; 0x02
      ba:	89 83       	std	Y+1, r24	; 0x01
    return (My_Stack->top==NULL);
      bc:	e9 81       	ldd	r30, Y+1	; 0x01
      be:	fa 81       	ldd	r31, Y+2	; 0x02
      c0:	80 81       	ld	r24, Z
      c2:	91 81       	ldd	r25, Z+1	; 0x01
      c4:	1b 82       	std	Y+3, r1	; 0x03
      c6:	00 97       	sbiw	r24, 0x00	; 0
      c8:	11 f4       	brne	.+4      	; 0xce <Stack_Empty+0x22>
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	8b 83       	std	Y+3, r24	; 0x03
      ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
      d0:	0f 90       	pop	r0
      d2:	0f 90       	pop	r0
      d4:	0f 90       	pop	r0
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <Stack_Creation>:

Status Stack_Creation(Stack* My_Stack)
{
      dc:	df 93       	push	r29
      de:	cf 93       	push	r28
      e0:	00 d0       	rcall	.+0      	; 0xe2 <Stack_Creation+0x6>
      e2:	0f 92       	push	r0
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	9b 83       	std	Y+3, r25	; 0x03
      ea:	8a 83       	std	Y+2, r24	; 0x02
    Status Local=E_NOT_OK;
      ec:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack)
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	9b 81       	ldd	r25, Y+3	; 0x03
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	61 f0       	breq	.+24     	; 0x10e <Stack_Creation+0x32>
    {
        //do nothing
    }
    else
    {
        My_Stack->Size=0;
      f6:	ea 81       	ldd	r30, Y+2	; 0x02
      f8:	fb 81       	ldd	r31, Y+3	; 0x03
      fa:	12 82       	std	Z+2, r1	; 0x02
      fc:	13 82       	std	Z+3, r1	; 0x03
      fe:	14 82       	std	Z+4, r1	; 0x04
     100:	15 82       	std	Z+5, r1	; 0x05
        My_Stack->top=NULL;
     102:	ea 81       	ldd	r30, Y+2	; 0x02
     104:	fb 81       	ldd	r31, Y+3	; 0x03
     106:	11 82       	std	Z+1, r1	; 0x01
     108:	10 82       	st	Z, r1
         Local=E_OK;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	89 83       	std	Y+1, r24	; 0x01

    }
return Local;
     10e:	89 81       	ldd	r24, Y+1	; 0x01
}
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	cf 91       	pop	r28
     118:	df 91       	pop	r29
     11a:	08 95       	ret

0000011c <Stack_Push>:
Status Stack_Push(Stack* My_Stack,StackEnery Variable)
{
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	29 97       	sbiw	r28, 0x09	; 9
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	9d 83       	std	Y+5, r25	; 0x05
     132:	8c 83       	std	Y+4, r24	; 0x04
     134:	4e 83       	std	Y+6, r20	; 0x06
     136:	5f 83       	std	Y+7, r21	; 0x07
     138:	68 87       	std	Y+8, r22	; 0x08
     13a:	79 87       	std	Y+9, r23	; 0x09
    Status Local=E_NOT_OK;
     13c:	1b 82       	std	Y+3, r1	; 0x03
    StackNode * Local_Pointer=(StackNode*)malloc(sizeof(StackNode));
     13e:	86 e0       	ldi	r24, 0x06	; 6
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 c6 10 	call	0x218c	; 0x218c <malloc>
     146:	9a 83       	std	Y+2, r25	; 0x02
     148:	89 83       	std	Y+1, r24	; 0x01

    if(NULL==My_Stack|| Stack_Full(My_Stack))
     14a:	8c 81       	ldd	r24, Y+4	; 0x04
     14c:	9d 81       	ldd	r25, Y+5	; 0x05
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	79 f1       	breq	.+94     	; 0x1b0 <Stack_Push+0x94>
     152:	8c 81       	ldd	r24, Y+4	; 0x04
     154:	9d 81       	ldd	r25, Y+5	; 0x05
     156:	0e 94 49 00 	call	0x92	; 0x92 <Stack_Full>
     15a:	88 23       	and	r24, r24
     15c:	49 f5       	brne	.+82     	; 0x1b0 <Stack_Push+0x94>
        //do nothing
    }
    else
    {

        Local_Pointer->entry=Variable;
     15e:	e9 81       	ldd	r30, Y+1	; 0x01
     160:	fa 81       	ldd	r31, Y+2	; 0x02
     162:	8e 81       	ldd	r24, Y+6	; 0x06
     164:	9f 81       	ldd	r25, Y+7	; 0x07
     166:	a8 85       	ldd	r26, Y+8	; 0x08
     168:	b9 85       	ldd	r27, Y+9	; 0x09
     16a:	82 83       	std	Z+2, r24	; 0x02
     16c:	93 83       	std	Z+3, r25	; 0x03
     16e:	a4 83       	std	Z+4, r26	; 0x04
     170:	b5 83       	std	Z+5, r27	; 0x05
        Local_Pointer->Next=My_Stack->top;
     172:	ec 81       	ldd	r30, Y+4	; 0x04
     174:	fd 81       	ldd	r31, Y+5	; 0x05
     176:	80 81       	ld	r24, Z
     178:	91 81       	ldd	r25, Z+1	; 0x01
     17a:	e9 81       	ldd	r30, Y+1	; 0x01
     17c:	fa 81       	ldd	r31, Y+2	; 0x02
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	80 83       	st	Z, r24
        My_Stack->top=Local_Pointer;
     182:	ec 81       	ldd	r30, Y+4	; 0x04
     184:	fd 81       	ldd	r31, Y+5	; 0x05
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	9a 81       	ldd	r25, Y+2	; 0x02
     18a:	91 83       	std	Z+1, r25	; 0x01
     18c:	80 83       	st	Z, r24
        My_Stack->Size++;
     18e:	ec 81       	ldd	r30, Y+4	; 0x04
     190:	fd 81       	ldd	r31, Y+5	; 0x05
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	a4 81       	ldd	r26, Z+4	; 0x04
     198:	b5 81       	ldd	r27, Z+5	; 0x05
     19a:	01 96       	adiw	r24, 0x01	; 1
     19c:	a1 1d       	adc	r26, r1
     19e:	b1 1d       	adc	r27, r1
     1a0:	ec 81       	ldd	r30, Y+4	; 0x04
     1a2:	fd 81       	ldd	r31, Y+5	; 0x05
     1a4:	82 83       	std	Z+2, r24	; 0x02
     1a6:	93 83       	std	Z+3, r25	; 0x03
     1a8:	a4 83       	std	Z+4, r26	; 0x04
     1aa:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	8b 83       	std	Y+3, r24	; 0x03
    }
return Local;
     1b0:	8b 81       	ldd	r24, Y+3	; 0x03

}
     1b2:	29 96       	adiw	r28, 0x09	; 9
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	cd bf       	out	0x3d, r28	; 61
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	08 95       	ret

000001c4 <Stack_Pop>:
Status Stack_Pop(Stack* My_Stack,StackEnery* Variable)
{
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	27 97       	sbiw	r28, 0x07	; 7
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	9d 83       	std	Y+5, r25	; 0x05
     1da:	8c 83       	std	Y+4, r24	; 0x04
     1dc:	7f 83       	std	Y+7, r23	; 0x07
     1de:	6e 83       	std	Y+6, r22	; 0x06
    StackNode* Local_Pointer= NULL;
     1e0:	1b 82       	std	Y+3, r1	; 0x03
     1e2:	1a 82       	std	Y+2, r1	; 0x02
    Status Local=E_NOT_OK;
     1e4:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack || NULL == Variable|| Stack_Empty(My_Stack))
     1e6:	8c 81       	ldd	r24, Y+4	; 0x04
     1e8:	9d 81       	ldd	r25, Y+5	; 0x05
     1ea:	00 97       	sbiw	r24, 0x00	; 0
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <Stack_Pop+0x2c>
     1ee:	3f c0       	rjmp	.+126    	; 0x26e <Stack_Pop+0xaa>
     1f0:	8e 81       	ldd	r24, Y+6	; 0x06
     1f2:	9f 81       	ldd	r25, Y+7	; 0x07
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	d9 f1       	breq	.+118    	; 0x26e <Stack_Pop+0xaa>
     1f8:	8c 81       	ldd	r24, Y+4	; 0x04
     1fa:	9d 81       	ldd	r25, Y+5	; 0x05
     1fc:	0e 94 56 00 	call	0xac	; 0xac <Stack_Empty>
     200:	88 23       	and	r24, r24
     202:	a9 f5       	brne	.+106    	; 0x26e <Stack_Pop+0xaa>
        //do nothing
    }
    else
    {

        *Variable=My_Stack->top->entry;
     204:	ec 81       	ldd	r30, Y+4	; 0x04
     206:	fd 81       	ldd	r31, Y+5	; 0x05
     208:	01 90       	ld	r0, Z+
     20a:	f0 81       	ld	r31, Z
     20c:	e0 2d       	mov	r30, r0
     20e:	82 81       	ldd	r24, Z+2	; 0x02
     210:	93 81       	ldd	r25, Z+3	; 0x03
     212:	a4 81       	ldd	r26, Z+4	; 0x04
     214:	b5 81       	ldd	r27, Z+5	; 0x05
     216:	ee 81       	ldd	r30, Y+6	; 0x06
     218:	ff 81       	ldd	r31, Y+7	; 0x07
     21a:	80 83       	st	Z, r24
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	a2 83       	std	Z+2, r26	; 0x02
     220:	b3 83       	std	Z+3, r27	; 0x03
        Local_Pointer= My_Stack->top;
     222:	ec 81       	ldd	r30, Y+4	; 0x04
     224:	fd 81       	ldd	r31, Y+5	; 0x05
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	9b 83       	std	Y+3, r25	; 0x03
     22c:	8a 83       	std	Y+2, r24	; 0x02
        My_Stack->top=My_Stack->top->Next;
     22e:	ec 81       	ldd	r30, Y+4	; 0x04
     230:	fd 81       	ldd	r31, Y+5	; 0x05
     232:	01 90       	ld	r0, Z+
     234:	f0 81       	ld	r31, Z
     236:	e0 2d       	mov	r30, r0
     238:	80 81       	ld	r24, Z
     23a:	91 81       	ldd	r25, Z+1	; 0x01
     23c:	ec 81       	ldd	r30, Y+4	; 0x04
     23e:	fd 81       	ldd	r31, Y+5	; 0x05
     240:	91 83       	std	Z+1, r25	; 0x01
     242:	80 83       	st	Z, r24
        free(Local_Pointer);
     244:	8a 81       	ldd	r24, Y+2	; 0x02
     246:	9b 81       	ldd	r25, Y+3	; 0x03
     248:	0e 94 73 11 	call	0x22e6	; 0x22e6 <free>
        My_Stack->Size--;
     24c:	ec 81       	ldd	r30, Y+4	; 0x04
     24e:	fd 81       	ldd	r31, Y+5	; 0x05
     250:	82 81       	ldd	r24, Z+2	; 0x02
     252:	93 81       	ldd	r25, Z+3	; 0x03
     254:	a4 81       	ldd	r26, Z+4	; 0x04
     256:	b5 81       	ldd	r27, Z+5	; 0x05
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	a1 09       	sbc	r26, r1
     25c:	b1 09       	sbc	r27, r1
     25e:	ec 81       	ldd	r30, Y+4	; 0x04
     260:	fd 81       	ldd	r31, Y+5	; 0x05
     262:	82 83       	std	Z+2, r24	; 0x02
     264:	93 83       	std	Z+3, r25	; 0x03
     266:	a4 83       	std	Z+4, r26	; 0x04
     268:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	89 83       	std	Y+1, r24	; 0x01
    }
return Local;
     26e:	89 81       	ldd	r24, Y+1	; 0x01
}
     270:	27 96       	adiw	r28, 0x07	; 7
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	cf 91       	pop	r28
     27e:	df 91       	pop	r29
     280:	08 95       	ret

00000282 <Stack_Display>:

Status Stack_Display(Stack* My_Stack) {
     282:	df 93       	push	r29
     284:	cf 93       	push	r28
     286:	00 d0       	rcall	.+0      	; 0x288 <Stack_Display+0x6>
     288:	00 d0       	rcall	.+0      	; 0x28a <Stack_Display+0x8>
     28a:	0f 92       	push	r0
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	9d 83       	std	Y+5, r25	; 0x05
     292:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     294:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* temp = NULL;
     296:	1a 82       	std	Y+2, r1	; 0x02
     298:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == My_Stack) {
     29a:	8c 81       	ldd	r24, Y+4	; 0x04
     29c:	9d 81       	ldd	r25, Y+5	; 0x05
     29e:	00 97       	sbiw	r24, 0x00	; 0
     2a0:	e1 f1       	breq	.+120    	; 0x31a <Stack_Display+0x98>
        // Do nothing
    } else {
        temp = My_Stack->top;
     2a2:	ec 81       	ldd	r30, Y+4	; 0x04
     2a4:	fd 81       	ldd	r31, Y+5	; 0x05
     2a6:	80 81       	ld	r24, Z
     2a8:	91 81       	ldd	r25, Z+1	; 0x01
     2aa:	9a 83       	std	Y+2, r25	; 0x02
     2ac:	89 83       	std	Y+1, r24	; 0x01
     2ae:	2f c0       	rjmp	.+94     	; 0x30e <Stack_Display+0x8c>
        while (temp != NULL) {
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
     2b0:	e9 81       	ldd	r30, Y+1	; 0x01
     2b2:	fa 81       	ldd	r31, Y+2	; 0x02
     2b4:	60 81       	ld	r22, Z
     2b6:	71 81       	ldd	r23, Z+1	; 0x01
     2b8:	e9 81       	ldd	r30, Y+1	; 0x01
     2ba:	fa 81       	ldd	r31, Y+2	; 0x02
     2bc:	22 81       	ldd	r18, Z+2	; 0x02
     2be:	33 81       	ldd	r19, Z+3	; 0x03
     2c0:	44 81       	ldd	r20, Z+4	; 0x04
     2c2:	55 81       	ldd	r21, Z+5	; 0x05
     2c4:	8d b7       	in	r24, 0x3d	; 61
     2c6:	9e b7       	in	r25, 0x3e	; 62
     2c8:	08 97       	sbiw	r24, 0x08	; 8
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	9e bf       	out	0x3e, r25	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	8d bf       	out	0x3d, r24	; 61
     2d4:	ed b7       	in	r30, 0x3d	; 61
     2d6:	fe b7       	in	r31, 0x3e	; 62
     2d8:	31 96       	adiw	r30, 0x01	; 1
     2da:	80 e6       	ldi	r24, 0x60	; 96
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	91 83       	std	Z+1, r25	; 0x01
     2e0:	80 83       	st	Z, r24
     2e2:	73 83       	std	Z+3, r23	; 0x03
     2e4:	62 83       	std	Z+2, r22	; 0x02
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	0e 94 cb 11 	call	0x2396	; 0x2396 <printf>
     2f2:	8d b7       	in	r24, 0x3d	; 61
     2f4:	9e b7       	in	r25, 0x3e	; 62
     2f6:	08 96       	adiw	r24, 0x08	; 8
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	9e bf       	out	0x3e, r25	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	8d bf       	out	0x3d, r24	; 61
            temp = temp->Next;
     302:	e9 81       	ldd	r30, Y+1	; 0x01
     304:	fa 81       	ldd	r31, Y+2	; 0x02
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	9a 83       	std	Y+2, r25	; 0x02
     30c:	89 83       	std	Y+1, r24	; 0x01
    StackNode* temp = NULL;
    if (NULL == My_Stack) {
        // Do nothing
    } else {
        temp = My_Stack->top;
        while (temp != NULL) {
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	00 97       	sbiw	r24, 0x00	; 0
     314:	69 f6       	brne	.-102    	; 0x2b0 <Stack_Display+0x2e>
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
            temp = temp->Next;
        }
        Local = E_OK;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	cf 91       	pop	r28
     328:	df 91       	pop	r29
     32a:	08 95       	ret

0000032c <Clear_Stack>:
Status Clear_Stack(Stack* My_Stack)
{
     32c:	df 93       	push	r29
     32e:	cf 93       	push	r28
     330:	00 d0       	rcall	.+0      	; 0x332 <Clear_Stack+0x6>
     332:	00 d0       	rcall	.+0      	; 0x334 <Clear_Stack+0x8>
     334:	0f 92       	push	r0
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	9d 83       	std	Y+5, r25	; 0x05
     33c:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     33e:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* Local_pointer = NULL;
     340:	1a 82       	std	Y+2, r1	; 0x02
     342:	19 82       	std	Y+1, r1	; 0x01

   Local_pointer=My_Stack->top;
     344:	ec 81       	ldd	r30, Y+4	; 0x04
     346:	fd 81       	ldd	r31, Y+5	; 0x05
     348:	80 81       	ld	r24, Z
     34a:	91 81       	ldd	r25, Z+1	; 0x01
     34c:	9a 83       	std	Y+2, r25	; 0x02
     34e:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == My_Stack)
     350:	8c 81       	ldd	r24, Y+4	; 0x04
     352:	9d 81       	ldd	r25, Y+5	; 0x05
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	f9 f0       	breq	.+62     	; 0x396 <Clear_Stack+0x6a>
     358:	12 c0       	rjmp	.+36     	; 0x37e <Clear_Stack+0x52>
    }
    else
    {
        while(Local_pointer)
        {
           Local_pointer= Local_pointer->Next;
     35a:	e9 81       	ldd	r30, Y+1	; 0x01
     35c:	fa 81       	ldd	r31, Y+2	; 0x02
     35e:	80 81       	ld	r24, Z
     360:	91 81       	ldd	r25, Z+1	; 0x01
     362:	9a 83       	std	Y+2, r25	; 0x02
     364:	89 83       	std	Y+1, r24	; 0x01
            free(My_Stack->top);
     366:	ec 81       	ldd	r30, Y+4	; 0x04
     368:	fd 81       	ldd	r31, Y+5	; 0x05
     36a:	80 81       	ld	r24, Z
     36c:	91 81       	ldd	r25, Z+1	; 0x01
     36e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <free>
            My_Stack->top=Local_pointer;
     372:	ec 81       	ldd	r30, Y+4	; 0x04
     374:	fd 81       	ldd	r31, Y+5	; 0x05
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	91 83       	std	Z+1, r25	; 0x01
     37c:	80 83       	st	Z, r24
    {
        // Do nothing
    }
    else
    {
        while(Local_pointer)
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	51 f7       	brne	.-44     	; 0x35a <Clear_Stack+0x2e>
        {
           Local_pointer= Local_pointer->Next;
            free(My_Stack->top);
            My_Stack->top=Local_pointer;
        }
        My_Stack->Size=0;
     386:	ec 81       	ldd	r30, Y+4	; 0x04
     388:	fd 81       	ldd	r31, Y+5	; 0x05
     38a:	12 82       	std	Z+2, r1	; 0x02
     38c:	13 82       	std	Z+3, r1	; 0x03
     38e:	14 82       	std	Z+4, r1	; 0x04
     390:	15 82       	std	Z+5, r1	; 0x05
        Local = E_OK;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
     396:	8b 81       	ldd	r24, Y+3	; 0x03
}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	cf 91       	pop	r28
     3a4:	df 91       	pop	r29
     3a6:	08 95       	ret

000003a8 <Stack_Size>:
Status Stack_Size(Stack* My_Stack,StackEnery* Variable)
{
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <Stack_Size+0x6>
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <Stack_Size+0x8>
     3b0:	0f 92       	push	r0
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	9b 83       	std	Y+3, r25	; 0x03
     3b8:	8a 83       	std	Y+2, r24	; 0x02
     3ba:	7d 83       	std	Y+5, r23	; 0x05
     3bc:	6c 83       	std	Y+4, r22	; 0x04
     Status Local = E_NOT_OK;
     3be:	19 82       	std	Y+1, r1	; 0x01

    if (NULL == My_Stack)
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	9b 81       	ldd	r25, Y+3	; 0x03
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	71 f0       	breq	.+28     	; 0x3e4 <Stack_Size+0x3c>
    {
        // Do nothing
    }
    else
    {
        *Variable  =My_Stack->Size;
     3c8:	ea 81       	ldd	r30, Y+2	; 0x02
     3ca:	fb 81       	ldd	r31, Y+3	; 0x03
     3cc:	82 81       	ldd	r24, Z+2	; 0x02
     3ce:	93 81       	ldd	r25, Z+3	; 0x03
     3d0:	a4 81       	ldd	r26, Z+4	; 0x04
     3d2:	b5 81       	ldd	r27, Z+5	; 0x05
     3d4:	ec 81       	ldd	r30, Y+4	; 0x04
     3d6:	fd 81       	ldd	r31, Y+5	; 0x05
     3d8:	80 83       	st	Z, r24
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	a2 83       	std	Z+2, r26	; 0x02
     3de:	b3 83       	std	Z+3, r27	; 0x03
         Local = E_OK;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local;
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	cf 91       	pop	r28
     3f2:	df 91       	pop	r29
     3f4:	08 95       	ret

000003f6 <TIMER2_DutyCycle>:
#include "../inc/TIMER2_interface.h"
#include "../inc/TIMER2_private.h"
#include "../inc/TIMER2_register.h"

void TIMER2_DutyCycle(uint8 Copy_uint8Duty)
{
     3f6:	df 93       	push	r29
     3f8:	cf 93       	push	r28
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <TIMER2_DutyCycle+0x6>
     3fc:	0f 92       	push	r0
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
     404:	1a 82       	std	Y+2, r1	; 0x02
     406:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	88 2f       	mov	r24, r24
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	98 2f       	mov	r25, r24
     410:	88 27       	eor	r24, r24
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	9a 81       	ldd	r25, Y+2	; 0x02
     41a:	24 e6       	ldi	r18, 0x64	; 100
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	b9 01       	movw	r22, r18
     420:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodhi4>
     424:	cb 01       	movw	r24, r22
     426:	9a 83       	std	Y+2, r25	; 0x02
     428:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Local_VCalue;
     42a:	e3 e4       	ldi	r30, 0x43	; 67
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	80 83       	st	Z, r24
}
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <TIMER2_Delay>:


void TIMER2_Delay(uint16 Copy_uint16Delay)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	00 d0       	rcall	.+0      	; 0x444 <TIMER2_Delay+0x6>
     444:	00 d0       	rcall	.+0      	; 0x446 <TIMER2_Delay+0x8>
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	9c 83       	std	Y+4, r25	; 0x04
     44c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
     44e:	1a 82       	std	Y+2, r1	; 0x02
     450:	19 82       	std	Y+1, r1	; 0x01
     452:	10 c0       	rjmp	.+32     	; 0x474 <TIMER2_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIFR_Reg->OCF2 == 0);
     454:	e8 e5       	ldi	r30, 0x58	; 88
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	80 78       	andi	r24, 0x80	; 128
     45c:	88 23       	and	r24, r24
     45e:	d1 f3       	breq	.-12     	; 0x454 <TIMER2_Delay+0x16>
	TIFR_Reg->OCF2 =1;
     460:	e8 e5       	ldi	r30, 0x58	; 88
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	80 68       	ori	r24, 0x80	; 128
     468:	80 83       	st	Z, r24
	Counter++;
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
void TIMER2_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
     474:	29 81       	ldd	r18, Y+1	; 0x01
     476:	3a 81       	ldd	r19, Y+2	; 0x02
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	28 17       	cp	r18, r24
     47e:	39 07       	cpc	r19, r25
     480:	48 f3       	brcs	.-46     	; 0x454 <TIMER2_Delay+0x16>
	Counter++;


	}

}
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	cf 91       	pop	r28
     48c:	df 91       	pop	r29
     48e:	08 95       	ret

00000490 <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Reg->CS2x= CLCK_SELECTION;
     498:	e5 e4       	ldi	r30, 0x45	; 69
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	88 7f       	andi	r24, 0xF8	; 248
     4a0:	84 60       	ori	r24, 0x04	; 4
     4a2:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=DISABLE;
TCCR2_Reg->COM2x=CORRECT_PWM_OUTPUT_MODE;


#elif TIMER_MODE==CTC_MODE
TCCR2_Reg->WGM20=DISABLE;
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	8f 7b       	andi	r24, 0xBF	; 191
     4ac:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=ENABLE;
     4ae:	e5 e4       	ldi	r30, 0x45	; 69
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	88 60       	ori	r24, 0x08	; 8
     4b6:	80 83       	st	Z, r24
TCCR2_Reg->COM2x=CTC_OUTPUT_MODE;
     4b8:	e5 e4       	ldi	r30, 0x45	; 69
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	8f 7c       	andi	r24, 0xCF	; 207
     4c0:	80 61       	ori	r24, 0x10	; 16
     4c2:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
TIMSK_Reg->TOIE2=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
TIMSK_Reg->OCIE2=ENABLE;
     4c4:	e9 e5       	ldi	r30, 0x59	; 89
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	80 68       	ori	r24, 0x80	; 128
     4cc:	80 83       	st	Z, r24
#endif


}
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	08 95       	ret

000004d4 <TIMER2_voiSetPreLoadValue>:


void TIMER2_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
     4d4:	df 93       	push	r29
     4d6:	cf 93       	push	r28
     4d8:	0f 92       	push	r0
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Reg=Copy_uint8Value;
     4e0:	e4 e4       	ldi	r30, 0x44	; 68
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	80 83       	st	Z, r24
}
     4e8:	0f 90       	pop	r0
     4ea:	cf 91       	pop	r28
     4ec:	df 91       	pop	r29
     4ee:	08 95       	ret

000004f0 <TIMER2_voiSetCompareMatchValue>:


void TIMER2_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	0f 92       	push	r0
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Copy_uint8Value;
     4fc:	e3 e4       	ldi	r30, 0x43	; 67
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	80 83       	st	Z, r24
}
     504:	0f 90       	pop	r0
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	08 95       	ret

0000050c <Timer2_Timer2OVFCallBackFunc>:

Status_t Timer2_Timer2OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	00 d0       	rcall	.+0      	; 0x512 <Timer2_Timer2OVFCallBackFunc+0x6>
     512:	0f 92       	push	r0
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	9b 83       	std	Y+3, r25	; 0x03
     51a:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
     51c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     51e:	8a 81       	ldd	r24, Y+2	; 0x02
     520:	9b 81       	ldd	r25, Y+3	; 0x03
     522:	00 97       	sbiw	r24, 0x00	; 0
     524:	19 f4       	brne	.+6      	; 0x52c <Timer2_Timer2OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER2_POINTER_Err;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	06 c0       	rjmp	.+12     	; 0x538 <Timer2_Timer2OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	9b 81       	ldd	r25, Y+3	; 0x03
     530:	90 93 ab 00 	sts	0x00AB, r25
     534:	80 93 aa 00 	sts	0x00AA, r24
	}

	return Local_ErrorState;
     538:	89 81       	ldd	r24, Y+1	; 0x01
}
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	cf 91       	pop	r28
     542:	df 91       	pop	r29
     544:	08 95       	ret

00000546 <Timer2_Timer2CTCCallBackFunc>:

Status_t Timer2_Timer2CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
     546:	df 93       	push	r29
     548:	cf 93       	push	r28
     54a:	00 d0       	rcall	.+0      	; 0x54c <Timer2_Timer2CTCCallBackFunc+0x6>
     54c:	0f 92       	push	r0
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	9b 83       	std	Y+3, r25	; 0x03
     554:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
     556:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	9b 81       	ldd	r25, Y+3	; 0x03
     55c:	00 97       	sbiw	r24, 0x00	; 0
     55e:	19 f4       	brne	.+6      	; 0x566 <Timer2_Timer2CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER2_POINTER_Err;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	06 c0       	rjmp	.+12     	; 0x572 <Timer2_Timer2CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	90 93 a9 00 	sts	0x00A9, r25
     56e:	80 93 a8 00 	sts	0x00A8, r24
		}

	return Local_ErrorState;
     572:	89 81       	ldd	r24, Y+1	; 0x01
}
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	cf 91       	pop	r28
     57c:	df 91       	pop	r29
     57e:	08 95       	ret

00000580 <__vector_4>:




/*TIMER0 COMPARE MATCH*/
void __vector_4(void){
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
     5aa:	e0 91 a8 00 	lds	r30, 0x00A8
     5ae:	f0 91 a9 00 	lds	r31, 0x00A9
     5b2:	09 95       	icall
}
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <__vector_5>:

/*TIMER0 OVERFLOW*/
void __vector_5(void){
     5da:	1f 92       	push	r1
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	11 24       	eor	r1, r1
     5e4:	2f 93       	push	r18
     5e6:	3f 93       	push	r19
     5e8:	4f 93       	push	r20
     5ea:	5f 93       	push	r21
     5ec:	6f 93       	push	r22
     5ee:	7f 93       	push	r23
     5f0:	8f 93       	push	r24
     5f2:	9f 93       	push	r25
     5f4:	af 93       	push	r26
     5f6:	bf 93       	push	r27
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
     604:	e0 91 aa 00 	lds	r30, 0x00AA
     608:	f0 91 ab 00 	lds	r31, 0x00AB
     60c:	09 95       	icall
}
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <TIMER1_voidInit>:
#include "../inc/TIMER1_register.h"
#include "../inc/TIMER1_config.h"


void TIMER1_voidInit(void)
{
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
	/*Clock selection*/
TCCR1B_Reg->CS1X= CLCK_SELECT;
     63c:	ee e4       	ldi	r30, 0x4E	; 78
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	88 7f       	andi	r24, 0xF8	; 248
     644:	84 60       	ori	r24, 0x04	; 4
     646:	80 83       	st	Z, r24

/*Waveform generation mode*/
TCCR1A_Reg->WGM1X=WAVE_GEN & 0b0011;
     648:	ef e4       	ldi	r30, 0x4F	; 79
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	8c 7f       	andi	r24, 0xFC	; 252
     650:	80 83       	st	Z, r24
TCCR1B_Reg->WGM1XX=(WAVE_GEN>>2) & 0b0011;
     652:	ee e4       	ldi	r30, 0x4E	; 78
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
     658:	87 7e       	andi	r24, 0xE7	; 231
     65a:	88 60       	ori	r24, 0x08	; 8
     65c:	80 83       	st	Z, r24

#ifdef CHANNEL_A

#if TIMER1A_MODE == TIMER1_NON_PWM

TCCR1A_Reg->COM1AX=TIMER1A_OUT_MODE;
     65e:	ef e4       	ldi	r30, 0x4F	; 79
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	8f 73       	andi	r24, 0x3F	; 63
     666:	80 83       	st	Z, r24

#ifdef CHANNEL_B

#if TIMER1B_MODE == TIMER1_NON_PWM

		TCCR1A_Reg->COM1BX=TIMER1B_OUT_MODE;
     668:	ef e4       	ldi	r30, 0x4F	; 79
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	8f 7c       	andi	r24, 0xCF	; 207
     670:	80 83       	st	Z, r24
#endif

/*INTERRUPT ENABLE*/
#ifdef TIMER1_COMPARE_MATCH_A_ISR_ENABLE

		TIMSK_Reg->OCIE1A=Enable;
     672:	e9 e5       	ldi	r30, 0x59	; 89
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	80 61       	ori	r24, 0x10	; 16
     67a:	80 83       	st	Z, r24
#ifdef TIMER1_INPUT_CAPTURE_INTERRUPT
		TIMSK_Reg->TICIE1=Enable;
#endif


}
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	08 95       	ret

00000682 <TIMER1_voidSetChannelACompMatch>:


void TIMER1_voidSetChannelACompMatch(uint16 Copy_uint16Data)
{
     682:	df 93       	push	r29
     684:	cf 93       	push	r28
     686:	00 d0       	rcall	.+0      	; 0x688 <TIMER1_voidSetChannelACompMatch+0x6>
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	9a 83       	std	Y+2, r25	; 0x02
     68e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Reg=Copy_uint16Data;
     690:	ea e4       	ldi	r30, 0x4A	; 74
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	91 83       	std	Z+1, r25	; 0x01
     69a:	80 83       	st	Z, r24
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	08 95       	ret

000006a6 <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(uint16 Copy_uint16Data)
{
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <TIMER1_voidSetChannelBCompMatch+0x6>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Reg=Copy_uint16Data;
     6b4:	e8 e4       	ldi	r30, 0x48	; 72
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	91 83       	std	Z+1, r25	; 0x01
     6be:	80 83       	st	Z, r24
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	08 95       	ret

000006ca <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(uint16 Copy_uint16ICR)
{
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <TIMER1_voidSetICR+0x6>
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	9a 83       	std	Y+2, r25	; 0x02
     6d6:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Reg=Copy_uint16ICR;
     6d8:	e6 e4       	ldi	r30, 0x46	; 70
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	91 83       	std	Z+1, r25	; 0x01
     6e2:	80 83       	st	Z, r24
}
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <TIMER1_voidSetTimerValue>:
void TIMER1_voidSetTimerValue(uint16 Copy_uint16Value)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <TIMER1_voidSetTimerValue+0x6>
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	9a 83       	std	Y+2, r25	; 0x02
     6fa:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Reg=	Copy_uint16Value;
     6fc:	ec e4       	ldi	r30, 0x4C	; 76
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	91 83       	std	Z+1, r25	; 0x01
     706:	80 83       	st	Z, r24
}
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <TIMER1_uint16GetTimerValue>:
uint16 TIMER1_uint16GetTimerValue(void)
{
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
return TCNT1_Reg;
     71a:	ec e4       	ldi	r30, 0x4C	; 76
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
}
     722:	cf 91       	pop	r28
     724:	df 91       	pop	r29
     726:	08 95       	ret

00000728 <TIMER1_CTCASetCallBck>:


Timer1_status TIMER1_CTCASetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	00 d0       	rcall	.+0      	; 0x72e <TIMER1_CTCASetCallBck+0x6>
     72e:	0f 92       	push	r0
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	9b 83       	std	Y+3, r25	; 0x03
     736:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
     738:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Copy_pvCallBackFunc)
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	9b 81       	ldd	r25, Y+3	; 0x03
     73e:	00 97       	sbiw	r24, 0x00	; 0
     740:	19 f4       	brne	.+6      	; 0x748 <TIMER1_CTCASetCallBck+0x20>
	{
		Local_ErrorState=TIMER1_PONTER_ERR;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	06 c0       	rjmp	.+12     	; 0x754 <TIMER1_CTCASetCallBck+0x2c>
	}
	else
	{
		TIMER1_pvCallBackFunc_CTC_A=Copy_pvCallBackFunc;
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	90 93 ad 00 	sts	0x00AD, r25
     750:	80 93 ac 00 	sts	0x00AC, r24
	}
return Local_ErrorState;
     754:	89 81       	ldd	r24, Y+1	; 0x01
}
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <TIMER1_CTCBSetCallBck>:
Timer1_status TIMER1_CTCBSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	00 d0       	rcall	.+0      	; 0x768 <TIMER1_CTCBSetCallBck+0x6>
     768:	0f 92       	push	r0
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	9b 83       	std	Y+3, r25	; 0x03
     770:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_status Local_ErrorState=TIMER1_OK;
     772:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	9b 81       	ldd	r25, Y+3	; 0x03
     778:	00 97       	sbiw	r24, 0x00	; 0
     77a:	19 f4       	brne	.+6      	; 0x782 <TIMER1_CTCBSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	89 83       	std	Y+1, r24	; 0x01
     780:	06 c0       	rjmp	.+12     	; 0x78e <TIMER1_CTCBSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CTC_B=Copy_pvCallBackFunc;
     782:	8a 81       	ldd	r24, Y+2	; 0x02
     784:	9b 81       	ldd	r25, Y+3	; 0x03
     786:	90 93 af 00 	sts	0x00AF, r25
     78a:	80 93 ae 00 	sts	0x00AE, r24
		}
	return Local_ErrorState;
     78e:	89 81       	ldd	r24, Y+1	; 0x01
}
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	cf 91       	pop	r28
     798:	df 91       	pop	r29
     79a:	08 95       	ret

0000079c <TIMER1_OVSetCallBck>:


Timer1_status TIMER1_OVSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <TIMER1_OVSetCallBck+0x6>
     7a2:	0f 92       	push	r0
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	9b 83       	std	Y+3, r25	; 0x03
     7aa:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
     7ac:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	19 f4       	brne	.+6      	; 0x7bc <TIMER1_OVSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <TIMER1_OVSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_OV=Copy_pvCallBackFunc;
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	90 93 b1 00 	sts	0x00B1, r25
     7c4:	80 93 b0 00 	sts	0x00B0, r24
		}
	return Local_ErrorState;
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	cf 91       	pop	r28
     7d2:	df 91       	pop	r29
     7d4:	08 95       	ret

000007d6 <TIMER1_CAPTURESetCallBck>:


Timer1_status TIMER1_CAPTURESetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	00 d0       	rcall	.+0      	; 0x7dc <TIMER1_CAPTURESetCallBck+0x6>
     7dc:	0f 92       	push	r0
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	9b 83       	std	Y+3, r25	; 0x03
     7e4:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
     7e6:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	9b 81       	ldd	r25, Y+3	; 0x03
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <TIMER1_CAPTURESetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	06 c0       	rjmp	.+12     	; 0x802 <TIMER1_CAPTURESetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CaptEvnt=Copy_pvCallBackFunc;
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	9b 81       	ldd	r25, Y+3	; 0x03
     7fa:	90 93 b3 00 	sts	0x00B3, r25
     7fe:	80 93 b2 00 	sts	0x00B2, r24
		}
	return Local_ErrorState;
     802:	89 81       	ldd	r24, Y+1	; 0x01
}
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	cf 91       	pop	r28
     80c:	df 91       	pop	r29
     80e:	08 95       	ret

00000810 <__vector_6>:



void __vector_6 (void)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62

	TIMER1_pvCallBackFunc_CaptEvnt();
     83a:	e0 91 b2 00 	lds	r30, 0x00B2
     83e:	f0 91 b3 00 	lds	r31, 0x00B3
     842:	09 95       	icall
	TIFR_Reg->ICF1=Enable;
     844:	e8 e5       	ldi	r30, 0x58	; 88
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	80 62       	ori	r24, 0x20	; 32
     84c:	80 83       	st	Z, r24
}
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	ff 91       	pop	r31
     854:	ef 91       	pop	r30
     856:	bf 91       	pop	r27
     858:	af 91       	pop	r26
     85a:	9f 91       	pop	r25
     85c:	8f 91       	pop	r24
     85e:	7f 91       	pop	r23
     860:	6f 91       	pop	r22
     862:	5f 91       	pop	r21
     864:	4f 91       	pop	r20
     866:	3f 91       	pop	r19
     868:	2f 91       	pop	r18
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <__vector_7>:

void __vector_7 (void)
{
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	2f 93       	push	r18
     880:	3f 93       	push	r19
     882:	4f 93       	push	r20
     884:	5f 93       	push	r21
     886:	6f 93       	push	r22
     888:	7f 93       	push	r23
     88a:	8f 93       	push	r24
     88c:	9f 93       	push	r25
     88e:	af 93       	push	r26
     890:	bf 93       	push	r27
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_A();
     89e:	e0 91 ac 00 	lds	r30, 0x00AC
     8a2:	f0 91 ad 00 	lds	r31, 0x00AD
     8a6:	09 95       	icall
}
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0
     8ca:	1f 90       	pop	r1
     8cc:	18 95       	reti

000008ce <__vector_8>:

void __vector_8 (void)
{
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_B();
     8f8:	e0 91 ae 00 	lds	r30, 0x00AE
     8fc:	f0 91 af 00 	lds	r31, 0x00AF
     900:	09 95       	icall
}
     902:	cf 91       	pop	r28
     904:	df 91       	pop	r29
     906:	ff 91       	pop	r31
     908:	ef 91       	pop	r30
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <__vector_9>:


void __vector_9 (void)
{
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	2f 93       	push	r18
     934:	3f 93       	push	r19
     936:	4f 93       	push	r20
     938:	5f 93       	push	r21
     93a:	6f 93       	push	r22
     93c:	7f 93       	push	r23
     93e:	8f 93       	push	r24
     940:	9f 93       	push	r25
     942:	af 93       	push	r26
     944:	bf 93       	push	r27
     946:	ef 93       	push	r30
     948:	ff 93       	push	r31
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_OV();
     952:	e0 91 b0 00 	lds	r30, 0x00B0
     956:	f0 91 b1 00 	lds	r31, 0x00B1
     95a:	09 95       	icall
}
     95c:	cf 91       	pop	r28
     95e:	df 91       	pop	r29
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	bf 91       	pop	r27
     966:	af 91       	pop	r26
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	7f 91       	pop	r23
     96e:	6f 91       	pop	r22
     970:	5f 91       	pop	r21
     972:	4f 91       	pop	r20
     974:	3f 91       	pop	r19
     976:	2f 91       	pop	r18
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	0f 90       	pop	r0
     97e:	1f 90       	pop	r1
     980:	18 95       	reti

00000982 <TIMER0_DutyCycle>:
#include "../inc/TIMER0_private.h"
#include "../inc/TIMER0_register.h"
#include "../inc/TIMER0_config.h"

void TIMER0_DutyCycle(uint8 Copy_uint8Duty)
{
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	00 d0       	rcall	.+0      	; 0x988 <TIMER0_DutyCycle+0x6>
     988:	0f 92       	push	r0
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
     990:	1a 82       	std	Y+2, r1	; 0x02
     992:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	98 2f       	mov	r25, r24
     99c:	88 27       	eor	r24, r24
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	24 e6       	ldi	r18, 0x64	; 100
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	b9 01       	movw	r22, r18
     9ac:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodhi4>
     9b0:	cb 01       	movw	r24, r22
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Local_VCalue;
     9b6:	ec e5       	ldi	r30, 0x5C	; 92
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	80 83       	st	Z, r24
}
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	cf 91       	pop	r28
     9c6:	df 91       	pop	r29
     9c8:	08 95       	ret

000009ca <TIMER0_Delay>:


void TIMER0_Delay(uint16 Copy_uint16Delay)
{
     9ca:	df 93       	push	r29
     9cc:	cf 93       	push	r28
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <TIMER0_Delay+0x6>
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <TIMER0_Delay+0x8>
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
     9da:	1a 82       	std	Y+2, r1	; 0x02
     9dc:	19 82       	std	Y+1, r1	; 0x01
     9de:	10 c0       	rjmp	.+32     	; 0xa00 <TIMER0_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIMER0_TIFR_Reg->OCF0 == 0);
     9e0:	e8 e5       	ldi	r30, 0x58	; 88
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	82 70       	andi	r24, 0x02	; 2
     9e8:	88 23       	and	r24, r24
     9ea:	d1 f3       	breq	.-12     	; 0x9e0 <TIMER0_Delay+0x16>
	TIMER0_TIFR_Reg->OCF0 =1;
     9ec:	e8 e5       	ldi	r30, 0x58	; 88
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	82 60       	ori	r24, 0x02	; 2
     9f4:	80 83       	st	Z, r24
	Counter++;
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
     a00:	29 81       	ldd	r18, Y+1	; 0x01
     a02:	3a 81       	ldd	r19, Y+2	; 0x02
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	28 17       	cp	r18, r24
     a0a:	39 07       	cpc	r19, r25
     a0c:	48 f3       	brcs	.-46     	; 0x9e0 <TIMER0_Delay+0x16>
	Counter++;


	}

}
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	08 95       	ret

00000a1c <TIMER0_voidInit>:
void TIMER0_voidInit(void)
{
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
	/*clock selection*/
	TIMER0_TCCR0_Reg->CS0x= CLCK_SELECTION;
     a24:	e3 e5       	ldi	r30, 0x53	; 83
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	88 7f       	andi	r24, 0xF8	; 248
     a2c:	82 60       	ori	r24, 0x02	; 2
     a2e:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM00=DISABLE;
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
	TIMER0_TCCR0_Reg->COM0=CTC_OUTPUT_MODE;

#elif TIMER_MODE==FAST_PWM_MODE
	TIMER0_TCCR0_Reg->WGM00=ENABLE;
     a30:	e3 e5       	ldi	r30, 0x53	; 83
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	80 64       	ori	r24, 0x40	; 64
     a38:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
     a3a:	e3 e5       	ldi	r30, 0x53	; 83
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	88 60       	ori	r24, 0x08	; 8
     a42:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->COM0=FAST_PWM_OUTPUT_MODE;
     a44:	e3 e5       	ldi	r30, 0x53	; 83
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	8f 7c       	andi	r24, 0xCF	; 207
     a4c:	80 62       	ori	r24, 0x20	; 32
     a4e:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
	TIMER0_TIMSK_Reg->TOIE0=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
	TIMER0_TIMSK_Reg->OCIE0=ENABLE;
     a50:	e9 e5       	ldi	r30, 0x59	; 89
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	82 60       	ori	r24, 0x02	; 2
     a58:	80 83       	st	Z, r24
#endif


}
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <TIMER0_voiSetPreLoadValue>:


void TIMER0_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	0f 92       	push	r0
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_Reg=Copy_uint8Value;
     a6c:	e2 e5       	ldi	r30, 0x52	; 82
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	80 83       	st	Z, r24
}
     a74:	0f 90       	pop	r0
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <TIMER0_voiSetCompareMatchValue>:


void TIMER0_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	0f 92       	push	r0
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Copy_uint8Value;
     a88:	ec e5       	ldi	r30, 0x5C	; 92
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	80 83       	st	Z, r24
}
     a90:	0f 90       	pop	r0
     a92:	cf 91       	pop	r28
     a94:	df 91       	pop	r29
     a96:	08 95       	ret

00000a98 <Timer0_Timer0OVFCallBackFunc>:

Status_t Timer0_Timer0OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <Timer0_Timer0OVFCallBackFunc+0x6>
     a9e:	0f 92       	push	r0
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	9b 83       	std	Y+3, r25	; 0x03
     aa6:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
     aa8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	9b 81       	ldd	r25, Y+3	; 0x03
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	19 f4       	brne	.+6      	; 0xab8 <Timer0_Timer0OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER_POINTER_Err;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <Timer0_Timer0OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	9b 81       	ldd	r25, Y+3	; 0x03
     abc:	90 93 b7 00 	sts	0x00B7, r25
     ac0:	80 93 b6 00 	sts	0x00B6, r24
	}

	return Local_ErrorState;
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	cf 91       	pop	r28
     ace:	df 91       	pop	r29
     ad0:	08 95       	ret

00000ad2 <Timer0_Timer0CTCCallBackFunc>:

Status_t Timer0_Timer0CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
     ad2:	df 93       	push	r29
     ad4:	cf 93       	push	r28
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <Timer0_Timer0CTCCallBackFunc+0x6>
     ad8:	0f 92       	push	r0
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	9b 83       	std	Y+3, r25	; 0x03
     ae0:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
     ae2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     ae4:	8a 81       	ldd	r24, Y+2	; 0x02
     ae6:	9b 81       	ldd	r25, Y+3	; 0x03
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	19 f4       	brne	.+6      	; 0xaf2 <Timer0_Timer0CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER_POINTER_Err;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	06 c0       	rjmp	.+12     	; 0xafe <Timer0_Timer0CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	9b 81       	ldd	r25, Y+3	; 0x03
     af6:	90 93 b5 00 	sts	0x00B5, r25
     afa:	80 93 b4 00 	sts	0x00B4, r24
		}

	return Local_ErrorState;
     afe:	89 81       	ldd	r24, Y+1	; 0x01
}
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	cf 91       	pop	r28
     b08:	df 91       	pop	r29
     b0a:	08 95       	ret

00000b0c <__vector_10>:




/*TIMER0 COMPARE MATCH*/
void __vector_10(void){
     b0c:	1f 92       	push	r1
     b0e:	0f 92       	push	r0
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	0f 92       	push	r0
     b14:	11 24       	eor	r1, r1
     b16:	2f 93       	push	r18
     b18:	3f 93       	push	r19
     b1a:	4f 93       	push	r20
     b1c:	5f 93       	push	r21
     b1e:	6f 93       	push	r22
     b20:	7f 93       	push	r23
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
     b26:	af 93       	push	r26
     b28:	bf 93       	push	r27
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
     b2e:	df 93       	push	r29
     b30:	cf 93       	push	r28
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
     b36:	e0 91 b4 00 	lds	r30, 0x00B4
     b3a:	f0 91 b5 00 	lds	r31, 0x00B5
     b3e:	09 95       	icall
}
     b40:	cf 91       	pop	r28
     b42:	df 91       	pop	r29
     b44:	ff 91       	pop	r31
     b46:	ef 91       	pop	r30
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_11>:

/*TIMER0 OVERFLOW*/
void __vector_11(void){
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
     b90:	e0 91 b6 00 	lds	r30, 0x00B6
     b94:	f0 91 b7 00 	lds	r31, 0x00B7
     b98:	09 95       	icall
}
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <PORT_voidInit>:
#include"../inc/PORT_config.h"



void PORT_voidInit(void)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62

DDRA=PORTA_DIR;
     bc8:	ea e3       	ldi	r30, 0x3A	; 58
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	80 83       	st	Z, r24
DDRB=PORTB_DIR;
     bd0:	e7 e3       	ldi	r30, 0x37	; 55
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	87 e0       	ldi	r24, 0x07	; 7
     bd6:	80 83       	st	Z, r24
DDRC=PORTC_DIR;
     bd8:	e4 e3       	ldi	r30, 0x34	; 52
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	87 e0       	ldi	r24, 0x07	; 7
     bde:	80 83       	st	Z, r24
DDRD=PORTD_DIR;
     be0:	e1 e3       	ldi	r30, 0x31	; 49
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	10 82       	st	Z, r1

PORTA=PORTA_INIT_VALUE;
     be6:	eb e3       	ldi	r30, 0x3B	; 59
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	10 82       	st	Z, r1
PORTB=PORTB_INIT_VALUE;
     bec:	e8 e3       	ldi	r30, 0x38	; 56
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	10 82       	st	Z, r1
PORTC=PORTC_INIT_VALUE;
     bf2:	e5 e3       	ldi	r30, 0x35	; 53
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	10 82       	st	Z, r1
PORTD=PORTD_INIT_VALUE;
     bf8:	e2 e3       	ldi	r30, 0x32	; 50
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	10 82       	st	Z, r1
}
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <GIE_Enable>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/GIE_interface.h"
#include "../inc/GIE_register.h"

void GIE_Enable(void)
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_I);
     c0c:	af e5       	ldi	r26, 0x5F	; 95
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ef e5       	ldi	r30, 0x5F	; 95
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 68       	ori	r24, 0x80	; 128
     c18:	8c 93       	st	X, r24

}
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <GIE_Disable>:
void GIE_Disable(void)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
     c28:	af e5       	ldi	r26, 0x5F	; 95
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ef e5       	ldi	r30, 0x5F	; 95
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8f 77       	andi	r24, 0x7F	; 127
     c34:	8c 93       	st	X, r24
}
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	08 95       	ret

00000c3c <EXTI_voidInt0Init>:
#include "../inc/EXTI_interface.h"
#include "../inc/EXTI_config.h"
#include "../inc/EXTI_private.h"

void EXTI_voidInt0Init(void)
{
     c3c:	df 93       	push	r29
     c3e:	cf 93       	push	r28
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62

#if INT0_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
     c44:	a5 e5       	ldi	r26, 0x55	; 85
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e5 e5       	ldi	r30, 0x55	; 85
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
     c52:	a5 e5       	ldi	r26, 0x55	; 85
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e5 e5       	ldi	r30, 0x55	; 85
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8d 7f       	andi	r24, 0xFD	; 253
     c5e:	8c 93       	st	X, r24
#else
#error "INT0 Wrong init"
#endif

#if INT0_STATE == INT0_ENABLE
	SET_BIT(GICR,GICR_INT0);
     c60:	ab e5       	ldi	r26, 0x5B	; 91
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	eb e5       	ldi	r30, 0x5B	; 91
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	80 64       	ori	r24, 0x40	; 64
     c6c:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT0);
#else
#error "INT0 Wrong init"
#endif

}
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
#if INT1_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC10);
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
     c7c:	a5 e5       	ldi	r26, 0x55	; 85
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e5 e5       	ldi	r30, 0x55	; 85
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	84 60       	ori	r24, 0x04	; 4
     c88:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
     c8a:	a5 e5       	ldi	r26, 0x55	; 85
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e5 e5       	ldi	r30, 0x55	; 85
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	87 7f       	andi	r24, 0xF7	; 247
     c96:	8c 93       	st	X, r24
#elif  INT1_STATE == INT1_DISABLE
	CLEAR_BIT(GICR,GICR_INT1);
#else
#warning "INT1 Wrong init"
#endif
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

#if INT2_SENSE == FALLING_EDGE
	CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
     ca6:	a4 e5       	ldi	r26, 0x54	; 84
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e4 e5       	ldi	r30, 0x54	; 84
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7b       	andi	r24, 0xBF	; 191
     cb2:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT2);
#else
#warning "INT2 Wrong init"
#endif

}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <EXTI_uint8IntSetSenseControl>:

uint8 EXTI_uint8IntSetSenseControl(uint8 Copy_uint8IntNumber,uint8 Copy_uint8Sense)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	29 97       	sbiw	r28, 0x09	; 9
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	8a 83       	std	Y+2, r24	; 0x02
     cd0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState=0;
     cd2:	19 82       	std	Y+1, r1	; 0x01
	if(INT0==Copy_uint8IntNumber)
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	09 f0       	breq	.+2      	; 0xcdc <EXTI_uint8IntSetSenseControl+0x22>
     cda:	5e c0       	rjmp	.+188    	; 0xd98 <EXTI_uint8IntSetSenseControl+0xde>
	{
		switch(Copy_uint8Sense)
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	39 87       	std	Y+9, r19	; 0x09
     ce4:	28 87       	std	Y+8, r18	; 0x08
     ce6:	88 85       	ldd	r24, Y+8	; 0x08
     ce8:	99 85       	ldd	r25, Y+9	; 0x09
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	91 05       	cpc	r25, r1
     cee:	21 f1       	breq	.+72     	; 0xd38 <EXTI_uint8IntSetSenseControl+0x7e>
     cf0:	28 85       	ldd	r18, Y+8	; 0x08
     cf2:	39 85       	ldd	r19, Y+9	; 0x09
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	2c f4       	brge	.+10     	; 0xd04 <EXTI_uint8IntSetSenseControl+0x4a>
     cfa:	88 85       	ldd	r24, Y+8	; 0x08
     cfc:	99 85       	ldd	r25, Y+9	; 0x09
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	61 f0       	breq	.+24     	; 0xd1a <EXTI_uint8IntSetSenseControl+0x60>
     d02:	47 c0       	rjmp	.+142    	; 0xd92 <EXTI_uint8IntSetSenseControl+0xd8>
     d04:	28 85       	ldd	r18, Y+8	; 0x08
     d06:	39 85       	ldd	r19, Y+9	; 0x09
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	21 f1       	breq	.+72     	; 0xd56 <EXTI_uint8IntSetSenseControl+0x9c>
     d0e:	88 85       	ldd	r24, Y+8	; 0x08
     d10:	99 85       	ldd	r25, Y+9	; 0x09
     d12:	83 30       	cpi	r24, 0x03	; 3
     d14:	91 05       	cpc	r25, r1
     d16:	71 f1       	breq	.+92     	; 0xd74 <EXTI_uint8IntSetSenseControl+0xba>
     d18:	3c c0       	rjmp	.+120    	; 0xd92 <EXTI_uint8IntSetSenseControl+0xd8>
		{
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
     d1a:	a5 e5       	ldi	r26, 0x55	; 85
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e5 e5       	ldi	r30, 0x55	; 85
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	8c 93       	st	X, r24
     d28:	a5 e5       	ldi	r26, 0x55	; 85
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e5 e5       	ldi	r30, 0x55	; 85
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8d 7f       	andi	r24, 0xFD	; 253
     d34:	8c 93       	st	X, r24
     d36:	ba c0       	rjmp	.+372    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
     d38:	a5 e5       	ldi	r26, 0x55	; 85
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e5 e5       	ldi	r30, 0x55	; 85
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	81 60       	ori	r24, 0x01	; 1
     d44:	8c 93       	st	X, r24
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8d 7f       	andi	r24, 0xFD	; 253
     d52:	8c 93       	st	X, r24
     d54:	ab c0       	rjmp	.+342    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
     d56:	a5 e5       	ldi	r26, 0x55	; 85
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e5       	ldi	r30, 0x55	; 85
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	8c 93       	st	X, r24
     d64:	a5 e5       	ldi	r26, 0x55	; 85
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e5 e5       	ldi	r30, 0x55	; 85
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	8c 93       	st	X, r24
     d72:	9c c0       	rjmp	.+312    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
     d74:	a5 e5       	ldi	r26, 0x55	; 85
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e5 e5       	ldi	r30, 0x55	; 85
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	8c 93       	st	X, r24
     d82:	a5 e5       	ldi	r26, 0x55	; 85
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e5 e5       	ldi	r30, 0x55	; 85
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	8c 93       	st	X, r24
     d90:	8d c0       	rjmp	.+282    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
		default : Local_ErrorState=1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	8a c0       	rjmp	.+276    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
		}
	}
	else if(INT1==Copy_uint8IntNumber)
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	82 30       	cpi	r24, 0x02	; 2
     d9c:	09 f0       	breq	.+2      	; 0xda0 <EXTI_uint8IntSetSenseControl+0xe6>
     d9e:	5e c0       	rjmp	.+188    	; 0xe5c <EXTI_uint8IntSetSenseControl+0x1a2>
	{
		switch(Copy_uint8Sense)
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	3f 83       	std	Y+7, r19	; 0x07
     da8:	2e 83       	std	Y+6, r18	; 0x06
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	91 05       	cpc	r25, r1
     db2:	21 f1       	breq	.+72     	; 0xdfc <EXTI_uint8IntSetSenseControl+0x142>
     db4:	2e 81       	ldd	r18, Y+6	; 0x06
     db6:	3f 81       	ldd	r19, Y+7	; 0x07
     db8:	22 30       	cpi	r18, 0x02	; 2
     dba:	31 05       	cpc	r19, r1
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <EXTI_uint8IntSetSenseControl+0x10e>
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	9f 81       	ldd	r25, Y+7	; 0x07
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	61 f0       	breq	.+24     	; 0xdde <EXTI_uint8IntSetSenseControl+0x124>
     dc6:	47 c0       	rjmp	.+142    	; 0xe56 <EXTI_uint8IntSetSenseControl+0x19c>
     dc8:	2e 81       	ldd	r18, Y+6	; 0x06
     dca:	3f 81       	ldd	r19, Y+7	; 0x07
     dcc:	22 30       	cpi	r18, 0x02	; 2
     dce:	31 05       	cpc	r19, r1
     dd0:	21 f1       	breq	.+72     	; 0xe1a <EXTI_uint8IntSetSenseControl+0x160>
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	9f 81       	ldd	r25, Y+7	; 0x07
     dd6:	83 30       	cpi	r24, 0x03	; 3
     dd8:	91 05       	cpc	r25, r1
     dda:	71 f1       	breq	.+92     	; 0xe38 <EXTI_uint8IntSetSenseControl+0x17e>
     ddc:	3c c0       	rjmp	.+120    	; 0xe56 <EXTI_uint8IntSetSenseControl+0x19c>
	  {
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
     dde:	a5 e5       	ldi	r26, 0x55	; 85
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 e5       	ldi	r30, 0x55	; 85
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8b 7f       	andi	r24, 0xFB	; 251
     dea:	8c 93       	st	X, r24
     dec:	a5 e5       	ldi	r26, 0x55	; 85
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e5       	ldi	r30, 0x55	; 85
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	87 7f       	andi	r24, 0xF7	; 247
     df8:	8c 93       	st	X, r24
     dfa:	58 c0       	rjmp	.+176    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	8c 93       	st	X, r24
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	87 7f       	andi	r24, 0xF7	; 247
     e16:	8c 93       	st	X, r24
     e18:	49 c0       	rjmp	.+146    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
     e1a:	a5 e5       	ldi	r26, 0x55	; 85
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e5       	ldi	r30, 0x55	; 85
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	8c 93       	st	X, r24
     e28:	a5 e5       	ldi	r26, 0x55	; 85
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e5       	ldi	r30, 0x55	; 85
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	8c 93       	st	X, r24
     e36:	3a c0       	rjmp	.+116    	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
     e38:	a5 e5       	ldi	r26, 0x55	; 85
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e5       	ldi	r30, 0x55	; 85
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	8c 93       	st	X, r24
     e46:	a5 e5       	ldi	r26, 0x55	; 85
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e5       	ldi	r30, 0x55	; 85
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	8c 93       	st	X, r24
     e54:	2b c0       	rjmp	.+86     	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	28 c0       	rjmp	.+80     	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else if(INT2==Copy_uint8IntNumber)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	19 f5       	brne	.+70     	; 0xea8 <EXTI_uint8IntSetSenseControl+0x1ee>
	{switch(Copy_uint8Sense)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3d 83       	std	Y+5, r19	; 0x05
     e6a:	2c 83       	std	Y+4, r18	; 0x04
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	91 05       	cpc	r25, r1
     e74:	31 f0       	breq	.+12     	; 0xe82 <EXTI_uint8IntSetSenseControl+0x1c8>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	23 30       	cpi	r18, 0x03	; 3
     e7c:	31 05       	cpc	r19, r1
     e7e:	49 f0       	breq	.+18     	; 0xe92 <EXTI_uint8IntSetSenseControl+0x1d8>
     e80:	10 c0       	rjmp	.+32     	; 0xea2 <EXTI_uint8IntSetSenseControl+0x1e8>
	  {
	   case EXTI_FALLING:CLEAR_BIT(MCUCSR,MCUCSR_ISC2);break;
     e82:	a4 e5       	ldi	r26, 0x54	; 84
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e4 e5       	ldi	r30, 0x54	; 84
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	8c 93       	st	X, r24
     e90:	0d c0       	rjmp	.+26     	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
     e92:	a4 e5       	ldi	r26, 0x54	; 84
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e4 e5       	ldi	r30, 0x54	; 84
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	80 64       	ori	r24, 0x40	; 64
     e9e:	8c 93       	st	X, r24
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else
	{
		Local_ErrorState=1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_ErrorState;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
}
     eae:	29 96       	adiw	r28, 0x09	; 9
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <EXTI_uint8IntEnable>:

uint8 EXTI_uint8IntEnable(uint8 Copy_uint8IntNumber)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <EXTI_uint8IntEnable+0x6>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <EXTI_uint8IntEnable+0x8>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
     ece:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3c 83       	std	Y+4, r19	; 0x04
     ed8:	2b 83       	std	Y+3, r18	; 0x03
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	82 30       	cpi	r24, 0x02	; 2
     ee0:	91 05       	cpc	r25, r1
     ee2:	91 f0       	breq	.+36     	; 0xf08 <EXTI_uint8IntEnable+0x48>
     ee4:	2b 81       	ldd	r18, Y+3	; 0x03
     ee6:	3c 81       	ldd	r19, Y+4	; 0x04
     ee8:	23 30       	cpi	r18, 0x03	; 3
     eea:	31 05       	cpc	r19, r1
     eec:	a9 f0       	breq	.+42     	; 0xf18 <EXTI_uint8IntEnable+0x58>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	91 05       	cpc	r25, r1
     ef6:	c1 f4       	brne	.+48     	; 0xf28 <EXTI_uint8IntEnable+0x68>
	case INT0:SET_BIT(GICR,GICR_INT0);break;
     ef8:	ab e5       	ldi	r26, 0x5B	; 91
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	eb e5       	ldi	r30, 0x5B	; 91
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	8c 93       	st	X, r24
     f06:	12 c0       	rjmp	.+36     	; 0xf2c <EXTI_uint8IntEnable+0x6c>
	case INT1:SET_BIT(GICR,GICR_INT1);break;
     f08:	ab e5       	ldi	r26, 0x5B	; 91
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e5       	ldi	r30, 0x5B	; 91
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 68       	ori	r24, 0x80	; 128
     f14:	8c 93       	st	X, r24
     f16:	0a c0       	rjmp	.+20     	; 0xf2c <EXTI_uint8IntEnable+0x6c>
	case INT2:SET_BIT(GICR,GICR_INT2);break;
     f18:	ab e5       	ldi	r26, 0x5B	; 91
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	eb e5       	ldi	r30, 0x5B	; 91
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 62       	ori	r24, 0x20	; 32
     f24:	8c 93       	st	X, r24
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <EXTI_uint8IntEnable+0x6c>
    default  : Local_ErrorState=1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <EXTI_uint8IntDisable>:


uint8 EXTI_uint8IntDisable(uint8 Copy_uint8IntNumber)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <EXTI_uint8IntDisable+0x6>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <EXTI_uint8IntDisable+0x8>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
     f4a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3c 83       	std	Y+4, r19	; 0x04
     f54:	2b 83       	std	Y+3, r18	; 0x03
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	91 05       	cpc	r25, r1
     f5e:	91 f0       	breq	.+36     	; 0xf84 <EXTI_uint8IntDisable+0x48>
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	3c 81       	ldd	r19, Y+4	; 0x04
     f64:	23 30       	cpi	r18, 0x03	; 3
     f66:	31 05       	cpc	r19, r1
     f68:	a9 f0       	breq	.+42     	; 0xf94 <EXTI_uint8IntDisable+0x58>
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 05       	cpc	r25, r1
     f72:	c1 f4       	brne	.+48     	; 0xfa4 <EXTI_uint8IntDisable+0x68>
	case INT0:CLEAR_BIT(GICR,GICR_INT0);break;
     f74:	ab e5       	ldi	r26, 0x5B	; 91
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	eb e5       	ldi	r30, 0x5B	; 91
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7b       	andi	r24, 0xBF	; 191
     f80:	8c 93       	st	X, r24
     f82:	12 c0       	rjmp	.+36     	; 0xfa8 <EXTI_uint8IntDisable+0x6c>
	case INT1:CLEAR_BIT(GICR,GICR_INT1);break;
     f84:	ab e5       	ldi	r26, 0x5B	; 91
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	eb e5       	ldi	r30, 0x5B	; 91
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8f 77       	andi	r24, 0x7F	; 127
     f90:	8c 93       	st	X, r24
     f92:	0a c0       	rjmp	.+20     	; 0xfa8 <EXTI_uint8IntDisable+0x6c>
	case INT2:CLEAR_BIT(GICR,GICR_INT2);break;
     f94:	ab e5       	ldi	r26, 0x5B	; 91
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	eb e5       	ldi	r30, 0x5B	; 91
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8f 7d       	andi	r24, 0xDF	; 223
     fa0:	8c 93       	st	X, r24
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <EXTI_uint8IntDisable+0x6c>
    default  : Local_ErrorState=1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <EXTI_uint8Int0SetCallBack>:

uint8 EXTI_uint8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <EXTI_uint8Int0SetCallBack+0x6>
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9b 83       	std	Y+3, r25	; 0x03
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
     fc8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <EXTI_uint8Int0SetCallBack+0x28>
	{
		Global_EXTI_pvInt0Func=Copy_pvInt0Func;
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	90 93 b9 00 	sts	0x00B9, r25
     fda:	80 93 b8 00 	sts	0x00B8, r24
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <EXTI_uint8Int0SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <EXTI_uint8Int1SetCallBack>:



uint8 EXTI_uint8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <EXTI_uint8Int1SetCallBack+0x6>
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9b 83       	std	Y+3, r25	; 0x03
    1000:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1002:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	9b 81       	ldd	r25, Y+3	; 0x03
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	39 f0       	breq	.+14     	; 0x101a <EXTI_uint8Int1SetCallBack+0x28>
	{
		Global_EXTI_pvInt1Func=Copy_pvInt1Func;
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	90 93 bb 00 	sts	0x00BB, r25
    1014:	80 93 ba 00 	sts	0x00BA, r24
    1018:	02 c0       	rjmp	.+4      	; 0x101e <EXTI_uint8Int1SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <EXTI_uint8Int2SetCallBack>:



uint8 EXTI_uint8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <EXTI_uint8Int2SetCallBack+0x6>
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9b 83       	std	Y+3, r25	; 0x03
    103a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    103c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL)
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	39 f0       	breq	.+14     	; 0x1054 <EXTI_uint8Int2SetCallBack+0x28>
	{
		Global_EXTI_pvInt2Func=Copy_pvInt2Func;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	90 93 bd 00 	sts	0x00BD, r25
    104e:	80 93 bc 00 	sts	0x00BC, r24
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <EXTI_uint8Int2SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <__vector_1>:


/*ISR of INT0*/

void __vector_1(void)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt0Func!=NULL)
    1090:	80 91 b8 00 	lds	r24, 0x00B8
    1094:	90 91 b9 00 	lds	r25, 0x00B9
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	29 f0       	breq	.+10     	; 0x10a6 <__vector_1+0x40>
	{
		Global_EXTI_pvInt0Func();
    109c:	e0 91 b8 00 	lds	r30, 0x00B8
    10a0:	f0 91 b9 00 	lds	r31, 0x00B9
    10a4:	09 95       	icall
	else
	{
		//do nothing

	}
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_2>:

/*ISR of INT1*/

void __vector_2(void)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt1Func!=NULL)
    10f6:	80 91 ba 00 	lds	r24, 0x00BA
    10fa:	90 91 bb 00 	lds	r25, 0x00BB
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f0       	breq	.+10     	; 0x110c <__vector_2+0x40>
		{
		Global_EXTI_pvInt1Func();
    1102:	e0 91 ba 00 	lds	r30, 0x00BA
    1106:	f0 91 bb 00 	lds	r31, 0x00BB
    110a:	09 95       	icall
		{
			//do nothing

		}

	}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <__vector_3>:


/*ISR of INT2*/

void __vector_3(void)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62

	if(Global_EXTI_pvInt2Func!=NULL)
    115c:	80 91 bc 00 	lds	r24, 0x00BC
    1160:	90 91 bd 00 	lds	r25, 0x00BD
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	29 f0       	breq	.+10     	; 0x1172 <__vector_3+0x40>
		{
		Global_EXTI_pvInt2Func();
    1168:	e0 91 bc 00 	lds	r30, 0x00BC
    116c:	f0 91 bd 00 	lds	r31, 0x00BD
    1170:	09 95       	icall
		{
			//do nothing

		}

}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <DIO_SetPortVal>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/DIO_interface.h"
#include  "../inc/DIO_private.h"
#include "../inc/DIO_register.h"

status_t DIO_SetPortVal(Port_t Copy_Port, uint8 Copy_uint8Value) {
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <DIO_SetPortVal+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <DIO_SetPortVal+0x8>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    11aa:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	84 30       	cpi	r24, 0x04	; 4
    11b0:	18 f0       	brcs	.+6      	; 0x11b8 <DIO_SetPortVal+0x20>
		Local_uint8ErrorState = DIO_SetErr;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	32 c0       	rjmp	.+100    	; 0x121c <DIO_SetPortVal+0x84>
	} else {
		switch (Copy_Port) {
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3d 83       	std	Y+5, r19	; 0x05
    11c0:	2c 83       	std	Y+4, r18	; 0x04
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	d1 f0       	breq	.+52     	; 0x1200 <DIO_SetPortVal+0x68>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <DIO_SetPortVal+0x48>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <DIO_SetPortVal+0x5e>
    11de:	1e c0       	rjmp	.+60     	; 0x121c <DIO_SetPortVal+0x84>
    11e0:	2c 81       	ldd	r18, Y+4	; 0x04
    11e2:	3d 81       	ldd	r19, Y+5	; 0x05
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	81 f0       	breq	.+32     	; 0x120a <DIO_SetPortVal+0x72>
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <DIO_SetPortVal+0x7c>
    11f4:	13 c0       	rjmp	.+38     	; 0x121c <DIO_SetPortVal+0x84>
		case DIO_PORTA:
			PORTA = Copy_uint8Value;
    11f6:	eb e3       	ldi	r30, 0x3B	; 59
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	80 83       	st	Z, r24
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTB:
			PORTB = Copy_uint8Value;
    1200:	e8 e3       	ldi	r30, 0x38	; 56
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	80 83       	st	Z, r24
    1208:	09 c0       	rjmp	.+18     	; 0x121c <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTC:
			PORTC = Copy_uint8Value;
    120a:	e5 e3       	ldi	r30, 0x35	; 53
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	80 83       	st	Z, r24
    1212:	04 c0       	rjmp	.+8      	; 0x121c <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTD:
			PORTD = Copy_uint8Value;
    1214:	e2 e3       	ldi	r30, 0x32	; 50
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	80 83       	st	Z, r24
			break;
		}
	}

	return Local_uint8ErrorState;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_SetPinVal>:

status_t DIO_SetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8 Copy_uint8Value) {
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	28 97       	sbiw	r28, 0x08	; 8
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	6b 83       	std	Y+3, r22	; 0x03
    1246:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    1248:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	18 f0       	brcs	.+6      	; 0x1256 <DIO_SetPinVal+0x28>
		Local_uint8ErrorState = DIO_SetErr;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	f0 c0       	rjmp	.+480    	; 0x1436 <DIO_SetPinVal+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 30       	cpi	r24, 0x08	; 8
    125a:	18 f0       	brcs	.+6      	; 0x1262 <DIO_SetPinVal+0x34>
		Local_uint8ErrorState = DIO_SetErr;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	ea c0       	rjmp	.+468    	; 0x1436 <DIO_SetPinVal+0x208>
	} else {
		if (DIO_HIGH == Copy_uint8Value) {
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	09 f0       	breq	.+2      	; 0x126a <DIO_SetPinVal+0x3c>
    1268:	6f c0       	rjmp	.+222    	; 0x1348 <DIO_SetPinVal+0x11a>
			switch (Copy_Port) {
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	38 87       	std	Y+8, r19	; 0x08
    1272:	2f 83       	std	Y+7, r18	; 0x07
    1274:	8f 81       	ldd	r24, Y+7	; 0x07
    1276:	98 85       	ldd	r25, Y+8	; 0x08
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	49 f1       	breq	.+82     	; 0x12d0 <DIO_SetPinVal+0xa2>
    127e:	2f 81       	ldd	r18, Y+7	; 0x07
    1280:	38 85       	ldd	r19, Y+8	; 0x08
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <DIO_SetPinVal+0x64>
    1288:	8f 81       	ldd	r24, Y+7	; 0x07
    128a:	98 85       	ldd	r25, Y+8	; 0x08
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	61 f0       	breq	.+24     	; 0x12a8 <DIO_SetPinVal+0x7a>
    1290:	d2 c0       	rjmp	.+420    	; 0x1436 <DIO_SetPinVal+0x208>
    1292:	2f 81       	ldd	r18, Y+7	; 0x07
    1294:	38 85       	ldd	r19, Y+8	; 0x08
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	71 f1       	breq	.+92     	; 0x12f8 <DIO_SetPinVal+0xca>
    129c:	8f 81       	ldd	r24, Y+7	; 0x07
    129e:	98 85       	ldd	r25, Y+8	; 0x08
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	e9 f1       	breq	.+122    	; 0x1320 <DIO_SetPinVal+0xf2>
    12a6:	c7 c0       	rjmp	.+398    	; 0x1436 <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				SET_BIT(PORTA, Copy_Pin);
    12a8:	ab e3       	ldi	r26, 0x3B	; 59
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	eb e3       	ldi	r30, 0x3B	; 59
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_SetPinVal+0x98>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_SetPinVal+0x94>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	b3 c0       	rjmp	.+358    	; 0x1436 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB, Copy_Pin);
    12d0:	a8 e3       	ldi	r26, 0x38	; 56
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e8 e3       	ldi	r30, 0x38	; 56
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_SetPinVal+0xc0>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_SetPinVal+0xbc>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	9f c0       	rjmp	.+318    	; 0x1436 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC, Copy_Pin);
    12f8:	a5 e3       	ldi	r26, 0x35	; 53
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e3       	ldi	r30, 0x35	; 53
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_SetPinVal+0xe8>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_SetPinVal+0xe4>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	8b c0       	rjmp	.+278    	; 0x1436 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD, Copy_Pin);
    1320:	a2 e3       	ldi	r26, 0x32	; 50
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e2 e3       	ldi	r30, 0x32	; 50
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_SetPinVal+0x110>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_SetPinVal+0x10c>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	77 c0       	rjmp	.+238    	; 0x1436 <DIO_SetPinVal+0x208>
				break;
			}
		} else if (DIO_LOW == Copy_uint8Value) {
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	88 23       	and	r24, r24
    134c:	09 f0       	breq	.+2      	; 0x1350 <DIO_SetPinVal+0x122>
    134e:	73 c0       	rjmp	.+230    	; 0x1436 <DIO_SetPinVal+0x208>
			switch (Copy_Port) {
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3e 83       	std	Y+6, r19	; 0x06
    1358:	2d 83       	std	Y+5, r18	; 0x05
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	59 f1       	breq	.+86     	; 0x13ba <DIO_SetPinVal+0x18c>
    1364:	2d 81       	ldd	r18, Y+5	; 0x05
    1366:	3e 81       	ldd	r19, Y+6	; 0x06
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	2c f4       	brge	.+10     	; 0x1378 <DIO_SetPinVal+0x14a>
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	69 f0       	breq	.+26     	; 0x1390 <DIO_SetPinVal+0x162>
    1376:	5f c0       	rjmp	.+190    	; 0x1436 <DIO_SetPinVal+0x208>
    1378:	2d 81       	ldd	r18, Y+5	; 0x05
    137a:	3e 81       	ldd	r19, Y+6	; 0x06
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	89 f1       	breq	.+98     	; 0x13e4 <DIO_SetPinVal+0x1b6>
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <DIO_SetPinVal+0x160>
    138c:	40 c0       	rjmp	.+128    	; 0x140e <DIO_SetPinVal+0x1e0>
    138e:	53 c0       	rjmp	.+166    	; 0x1436 <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				CLEAR_BIT(PORTA, Copy_Pin);
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_SetPinVal+0x180>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_SetPinVal+0x17c>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	3e c0       	rjmp	.+124    	; 0x1436 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB, Copy_Pin);
    13ba:	a8 e3       	ldi	r26, 0x38	; 56
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e8 e3       	ldi	r30, 0x38	; 56
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_SetPinVal+0x1aa>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_SetPinVal+0x1a6>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	29 c0       	rjmp	.+82     	; 0x1436 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC, Copy_Pin);
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_SetPinVal+0x1d4>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_SetPinVal+0x1d0>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD, Copy_Pin);
    140e:	a2 e3       	ldi	r26, 0x32	; 50
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e2 e3       	ldi	r30, 0x32	; 50
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_SetPinVal+0x1fe>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_SetPinVal+0x1fa>
    1430:	80 95       	com	r24
    1432:	84 23       	and	r24, r20
    1434:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Local_uint8ErrorState;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	28 96       	adiw	r28, 0x08	; 8
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <DIO_SetPortDir>:

status_t DIO_SetPortDir(Port_t Copy_Port, uint8 Copy_uint8Direction) {
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <DIO_SetPortDir+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <DIO_SetPortDir+0x8>
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	8a 83       	std	Y+2, r24	; 0x02
    145a:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    145c:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	18 f0       	brcs	.+6      	; 0x146a <DIO_SetPortDir+0x20>
		Local_uint8ErrorState = DIO_DirErr;
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	32 c0       	rjmp	.+100    	; 0x14ce <DIO_SetPortDir+0x84>
	} else {
		switch (Copy_Port) {
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <DIO_SetPortDir+0x68>
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <DIO_SetPortDir+0x48>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 f0       	breq	.+24     	; 0x14a8 <DIO_SetPortDir+0x5e>
    1490:	1e c0       	rjmp	.+60     	; 0x14ce <DIO_SetPortDir+0x84>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <DIO_SetPortDir+0x72>
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <DIO_SetPortDir+0x7c>
    14a6:	13 c0       	rjmp	.+38     	; 0x14ce <DIO_SetPortDir+0x84>
		case DIO_PORTA:
			DDRA = Copy_uint8Direction;
    14a8:	ea e3       	ldi	r30, 0x3A	; 58
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	80 83       	st	Z, r24
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTB:
			DDRB = Copy_uint8Direction;
    14b2:	e7 e3       	ldi	r30, 0x37	; 55
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	80 83       	st	Z, r24
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTC:
			DDRC = Copy_uint8Direction;
    14bc:	e4 e3       	ldi	r30, 0x34	; 52
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	80 83       	st	Z, r24
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTD:
			DDRD = Copy_uint8Direction;
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_uint8ErrorState;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <DIO_SetPinDir>:

status_t DIO_SetPinDir(Port_t Copy_Port, Pin_t Copy_Pin, Dir_t Copy_Direction) {
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	28 97       	sbiw	r28, 0x08	; 8
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	6b 83       	std	Y+3, r22	; 0x03
    14f8:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    14fa:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	18 f0       	brcs	.+6      	; 0x1508 <DIO_SetPinDir+0x28>
		Local_uint8ErrorState = DIO_DirErr;
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	f0 c0       	rjmp	.+480    	; 0x16e8 <DIO_SetPinDir+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	88 30       	cpi	r24, 0x08	; 8
    150c:	18 f0       	brcs	.+6      	; 0x1514 <DIO_SetPinDir+0x34>
		Local_uint8ErrorState = DIO_DirErr;
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	ea c0       	rjmp	.+468    	; 0x16e8 <DIO_SetPinDir+0x208>
	} else {
		if (DIO_INPUT == Copy_Direction) {
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	88 23       	and	r24, r24
    1518:	09 f0       	breq	.+2      	; 0x151c <DIO_SetPinDir+0x3c>
    151a:	74 c0       	rjmp	.+232    	; 0x1604 <DIO_SetPinDir+0x124>
			switch (Copy_Port) {
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	38 87       	std	Y+8, r19	; 0x08
    1524:	2f 83       	std	Y+7, r18	; 0x07
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	98 85       	ldd	r25, Y+8	; 0x08
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	59 f1       	breq	.+86     	; 0x1586 <DIO_SetPinDir+0xa6>
    1530:	2f 81       	ldd	r18, Y+7	; 0x07
    1532:	38 85       	ldd	r19, Y+8	; 0x08
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <DIO_SetPinDir+0x64>
    153a:	8f 81       	ldd	r24, Y+7	; 0x07
    153c:	98 85       	ldd	r25, Y+8	; 0x08
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	69 f0       	breq	.+26     	; 0x155c <DIO_SetPinDir+0x7c>
    1542:	d2 c0       	rjmp	.+420    	; 0x16e8 <DIO_SetPinDir+0x208>
    1544:	2f 81       	ldd	r18, Y+7	; 0x07
    1546:	38 85       	ldd	r19, Y+8	; 0x08
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	89 f1       	breq	.+98     	; 0x15b0 <DIO_SetPinDir+0xd0>
    154e:	8f 81       	ldd	r24, Y+7	; 0x07
    1550:	98 85       	ldd	r25, Y+8	; 0x08
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <DIO_SetPinDir+0x7a>
    1558:	40 c0       	rjmp	.+128    	; 0x15da <DIO_SetPinDir+0xfa>
    155a:	c6 c0       	rjmp	.+396    	; 0x16e8 <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				CLEAR_BIT(DDRA, Copy_Pin);
    155c:	aa e3       	ldi	r26, 0x3A	; 58
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ea e3       	ldi	r30, 0x3A	; 58
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_SetPinDir+0x9a>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_SetPinDir+0x96>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	b1 c0       	rjmp	.+354    	; 0x16e8 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB, Copy_Pin);
    1586:	a7 e3       	ldi	r26, 0x37	; 55
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e7 e3       	ldi	r30, 0x37	; 55
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_SetPinDir+0xc4>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_SetPinDir+0xc0>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	9c c0       	rjmp	.+312    	; 0x16e8 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC, Copy_Pin);
    15b0:	a4 e3       	ldi	r26, 0x34	; 52
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e4 e3       	ldi	r30, 0x34	; 52
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_SetPinDir+0xee>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <DIO_SetPinDir+0xea>
    15d2:	80 95       	com	r24
    15d4:	84 23       	and	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	87 c0       	rjmp	.+270    	; 0x16e8 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD, Copy_Pin);
    15da:	a1 e3       	ldi	r26, 0x31	; 49
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e1 e3       	ldi	r30, 0x31	; 49
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <DIO_SetPinDir+0x118>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <DIO_SetPinDir+0x114>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	72 c0       	rjmp	.+228    	; 0x16e8 <DIO_SetPinDir+0x208>
				break;
			}
		} else if (DIO_OUTPUT == Copy_Direction) {
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	09 f0       	breq	.+2      	; 0x160c <DIO_SetPinDir+0x12c>
    160a:	6e c0       	rjmp	.+220    	; 0x16e8 <DIO_SetPinDir+0x208>
			switch (Copy_Port) {
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3e 83       	std	Y+6, r19	; 0x06
    1614:	2d 83       	std	Y+5, r18	; 0x05
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	49 f1       	breq	.+82     	; 0x1672 <DIO_SetPinDir+0x192>
    1620:	2d 81       	ldd	r18, Y+5	; 0x05
    1622:	3e 81       	ldd	r19, Y+6	; 0x06
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <DIO_SetPinDir+0x154>
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	61 f0       	breq	.+24     	; 0x164a <DIO_SetPinDir+0x16a>
    1632:	5a c0       	rjmp	.+180    	; 0x16e8 <DIO_SetPinDir+0x208>
    1634:	2d 81       	ldd	r18, Y+5	; 0x05
    1636:	3e 81       	ldd	r19, Y+6	; 0x06
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	71 f1       	breq	.+92     	; 0x169a <DIO_SetPinDir+0x1ba>
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	91 05       	cpc	r25, r1
    1646:	e9 f1       	breq	.+122    	; 0x16c2 <DIO_SetPinDir+0x1e2>
    1648:	4f c0       	rjmp	.+158    	; 0x16e8 <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				SET_BIT(DDRA, Copy_Pin);
    164a:	aa e3       	ldi	r26, 0x3A	; 58
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ea e3       	ldi	r30, 0x3A	; 58
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_SetPinDir+0x188>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_SetPinDir+0x184>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	3b c0       	rjmp	.+118    	; 0x16e8 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB, Copy_Pin);
    1672:	a7 e3       	ldi	r26, 0x37	; 55
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e7 e3       	ldi	r30, 0x37	; 55
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_SetPinDir+0x1b0>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_SetPinDir+0x1ac>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC, Copy_Pin);
    169a:	a4 e3       	ldi	r26, 0x34	; 52
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e4 e3       	ldi	r30, 0x34	; 52
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_SetPinDir+0x1d8>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_SetPinDir+0x1d4>
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD, Copy_Pin);
    16c2:	a1 e3       	ldi	r26, 0x31	; 49
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e1 e3       	ldi	r30, 0x31	; 49
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_SetPinDir+0x200>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_SetPinDir+0x1fc>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
				break;
			}
		}
	}
	return Local_uint8ErrorState;
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ea:	28 96       	adiw	r28, 0x08	; 8
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <DIO_GetPinVal>:


status_t DIO_GetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8* Copy_pvValue)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	27 97       	sbiw	r28, 0x07	; 7
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	8a 83       	std	Y+2, r24	; 0x02
    1712:	6b 83       	std	Y+3, r22	; 0x03
    1714:	5d 83       	std	Y+5, r21	; 0x05
    1716:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    1718:	19 82       	std	Y+1, r1	; 0x01

		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	18 f0       	brcs	.+6      	; 0x1726 <DIO_GetPinVal+0x2a>
			Local_uint8ErrorState = DIO_GetErr;
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	76 c0       	rjmp	.+236    	; 0x1812 <DIO_GetPinVal+0x116>
		} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 30       	cpi	r24, 0x08	; 8
    172a:	18 f0       	brcs	.+6      	; 0x1732 <DIO_GetPinVal+0x36>
			Local_uint8ErrorState = DIO_GetErr;
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	70 c0       	rjmp	.+224    	; 0x1812 <DIO_GetPinVal+0x116>
		} else {
			switch (Copy_Port)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3f 83       	std	Y+7, r19	; 0x07
    173a:	2e 83       	std	Y+6, r18	; 0x06
    173c:	4e 81       	ldd	r20, Y+6	; 0x06
    173e:	5f 81       	ldd	r21, Y+7	; 0x07
    1740:	41 30       	cpi	r20, 0x01	; 1
    1742:	51 05       	cpc	r21, r1
    1744:	59 f1       	breq	.+86     	; 0x179c <DIO_GetPinVal+0xa0>
    1746:	8e 81       	ldd	r24, Y+6	; 0x06
    1748:	9f 81       	ldd	r25, Y+7	; 0x07
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	91 05       	cpc	r25, r1
    174e:	34 f4       	brge	.+12     	; 0x175c <DIO_GetPinVal+0x60>
    1750:	2e 81       	ldd	r18, Y+6	; 0x06
    1752:	3f 81       	ldd	r19, Y+7	; 0x07
    1754:	21 15       	cp	r18, r1
    1756:	31 05       	cpc	r19, r1
    1758:	69 f0       	breq	.+26     	; 0x1774 <DIO_GetPinVal+0x78>
    175a:	5b c0       	rjmp	.+182    	; 0x1812 <DIO_GetPinVal+0x116>
    175c:	4e 81       	ldd	r20, Y+6	; 0x06
    175e:	5f 81       	ldd	r21, Y+7	; 0x07
    1760:	42 30       	cpi	r20, 0x02	; 2
    1762:	51 05       	cpc	r21, r1
    1764:	79 f1       	breq	.+94     	; 0x17c4 <DIO_GetPinVal+0xc8>
    1766:	8e 81       	ldd	r24, Y+6	; 0x06
    1768:	9f 81       	ldd	r25, Y+7	; 0x07
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <DIO_GetPinVal+0x76>
    1770:	3d c0       	rjmp	.+122    	; 0x17ec <DIO_GetPinVal+0xf0>
    1772:	4f c0       	rjmp	.+158    	; 0x1812 <DIO_GetPinVal+0x116>
			{case DIO_PORTA : *Copy_pvValue=GET_BIT(PINA,Copy_Pin);break;
    1774:	e9 e3       	ldi	r30, 0x39	; 57
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a9 01       	movw	r20, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_GetPinVal+0x90>
    1788:	55 95       	asr	r21
    178a:	47 95       	ror	r20
    178c:	8a 95       	dec	r24
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_GetPinVal+0x8c>
    1790:	ca 01       	movw	r24, r20
    1792:	81 70       	andi	r24, 0x01	; 1
    1794:	ec 81       	ldd	r30, Y+4	; 0x04
    1796:	fd 81       	ldd	r31, Y+5	; 0x05
    1798:	80 83       	st	Z, r24
    179a:	3b c0       	rjmp	.+118    	; 0x1812 <DIO_GetPinVal+0x116>
			case DIO_PORTB : *Copy_pvValue=GET_BIT(PINB,Copy_Pin);break;
    179c:	e6 e3       	ldi	r30, 0x36	; 54
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a9 01       	movw	r20, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_GetPinVal+0xb8>
    17b0:	55 95       	asr	r21
    17b2:	47 95       	ror	r20
    17b4:	8a 95       	dec	r24
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_GetPinVal+0xb4>
    17b8:	ca 01       	movw	r24, r20
    17ba:	81 70       	andi	r24, 0x01	; 1
    17bc:	ec 81       	ldd	r30, Y+4	; 0x04
    17be:	fd 81       	ldd	r31, Y+5	; 0x05
    17c0:	80 83       	st	Z, r24
    17c2:	27 c0       	rjmp	.+78     	; 0x1812 <DIO_GetPinVal+0x116>
			case DIO_PORTC : *Copy_pvValue=GET_BIT(PINC,Copy_Pin);break;
    17c4:	e3 e3       	ldi	r30, 0x33	; 51
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_GetPinVal+0xe0>
    17d8:	55 95       	asr	r21
    17da:	47 95       	ror	r20
    17dc:	8a 95       	dec	r24
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_GetPinVal+0xdc>
    17e0:	ca 01       	movw	r24, r20
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	ec 81       	ldd	r30, Y+4	; 0x04
    17e6:	fd 81       	ldd	r31, Y+5	; 0x05
    17e8:	80 83       	st	Z, r24
    17ea:	13 c0       	rjmp	.+38     	; 0x1812 <DIO_GetPinVal+0x116>
			case DIO_PORTD : *Copy_pvValue=GET_BIT(PIND,Copy_Pin);break;
    17ec:	e0 e3       	ldi	r30, 0x30	; 48
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a9 01       	movw	r20, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_GetPinVal+0x108>
    1800:	55 95       	asr	r21
    1802:	47 95       	ror	r20
    1804:	8a 95       	dec	r24
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_GetPinVal+0x104>
    1808:	ca 01       	movw	r24, r20
    180a:	81 70       	andi	r24, 0x01	; 1
    180c:	ec 81       	ldd	r30, Y+4	; 0x04
    180e:	fd 81       	ldd	r31, Y+5	; 0x05
    1810:	80 83       	st	Z, r24

			}
		}
return Local_uint8ErrorState;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	27 96       	adiw	r28, 0x07	; 7
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <DIO_GetPortVal>:


uint8 DIO_GetPortVal(Port_t Copy_Port,uint8* Copy_pvValue)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <DIO_GetPortVal+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <DIO_GetPortVal+0x8>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <DIO_GetPortVal+0xa>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	7c 83       	std	Y+4, r23	; 0x04
    1838:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8ErrorState = 0;
    183a:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	18 f0       	brcs	.+6      	; 0x1848 <DIO_GetPortVal+0x22>
			Local_uint8ErrorState = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	3a c0       	rjmp	.+116    	; 0x18bc <DIO_GetPortVal+0x96>
		} else {
			switch(Copy_Port)
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3e 83       	std	Y+6, r19	; 0x06
    1850:	2d 83       	std	Y+5, r18	; 0x05
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	91 05       	cpc	r25, r1
    185a:	e1 f0       	breq	.+56     	; 0x1894 <DIO_GetPortVal+0x6e>
    185c:	2d 81       	ldd	r18, Y+5	; 0x05
    185e:	3e 81       	ldd	r19, Y+6	; 0x06
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	2c f4       	brge	.+10     	; 0x1870 <DIO_GetPortVal+0x4a>
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	61 f0       	breq	.+24     	; 0x1886 <DIO_GetPortVal+0x60>
    186e:	26 c0       	rjmp	.+76     	; 0x18bc <DIO_GetPortVal+0x96>
    1870:	2d 81       	ldd	r18, Y+5	; 0x05
    1872:	3e 81       	ldd	r19, Y+6	; 0x06
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	a1 f0       	breq	.+40     	; 0x18a2 <DIO_GetPortVal+0x7c>
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	91 05       	cpc	r25, r1
    1882:	b1 f0       	breq	.+44     	; 0x18b0 <DIO_GetPortVal+0x8a>
    1884:	1b c0       	rjmp	.+54     	; 0x18bc <DIO_GetPortVal+0x96>
			{case DIO_PORTA:*Copy_pvValue=PINA;break;
    1886:	e9 e3       	ldi	r30, 0x39	; 57
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	eb 81       	ldd	r30, Y+3	; 0x03
    188e:	fc 81       	ldd	r31, Y+4	; 0x04
    1890:	80 83       	st	Z, r24
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <DIO_GetPortVal+0x96>
			case DIO_PORTB:*Copy_pvValue=PINB;break;
    1894:	e6 e3       	ldi	r30, 0x36	; 54
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	eb 81       	ldd	r30, Y+3	; 0x03
    189c:	fc 81       	ldd	r31, Y+4	; 0x04
    189e:	80 83       	st	Z, r24
    18a0:	0d c0       	rjmp	.+26     	; 0x18bc <DIO_GetPortVal+0x96>
			case DIO_PORTC:*Copy_pvValue=PINC;break;
    18a2:	e3 e3       	ldi	r30, 0x33	; 51
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	eb 81       	ldd	r30, Y+3	; 0x03
    18aa:	fc 81       	ldd	r31, Y+4	; 0x04
    18ac:	80 83       	st	Z, r24
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <DIO_GetPortVal+0x96>
			case DIO_PORTD:*Copy_pvValue=PIND;break;
    18b0:	e0 e3       	ldi	r30, 0x30	; 48
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	eb 81       	ldd	r30, Y+3	; 0x03
    18b8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ba:	80 83       	st	Z, r24
			}
		}

return Local_uint8ErrorState;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18be:	26 96       	adiw	r28, 0x06	; 6
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <ADC_voidInit>:
#include "../inc/ADC_interface.h"
#include "../inc/ADC_register.h"
#include "../inc/ADC_config.h"
#include "../inc/ADC_private.h"

void ADC_voidInit(void) {
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	/*PRE-SCALER SELECTION*/
	ADCSRA_Reg->ADPS = DESIRED_PRE_SCALER;
    18d8:	e6 e2       	ldi	r30, 0x26	; 38
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	88 7f       	andi	r24, 0xF8	; 248
    18e0:	83 60       	ori	r24, 0x03	; 3
    18e2:	80 83       	st	Z, r24

	/*Choosing the voltage reference*/
	ADMUX_Reg->REFS = DESIRED_VOLTAGE_REF;
    18e4:	e7 e2       	ldi	r30, 0x27	; 39
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8f 73       	andi	r24, 0x3F	; 63
    18ec:	80 64       	ori	r24, 0x40	; 64
    18ee:	80 83       	st	Z, r24
	/*choose the Resolution*/
	ADMUX_Reg->ADLAR = RIGHT;
    18f0:	e7 e2       	ldi	r30, 0x27	; 39
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8f 7d       	andi	r24, 0xDF	; 223
    18f8:	80 83       	st	Z, r24

#ifdef AUTO_TREGERED

	ADCSRA_Reg->ADATE=ENABLE;
    18fa:	e6 e2       	ldi	r30, 0x26	; 38
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 62       	ori	r24, 0x20	; 32
    1902:	80 83       	st	Z, r24

	ADC_SFIOR_Reg->ADTS  =  AUTO_TRIGER_SOURCE;
    1904:	e0 e5       	ldi	r30, 0x50	; 80
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8f 71       	andi	r24, 0x1F	; 31
    190c:	80 68       	ori	r24, 0x80	; 128
    190e:	80 83       	st	Z, r24

#endif
	/*ENABLE THE ADC*/
	ADCSRA_Reg->ADEN = ENABLE;
    1910:	e6 e2       	ldi	r30, 0x26	; 38
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 68       	ori	r24, 0x80	; 128
    1918:	80 83       	st	Z, r24

}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <ADC_uint8StartConversionSynchronus>:
ADC_Status_t ADC_uint8StartConversionSynchronus(Channel_t Copy_uint8channel,uint16* copy_uint16PuReading) {
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	28 97       	sbiw	r28, 0x08	; 8
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	8e 83       	std	Y+6, r24	; 0x06
    1936:	78 87       	std	Y+8, r23	; 0x08
    1938:	6f 83       	std	Y+7, r22	; 0x07
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    193a:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_uint32Counter = 0;
    193c:	19 82       	std	Y+1, r1	; 0x01
    193e:	1a 82       	std	Y+2, r1	; 0x02
    1940:	1b 82       	std	Y+3, r1	; 0x03
    1942:	1c 82       	std	Y+4, r1	; 0x04
	if (NULL == copy_uint16PuReading) {
    1944:	8f 81       	ldd	r24, Y+7	; 0x07
    1946:	98 85       	ldd	r25, Y+8	; 0x08
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	19 f4       	brne	.+6      	; 0x1952 <ADC_uint8StartConversionSynchronus+0x32>
		Local_ErrorStatus = ADC_POINTER_Err;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	4a c0       	rjmp	.+148    	; 0x19e6 <ADC_uint8StartConversionSynchronus+0xc6>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    1952:	8e 81       	ldd	r24, Y+6	; 0x06
    1954:	88 30       	cpi	r24, 0x08	; 8
    1956:	18 f0       	brcs	.+6      	; 0x195e <ADC_uint8StartConversionSynchronus+0x3e>
		Local_ErrorStatus = ADC_ChannelErr;
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	44 c0       	rjmp	.+136    	; 0x19e6 <ADC_uint8StartConversionSynchronus+0xc6>
	} else {
		/*Select the Channel*/
		ADMUX_Reg->MUX = Copy_uint8channel;
    195e:	e7 e2       	ldi	r30, 0x27	; 39
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	8e 81       	ldd	r24, Y+6	; 0x06
    1964:	8f 71       	andi	r24, 0x1F	; 31
    1966:	98 2f       	mov	r25, r24
    1968:	9f 71       	andi	r25, 0x1F	; 31
    196a:	80 81       	ld	r24, Z
    196c:	80 7e       	andi	r24, 0xE0	; 224
    196e:	89 2b       	or	r24, r25
    1970:	80 83       	st	Z, r24
    1972:	0b c0       	rjmp	.+22     	; 0x198a <ADC_uint8StartConversionSynchronus+0x6a>
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
			Local_uint32Counter++;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	ab 81       	ldd	r26, Y+3	; 0x03
    197a:	bc 81       	ldd	r27, Y+4	; 0x04
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	a1 1d       	adc	r26, r1
    1980:	b1 1d       	adc	r27, r1
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	ab 83       	std	Y+3, r26	; 0x03
    1988:	bc 83       	std	Y+4, r27	; 0x04
#ifndef AUTO_TREGERED
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
    198a:	e6 e2       	ldi	r30, 0x26	; 38
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 71       	andi	r24, 0x10	; 16
    1992:	88 23       	and	r24, r24
    1994:	61 f4       	brne	.+24     	; 0x19ae <ADC_uint8StartConversionSynchronus+0x8e>
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	ab 81       	ldd	r26, Y+3	; 0x03
    199c:	bc 81       	ldd	r27, Y+4	; 0x04
    199e:	84 3f       	cpi	r24, 0xF4	; 244
    19a0:	21 e0       	ldi	r18, 0x01	; 1
    19a2:	92 07       	cpc	r25, r18
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	a2 07       	cpc	r26, r18
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	b2 07       	cpc	r27, r18
    19ac:	18 f3       	brcs	.-58     	; 0x1974 <ADC_uint8StartConversionSynchronus+0x54>
			Local_uint32Counter++;
		}
		if (Local_uint32Counter == TIME_OUT) {
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	ab 81       	ldd	r26, Y+3	; 0x03
    19b4:	bc 81       	ldd	r27, Y+4	; 0x04
    19b6:	84 3f       	cpi	r24, 0xF4	; 244
    19b8:	21 e0       	ldi	r18, 0x01	; 1
    19ba:	92 07       	cpc	r25, r18
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	a2 07       	cpc	r26, r18
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	b2 07       	cpc	r27, r18
    19c4:	19 f4       	brne	.+6      	; 0x19cc <ADC_uint8StartConversionSynchronus+0xac>
			Local_ErrorStatus = ADC_TIME_OUTErr;
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <ADC_uint8StartConversionSynchronus+0xc6>
		} else {
			/*Clear the valg*/
			ADCSRA_Reg->ADIF = ENABLE;
    19cc:	e6 e2       	ldi	r30, 0x26	; 38
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	80 61       	ori	r24, 0x10	; 16
    19d4:	80 83       	st	Z, r24

#if     DATA_SIZE == BIT_10_MACRO
			*copy_uint16PuReading=ADC;
    19d6:	e4 e2       	ldi	r30, 0x24	; 36
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	ef 81       	ldd	r30, Y+7	; 0x07
    19e0:	f8 85       	ldd	r31, Y+8	; 0x08
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24

		}

	}

	return Local_ErrorStatus;
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19e8:	28 96       	adiw	r28, 0x08	; 8
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <ADC_uint8StartConversionASynchronus>:

ADC_Status_t ADC_uint8StartConversionASynchronus(Channel_t Copy_uint8channel,void (*copy_PvNotifacation)(void), uint16* copy_uint16PuReading) {
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <ADC_uint8StartConversionASynchronus+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <ADC_uint8StartConversionASynchronus+0x8>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <ADC_uint8StartConversionASynchronus+0xa>
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	8a 83       	std	Y+2, r24	; 0x02
    1a0a:	7c 83       	std	Y+4, r23	; 0x04
    1a0c:	6b 83       	std	Y+3, r22	; 0x03
    1a0e:	5e 83       	std	Y+6, r21	; 0x06
    1a10:	4d 83       	std	Y+5, r20	; 0x05
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    1a12:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == copy_uint16PuReading) {
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	19 f4       	brne	.+6      	; 0x1a22 <ADC_uint8StartConversionASynchronus+0x28>
		Local_ErrorStatus = ADC_POINTER_Err;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	1e c0       	rjmp	.+60     	; 0x1a5e <ADC_uint8StartConversionASynchronus+0x64>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	88 30       	cpi	r24, 0x08	; 8
    1a26:	18 f0       	brcs	.+6      	; 0x1a2e <ADC_uint8StartConversionASynchronus+0x34>
		Local_ErrorStatus = ADC_ChannelErr;
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	18 c0       	rjmp	.+48     	; 0x1a5e <ADC_uint8StartConversionASynchronus+0x64>
	} else if (NULL == copy_PvNotifacation) {
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	19 f4       	brne	.+6      	; 0x1a3c <ADC_uint8StartConversionASynchronus+0x42>
		Local_ErrorStatus = ADC_POINTER_Err;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	11 c0       	rjmp	.+34     	; 0x1a5e <ADC_uint8StartConversionASynchronus+0x64>
	} else {

		Global_PvNotifacation = copy_PvNotifacation;
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	90 93 bf 00 	sts	0x00BF, r25
    1a44:	80 93 be 00 	sts	0x00BE, r24

		/*Assign Address of Receive Variable in Global Pointer to be used in ISR*/
		Global_uint16PuReading = copy_uint16PuReading;
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	90 93 c1 00 	sts	0x00C1, r25
    1a50:	80 93 c0 00 	sts	0x00C0, r24


		/* ADC Conversion Complete Interrupt Enable*/
		ADCSRA_Reg->ADIE = ENABLE;
    1a54:	e6 e2       	ldi	r30, 0x26	; 38
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	88 60       	ori	r24, 0x08	; 8
    1a5c:	80 83       	st	Z, r24
#ifndef AUTO_TREGERED
		/*ADC Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
	}
	return Local_ErrorStatus;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a60:	26 96       	adiw	r28, 0x06	; 6
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <__vector_16>:



void __vector_16(void) {
    1a72:	1f 92       	push	r1
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	0f 92       	push	r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	2f 93       	push	r18
    1a7e:	3f 93       	push	r19
    1a80:	4f 93       	push	r20
    1a82:	5f 93       	push	r21
    1a84:	6f 93       	push	r22
    1a86:	7f 93       	push	r23
    1a88:	8f 93       	push	r24
    1a8a:	9f 93       	push	r25
    1a8c:	af 93       	push	r26
    1a8e:	bf 93       	push	r27
    1a90:	ef 93       	push	r30
    1a92:	ff 93       	push	r31
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
#if     DATA_SIZE == BIT_10_MACRO
	*Global_uint16PuReading=ADC;
    1a9c:	a0 91 c0 00 	lds	r26, 0x00C0
    1aa0:	b0 91 c1 00 	lds	r27, 0x00C1
    1aa4:	e4 e2       	ldi	r30, 0x24	; 36
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	91 81       	ldd	r25, Z+1	; 0x01
    1aac:	8d 93       	st	X+, r24
    1aae:	9c 93       	st	X, r25
#elif  DATA_SIZE == BIT_8_MACRO
	*Global_uint16PuReading = ADC >> 2;
#endif

	/*Execute Notification Function*/
	Global_PvNotifacation();
    1ab0:	e0 91 be 00 	lds	r30, 0x00BE
    1ab4:	f0 91 bf 00 	lds	r31, 0x00BF
    1ab8:	09 95       	icall
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	bf 91       	pop	r27
    1ac4:	af 91       	pop	r26
    1ac6:	9f 91       	pop	r25
    1ac8:	8f 91       	pop	r24
    1aca:	7f 91       	pop	r23
    1acc:	6f 91       	pop	r22
    1ace:	5f 91       	pop	r21
    1ad0:	4f 91       	pop	r20
    1ad2:	3f 91       	pop	r19
    1ad4:	2f 91       	pop	r18
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <delay_ms>:
#include "../../../LIB/STD_TYPES.h"
#include "../../../LIB/BIT_MATH.h"
#include "../inc/CLCD_interface.h"
#include "../../../MCAL/DIO/inc/DIO_INTERFACE.h"

void delay_ms(uint16 milliseconds) {
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	2c 97       	sbiw	r28, 0x0c	; 12
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	9c 87       	std	Y+12, r25	; 0x0c
    1af6:	8b 87       	std	Y+11, r24	; 0x0b
    // Assuming 4 cycles per loop iteration for an 8 MHz clock
    const uint16 cycles_per_ms = 100; // Calculated for 1 ms delay
    1af8:	84 e6       	ldi	r24, 0x64	; 100
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    uint32 total_iterations = milliseconds * cycles_per_ms;
    1b00:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b02:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	ac 01       	movw	r20, r24
    1b0a:	24 9f       	mul	r18, r20
    1b0c:	c0 01       	movw	r24, r0
    1b0e:	25 9f       	mul	r18, r21
    1b10:	90 0d       	add	r25, r0
    1b12:	34 9f       	mul	r19, r20
    1b14:	90 0d       	add	r25, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	cc 01       	movw	r24, r24
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	ab 83       	std	Y+3, r26	; 0x03
    1b24:	bc 83       	std	Y+4, r27	; 0x04

    // Loop for the calculated number of iterations
    for (volatile uint32 i = 0; i < total_iterations; i++) {
    1b26:	1f 82       	std	Y+7, r1	; 0x07
    1b28:	18 86       	std	Y+8, r1	; 0x08
    1b2a:	19 86       	std	Y+9, r1	; 0x09
    1b2c:	1a 86       	std	Y+10, r1	; 0x0a
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <delay_ms+0x66>
    1b30:	8f 81       	ldd	r24, Y+7	; 0x07
    1b32:	98 85       	ldd	r25, Y+8	; 0x08
    1b34:	a9 85       	ldd	r26, Y+9	; 0x09
    1b36:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	a1 1d       	adc	r26, r1
    1b3c:	b1 1d       	adc	r27, r1
    1b3e:	8f 83       	std	Y+7, r24	; 0x07
    1b40:	98 87       	std	Y+8, r25	; 0x08
    1b42:	a9 87       	std	Y+9, r26	; 0x09
    1b44:	ba 87       	std	Y+10, r27	; 0x0a
    1b46:	2f 81       	ldd	r18, Y+7	; 0x07
    1b48:	38 85       	ldd	r19, Y+8	; 0x08
    1b4a:	49 85       	ldd	r20, Y+9	; 0x09
    1b4c:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	ab 81       	ldd	r26, Y+3	; 0x03
    1b54:	bc 81       	ldd	r27, Y+4	; 0x04
    1b56:	28 17       	cp	r18, r24
    1b58:	39 07       	cpc	r19, r25
    1b5a:	4a 07       	cpc	r20, r26
    1b5c:	5b 07       	cpc	r21, r27
    1b5e:	40 f3       	brcs	.-48     	; 0x1b30 <delay_ms+0x50>
        // Empty loop to create the delay
    }
}
    1b60:	2c 96       	adiw	r28, 0x0c	; 12
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(uint8 copy_uint8Command)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	/*Setting RS pin to low*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
/*Setting RW pin low for write*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>

/*Set command data pins*/
DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Command);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	69 81       	ldd	r22, Y+1	; 0x01
    1b96:	0e 94 cc 08 	call	0x1198	; 0x1198 <DIO_SetPortVal>

/*Send Enable pulse*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	62 e0       	ldi	r22, 0x02	; 2
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
delay_ms(2);
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <delay_ms>
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	62 e0       	ldi	r22, 0x02	; 2
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
}
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	/*Wait more that 30 ms*/
	delay_ms(40);
    1bc6:	88 e2       	ldi	r24, 0x28	; 40
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <delay_ms>

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
    1bce:	88 e3       	ldi	r24, 0x38	; 56
    1bd0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
    1bd4:	8c e0       	ldi	r24, 0x0C	; 12
    1bd6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(0b1);
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <CLCD_voidSendCommand>



}
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <CLCD_voidSendData>:


void CLCD_voidSendData(uint8 copy_uint8Data)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01

	/*Setting RS pin to HIGH*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
	/*Setting RW pin low for write*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>

	/*Set data pins*/
	DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Data);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	69 81       	ldd	r22, Y+1	; 0x01
    1c0a:	0e 94 cc 08 	call	0x1198	; 0x1198 <DIO_SetPortVal>

	/*Send Enable pulse*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
	delay_ms(2);
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <delay_ms>
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	62 e0       	ldi	r22, 0x02	; 2
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>


}
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <CLCD_voidSendString>:

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <CLCD_voidSendString+0x6>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
uint8 Local_uint8Counter=0;
    1c42:	19 82       	std	Y+1, r1	; 0x01
    1c44:	0e c0       	rjmp	.+28     	; 0x1c62 <CLCD_voidSendString+0x30>
while(Copy_uint8String[Local_uint8Counter]!='\0')
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	fc 01       	movw	r30, r24
    1c52:	e2 0f       	add	r30, r18
    1c54:	f3 1f       	adc	r31, r19
    1c56:	80 81       	ld	r24, Z
    1c58:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <CLCD_voidSendData>
    Local_uint8Counter++;
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
uint8 Local_uint8Counter=0;
while(Copy_uint8String[Local_uint8Counter]!='\0')
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e2 0f       	add	r30, r18
    1c70:	f3 1f       	adc	r31, r19
    1c72:	80 81       	ld	r24, Z
    1c74:	88 23       	and	r24, r24
    1c76:	39 f7       	brne	.-50     	; 0x1c46 <CLCD_voidSendString+0x14>
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    Local_uint8Counter++;
}

}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <CLCD_voidGoToXY+0x6>
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	6b 83       	std	Y+3, r22	; 0x03
  uint8 Local_uint8Address;

  if(Copy_uint8Xposition==0)
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	88 23       	and	r24, r24
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <CLCD_voidGoToXY+0x1c>
  {
	  Local_uint8Address=Copy_uint8Yposition;
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <CLCD_voidGoToXY+0x28>
  }
  else if(Copy_uint8Xposition==1)
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	19 f4       	brne	.+6      	; 0x1cac <CLCD_voidGoToXY+0x28>

  {
	  Local_uint8Address=Copy_uint8Yposition+0x40;
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	80 5c       	subi	r24, 0xC0	; 192
    1caa:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_voidSendCommand(Local_uint8Address|(1<<7));
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <CLCD_voidSendCommand>
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(sint32 copy_uint32Number)
{
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	60 97       	sbiw	r28, 0x10	; 16
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	6d 87       	std	Y+13, r22	; 0x0d
    1cda:	7e 87       	std	Y+14, r23	; 0x0e
    1cdc:	8f 87       	std	Y+15, r24	; 0x0f
    1cde:	98 8b       	std	Y+16, r25	; 0x10
	if(copy_uint32Number<0)
    1ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce4:	af 85       	ldd	r26, Y+15	; 0x0f
    1ce6:	b8 89       	ldd	r27, Y+16	; 0x10
    1ce8:	bb 23       	and	r27, r27
    1cea:	94 f4       	brge	.+36     	; 0x1d10 <CLCD_voidWriteNumber+0x50>
	{
		CLCD_voidSendData('-');
    1cec:	8d e2       	ldi	r24, 0x2D	; 45
    1cee:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <CLCD_voidSendData>
		copy_uint32Number= -copy_uint32Number;
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	af 85       	ldd	r26, Y+15	; 0x0f
    1cf8:	b8 89       	ldd	r27, Y+16	; 0x10
    1cfa:	b0 95       	com	r27
    1cfc:	a0 95       	com	r26
    1cfe:	90 95       	com	r25
    1d00:	81 95       	neg	r24
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	af 4f       	sbci	r26, 0xFF	; 255
    1d06:	bf 4f       	sbci	r27, 0xFF	; 255
    1d08:	8d 87       	std	Y+13, r24	; 0x0d
    1d0a:	9e 87       	std	Y+14, r25	; 0x0e
    1d0c:	af 87       	std	Y+15, r26	; 0x0f
    1d0e:	b8 8b       	std	Y+16, r27	; 0x10
	}
	if(copy_uint32Number==0)
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	af 85       	ldd	r26, Y+15	; 0x0f
    1d16:	b8 89       	ldd	r27, Y+16	; 0x10
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	a1 05       	cpc	r26, r1
    1d1c:	b1 05       	cpc	r27, r1
    1d1e:	21 f4       	brne	.+8      	; 0x1d28 <CLCD_voidWriteNumber+0x68>
	{
		CLCD_voidSendData('0');
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <CLCD_voidSendData>
    1d26:	50 c0       	rjmp	.+160    	; 0x1dc8 <CLCD_voidWriteNumber+0x108>
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
    1d28:	1a 82       	std	Y+2, r1	; 0x02
    1d2a:	2e c0       	rjmp	.+92     	; 0x1d88 <CLCD_voidWriteNumber+0xc8>
while(copy_uint32Number>0)
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	08 2f       	mov	r16, r24
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d36:	af 85       	ldd	r26, Y+15	; 0x0f
    1d38:	b8 89       	ldd	r27, Y+16	; 0x10
    1d3a:	2a e0       	ldi	r18, 0x0A	; 10
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 89 10 	call	0x2112	; 0x2112 <__divmodsi4>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	28 2f       	mov	r18, r24
    1d50:	20 5d       	subi	r18, 0xD0	; 208
    1d52:	ce 01       	movw	r24, r28
    1d54:	03 96       	adiw	r24, 0x03	; 3
    1d56:	fc 01       	movw	r30, r24
    1d58:	e0 0f       	add	r30, r16
    1d5a:	f1 1f       	adc	r31, r17
    1d5c:	20 83       	st	Z, r18
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8a 83       	std	Y+2, r24	; 0x02
	copy_uint32Number/=10;
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	af 85       	ldd	r26, Y+15	; 0x0f
    1d6a:	b8 89       	ldd	r27, Y+16	; 0x10
    1d6c:	2a e0       	ldi	r18, 0x0A	; 10
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 89 10 	call	0x2112	; 0x2112 <__divmodsi4>
    1d7c:	da 01       	movw	r26, r20
    1d7e:	c9 01       	movw	r24, r18
    1d80:	8d 87       	std	Y+13, r24	; 0x0d
    1d82:	9e 87       	std	Y+14, r25	; 0x0e
    1d84:	af 87       	std	Y+15, r26	; 0x0f
    1d86:	b8 8b       	std	Y+16, r27	; 0x10
		CLCD_voidSendData('0');
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
while(copy_uint32Number>0)
    1d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8c:	af 85       	ldd	r26, Y+15	; 0x0f
    1d8e:	b8 89       	ldd	r27, Y+16	; 0x10
    1d90:	18 16       	cp	r1, r24
    1d92:	19 06       	cpc	r1, r25
    1d94:	1a 06       	cpc	r1, r26
    1d96:	1b 06       	cpc	r1, r27
    1d98:	4c f2       	brlt	.-110    	; 0x1d2c <CLCD_voidWriteNumber+0x6c>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	11 c0       	rjmp	.+34     	; 0x1dc2 <CLCD_voidWriteNumber+0x102>
{
	CLCD_voidSendData(NUM[i-1]);
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9c 01       	movw	r18, r24
    1da8:	21 50       	subi	r18, 0x01	; 1
    1daa:	30 40       	sbci	r19, 0x00	; 0
    1dac:	ce 01       	movw	r24, r28
    1dae:	03 96       	adiw	r24, 0x03	; 3
    1db0:	fc 01       	movw	r30, r24
    1db2:	e2 0f       	add	r30, r18
    1db4:	f3 1f       	adc	r31, r19
    1db6:	80 81       	ld	r24, Z
    1db8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <CLCD_voidSendData>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	81 50       	subi	r24, 0x01	; 1
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	88 23       	and	r24, r24
    1dc6:	61 f7       	brne	.-40     	; 0x1da0 <CLCD_voidWriteNumber+0xe0>
{
	CLCD_voidSendData(NUM[i-1]);
}
}
    1dc8:	60 96       	adiw	r28, 0x10	; 16
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <CLCD_voidWriteSpecialChar>:
void CLCD_voidWriteSpecialChar(uint8* copy_puint8Pattern,uint8 copy_uint8PatternNumber,uint8 copy_uint8Xposition,uint8 copy_uint8Yposition)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	27 97       	sbiw	r28, 0x07	; 7
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
    1df6:	6d 83       	std	Y+5, r22	; 0x05
    1df8:	4e 83       	std	Y+6, r20	; 0x06
    1dfa:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_uint8CGRAM_Address=0;
    1dfc:	1a 82       	std	Y+2, r1	; 0x02
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	8a 83       	std	Y+2, r24	; 0x02
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	80 64       	ori	r24, 0x40	; 64
    1e16:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <CLCD_voidSendCommand>

for(uint8 i=0;i<8;i++)
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	0e c0       	rjmp	.+28     	; 0x1e3a <CLCD_voidWriteSpecialChar+0x5c>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	fc 01       	movw	r30, r24
    1e2a:	e2 0f       	add	r30, r18
    1e2c:	f3 1f       	adc	r31, r19
    1e2e:	80 81       	ld	r24, Z
    1e30:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <CLCD_voidSendData>
	uint8 Local_uint8CGRAM_Address=0;
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));

for(uint8 i=0;i<8;i++)
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	8f 5f       	subi	r24, 0xFF	; 255
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	78 f3       	brcs	.-34     	; 0x1e1e <CLCD_voidWriteSpecialChar+0x40>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
}
/*go back to DDRAM to display the Arr*/
 CLCD_voidGoToXY(copy_uint8Xposition,copy_uint8Yposition);
    1e40:	8e 81       	ldd	r24, Y+6	; 0x06
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <CLCD_voidGoToXY>

CLCD_voidSendData(copy_uint8PatternNumber);
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <CLCD_voidSendData>

}
    1e4e:	27 96       	adiw	r28, 0x07	; 7
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <HandleGreenState>:
#define GREEN_DURATION  5
#define YELLOW_DURATION 5
#define RED_DURATION    5

static void HandleGreenState(void)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_HIGH);
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <HandleRedState>:
static void HandleRedState(void)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	62 e0       	ldi	r22, 0x02	; 2
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_LOW);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_HIGH);
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <HandleyellowState>:
static void HandleyellowState(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_HIGH);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_SetPinVal>
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <test>:

Stack TrafficStack;
int static timer_counter=0;
StackEnery Local_Variable=Green;

void test(void) {
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <test+0x6>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <test+0x8>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
	timer_counter++;
    1ee6:	80 91 c2 00 	lds	r24, 0x00C2
    1eea:	90 91 c3 00 	lds	r25, 0x00C3
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	90 93 c3 00 	sts	0x00C3, r25
    1ef4:	80 93 c2 00 	sts	0x00C2, r24
	if(timer_counter==1)
    1ef8:	80 91 c2 00 	lds	r24, 0x00C2
    1efc:	90 91 c3 00 	lds	r25, 0x00C3
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	91 05       	cpc	r25, r1
    1f04:	39 f4       	brne	.+14     	; 0x1f14 <test+0x3a>
		Stack_Pop(&TrafficStack,&Local_Variable);
    1f06:	84 ec       	ldi	r24, 0xC4	; 196
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	24 ea       	ldi	r18, 0xA4	; 164
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	b9 01       	movw	r22, r18
    1f10:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Stack_Pop>

	switch(Local_Variable)
    1f14:	80 91 a4 00 	lds	r24, 0x00A4
    1f18:	90 91 a5 00 	lds	r25, 0x00A5
    1f1c:	a0 91 a6 00 	lds	r26, 0x00A6
    1f20:	b0 91 a7 00 	lds	r27, 0x00A7
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	ab 83       	std	Y+3, r26	; 0x03
    1f2a:	bc 83       	std	Y+4, r27	; 0x04
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	ab 81       	ldd	r26, Y+3	; 0x03
    1f32:	bc 81       	ldd	r27, Y+4	; 0x04
    1f34:	86 30       	cpi	r24, 0x06	; 6
    1f36:	91 05       	cpc	r25, r1
    1f38:	a1 05       	cpc	r26, r1
    1f3a:	b1 05       	cpc	r27, r1
    1f3c:	09 f1       	breq	.+66     	; 0x1f80 <test+0xa6>
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	ab 81       	ldd	r26, Y+3	; 0x03
    1f44:	bc 81       	ldd	r27, Y+4	; 0x04
    1f46:	87 30       	cpi	r24, 0x07	; 7
    1f48:	91 05       	cpc	r25, r1
    1f4a:	a1 05       	cpc	r26, r1
    1f4c:	b1 05       	cpc	r27, r1
    1f4e:	31 f1       	breq	.+76     	; 0x1f9c <test+0xc2>
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	ab 81       	ldd	r26, Y+3	; 0x03
    1f56:	bc 81       	ldd	r27, Y+4	; 0x04
    1f58:	85 30       	cpi	r24, 0x05	; 5
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	a1 05       	cpc	r26, r1
    1f5e:	b1 05       	cpc	r27, r1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <test+0x8a>
    1f62:	41 c0       	rjmp	.+130    	; 0x1fe6 <test+0x10c>
	{
	case Green :
	{
		if(timer_counter>=GREEN_DURATION)
    1f64:	80 91 c2 00 	lds	r24, 0x00C2
    1f68:	90 91 c3 00 	lds	r25, 0x00C3
    1f6c:	85 30       	cpi	r24, 0x05	; 5
    1f6e:	91 05       	cpc	r25, r1
    1f70:	d4 f1       	brlt	.+116    	; 0x1fe6 <test+0x10c>
		{
			HandleyellowState();
    1f72:	0e 94 57 0f 	call	0x1eae	; 0x1eae <HandleyellowState>
			timer_counter=0;
    1f76:	10 92 c3 00 	sts	0x00C3, r1
    1f7a:	10 92 c2 00 	sts	0x00C2, r1
    1f7e:	33 c0       	rjmp	.+102    	; 0x1fe6 <test+0x10c>
		break;

	}
	case Yellow:
	{
		if(timer_counter>=YELLOW_DURATION)
    1f80:	80 91 c2 00 	lds	r24, 0x00C2
    1f84:	90 91 c3 00 	lds	r25, 0x00C3
    1f88:	85 30       	cpi	r24, 0x05	; 5
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	64 f1       	brlt	.+88     	; 0x1fe6 <test+0x10c>
		{
			HandleRedState();
    1f8e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HandleRedState>
			timer_counter=0;
    1f92:	10 92 c3 00 	sts	0x00C3, r1
    1f96:	10 92 c2 00 	sts	0x00C2, r1
    1f9a:	25 c0       	rjmp	.+74     	; 0x1fe6 <test+0x10c>
		}
		break;

	}
	case Red :
	{	if(timer_counter>=RED_DURATION)
    1f9c:	80 91 c2 00 	lds	r24, 0x00C2
    1fa0:	90 91 c3 00 	lds	r25, 0x00C3
    1fa4:	85 30       	cpi	r24, 0x05	; 5
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	f4 f0       	brlt	.+60     	; 0x1fe6 <test+0x10c>
			{
	            Stack_Push(&TrafficStack,Red);
    1faa:	84 ec       	ldi	r24, 0xC4	; 196
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	47 e0       	ldi	r20, 0x07	; 7
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
	            Stack_Push(&TrafficStack,Yellow);
    1fba:	84 ec       	ldi	r24, 0xC4	; 196
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	46 e0       	ldi	r20, 0x06	; 6
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
	            Stack_Push(&TrafficStack,Green);
    1fca:	84 ec       	ldi	r24, 0xC4	; 196
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	45 e0       	ldi	r20, 0x05	; 5
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
				timer_counter=0;
    1fda:	10 92 c3 00 	sts	0x00C3, r1
    1fde:	10 92 c2 00 	sts	0x00C2, r1
				HandleGreenState();
    1fe2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <HandleGreenState>
	}
	}



}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <TrafficLightInit>:

void TrafficLightInit(void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    1ffc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <PORT_voidInit>
    CLCD_voidInit();
    2000:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <CLCD_voidInit>
    GIE_Enable();
    2004:	0e 94 02 06 	call	0xc04	; 0xc04 <GIE_Enable>
    TIMER1_voidInit();
    2008:	0e 94 1a 03 	call	0x634	; 0x634 <TIMER1_voidInit>
	TIMER1_voidSetChannelACompMatch(31250);
    200c:	82 e1       	ldi	r24, 0x12	; 18
    200e:	9a e7       	ldi	r25, 0x7A	; 122
    2010:	0e 94 41 03 	call	0x682	; 0x682 <TIMER1_voidSetChannelACompMatch>
	TIMER1_CTCASetCallBck(&test);
    2014:	8d e6       	ldi	r24, 0x6D	; 109
    2016:	9f e0       	ldi	r25, 0x0F	; 15
    2018:	0e 94 94 03 	call	0x728	; 0x728 <TIMER1_CTCASetCallBck>
	/*stack initialization*/
    Stack_Creation(&TrafficStack);
    201c:	84 ec       	ldi	r24, 0xC4	; 196
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	0e 94 6e 00 	call	0xdc	; 0xdc <Stack_Creation>
    Stack_Push(&TrafficStack,Red);
    2024:	84 ec       	ldi	r24, 0xC4	; 196
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	47 e0       	ldi	r20, 0x07	; 7
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
    Stack_Push(&TrafficStack,Yellow);
    2034:	84 ec       	ldi	r24, 0xC4	; 196
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	46 e0       	ldi	r20, 0x06	; 6
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
    Stack_Push(&TrafficStack,Green);
    2044:	84 ec       	ldi	r24, 0xC4	; 196
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	45 e0       	ldi	r20, 0x05	; 5
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>

    HandleGreenState();
    2054:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <HandleGreenState>

}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <TrafficLightMainFunction>:

void TrafficLightMainFunction(void)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidGoToXY(0,0);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <CLCD_voidGoToXY>
	CLCD_voidSendString("Traffic light");
    206e:	80 e8       	ldi	r24, 0x80	; 128
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <CLCD_voidGoToXY>
	CLCD_voidSendString("Timer: ");
    207e:	8e e8       	ldi	r24, 0x8E	; 142
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <CLCD_voidSendString>
	CLCD_voidWriteNumber(timer_counter);
    2086:	80 91 c2 00 	lds	r24, 0x00C2
    208a:	90 91 c3 00 	lds	r25, 0x00C3
    208e:	aa 27       	eor	r26, r26
    2090:	97 fd       	sbrc	r25, 7
    2092:	a0 95       	com	r26
    2094:	ba 2f       	mov	r27, r26
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <CLCD_voidWriteNumber>
    if (TrafficStack.top != NULL) {
    209e:	80 91 c4 00 	lds	r24, 0x00C4
    20a2:	90 91 c5 00 	lds	r25, 0x00C5
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	a1 f0       	breq	.+40     	; 0x20d2 <TrafficLightMainFunction+0x74>
        CLCD_voidGoToXY(1, 8);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	68 e0       	ldi	r22, 0x08	; 8
    20ae:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <CLCD_voidGoToXY>
        CLCD_voidSendString(" Size: ");
    20b2:	86 e9       	ldi	r24, 0x96	; 150
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <CLCD_voidSendString>
        CLCD_voidWriteNumber(TrafficStack.Size);
    20ba:	80 91 c6 00 	lds	r24, 0x00C6
    20be:	90 91 c7 00 	lds	r25, 0x00C7
    20c2:	a0 91 c8 00 	lds	r26, 0x00C8
    20c6:	b0 91 c9 00 	lds	r27, 0x00C9
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <CLCD_voidWriteNumber>
    }

}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <main>:
#include "TrafficLights/inc/TrafficLightsControl_interface.h"


int main()
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
	TrafficLightInit();
    20e0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TrafficLightInit>


	while(1)
	{
		TrafficLightMainFunction();
    20e4:	0e 94 2f 10 	call	0x205e	; 0x205e <TrafficLightMainFunction>
    20e8:	fd cf       	rjmp	.-6      	; 0x20e4 <main+0xc>

000020ea <__udivmodhi4>:
    20ea:	aa 1b       	sub	r26, r26
    20ec:	bb 1b       	sub	r27, r27
    20ee:	51 e1       	ldi	r21, 0x11	; 17
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <__udivmodhi4_ep>

000020f2 <__udivmodhi4_loop>:
    20f2:	aa 1f       	adc	r26, r26
    20f4:	bb 1f       	adc	r27, r27
    20f6:	a6 17       	cp	r26, r22
    20f8:	b7 07       	cpc	r27, r23
    20fa:	10 f0       	brcs	.+4      	; 0x2100 <__udivmodhi4_ep>
    20fc:	a6 1b       	sub	r26, r22
    20fe:	b7 0b       	sbc	r27, r23

00002100 <__udivmodhi4_ep>:
    2100:	88 1f       	adc	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	5a 95       	dec	r21
    2106:	a9 f7       	brne	.-22     	; 0x20f2 <__udivmodhi4_loop>
    2108:	80 95       	com	r24
    210a:	90 95       	com	r25
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	08 95       	ret

00002112 <__divmodsi4>:
    2112:	97 fb       	bst	r25, 7
    2114:	09 2e       	mov	r0, r25
    2116:	05 26       	eor	r0, r21
    2118:	0e d0       	rcall	.+28     	; 0x2136 <__divmodsi4_neg1>
    211a:	57 fd       	sbrc	r21, 7
    211c:	04 d0       	rcall	.+8      	; 0x2126 <__divmodsi4_neg2>
    211e:	14 d0       	rcall	.+40     	; 0x2148 <__udivmodsi4>
    2120:	0a d0       	rcall	.+20     	; 0x2136 <__divmodsi4_neg1>
    2122:	00 1c       	adc	r0, r0
    2124:	38 f4       	brcc	.+14     	; 0x2134 <__divmodsi4_exit>

00002126 <__divmodsi4_neg2>:
    2126:	50 95       	com	r21
    2128:	40 95       	com	r20
    212a:	30 95       	com	r19
    212c:	21 95       	neg	r18
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	4f 4f       	sbci	r20, 0xFF	; 255
    2132:	5f 4f       	sbci	r21, 0xFF	; 255

00002134 <__divmodsi4_exit>:
    2134:	08 95       	ret

00002136 <__divmodsi4_neg1>:
    2136:	f6 f7       	brtc	.-4      	; 0x2134 <__divmodsi4_exit>
    2138:	90 95       	com	r25
    213a:	80 95       	com	r24
    213c:	70 95       	com	r23
    213e:	61 95       	neg	r22
    2140:	7f 4f       	sbci	r23, 0xFF	; 255
    2142:	8f 4f       	sbci	r24, 0xFF	; 255
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	08 95       	ret

00002148 <__udivmodsi4>:
    2148:	a1 e2       	ldi	r26, 0x21	; 33
    214a:	1a 2e       	mov	r1, r26
    214c:	aa 1b       	sub	r26, r26
    214e:	bb 1b       	sub	r27, r27
    2150:	fd 01       	movw	r30, r26
    2152:	0d c0       	rjmp	.+26     	; 0x216e <__udivmodsi4_ep>

00002154 <__udivmodsi4_loop>:
    2154:	aa 1f       	adc	r26, r26
    2156:	bb 1f       	adc	r27, r27
    2158:	ee 1f       	adc	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	a2 17       	cp	r26, r18
    215e:	b3 07       	cpc	r27, r19
    2160:	e4 07       	cpc	r30, r20
    2162:	f5 07       	cpc	r31, r21
    2164:	20 f0       	brcs	.+8      	; 0x216e <__udivmodsi4_ep>
    2166:	a2 1b       	sub	r26, r18
    2168:	b3 0b       	sbc	r27, r19
    216a:	e4 0b       	sbc	r30, r20
    216c:	f5 0b       	sbc	r31, r21

0000216e <__udivmodsi4_ep>:
    216e:	66 1f       	adc	r22, r22
    2170:	77 1f       	adc	r23, r23
    2172:	88 1f       	adc	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	1a 94       	dec	r1
    2178:	69 f7       	brne	.-38     	; 0x2154 <__udivmodsi4_loop>
    217a:	60 95       	com	r22
    217c:	70 95       	com	r23
    217e:	80 95       	com	r24
    2180:	90 95       	com	r25
    2182:	9b 01       	movw	r18, r22
    2184:	ac 01       	movw	r20, r24
    2186:	bd 01       	movw	r22, r26
    2188:	cf 01       	movw	r24, r30
    218a:	08 95       	ret

0000218c <malloc>:
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	bc 01       	movw	r22, r24
    2192:	82 30       	cpi	r24, 0x02	; 2
    2194:	91 05       	cpc	r25, r1
    2196:	10 f4       	brcc	.+4      	; 0x219c <malloc+0x10>
    2198:	62 e0       	ldi	r22, 0x02	; 2
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	a0 91 cc 00 	lds	r26, 0x00CC
    21a0:	b0 91 cd 00 	lds	r27, 0x00CD
    21a4:	ed 01       	movw	r28, r26
    21a6:	e0 e0       	ldi	r30, 0x00	; 0
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	21 c0       	rjmp	.+66     	; 0x21f2 <malloc+0x66>
    21b0:	88 81       	ld	r24, Y
    21b2:	99 81       	ldd	r25, Y+1	; 0x01
    21b4:	86 17       	cp	r24, r22
    21b6:	97 07       	cpc	r25, r23
    21b8:	69 f4       	brne	.+26     	; 0x21d4 <malloc+0x48>
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	9b 81       	ldd	r25, Y+3	; 0x03
    21be:	30 97       	sbiw	r30, 0x00	; 0
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <malloc+0x3c>
    21c2:	93 83       	std	Z+3, r25	; 0x03
    21c4:	82 83       	std	Z+2, r24	; 0x02
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <malloc+0x44>
    21c8:	90 93 cd 00 	sts	0x00CD, r25
    21cc:	80 93 cc 00 	sts	0x00CC, r24
    21d0:	fe 01       	movw	r30, r28
    21d2:	34 c0       	rjmp	.+104    	; 0x223c <malloc+0xb0>
    21d4:	68 17       	cp	r22, r24
    21d6:	79 07       	cpc	r23, r25
    21d8:	38 f4       	brcc	.+14     	; 0x21e8 <malloc+0x5c>
    21da:	41 15       	cp	r20, r1
    21dc:	51 05       	cpc	r21, r1
    21de:	19 f0       	breq	.+6      	; 0x21e6 <malloc+0x5a>
    21e0:	84 17       	cp	r24, r20
    21e2:	95 07       	cpc	r25, r21
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <malloc+0x5c>
    21e6:	ac 01       	movw	r20, r24
    21e8:	fe 01       	movw	r30, r28
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	9c 01       	movw	r18, r24
    21f0:	e9 01       	movw	r28, r18
    21f2:	20 97       	sbiw	r28, 0x00	; 0
    21f4:	e9 f6       	brne	.-70     	; 0x21b0 <malloc+0x24>
    21f6:	41 15       	cp	r20, r1
    21f8:	51 05       	cpc	r21, r1
    21fa:	a9 f1       	breq	.+106    	; 0x2266 <malloc+0xda>
    21fc:	ca 01       	movw	r24, r20
    21fe:	86 1b       	sub	r24, r22
    2200:	97 0b       	sbc	r25, r23
    2202:	04 97       	sbiw	r24, 0x04	; 4
    2204:	08 f4       	brcc	.+2      	; 0x2208 <malloc+0x7c>
    2206:	ba 01       	movw	r22, r20
    2208:	e0 e0       	ldi	r30, 0x00	; 0
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	2a c0       	rjmp	.+84     	; 0x2262 <malloc+0xd6>
    220e:	8d 91       	ld	r24, X+
    2210:	9c 91       	ld	r25, X
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	84 17       	cp	r24, r20
    2216:	95 07       	cpc	r25, r21
    2218:	f9 f4       	brne	.+62     	; 0x2258 <malloc+0xcc>
    221a:	64 17       	cp	r22, r20
    221c:	75 07       	cpc	r23, r21
    221e:	81 f4       	brne	.+32     	; 0x2240 <malloc+0xb4>
    2220:	12 96       	adiw	r26, 0x02	; 2
    2222:	8d 91       	ld	r24, X+
    2224:	9c 91       	ld	r25, X
    2226:	13 97       	sbiw	r26, 0x03	; 3
    2228:	30 97       	sbiw	r30, 0x00	; 0
    222a:	19 f0       	breq	.+6      	; 0x2232 <malloc+0xa6>
    222c:	93 83       	std	Z+3, r25	; 0x03
    222e:	82 83       	std	Z+2, r24	; 0x02
    2230:	04 c0       	rjmp	.+8      	; 0x223a <malloc+0xae>
    2232:	90 93 cd 00 	sts	0x00CD, r25
    2236:	80 93 cc 00 	sts	0x00CC, r24
    223a:	fd 01       	movw	r30, r26
    223c:	32 96       	adiw	r30, 0x02	; 2
    223e:	4f c0       	rjmp	.+158    	; 0x22de <malloc+0x152>
    2240:	ca 01       	movw	r24, r20
    2242:	86 1b       	sub	r24, r22
    2244:	97 0b       	sbc	r25, r23
    2246:	fd 01       	movw	r30, r26
    2248:	e8 0f       	add	r30, r24
    224a:	f9 1f       	adc	r31, r25
    224c:	61 93       	st	Z+, r22
    224e:	71 93       	st	Z+, r23
    2250:	02 97       	sbiw	r24, 0x02	; 2
    2252:	8d 93       	st	X+, r24
    2254:	9c 93       	st	X, r25
    2256:	43 c0       	rjmp	.+134    	; 0x22de <malloc+0x152>
    2258:	fd 01       	movw	r30, r26
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	9c 01       	movw	r18, r24
    2260:	d9 01       	movw	r26, r18
    2262:	10 97       	sbiw	r26, 0x00	; 0
    2264:	a1 f6       	brne	.-88     	; 0x220e <malloc+0x82>
    2266:	80 91 ca 00 	lds	r24, 0x00CA
    226a:	90 91 cb 00 	lds	r25, 0x00CB
    226e:	89 2b       	or	r24, r25
    2270:	41 f4       	brne	.+16     	; 0x2282 <malloc+0xf6>
    2272:	80 91 a0 00 	lds	r24, 0x00A0
    2276:	90 91 a1 00 	lds	r25, 0x00A1
    227a:	90 93 cb 00 	sts	0x00CB, r25
    227e:	80 93 ca 00 	sts	0x00CA, r24
    2282:	40 91 a2 00 	lds	r20, 0x00A2
    2286:	50 91 a3 00 	lds	r21, 0x00A3
    228a:	41 15       	cp	r20, r1
    228c:	51 05       	cpc	r21, r1
    228e:	41 f4       	brne	.+16     	; 0x22a0 <malloc+0x114>
    2290:	4d b7       	in	r20, 0x3d	; 61
    2292:	5e b7       	in	r21, 0x3e	; 62
    2294:	80 91 9e 00 	lds	r24, 0x009E
    2298:	90 91 9f 00 	lds	r25, 0x009F
    229c:	48 1b       	sub	r20, r24
    229e:	59 0b       	sbc	r21, r25
    22a0:	20 91 ca 00 	lds	r18, 0x00CA
    22a4:	30 91 cb 00 	lds	r19, 0x00CB
    22a8:	24 17       	cp	r18, r20
    22aa:	35 07       	cpc	r19, r21
    22ac:	b0 f4       	brcc	.+44     	; 0x22da <malloc+0x14e>
    22ae:	ca 01       	movw	r24, r20
    22b0:	82 1b       	sub	r24, r18
    22b2:	93 0b       	sbc	r25, r19
    22b4:	86 17       	cp	r24, r22
    22b6:	97 07       	cpc	r25, r23
    22b8:	80 f0       	brcs	.+32     	; 0x22da <malloc+0x14e>
    22ba:	ab 01       	movw	r20, r22
    22bc:	4e 5f       	subi	r20, 0xFE	; 254
    22be:	5f 4f       	sbci	r21, 0xFF	; 255
    22c0:	84 17       	cp	r24, r20
    22c2:	95 07       	cpc	r25, r21
    22c4:	50 f0       	brcs	.+20     	; 0x22da <malloc+0x14e>
    22c6:	42 0f       	add	r20, r18
    22c8:	53 1f       	adc	r21, r19
    22ca:	50 93 cb 00 	sts	0x00CB, r21
    22ce:	40 93 ca 00 	sts	0x00CA, r20
    22d2:	f9 01       	movw	r30, r18
    22d4:	61 93       	st	Z+, r22
    22d6:	71 93       	st	Z+, r23
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <malloc+0x152>
    22da:	e0 e0       	ldi	r30, 0x00	; 0
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	cf 01       	movw	r24, r30
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	08 95       	ret

000022e6 <free>:
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <free+0xa>
    22ee:	50 c0       	rjmp	.+160    	; 0x2390 <free+0xaa>
    22f0:	ec 01       	movw	r28, r24
    22f2:	22 97       	sbiw	r28, 0x02	; 2
    22f4:	1b 82       	std	Y+3, r1	; 0x03
    22f6:	1a 82       	std	Y+2, r1	; 0x02
    22f8:	a0 91 cc 00 	lds	r26, 0x00CC
    22fc:	b0 91 cd 00 	lds	r27, 0x00CD
    2300:	10 97       	sbiw	r26, 0x00	; 0
    2302:	09 f1       	breq	.+66     	; 0x2346 <free+0x60>
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	ac 17       	cp	r26, r28
    230a:	bd 07       	cpc	r27, r29
    230c:	08 f1       	brcs	.+66     	; 0x2350 <free+0x6a>
    230e:	bb 83       	std	Y+3, r27	; 0x03
    2310:	aa 83       	std	Y+2, r26	; 0x02
    2312:	fe 01       	movw	r30, r28
    2314:	21 91       	ld	r18, Z+
    2316:	31 91       	ld	r19, Z+
    2318:	e2 0f       	add	r30, r18
    231a:	f3 1f       	adc	r31, r19
    231c:	ae 17       	cp	r26, r30
    231e:	bf 07       	cpc	r27, r31
    2320:	79 f4       	brne	.+30     	; 0x2340 <free+0x5a>
    2322:	8d 91       	ld	r24, X+
    2324:	9c 91       	ld	r25, X
    2326:	11 97       	sbiw	r26, 0x01	; 1
    2328:	28 0f       	add	r18, r24
    232a:	39 1f       	adc	r19, r25
    232c:	2e 5f       	subi	r18, 0xFE	; 254
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	39 83       	std	Y+1, r19	; 0x01
    2332:	28 83       	st	Y, r18
    2334:	12 96       	adiw	r26, 0x02	; 2
    2336:	8d 91       	ld	r24, X+
    2338:	9c 91       	ld	r25, X
    233a:	13 97       	sbiw	r26, 0x03	; 3
    233c:	9b 83       	std	Y+3, r25	; 0x03
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	41 15       	cp	r20, r1
    2342:	51 05       	cpc	r21, r1
    2344:	71 f4       	brne	.+28     	; 0x2362 <free+0x7c>
    2346:	d0 93 cd 00 	sts	0x00CD, r29
    234a:	c0 93 cc 00 	sts	0x00CC, r28
    234e:	20 c0       	rjmp	.+64     	; 0x2390 <free+0xaa>
    2350:	12 96       	adiw	r26, 0x02	; 2
    2352:	8d 91       	ld	r24, X+
    2354:	9c 91       	ld	r25, X
    2356:	13 97       	sbiw	r26, 0x03	; 3
    2358:	ad 01       	movw	r20, r26
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	11 f0       	breq	.+4      	; 0x2362 <free+0x7c>
    235e:	dc 01       	movw	r26, r24
    2360:	d3 cf       	rjmp	.-90     	; 0x2308 <free+0x22>
    2362:	fa 01       	movw	r30, r20
    2364:	d3 83       	std	Z+3, r29	; 0x03
    2366:	c2 83       	std	Z+2, r28	; 0x02
    2368:	21 91       	ld	r18, Z+
    236a:	31 91       	ld	r19, Z+
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
    2370:	ce 17       	cp	r28, r30
    2372:	df 07       	cpc	r29, r31
    2374:	69 f4       	brne	.+26     	; 0x2390 <free+0xaa>
    2376:	88 81       	ld	r24, Y
    2378:	99 81       	ldd	r25, Y+1	; 0x01
    237a:	28 0f       	add	r18, r24
    237c:	39 1f       	adc	r19, r25
    237e:	2e 5f       	subi	r18, 0xFE	; 254
    2380:	3f 4f       	sbci	r19, 0xFF	; 255
    2382:	fa 01       	movw	r30, r20
    2384:	31 83       	std	Z+1, r19	; 0x01
    2386:	20 83       	st	Z, r18
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	93 83       	std	Z+3, r25	; 0x03
    238e:	82 83       	std	Z+2, r24	; 0x02
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <printf>:
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e1 ed       	ldi	r30, 0xD1	; 209
    239c:	f1 e1       	ldi	r31, 0x11	; 17
    239e:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x20>
    23a2:	fe 01       	movw	r30, r28
    23a4:	35 96       	adiw	r30, 0x05	; 5
    23a6:	61 91       	ld	r22, Z+
    23a8:	71 91       	ld	r23, Z+
    23aa:	80 91 d0 00 	lds	r24, 0x00D0
    23ae:	90 91 d1 00 	lds	r25, 0x00D1
    23b2:	af 01       	movw	r20, r30
    23b4:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <vfprintf>
    23b8:	20 96       	adiw	r28, 0x00	; 0
    23ba:	e2 e0       	ldi	r30, 0x02	; 2
    23bc:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x20>

000023c0 <vfprintf>:
    23c0:	ab e0       	ldi	r26, 0x0B	; 11
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e6 ee       	ldi	r30, 0xE6	; 230
    23c6:	f1 e1       	ldi	r31, 0x11	; 17
    23c8:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__prologue_saves__>
    23cc:	3c 01       	movw	r6, r24
    23ce:	2b 01       	movw	r4, r22
    23d0:	5a 01       	movw	r10, r20
    23d2:	fc 01       	movw	r30, r24
    23d4:	17 82       	std	Z+7, r1	; 0x07
    23d6:	16 82       	std	Z+6, r1	; 0x06
    23d8:	83 81       	ldd	r24, Z+3	; 0x03
    23da:	81 fd       	sbrc	r24, 1
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <vfprintf+0x24>
    23de:	6f ef       	ldi	r22, 0xFF	; 255
    23e0:	7f ef       	ldi	r23, 0xFF	; 255
    23e2:	c6 c1       	rjmp	.+908    	; 0x2770 <vfprintf+0x3b0>
    23e4:	9a e0       	ldi	r25, 0x0A	; 10
    23e6:	89 2e       	mov	r8, r25
    23e8:	1e 01       	movw	r2, r28
    23ea:	08 94       	sec
    23ec:	21 1c       	adc	r2, r1
    23ee:	31 1c       	adc	r3, r1
    23f0:	f3 01       	movw	r30, r6
    23f2:	23 81       	ldd	r18, Z+3	; 0x03
    23f4:	f2 01       	movw	r30, r4
    23f6:	23 fd       	sbrc	r18, 3
    23f8:	85 91       	lpm	r24, Z+
    23fa:	23 ff       	sbrs	r18, 3
    23fc:	81 91       	ld	r24, Z+
    23fe:	2f 01       	movw	r4, r30
    2400:	88 23       	and	r24, r24
    2402:	09 f4       	brne	.+2      	; 0x2406 <vfprintf+0x46>
    2404:	b2 c1       	rjmp	.+868    	; 0x276a <vfprintf+0x3aa>
    2406:	85 32       	cpi	r24, 0x25	; 37
    2408:	39 f4       	brne	.+14     	; 0x2418 <vfprintf+0x58>
    240a:	23 fd       	sbrc	r18, 3
    240c:	85 91       	lpm	r24, Z+
    240e:	23 ff       	sbrs	r18, 3
    2410:	81 91       	ld	r24, Z+
    2412:	2f 01       	movw	r4, r30
    2414:	85 32       	cpi	r24, 0x25	; 37
    2416:	29 f4       	brne	.+10     	; 0x2422 <vfprintf+0x62>
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	b3 01       	movw	r22, r6
    241c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2420:	e7 cf       	rjmp	.-50     	; 0x23f0 <vfprintf+0x30>
    2422:	98 2f       	mov	r25, r24
    2424:	ff 24       	eor	r15, r15
    2426:	ee 24       	eor	r14, r14
    2428:	99 24       	eor	r9, r9
    242a:	ff e1       	ldi	r31, 0x1F	; 31
    242c:	ff 15       	cp	r31, r15
    242e:	d0 f0       	brcs	.+52     	; 0x2464 <vfprintf+0xa4>
    2430:	9b 32       	cpi	r25, 0x2B	; 43
    2432:	69 f0       	breq	.+26     	; 0x244e <vfprintf+0x8e>
    2434:	9c 32       	cpi	r25, 0x2C	; 44
    2436:	28 f4       	brcc	.+10     	; 0x2442 <vfprintf+0x82>
    2438:	90 32       	cpi	r25, 0x20	; 32
    243a:	59 f0       	breq	.+22     	; 0x2452 <vfprintf+0x92>
    243c:	93 32       	cpi	r25, 0x23	; 35
    243e:	91 f4       	brne	.+36     	; 0x2464 <vfprintf+0xa4>
    2440:	0e c0       	rjmp	.+28     	; 0x245e <vfprintf+0x9e>
    2442:	9d 32       	cpi	r25, 0x2D	; 45
    2444:	49 f0       	breq	.+18     	; 0x2458 <vfprintf+0x98>
    2446:	90 33       	cpi	r25, 0x30	; 48
    2448:	69 f4       	brne	.+26     	; 0x2464 <vfprintf+0xa4>
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	24 c0       	rjmp	.+72     	; 0x2496 <vfprintf+0xd6>
    244e:	52 e0       	ldi	r21, 0x02	; 2
    2450:	f5 2a       	or	r15, r21
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	f8 2a       	or	r15, r24
    2456:	28 c0       	rjmp	.+80     	; 0x24a8 <vfprintf+0xe8>
    2458:	98 e0       	ldi	r25, 0x08	; 8
    245a:	f9 2a       	or	r15, r25
    245c:	25 c0       	rjmp	.+74     	; 0x24a8 <vfprintf+0xe8>
    245e:	e0 e1       	ldi	r30, 0x10	; 16
    2460:	fe 2a       	or	r15, r30
    2462:	22 c0       	rjmp	.+68     	; 0x24a8 <vfprintf+0xe8>
    2464:	f7 fc       	sbrc	r15, 7
    2466:	29 c0       	rjmp	.+82     	; 0x24ba <vfprintf+0xfa>
    2468:	89 2f       	mov	r24, r25
    246a:	80 53       	subi	r24, 0x30	; 48
    246c:	8a 30       	cpi	r24, 0x0A	; 10
    246e:	70 f4       	brcc	.+28     	; 0x248c <vfprintf+0xcc>
    2470:	f6 fe       	sbrs	r15, 6
    2472:	05 c0       	rjmp	.+10     	; 0x247e <vfprintf+0xbe>
    2474:	98 9c       	mul	r9, r8
    2476:	90 2c       	mov	r9, r0
    2478:	11 24       	eor	r1, r1
    247a:	98 0e       	add	r9, r24
    247c:	15 c0       	rjmp	.+42     	; 0x24a8 <vfprintf+0xe8>
    247e:	e8 9c       	mul	r14, r8
    2480:	e0 2c       	mov	r14, r0
    2482:	11 24       	eor	r1, r1
    2484:	e8 0e       	add	r14, r24
    2486:	f0 e2       	ldi	r31, 0x20	; 32
    2488:	ff 2a       	or	r15, r31
    248a:	0e c0       	rjmp	.+28     	; 0x24a8 <vfprintf+0xe8>
    248c:	9e 32       	cpi	r25, 0x2E	; 46
    248e:	29 f4       	brne	.+10     	; 0x249a <vfprintf+0xda>
    2490:	f6 fc       	sbrc	r15, 6
    2492:	6b c1       	rjmp	.+726    	; 0x276a <vfprintf+0x3aa>
    2494:	40 e4       	ldi	r20, 0x40	; 64
    2496:	f4 2a       	or	r15, r20
    2498:	07 c0       	rjmp	.+14     	; 0x24a8 <vfprintf+0xe8>
    249a:	9c 36       	cpi	r25, 0x6C	; 108
    249c:	19 f4       	brne	.+6      	; 0x24a4 <vfprintf+0xe4>
    249e:	50 e8       	ldi	r21, 0x80	; 128
    24a0:	f5 2a       	or	r15, r21
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <vfprintf+0xe8>
    24a4:	98 36       	cpi	r25, 0x68	; 104
    24a6:	49 f4       	brne	.+18     	; 0x24ba <vfprintf+0xfa>
    24a8:	f2 01       	movw	r30, r4
    24aa:	23 fd       	sbrc	r18, 3
    24ac:	95 91       	lpm	r25, Z+
    24ae:	23 ff       	sbrs	r18, 3
    24b0:	91 91       	ld	r25, Z+
    24b2:	2f 01       	movw	r4, r30
    24b4:	99 23       	and	r25, r25
    24b6:	09 f0       	breq	.+2      	; 0x24ba <vfprintf+0xfa>
    24b8:	b8 cf       	rjmp	.-144    	; 0x242a <vfprintf+0x6a>
    24ba:	89 2f       	mov	r24, r25
    24bc:	85 54       	subi	r24, 0x45	; 69
    24be:	83 30       	cpi	r24, 0x03	; 3
    24c0:	18 f0       	brcs	.+6      	; 0x24c8 <vfprintf+0x108>
    24c2:	80 52       	subi	r24, 0x20	; 32
    24c4:	83 30       	cpi	r24, 0x03	; 3
    24c6:	38 f4       	brcc	.+14     	; 0x24d6 <vfprintf+0x116>
    24c8:	44 e0       	ldi	r20, 0x04	; 4
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	a4 0e       	add	r10, r20
    24ce:	b5 1e       	adc	r11, r21
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	59 83       	std	Y+1, r21	; 0x01
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <vfprintf+0x134>
    24d6:	93 36       	cpi	r25, 0x63	; 99
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <vfprintf+0x126>
    24da:	93 37       	cpi	r25, 0x73	; 115
    24dc:	79 f0       	breq	.+30     	; 0x24fc <vfprintf+0x13c>
    24de:	93 35       	cpi	r25, 0x53	; 83
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <vfprintf+0x124>
    24e2:	56 c0       	rjmp	.+172    	; 0x2590 <vfprintf+0x1d0>
    24e4:	20 c0       	rjmp	.+64     	; 0x2526 <vfprintf+0x166>
    24e6:	f5 01       	movw	r30, r10
    24e8:	80 81       	ld	r24, Z
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	42 e0       	ldi	r20, 0x02	; 2
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	a4 0e       	add	r10, r20
    24f2:	b5 1e       	adc	r11, r21
    24f4:	61 01       	movw	r12, r2
    24f6:	01 e0       	ldi	r16, 0x01	; 1
    24f8:	10 e0       	ldi	r17, 0x00	; 0
    24fa:	12 c0       	rjmp	.+36     	; 0x2520 <vfprintf+0x160>
    24fc:	f5 01       	movw	r30, r10
    24fe:	c0 80       	ld	r12, Z
    2500:	d1 80       	ldd	r13, Z+1	; 0x01
    2502:	f6 fc       	sbrc	r15, 6
    2504:	03 c0       	rjmp	.+6      	; 0x250c <vfprintf+0x14c>
    2506:	6f ef       	ldi	r22, 0xFF	; 255
    2508:	7f ef       	ldi	r23, 0xFF	; 255
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <vfprintf+0x150>
    250c:	69 2d       	mov	r22, r9
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	42 e0       	ldi	r20, 0x02	; 2
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	a4 0e       	add	r10, r20
    2516:	b5 1e       	adc	r11, r21
    2518:	c6 01       	movw	r24, r12
    251a:	0e 94 c8 13 	call	0x2790	; 0x2790 <strnlen>
    251e:	8c 01       	movw	r16, r24
    2520:	5f e7       	ldi	r21, 0x7F	; 127
    2522:	f5 22       	and	r15, r21
    2524:	14 c0       	rjmp	.+40     	; 0x254e <vfprintf+0x18e>
    2526:	f5 01       	movw	r30, r10
    2528:	c0 80       	ld	r12, Z
    252a:	d1 80       	ldd	r13, Z+1	; 0x01
    252c:	f6 fc       	sbrc	r15, 6
    252e:	03 c0       	rjmp	.+6      	; 0x2536 <vfprintf+0x176>
    2530:	6f ef       	ldi	r22, 0xFF	; 255
    2532:	7f ef       	ldi	r23, 0xFF	; 255
    2534:	02 c0       	rjmp	.+4      	; 0x253a <vfprintf+0x17a>
    2536:	69 2d       	mov	r22, r9
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	42 e0       	ldi	r20, 0x02	; 2
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	a4 0e       	add	r10, r20
    2540:	b5 1e       	adc	r11, r21
    2542:	c6 01       	movw	r24, r12
    2544:	0e 94 bd 13 	call	0x277a	; 0x277a <strnlen_P>
    2548:	8c 01       	movw	r16, r24
    254a:	50 e8       	ldi	r21, 0x80	; 128
    254c:	f5 2a       	or	r15, r21
    254e:	f3 fe       	sbrs	r15, 3
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <vfprintf+0x1a0>
    2552:	1a c0       	rjmp	.+52     	; 0x2588 <vfprintf+0x1c8>
    2554:	80 e2       	ldi	r24, 0x20	; 32
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	b3 01       	movw	r22, r6
    255a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    255e:	ea 94       	dec	r14
    2560:	8e 2d       	mov	r24, r14
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	08 17       	cp	r16, r24
    2566:	19 07       	cpc	r17, r25
    2568:	a8 f3       	brcs	.-22     	; 0x2554 <vfprintf+0x194>
    256a:	0e c0       	rjmp	.+28     	; 0x2588 <vfprintf+0x1c8>
    256c:	f6 01       	movw	r30, r12
    256e:	f7 fc       	sbrc	r15, 7
    2570:	85 91       	lpm	r24, Z+
    2572:	f7 fe       	sbrs	r15, 7
    2574:	81 91       	ld	r24, Z+
    2576:	6f 01       	movw	r12, r30
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	b3 01       	movw	r22, r6
    257c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2580:	e1 10       	cpse	r14, r1
    2582:	ea 94       	dec	r14
    2584:	01 50       	subi	r16, 0x01	; 1
    2586:	10 40       	sbci	r17, 0x00	; 0
    2588:	01 15       	cp	r16, r1
    258a:	11 05       	cpc	r17, r1
    258c:	79 f7       	brne	.-34     	; 0x256c <vfprintf+0x1ac>
    258e:	ea c0       	rjmp	.+468    	; 0x2764 <vfprintf+0x3a4>
    2590:	94 36       	cpi	r25, 0x64	; 100
    2592:	11 f0       	breq	.+4      	; 0x2598 <vfprintf+0x1d8>
    2594:	99 36       	cpi	r25, 0x69	; 105
    2596:	69 f5       	brne	.+90     	; 0x25f2 <vfprintf+0x232>
    2598:	f7 fe       	sbrs	r15, 7
    259a:	08 c0       	rjmp	.+16     	; 0x25ac <vfprintf+0x1ec>
    259c:	f5 01       	movw	r30, r10
    259e:	20 81       	ld	r18, Z
    25a0:	31 81       	ldd	r19, Z+1	; 0x01
    25a2:	42 81       	ldd	r20, Z+2	; 0x02
    25a4:	53 81       	ldd	r21, Z+3	; 0x03
    25a6:	84 e0       	ldi	r24, 0x04	; 4
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0a c0       	rjmp	.+20     	; 0x25c0 <vfprintf+0x200>
    25ac:	f5 01       	movw	r30, r10
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	9c 01       	movw	r18, r24
    25b4:	44 27       	eor	r20, r20
    25b6:	37 fd       	sbrc	r19, 7
    25b8:	40 95       	com	r20
    25ba:	54 2f       	mov	r21, r20
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a8 0e       	add	r10, r24
    25c2:	b9 1e       	adc	r11, r25
    25c4:	9f e6       	ldi	r25, 0x6F	; 111
    25c6:	f9 22       	and	r15, r25
    25c8:	57 ff       	sbrs	r21, 7
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <vfprintf+0x21e>
    25cc:	50 95       	com	r21
    25ce:	40 95       	com	r20
    25d0:	30 95       	com	r19
    25d2:	21 95       	neg	r18
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
    25d6:	4f 4f       	sbci	r20, 0xFF	; 255
    25d8:	5f 4f       	sbci	r21, 0xFF	; 255
    25da:	e0 e8       	ldi	r30, 0x80	; 128
    25dc:	fe 2a       	or	r15, r30
    25de:	ca 01       	movw	r24, r20
    25e0:	b9 01       	movw	r22, r18
    25e2:	a1 01       	movw	r20, r2
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__ultoa_invert>
    25ec:	d8 2e       	mov	r13, r24
    25ee:	d2 18       	sub	r13, r2
    25f0:	40 c0       	rjmp	.+128    	; 0x2672 <vfprintf+0x2b2>
    25f2:	95 37       	cpi	r25, 0x75	; 117
    25f4:	29 f4       	brne	.+10     	; 0x2600 <vfprintf+0x240>
    25f6:	1f 2d       	mov	r17, r15
    25f8:	1f 7e       	andi	r17, 0xEF	; 239
    25fa:	2a e0       	ldi	r18, 0x0A	; 10
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	1d c0       	rjmp	.+58     	; 0x263a <vfprintf+0x27a>
    2600:	1f 2d       	mov	r17, r15
    2602:	19 7f       	andi	r17, 0xF9	; 249
    2604:	9f 36       	cpi	r25, 0x6F	; 111
    2606:	61 f0       	breq	.+24     	; 0x2620 <vfprintf+0x260>
    2608:	90 37       	cpi	r25, 0x70	; 112
    260a:	20 f4       	brcc	.+8      	; 0x2614 <vfprintf+0x254>
    260c:	98 35       	cpi	r25, 0x58	; 88
    260e:	09 f0       	breq	.+2      	; 0x2612 <vfprintf+0x252>
    2610:	ac c0       	rjmp	.+344    	; 0x276a <vfprintf+0x3aa>
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <vfprintf+0x272>
    2614:	90 37       	cpi	r25, 0x70	; 112
    2616:	39 f0       	breq	.+14     	; 0x2626 <vfprintf+0x266>
    2618:	98 37       	cpi	r25, 0x78	; 120
    261a:	09 f0       	breq	.+2      	; 0x261e <vfprintf+0x25e>
    261c:	a6 c0       	rjmp	.+332    	; 0x276a <vfprintf+0x3aa>
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <vfprintf+0x268>
    2620:	28 e0       	ldi	r18, 0x08	; 8
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	0a c0       	rjmp	.+20     	; 0x263a <vfprintf+0x27a>
    2626:	10 61       	ori	r17, 0x10	; 16
    2628:	14 fd       	sbrc	r17, 4
    262a:	14 60       	ori	r17, 0x04	; 4
    262c:	20 e1       	ldi	r18, 0x10	; 16
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	04 c0       	rjmp	.+8      	; 0x263a <vfprintf+0x27a>
    2632:	14 fd       	sbrc	r17, 4
    2634:	16 60       	ori	r17, 0x06	; 6
    2636:	20 e1       	ldi	r18, 0x10	; 16
    2638:	32 e0       	ldi	r19, 0x02	; 2
    263a:	17 ff       	sbrs	r17, 7
    263c:	08 c0       	rjmp	.+16     	; 0x264e <vfprintf+0x28e>
    263e:	f5 01       	movw	r30, r10
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	44 e0       	ldi	r20, 0x04	; 4
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	08 c0       	rjmp	.+16     	; 0x265e <vfprintf+0x29e>
    264e:	f5 01       	movw	r30, r10
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	bc 01       	movw	r22, r24
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	42 e0       	ldi	r20, 0x02	; 2
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	a4 0e       	add	r10, r20
    2660:	b5 1e       	adc	r11, r21
    2662:	a1 01       	movw	r20, r2
    2664:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__ultoa_invert>
    2668:	d8 2e       	mov	r13, r24
    266a:	d2 18       	sub	r13, r2
    266c:	8f e7       	ldi	r24, 0x7F	; 127
    266e:	f8 2e       	mov	r15, r24
    2670:	f1 22       	and	r15, r17
    2672:	f6 fe       	sbrs	r15, 6
    2674:	0b c0       	rjmp	.+22     	; 0x268c <vfprintf+0x2cc>
    2676:	5e ef       	ldi	r21, 0xFE	; 254
    2678:	f5 22       	and	r15, r21
    267a:	d9 14       	cp	r13, r9
    267c:	38 f4       	brcc	.+14     	; 0x268c <vfprintf+0x2cc>
    267e:	f4 fe       	sbrs	r15, 4
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <vfprintf+0x2d0>
    2682:	f2 fc       	sbrc	r15, 2
    2684:	05 c0       	rjmp	.+10     	; 0x2690 <vfprintf+0x2d0>
    2686:	8f ee       	ldi	r24, 0xEF	; 239
    2688:	f8 22       	and	r15, r24
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <vfprintf+0x2d0>
    268c:	1d 2d       	mov	r17, r13
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <vfprintf+0x2d2>
    2690:	19 2d       	mov	r17, r9
    2692:	f4 fe       	sbrs	r15, 4
    2694:	0d c0       	rjmp	.+26     	; 0x26b0 <vfprintf+0x2f0>
    2696:	fe 01       	movw	r30, r28
    2698:	ed 0d       	add	r30, r13
    269a:	f1 1d       	adc	r31, r1
    269c:	80 81       	ld	r24, Z
    269e:	80 33       	cpi	r24, 0x30	; 48
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <vfprintf+0x2e8>
    26a2:	99 ee       	ldi	r25, 0xE9	; 233
    26a4:	f9 22       	and	r15, r25
    26a6:	08 c0       	rjmp	.+16     	; 0x26b8 <vfprintf+0x2f8>
    26a8:	1f 5f       	subi	r17, 0xFF	; 255
    26aa:	f2 fe       	sbrs	r15, 2
    26ac:	05 c0       	rjmp	.+10     	; 0x26b8 <vfprintf+0x2f8>
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <vfprintf+0x2f6>
    26b0:	8f 2d       	mov	r24, r15
    26b2:	86 78       	andi	r24, 0x86	; 134
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <vfprintf+0x2f8>
    26b6:	1f 5f       	subi	r17, 0xFF	; 255
    26b8:	0f 2d       	mov	r16, r15
    26ba:	f3 fc       	sbrc	r15, 3
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <vfprintf+0x326>
    26be:	f0 fe       	sbrs	r15, 0
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <vfprintf+0x320>
    26c2:	1e 15       	cp	r17, r14
    26c4:	10 f0       	brcs	.+4      	; 0x26ca <vfprintf+0x30a>
    26c6:	9d 2c       	mov	r9, r13
    26c8:	0b c0       	rjmp	.+22     	; 0x26e0 <vfprintf+0x320>
    26ca:	9d 2c       	mov	r9, r13
    26cc:	9e 0c       	add	r9, r14
    26ce:	91 1a       	sub	r9, r17
    26d0:	1e 2d       	mov	r17, r14
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <vfprintf+0x320>
    26d4:	80 e2       	ldi	r24, 0x20	; 32
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	b3 01       	movw	r22, r6
    26da:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    26de:	1f 5f       	subi	r17, 0xFF	; 255
    26e0:	1e 15       	cp	r17, r14
    26e2:	c0 f3       	brcs	.-16     	; 0x26d4 <vfprintf+0x314>
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <vfprintf+0x32e>
    26e6:	1e 15       	cp	r17, r14
    26e8:	10 f4       	brcc	.+4      	; 0x26ee <vfprintf+0x32e>
    26ea:	e1 1a       	sub	r14, r17
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <vfprintf+0x330>
    26ee:	ee 24       	eor	r14, r14
    26f0:	04 ff       	sbrs	r16, 4
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <vfprintf+0x352>
    26f4:	80 e3       	ldi	r24, 0x30	; 48
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	b3 01       	movw	r22, r6
    26fa:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    26fe:	02 ff       	sbrs	r16, 2
    2700:	1d c0       	rjmp	.+58     	; 0x273c <vfprintf+0x37c>
    2702:	01 fd       	sbrc	r16, 1
    2704:	03 c0       	rjmp	.+6      	; 0x270c <vfprintf+0x34c>
    2706:	88 e7       	ldi	r24, 0x78	; 120
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <vfprintf+0x368>
    270c:	88 e5       	ldi	r24, 0x58	; 88
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0b c0       	rjmp	.+22     	; 0x2728 <vfprintf+0x368>
    2712:	80 2f       	mov	r24, r16
    2714:	86 78       	andi	r24, 0x86	; 134
    2716:	91 f0       	breq	.+36     	; 0x273c <vfprintf+0x37c>
    2718:	01 ff       	sbrs	r16, 1
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <vfprintf+0x360>
    271c:	8b e2       	ldi	r24, 0x2B	; 43
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <vfprintf+0x362>
    2720:	80 e2       	ldi	r24, 0x20	; 32
    2722:	f7 fc       	sbrc	r15, 7
    2724:	8d e2       	ldi	r24, 0x2D	; 45
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	b3 01       	movw	r22, r6
    272a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    272e:	06 c0       	rjmp	.+12     	; 0x273c <vfprintf+0x37c>
    2730:	80 e3       	ldi	r24, 0x30	; 48
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	b3 01       	movw	r22, r6
    2736:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    273a:	9a 94       	dec	r9
    273c:	d9 14       	cp	r13, r9
    273e:	c0 f3       	brcs	.-16     	; 0x2730 <vfprintf+0x370>
    2740:	da 94       	dec	r13
    2742:	f1 01       	movw	r30, r2
    2744:	ed 0d       	add	r30, r13
    2746:	f1 1d       	adc	r31, r1
    2748:	80 81       	ld	r24, Z
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	b3 01       	movw	r22, r6
    274e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2752:	dd 20       	and	r13, r13
    2754:	a9 f7       	brne	.-22     	; 0x2740 <vfprintf+0x380>
    2756:	06 c0       	rjmp	.+12     	; 0x2764 <vfprintf+0x3a4>
    2758:	80 e2       	ldi	r24, 0x20	; 32
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	b3 01       	movw	r22, r6
    275e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2762:	ea 94       	dec	r14
    2764:	ee 20       	and	r14, r14
    2766:	c1 f7       	brne	.-16     	; 0x2758 <vfprintf+0x398>
    2768:	43 ce       	rjmp	.-890    	; 0x23f0 <vfprintf+0x30>
    276a:	f3 01       	movw	r30, r6
    276c:	66 81       	ldd	r22, Z+6	; 0x06
    276e:	77 81       	ldd	r23, Z+7	; 0x07
    2770:	cb 01       	movw	r24, r22
    2772:	2b 96       	adiw	r28, 0x0b	; 11
    2774:	e2 e1       	ldi	r30, 0x12	; 18
    2776:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__epilogue_restores__>

0000277a <strnlen_P>:
    277a:	fc 01       	movw	r30, r24
    277c:	05 90       	lpm	r0, Z+
    277e:	61 50       	subi	r22, 0x01	; 1
    2780:	70 40       	sbci	r23, 0x00	; 0
    2782:	01 10       	cpse	r0, r1
    2784:	d8 f7       	brcc	.-10     	; 0x277c <strnlen_P+0x2>
    2786:	80 95       	com	r24
    2788:	90 95       	com	r25
    278a:	8e 0f       	add	r24, r30
    278c:	9f 1f       	adc	r25, r31
    278e:	08 95       	ret

00002790 <strnlen>:
    2790:	fc 01       	movw	r30, r24
    2792:	61 50       	subi	r22, 0x01	; 1
    2794:	70 40       	sbci	r23, 0x00	; 0
    2796:	01 90       	ld	r0, Z+
    2798:	01 10       	cpse	r0, r1
    279a:	d8 f7       	brcc	.-10     	; 0x2792 <strnlen+0x2>
    279c:	80 95       	com	r24
    279e:	90 95       	com	r25
    27a0:	8e 0f       	add	r24, r30
    27a2:	9f 1f       	adc	r25, r31
    27a4:	08 95       	ret

000027a6 <fputc>:
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	8c 01       	movw	r16, r24
    27b0:	eb 01       	movw	r28, r22
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	81 ff       	sbrs	r24, 1
    27b6:	1b c0       	rjmp	.+54     	; 0x27ee <fputc+0x48>
    27b8:	82 ff       	sbrs	r24, 2
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <fputc+0x30>
    27bc:	2e 81       	ldd	r18, Y+6	; 0x06
    27be:	3f 81       	ldd	r19, Y+7	; 0x07
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	28 17       	cp	r18, r24
    27c6:	39 07       	cpc	r19, r25
    27c8:	64 f4       	brge	.+24     	; 0x27e2 <fputc+0x3c>
    27ca:	e8 81       	ld	r30, Y
    27cc:	f9 81       	ldd	r31, Y+1	; 0x01
    27ce:	01 93       	st	Z+, r16
    27d0:	f9 83       	std	Y+1, r31	; 0x01
    27d2:	e8 83       	st	Y, r30
    27d4:	06 c0       	rjmp	.+12     	; 0x27e2 <fputc+0x3c>
    27d6:	e8 85       	ldd	r30, Y+8	; 0x08
    27d8:	f9 85       	ldd	r31, Y+9	; 0x09
    27da:	80 2f       	mov	r24, r16
    27dc:	09 95       	icall
    27de:	89 2b       	or	r24, r25
    27e0:	31 f4       	brne	.+12     	; 0x27ee <fputc+0x48>
    27e2:	8e 81       	ldd	r24, Y+6	; 0x06
    27e4:	9f 81       	ldd	r25, Y+7	; 0x07
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	9f 83       	std	Y+7, r25	; 0x07
    27ea:	8e 83       	std	Y+6, r24	; 0x06
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <fputc+0x4c>
    27ee:	0f ef       	ldi	r16, 0xFF	; 255
    27f0:	1f ef       	ldi	r17, 0xFF	; 255
    27f2:	c8 01       	movw	r24, r16
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <__ultoa_invert>:
    27fe:	fa 01       	movw	r30, r20
    2800:	aa 27       	eor	r26, r26
    2802:	28 30       	cpi	r18, 0x08	; 8
    2804:	51 f1       	breq	.+84     	; 0x285a <__ultoa_invert+0x5c>
    2806:	20 31       	cpi	r18, 0x10	; 16
    2808:	81 f1       	breq	.+96     	; 0x286a <__ultoa_invert+0x6c>
    280a:	e8 94       	clt
    280c:	6f 93       	push	r22
    280e:	6e 7f       	andi	r22, 0xFE	; 254
    2810:	6e 5f       	subi	r22, 0xFE	; 254
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	8f 4f       	sbci	r24, 0xFF	; 255
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	af 4f       	sbci	r26, 0xFF	; 255
    281a:	b1 e0       	ldi	r27, 0x01	; 1
    281c:	3e d0       	rcall	.+124    	; 0x289a <__ultoa_invert+0x9c>
    281e:	b4 e0       	ldi	r27, 0x04	; 4
    2820:	3c d0       	rcall	.+120    	; 0x289a <__ultoa_invert+0x9c>
    2822:	67 0f       	add	r22, r23
    2824:	78 1f       	adc	r23, r24
    2826:	89 1f       	adc	r24, r25
    2828:	9a 1f       	adc	r25, r26
    282a:	a1 1d       	adc	r26, r1
    282c:	68 0f       	add	r22, r24
    282e:	79 1f       	adc	r23, r25
    2830:	8a 1f       	adc	r24, r26
    2832:	91 1d       	adc	r25, r1
    2834:	a1 1d       	adc	r26, r1
    2836:	6a 0f       	add	r22, r26
    2838:	71 1d       	adc	r23, r1
    283a:	81 1d       	adc	r24, r1
    283c:	91 1d       	adc	r25, r1
    283e:	a1 1d       	adc	r26, r1
    2840:	20 d0       	rcall	.+64     	; 0x2882 <__ultoa_invert+0x84>
    2842:	09 f4       	brne	.+2      	; 0x2846 <__ultoa_invert+0x48>
    2844:	68 94       	set
    2846:	3f 91       	pop	r19
    2848:	2a e0       	ldi	r18, 0x0A	; 10
    284a:	26 9f       	mul	r18, r22
    284c:	11 24       	eor	r1, r1
    284e:	30 19       	sub	r19, r0
    2850:	30 5d       	subi	r19, 0xD0	; 208
    2852:	31 93       	st	Z+, r19
    2854:	de f6       	brtc	.-74     	; 0x280c <__ultoa_invert+0xe>
    2856:	cf 01       	movw	r24, r30
    2858:	08 95       	ret
    285a:	46 2f       	mov	r20, r22
    285c:	47 70       	andi	r20, 0x07	; 7
    285e:	40 5d       	subi	r20, 0xD0	; 208
    2860:	41 93       	st	Z+, r20
    2862:	b3 e0       	ldi	r27, 0x03	; 3
    2864:	0f d0       	rcall	.+30     	; 0x2884 <__ultoa_invert+0x86>
    2866:	c9 f7       	brne	.-14     	; 0x285a <__ultoa_invert+0x5c>
    2868:	f6 cf       	rjmp	.-20     	; 0x2856 <__ultoa_invert+0x58>
    286a:	46 2f       	mov	r20, r22
    286c:	4f 70       	andi	r20, 0x0F	; 15
    286e:	40 5d       	subi	r20, 0xD0	; 208
    2870:	4a 33       	cpi	r20, 0x3A	; 58
    2872:	18 f0       	brcs	.+6      	; 0x287a <__ultoa_invert+0x7c>
    2874:	49 5d       	subi	r20, 0xD9	; 217
    2876:	31 fd       	sbrc	r19, 1
    2878:	40 52       	subi	r20, 0x20	; 32
    287a:	41 93       	st	Z+, r20
    287c:	02 d0       	rcall	.+4      	; 0x2882 <__ultoa_invert+0x84>
    287e:	a9 f7       	brne	.-22     	; 0x286a <__ultoa_invert+0x6c>
    2880:	ea cf       	rjmp	.-44     	; 0x2856 <__ultoa_invert+0x58>
    2882:	b4 e0       	ldi	r27, 0x04	; 4
    2884:	a6 95       	lsr	r26
    2886:	97 95       	ror	r25
    2888:	87 95       	ror	r24
    288a:	77 95       	ror	r23
    288c:	67 95       	ror	r22
    288e:	ba 95       	dec	r27
    2890:	c9 f7       	brne	.-14     	; 0x2884 <__ultoa_invert+0x86>
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	61 05       	cpc	r22, r1
    2896:	71 05       	cpc	r23, r1
    2898:	08 95       	ret
    289a:	9b 01       	movw	r18, r22
    289c:	ac 01       	movw	r20, r24
    289e:	0a 2e       	mov	r0, r26
    28a0:	06 94       	lsr	r0
    28a2:	57 95       	ror	r21
    28a4:	47 95       	ror	r20
    28a6:	37 95       	ror	r19
    28a8:	27 95       	ror	r18
    28aa:	ba 95       	dec	r27
    28ac:	c9 f7       	brne	.-14     	; 0x28a0 <__ultoa_invert+0xa2>
    28ae:	62 0f       	add	r22, r18
    28b0:	73 1f       	adc	r23, r19
    28b2:	84 1f       	adc	r24, r20
    28b4:	95 1f       	adc	r25, r21
    28b6:	a0 1d       	adc	r26, r0
    28b8:	08 95       	ret

000028ba <__prologue_saves__>:
    28ba:	2f 92       	push	r2
    28bc:	3f 92       	push	r3
    28be:	4f 92       	push	r4
    28c0:	5f 92       	push	r5
    28c2:	6f 92       	push	r6
    28c4:	7f 92       	push	r7
    28c6:	8f 92       	push	r8
    28c8:	9f 92       	push	r9
    28ca:	af 92       	push	r10
    28cc:	bf 92       	push	r11
    28ce:	cf 92       	push	r12
    28d0:	df 92       	push	r13
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	ca 1b       	sub	r28, r26
    28e4:	db 0b       	sbc	r29, r27
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	09 94       	ijmp

000028f2 <__epilogue_restores__>:
    28f2:	2a 88       	ldd	r2, Y+18	; 0x12
    28f4:	39 88       	ldd	r3, Y+17	; 0x11
    28f6:	48 88       	ldd	r4, Y+16	; 0x10
    28f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    28fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2900:	9b 84       	ldd	r9, Y+11	; 0x0b
    2902:	aa 84       	ldd	r10, Y+10	; 0x0a
    2904:	b9 84       	ldd	r11, Y+9	; 0x09
    2906:	c8 84       	ldd	r12, Y+8	; 0x08
    2908:	df 80       	ldd	r13, Y+7	; 0x07
    290a:	ee 80       	ldd	r14, Y+6	; 0x06
    290c:	fd 80       	ldd	r15, Y+5	; 0x05
    290e:	0c 81       	ldd	r16, Y+4	; 0x04
    2910:	1b 81       	ldd	r17, Y+3	; 0x03
    2912:	aa 81       	ldd	r26, Y+2	; 0x02
    2914:	b9 81       	ldd	r27, Y+1	; 0x01
    2916:	ce 0f       	add	r28, r30
    2918:	d1 1d       	adc	r29, r1
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	ed 01       	movw	r28, r26
    2926:	08 95       	ret

00002928 <_exit>:
    2928:	f8 94       	cli

0000292a <__stop_program>:
    292a:	ff cf       	rjmp	.-2      	; 0x292a <__stop_program>
