
AT32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000028a6  0000293a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800088  00800088  00002962  2**0
                  ALLOC
  3 .stab         000042e4  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003840  00000000  00000000  00006c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_1>
       8:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_2>
       c:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_3>
      10:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_4>
      14:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_5>
      18:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_6>
      1c:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_7>
      20:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_8>
      24:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_9>
      28:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_10>
      2c:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 10 	call	0x2052	; 0x2052 <main>
      8a:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Stack_Full>:
#include "stdio.h"
#include "../../BSW/LIB/STD_TYPES.h"
#include "Stack.h"

uint8 static Stack_Full(Stack* My_Stack)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <Stack_Full+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
    return 0;
      a0:	80 e0       	ldi	r24, 0x00	; 0
}
      a2:	0f 90       	pop	r0
      a4:	0f 90       	pop	r0
      a6:	cf 91       	pop	r28
      a8:	df 91       	pop	r29
      aa:	08 95       	ret

000000ac <Stack_Empty>:
uint8 static Stack_Empty(Stack* My_Stack)
{
      ac:	df 93       	push	r29
      ae:	cf 93       	push	r28
      b0:	00 d0       	rcall	.+0      	; 0xb2 <Stack_Empty+0x6>
      b2:	0f 92       	push	r0
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	9a 83       	std	Y+2, r25	; 0x02
      ba:	89 83       	std	Y+1, r24	; 0x01
    return (My_Stack->top==NULL);
      bc:	e9 81       	ldd	r30, Y+1	; 0x01
      be:	fa 81       	ldd	r31, Y+2	; 0x02
      c0:	80 81       	ld	r24, Z
      c2:	91 81       	ldd	r25, Z+1	; 0x01
      c4:	1b 82       	std	Y+3, r1	; 0x03
      c6:	00 97       	sbiw	r24, 0x00	; 0
      c8:	11 f4       	brne	.+4      	; 0xce <Stack_Empty+0x22>
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	8b 83       	std	Y+3, r24	; 0x03
      ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
      d0:	0f 90       	pop	r0
      d2:	0f 90       	pop	r0
      d4:	0f 90       	pop	r0
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <Stack_Creation>:

Status Stack_Creation(Stack* My_Stack)
{
      dc:	df 93       	push	r29
      de:	cf 93       	push	r28
      e0:	00 d0       	rcall	.+0      	; 0xe2 <Stack_Creation+0x6>
      e2:	0f 92       	push	r0
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	9b 83       	std	Y+3, r25	; 0x03
      ea:	8a 83       	std	Y+2, r24	; 0x02
    Status Local=E_NOT_OK;
      ec:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack)
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	9b 81       	ldd	r25, Y+3	; 0x03
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	61 f0       	breq	.+24     	; 0x10e <Stack_Creation+0x32>
    {
        //do nothing
    }
    else
    {
        My_Stack->Size=0;
      f6:	ea 81       	ldd	r30, Y+2	; 0x02
      f8:	fb 81       	ldd	r31, Y+3	; 0x03
      fa:	12 82       	std	Z+2, r1	; 0x02
      fc:	13 82       	std	Z+3, r1	; 0x03
      fe:	14 82       	std	Z+4, r1	; 0x04
     100:	15 82       	std	Z+5, r1	; 0x05
        My_Stack->top=NULL;
     102:	ea 81       	ldd	r30, Y+2	; 0x02
     104:	fb 81       	ldd	r31, Y+3	; 0x03
     106:	11 82       	std	Z+1, r1	; 0x01
     108:	10 82       	st	Z, r1
         Local=E_OK;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	89 83       	std	Y+1, r24	; 0x01

    }
return Local;
     10e:	89 81       	ldd	r24, Y+1	; 0x01
}
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	cf 91       	pop	r28
     118:	df 91       	pop	r29
     11a:	08 95       	ret

0000011c <Stack_Push>:
Status Stack_Push(Stack* My_Stack,StackEntry Variable)
{
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	27 97       	sbiw	r28, 0x07	; 7
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	9d 83       	std	Y+5, r25	; 0x05
     132:	8c 83       	std	Y+4, r24	; 0x04
     134:	7f 83       	std	Y+7, r23	; 0x07
     136:	6e 83       	std	Y+6, r22	; 0x06
    Status Local=E_NOT_OK;
     138:	1b 82       	std	Y+3, r1	; 0x03
    StackNode * Local_Pointer=(StackNode*)malloc(sizeof(StackNode));
     13a:	84 e0       	ldi	r24, 0x04	; 4
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 83 10 	call	0x2106	; 0x2106 <malloc>
     142:	9a 83       	std	Y+2, r25	; 0x02
     144:	89 83       	std	Y+1, r24	; 0x01

    if(NULL==My_Stack|| Stack_Full(My_Stack))
     146:	8c 81       	ldd	r24, Y+4	; 0x04
     148:	9d 81       	ldd	r25, Y+5	; 0x05
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	59 f1       	breq	.+86     	; 0x1a4 <Stack_Push+0x88>
     14e:	8c 81       	ldd	r24, Y+4	; 0x04
     150:	9d 81       	ldd	r25, Y+5	; 0x05
     152:	0e 94 49 00 	call	0x92	; 0x92 <Stack_Full>
     156:	88 23       	and	r24, r24
     158:	29 f5       	brne	.+74     	; 0x1a4 <Stack_Push+0x88>
        //do nothing
    }
    else
    {

        Local_Pointer->entry=Variable;
     15a:	e9 81       	ldd	r30, Y+1	; 0x01
     15c:	fa 81       	ldd	r31, Y+2	; 0x02
     15e:	8e 81       	ldd	r24, Y+6	; 0x06
     160:	9f 81       	ldd	r25, Y+7	; 0x07
     162:	93 83       	std	Z+3, r25	; 0x03
     164:	82 83       	std	Z+2, r24	; 0x02
        Local_Pointer->Next=My_Stack->top;
     166:	ec 81       	ldd	r30, Y+4	; 0x04
     168:	fd 81       	ldd	r31, Y+5	; 0x05
     16a:	80 81       	ld	r24, Z
     16c:	91 81       	ldd	r25, Z+1	; 0x01
     16e:	e9 81       	ldd	r30, Y+1	; 0x01
     170:	fa 81       	ldd	r31, Y+2	; 0x02
     172:	91 83       	std	Z+1, r25	; 0x01
     174:	80 83       	st	Z, r24
        My_Stack->top=Local_Pointer;
     176:	ec 81       	ldd	r30, Y+4	; 0x04
     178:	fd 81       	ldd	r31, Y+5	; 0x05
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	9a 81       	ldd	r25, Y+2	; 0x02
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	80 83       	st	Z, r24
        My_Stack->Size++;
     182:	ec 81       	ldd	r30, Y+4	; 0x04
     184:	fd 81       	ldd	r31, Y+5	; 0x05
     186:	82 81       	ldd	r24, Z+2	; 0x02
     188:	93 81       	ldd	r25, Z+3	; 0x03
     18a:	a4 81       	ldd	r26, Z+4	; 0x04
     18c:	b5 81       	ldd	r27, Z+5	; 0x05
     18e:	01 96       	adiw	r24, 0x01	; 1
     190:	a1 1d       	adc	r26, r1
     192:	b1 1d       	adc	r27, r1
     194:	ec 81       	ldd	r30, Y+4	; 0x04
     196:	fd 81       	ldd	r31, Y+5	; 0x05
     198:	82 83       	std	Z+2, r24	; 0x02
     19a:	93 83       	std	Z+3, r25	; 0x03
     19c:	a4 83       	std	Z+4, r26	; 0x04
     19e:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	8b 83       	std	Y+3, r24	; 0x03
    }
return Local;
     1a4:	8b 81       	ldd	r24, Y+3	; 0x03

}
     1a6:	27 96       	adiw	r28, 0x07	; 7
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	cd bf       	out	0x3d, r28	; 61
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	08 95       	ret

000001b8 <Stack_Pop>:
Status Stack_Pop(Stack* My_Stack,StackEntry* Variable)
{
     1b8:	df 93       	push	r29
     1ba:	cf 93       	push	r28
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	27 97       	sbiw	r28, 0x07	; 7
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
     1cc:	9d 83       	std	Y+5, r25	; 0x05
     1ce:	8c 83       	std	Y+4, r24	; 0x04
     1d0:	7f 83       	std	Y+7, r23	; 0x07
     1d2:	6e 83       	std	Y+6, r22	; 0x06
    StackNode* Local_Pointer= NULL;
     1d4:	1b 82       	std	Y+3, r1	; 0x03
     1d6:	1a 82       	std	Y+2, r1	; 0x02
    Status Local=E_NOT_OK;
     1d8:	19 82       	std	Y+1, r1	; 0x01

    if(NULL==My_Stack || NULL == Variable|| Stack_Empty(My_Stack))
     1da:	8c 81       	ldd	r24, Y+4	; 0x04
     1dc:	9d 81       	ldd	r25, Y+5	; 0x05
     1de:	00 97       	sbiw	r24, 0x00	; 0
     1e0:	d9 f1       	breq	.+118    	; 0x258 <Stack_Pop+0xa0>
     1e2:	8e 81       	ldd	r24, Y+6	; 0x06
     1e4:	9f 81       	ldd	r25, Y+7	; 0x07
     1e6:	00 97       	sbiw	r24, 0x00	; 0
     1e8:	b9 f1       	breq	.+110    	; 0x258 <Stack_Pop+0xa0>
     1ea:	8c 81       	ldd	r24, Y+4	; 0x04
     1ec:	9d 81       	ldd	r25, Y+5	; 0x05
     1ee:	0e 94 56 00 	call	0xac	; 0xac <Stack_Empty>
     1f2:	88 23       	and	r24, r24
     1f4:	89 f5       	brne	.+98     	; 0x258 <Stack_Pop+0xa0>
        //do nothing
    }
    else
    {

        *Variable=My_Stack->top->entry;
     1f6:	ec 81       	ldd	r30, Y+4	; 0x04
     1f8:	fd 81       	ldd	r31, Y+5	; 0x05
     1fa:	01 90       	ld	r0, Z+
     1fc:	f0 81       	ld	r31, Z
     1fe:	e0 2d       	mov	r30, r0
     200:	82 81       	ldd	r24, Z+2	; 0x02
     202:	93 81       	ldd	r25, Z+3	; 0x03
     204:	ee 81       	ldd	r30, Y+6	; 0x06
     206:	ff 81       	ldd	r31, Y+7	; 0x07
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
        Local_Pointer= My_Stack->top;
     20c:	ec 81       	ldd	r30, Y+4	; 0x04
     20e:	fd 81       	ldd	r31, Y+5	; 0x05
     210:	80 81       	ld	r24, Z
     212:	91 81       	ldd	r25, Z+1	; 0x01
     214:	9b 83       	std	Y+3, r25	; 0x03
     216:	8a 83       	std	Y+2, r24	; 0x02
        My_Stack->top=My_Stack->top->Next;
     218:	ec 81       	ldd	r30, Y+4	; 0x04
     21a:	fd 81       	ldd	r31, Y+5	; 0x05
     21c:	01 90       	ld	r0, Z+
     21e:	f0 81       	ld	r31, Z
     220:	e0 2d       	mov	r30, r0
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	ec 81       	ldd	r30, Y+4	; 0x04
     228:	fd 81       	ldd	r31, Y+5	; 0x05
     22a:	91 83       	std	Z+1, r25	; 0x01
     22c:	80 83       	st	Z, r24
        free(Local_Pointer);
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	9b 81       	ldd	r25, Y+3	; 0x03
     232:	0e 94 30 11 	call	0x2260	; 0x2260 <free>
        My_Stack->Size--;
     236:	ec 81       	ldd	r30, Y+4	; 0x04
     238:	fd 81       	ldd	r31, Y+5	; 0x05
     23a:	82 81       	ldd	r24, Z+2	; 0x02
     23c:	93 81       	ldd	r25, Z+3	; 0x03
     23e:	a4 81       	ldd	r26, Z+4	; 0x04
     240:	b5 81       	ldd	r27, Z+5	; 0x05
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	a1 09       	sbc	r26, r1
     246:	b1 09       	sbc	r27, r1
     248:	ec 81       	ldd	r30, Y+4	; 0x04
     24a:	fd 81       	ldd	r31, Y+5	; 0x05
     24c:	82 83       	std	Z+2, r24	; 0x02
     24e:	93 83       	std	Z+3, r25	; 0x03
     250:	a4 83       	std	Z+4, r26	; 0x04
     252:	b5 83       	std	Z+5, r27	; 0x05
        Local=E_OK;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	89 83       	std	Y+1, r24	; 0x01
    }
return Local;
     258:	89 81       	ldd	r24, Y+1	; 0x01
}
     25a:	27 96       	adiw	r28, 0x07	; 7
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	08 95       	ret

0000026c <Stack_Display>:

Status Stack_Display(Stack* My_Stack) {
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	00 d0       	rcall	.+0      	; 0x272 <Stack_Display+0x6>
     272:	00 d0       	rcall	.+0      	; 0x274 <Stack_Display+0x8>
     274:	0f 92       	push	r0
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	9d 83       	std	Y+5, r25	; 0x05
     27c:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     27e:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* temp = NULL;
     280:	1a 82       	std	Y+2, r1	; 0x02
     282:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == My_Stack) {
     284:	8c 81       	ldd	r24, Y+4	; 0x04
     286:	9d 81       	ldd	r25, Y+5	; 0x05
     288:	00 97       	sbiw	r24, 0x00	; 0
     28a:	99 f1       	breq	.+102    	; 0x2f2 <Stack_Display+0x86>
        // Do nothing
    } else {
        temp = My_Stack->top;
     28c:	ec 81       	ldd	r30, Y+4	; 0x04
     28e:	fd 81       	ldd	r31, Y+5	; 0x05
     290:	80 81       	ld	r24, Z
     292:	91 81       	ldd	r25, Z+1	; 0x01
     294:	9a 83       	std	Y+2, r25	; 0x02
     296:	89 83       	std	Y+1, r24	; 0x01
     298:	26 c0       	rjmp	.+76     	; 0x2e6 <Stack_Display+0x7a>
        while (temp != NULL) {
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
     29a:	e9 81       	ldd	r30, Y+1	; 0x01
     29c:	fa 81       	ldd	r31, Y+2	; 0x02
     29e:	40 81       	ld	r20, Z
     2a0:	51 81       	ldd	r21, Z+1	; 0x01
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	fa 81       	ldd	r31, Y+2	; 0x02
     2a6:	22 81       	ldd	r18, Z+2	; 0x02
     2a8:	33 81       	ldd	r19, Z+3	; 0x03
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <Stack_Display+0x40>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <Stack_Display+0x42>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <Stack_Display+0x44>
     2b0:	ed b7       	in	r30, 0x3d	; 61
     2b2:	fe b7       	in	r31, 0x3e	; 62
     2b4:	31 96       	adiw	r30, 0x01	; 1
     2b6:	80 e6       	ldi	r24, 0x60	; 96
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
     2be:	53 83       	std	Z+3, r21	; 0x03
     2c0:	42 83       	std	Z+2, r20	; 0x02
     2c2:	35 83       	std	Z+5, r19	; 0x05
     2c4:	24 83       	std	Z+4, r18	; 0x04
     2c6:	0e 94 88 11 	call	0x2310	; 0x2310 <printf>
     2ca:	8d b7       	in	r24, 0x3d	; 61
     2cc:	9e b7       	in	r25, 0x3e	; 62
     2ce:	06 96       	adiw	r24, 0x06	; 6
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	9e bf       	out	0x3e, r25	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	8d bf       	out	0x3d, r24	; 61
            temp = temp->Next;
     2da:	e9 81       	ldd	r30, Y+1	; 0x01
     2dc:	fa 81       	ldd	r31, Y+2	; 0x02
     2de:	80 81       	ld	r24, Z
     2e0:	91 81       	ldd	r25, Z+1	; 0x01
     2e2:	9a 83       	std	Y+2, r25	; 0x02
     2e4:	89 83       	std	Y+1, r24	; 0x01
    StackNode* temp = NULL;
    if (NULL == My_Stack) {
        // Do nothing
    } else {
        temp = My_Stack->top;
        while (temp != NULL) {
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	b1 f6       	brne	.-84     	; 0x29a <Stack_Display+0x2e>
            printf("Element address: %p, value: %d\n", (void*)temp->Next, temp->entry);
            temp = temp->Next;
        }
        Local = E_OK;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	08 95       	ret

00000304 <Clear_Stack>:
Status Clear_Stack(Stack* My_Stack)
{
     304:	df 93       	push	r29
     306:	cf 93       	push	r28
     308:	00 d0       	rcall	.+0      	; 0x30a <Clear_Stack+0x6>
     30a:	00 d0       	rcall	.+0      	; 0x30c <Clear_Stack+0x8>
     30c:	0f 92       	push	r0
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	9d 83       	std	Y+5, r25	; 0x05
     314:	8c 83       	std	Y+4, r24	; 0x04
    Status Local = E_NOT_OK;
     316:	1b 82       	std	Y+3, r1	; 0x03
    StackNode* Local_pointer = NULL;
     318:	1a 82       	std	Y+2, r1	; 0x02
     31a:	19 82       	std	Y+1, r1	; 0x01

   Local_pointer=My_Stack->top;
     31c:	ec 81       	ldd	r30, Y+4	; 0x04
     31e:	fd 81       	ldd	r31, Y+5	; 0x05
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == My_Stack)
     328:	8c 81       	ldd	r24, Y+4	; 0x04
     32a:	9d 81       	ldd	r25, Y+5	; 0x05
     32c:	00 97       	sbiw	r24, 0x00	; 0
     32e:	f9 f0       	breq	.+62     	; 0x36e <Clear_Stack+0x6a>
     330:	12 c0       	rjmp	.+36     	; 0x356 <Clear_Stack+0x52>
    }
    else
    {
        while(Local_pointer)
        {
           Local_pointer= Local_pointer->Next;
     332:	e9 81       	ldd	r30, Y+1	; 0x01
     334:	fa 81       	ldd	r31, Y+2	; 0x02
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	9a 83       	std	Y+2, r25	; 0x02
     33c:	89 83       	std	Y+1, r24	; 0x01
            free(My_Stack->top);
     33e:	ec 81       	ldd	r30, Y+4	; 0x04
     340:	fd 81       	ldd	r31, Y+5	; 0x05
     342:	80 81       	ld	r24, Z
     344:	91 81       	ldd	r25, Z+1	; 0x01
     346:	0e 94 30 11 	call	0x2260	; 0x2260 <free>
            My_Stack->top=Local_pointer;
     34a:	ec 81       	ldd	r30, Y+4	; 0x04
     34c:	fd 81       	ldd	r31, Y+5	; 0x05
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	80 83       	st	Z, r24
    {
        // Do nothing
    }
    else
    {
        while(Local_pointer)
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	00 97       	sbiw	r24, 0x00	; 0
     35c:	51 f7       	brne	.-44     	; 0x332 <Clear_Stack+0x2e>
        {
           Local_pointer= Local_pointer->Next;
            free(My_Stack->top);
            My_Stack->top=Local_pointer;
        }
        My_Stack->Size=0;
     35e:	ec 81       	ldd	r30, Y+4	; 0x04
     360:	fd 81       	ldd	r31, Y+5	; 0x05
     362:	12 82       	std	Z+2, r1	; 0x02
     364:	13 82       	std	Z+3, r1	; 0x03
     366:	14 82       	std	Z+4, r1	; 0x04
     368:	15 82       	std	Z+5, r1	; 0x05
        Local = E_OK;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local;
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	08 95       	ret

00000380 <Stack_Size>:
Status Stack_Size(Stack* My_Stack,StackEntry* Variable)
{
     380:	df 93       	push	r29
     382:	cf 93       	push	r28
     384:	00 d0       	rcall	.+0      	; 0x386 <Stack_Size+0x6>
     386:	00 d0       	rcall	.+0      	; 0x388 <Stack_Size+0x8>
     388:	0f 92       	push	r0
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	9b 83       	std	Y+3, r25	; 0x03
     390:	8a 83       	std	Y+2, r24	; 0x02
     392:	7d 83       	std	Y+5, r23	; 0x05
     394:	6c 83       	std	Y+4, r22	; 0x04
     Status Local = E_NOT_OK;
     396:	19 82       	std	Y+1, r1	; 0x01

    if (NULL == My_Stack)
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	9b 81       	ldd	r25, Y+3	; 0x03
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	61 f0       	breq	.+24     	; 0x3b8 <Stack_Size+0x38>
    {
        // Do nothing
    }
    else
    {
        *Variable  =My_Stack->Size;
     3a0:	ea 81       	ldd	r30, Y+2	; 0x02
     3a2:	fb 81       	ldd	r31, Y+3	; 0x03
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	93 81       	ldd	r25, Z+3	; 0x03
     3a8:	a4 81       	ldd	r26, Z+4	; 0x04
     3aa:	b5 81       	ldd	r27, Z+5	; 0x05
     3ac:	ec 81       	ldd	r30, Y+4	; 0x04
     3ae:	fd 81       	ldd	r31, Y+5	; 0x05
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
         Local = E_OK;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local;
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	08 95       	ret

000003ca <TIMER2_DutyCycle>:
#include "../inc/TIMER2_interface.h"
#include "../inc/TIMER2_private.h"
#include "../inc/TIMER2_register.h"

void TIMER2_DutyCycle(uint8 Copy_uint8Duty)
{
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <TIMER2_DutyCycle+0x6>
     3d0:	0f 92       	push	r0
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
     3d8:	1a 82       	std	Y+2, r1	; 0x02
     3da:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	98 2f       	mov	r25, r24
     3e4:	88 27       	eor	r24, r24
     3e6:	9a 83       	std	Y+2, r25	; 0x02
     3e8:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	24 e6       	ldi	r18, 0x64	; 100
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	b9 01       	movw	r22, r18
     3f4:	0e 94 32 10 	call	0x2064	; 0x2064 <__udivmodhi4>
     3f8:	cb 01       	movw	r24, r22
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Local_VCalue;
     3fe:	e3 e4       	ldi	r30, 0x43	; 67
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	80 83       	st	Z, r24
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	cf 91       	pop	r28
     40e:	df 91       	pop	r29
     410:	08 95       	ret

00000412 <TIMER2_Delay>:


void TIMER2_Delay(uint16 Copy_uint16Delay)
{
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	00 d0       	rcall	.+0      	; 0x418 <TIMER2_Delay+0x6>
     418:	00 d0       	rcall	.+0      	; 0x41a <TIMER2_Delay+0x8>
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	9c 83       	std	Y+4, r25	; 0x04
     420:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
     422:	1a 82       	std	Y+2, r1	; 0x02
     424:	19 82       	std	Y+1, r1	; 0x01
     426:	10 c0       	rjmp	.+32     	; 0x448 <TIMER2_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIFR_Reg->OCF2 == 0);
     428:	e8 e5       	ldi	r30, 0x58	; 88
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	80 78       	andi	r24, 0x80	; 128
     430:	88 23       	and	r24, r24
     432:	d1 f3       	breq	.-12     	; 0x428 <TIMER2_Delay+0x16>
	TIFR_Reg->OCF2 =1;
     434:	e8 e5       	ldi	r30, 0x58	; 88
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	80 68       	ori	r24, 0x80	; 128
     43c:	80 83       	st	Z, r24
	Counter++;
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	9a 83       	std	Y+2, r25	; 0x02
     446:	89 83       	std	Y+1, r24	; 0x01
void TIMER2_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
     448:	29 81       	ldd	r18, Y+1	; 0x01
     44a:	3a 81       	ldd	r19, Y+2	; 0x02
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	28 17       	cp	r18, r24
     452:	39 07       	cpc	r19, r25
     454:	48 f3       	brcs	.-46     	; 0x428 <TIMER2_Delay+0x16>
	Counter++;


	}

}
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	cf 91       	pop	r28
     460:	df 91       	pop	r29
     462:	08 95       	ret

00000464 <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Reg->CS2x= CLCK_SELECTION;
     46c:	e5 e4       	ldi	r30, 0x45	; 69
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	84 60       	ori	r24, 0x04	; 4
     476:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=DISABLE;
TCCR2_Reg->COM2x=CORRECT_PWM_OUTPUT_MODE;


#elif TIMER_MODE==CTC_MODE
TCCR2_Reg->WGM20=DISABLE;
     478:	e5 e4       	ldi	r30, 0x45	; 69
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	8f 7b       	andi	r24, 0xBF	; 191
     480:	80 83       	st	Z, r24
TCCR2_Reg->WGM21=ENABLE;
     482:	e5 e4       	ldi	r30, 0x45	; 69
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	88 60       	ori	r24, 0x08	; 8
     48a:	80 83       	st	Z, r24
TCCR2_Reg->COM2x=CTC_OUTPUT_MODE;
     48c:	e5 e4       	ldi	r30, 0x45	; 69
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8f 7c       	andi	r24, 0xCF	; 207
     494:	80 61       	ori	r24, 0x10	; 16
     496:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
TIMSK_Reg->TOIE2=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
TIMSK_Reg->OCIE2=ENABLE;
     498:	e9 e5       	ldi	r30, 0x59	; 89
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	80 68       	ori	r24, 0x80	; 128
     4a0:	80 83       	st	Z, r24
#endif


}
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	08 95       	ret

000004a8 <TIMER2_voiSetPreLoadValue>:


void TIMER2_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	0f 92       	push	r0
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Reg=Copy_uint8Value;
     4b4:	e4 e4       	ldi	r30, 0x44	; 68
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	80 83       	st	Z, r24
}
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <TIMER2_voiSetCompareMatchValue>:


void TIMER2_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	0f 92       	push	r0
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=Copy_uint8Value;
     4d0:	e3 e4       	ldi	r30, 0x43	; 67
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	80 83       	st	Z, r24
}
     4d8:	0f 90       	pop	r0
     4da:	cf 91       	pop	r28
     4dc:	df 91       	pop	r29
     4de:	08 95       	ret

000004e0 <Timer2_Timer2OVFCallBackFunc>:

Status_t Timer2_Timer2OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
     4e0:	df 93       	push	r29
     4e2:	cf 93       	push	r28
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <Timer2_Timer2OVFCallBackFunc+0x6>
     4e6:	0f 92       	push	r0
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	9b 83       	std	Y+3, r25	; 0x03
     4ee:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
     4f0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	9b 81       	ldd	r25, Y+3	; 0x03
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	19 f4       	brne	.+6      	; 0x500 <Timer2_Timer2OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER2_POINTER_Err;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	89 83       	std	Y+1, r24	; 0x01
     4fe:	06 c0       	rjmp	.+12     	; 0x50c <Timer2_Timer2OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
     500:	8a 81       	ldd	r24, Y+2	; 0x02
     502:	9b 81       	ldd	r25, Y+3	; 0x03
     504:	90 93 8b 00 	sts	0x008B, r25
     508:	80 93 8a 00 	sts	0x008A, r24
	}

	return Local_ErrorState;
     50c:	89 81       	ldd	r24, Y+1	; 0x01
}
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <Timer2_Timer2CTCCallBackFunc>:

Status_t Timer2_Timer2CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	00 d0       	rcall	.+0      	; 0x520 <Timer2_Timer2CTCCallBackFunc+0x6>
     520:	0f 92       	push	r0
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	9b 83       	std	Y+3, r25	; 0x03
     528:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER2_OK;
     52a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	9b 81       	ldd	r25, Y+3	; 0x03
     530:	00 97       	sbiw	r24, 0x00	; 0
     532:	19 f4       	brne	.+6      	; 0x53a <Timer2_Timer2CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER2_POINTER_Err;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	06 c0       	rjmp	.+12     	; 0x546 <Timer2_Timer2CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	9b 81       	ldd	r25, Y+3	; 0x03
     53e:	90 93 89 00 	sts	0x0089, r25
     542:	80 93 88 00 	sts	0x0088, r24
		}

	return Local_ErrorState;
     546:	89 81       	ldd	r24, Y+1	; 0x01
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	cf 91       	pop	r28
     550:	df 91       	pop	r29
     552:	08 95       	ret

00000554 <__vector_4>:




/*TIMER0 COMPARE MATCH*/
void __vector_4(void){
     554:	1f 92       	push	r1
     556:	0f 92       	push	r0
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	2f 93       	push	r18
     560:	3f 93       	push	r19
     562:	4f 93       	push	r20
     564:	5f 93       	push	r21
     566:	6f 93       	push	r22
     568:	7f 93       	push	r23
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	af 93       	push	r26
     570:	bf 93       	push	r27
     572:	ef 93       	push	r30
     574:	ff 93       	push	r31
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
     57e:	e0 91 88 00 	lds	r30, 0x0088
     582:	f0 91 89 00 	lds	r31, 0x0089
     586:	09 95       	icall
}
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <__vector_5>:

/*TIMER0 OVERFLOW*/
void __vector_5(void){
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
     5b8:	2f 93       	push	r18
     5ba:	3f 93       	push	r19
     5bc:	4f 93       	push	r20
     5be:	5f 93       	push	r21
     5c0:	6f 93       	push	r22
     5c2:	7f 93       	push	r23
     5c4:	8f 93       	push	r24
     5c6:	9f 93       	push	r25
     5c8:	af 93       	push	r26
     5ca:	bf 93       	push	r27
     5cc:	ef 93       	push	r30
     5ce:	ff 93       	push	r31
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
     5d8:	e0 91 8a 00 	lds	r30, 0x008A
     5dc:	f0 91 8b 00 	lds	r31, 0x008B
     5e0:	09 95       	icall
}
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	ff 91       	pop	r31
     5e8:	ef 91       	pop	r30
     5ea:	bf 91       	pop	r27
     5ec:	af 91       	pop	r26
     5ee:	9f 91       	pop	r25
     5f0:	8f 91       	pop	r24
     5f2:	7f 91       	pop	r23
     5f4:	6f 91       	pop	r22
     5f6:	5f 91       	pop	r21
     5f8:	4f 91       	pop	r20
     5fa:	3f 91       	pop	r19
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <TIMER1_voidInit>:
#include "../inc/TIMER1_register.h"
#include "../inc/TIMER1_config.h"


void TIMER1_voidInit(void)
{
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	/*Clock selection*/
TCCR1B_Reg->CS1X= CLCK_SELECT;
     610:	ee e4       	ldi	r30, 0x4E	; 78
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	88 7f       	andi	r24, 0xF8	; 248
     618:	84 60       	ori	r24, 0x04	; 4
     61a:	80 83       	st	Z, r24

/*Waveform generation mode*/
TCCR1A_Reg->WGM1X=WAVE_GEN & 0b0011;
     61c:	ef e4       	ldi	r30, 0x4F	; 79
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	8c 7f       	andi	r24, 0xFC	; 252
     624:	80 83       	st	Z, r24
TCCR1B_Reg->WGM1XX=(WAVE_GEN>>2) & 0b0011;
     626:	ee e4       	ldi	r30, 0x4E	; 78
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	87 7e       	andi	r24, 0xE7	; 231
     62e:	88 60       	ori	r24, 0x08	; 8
     630:	80 83       	st	Z, r24

#ifdef CHANNEL_A

#if TIMER1A_MODE == TIMER1_NON_PWM

TCCR1A_Reg->COM1AX=TIMER1A_OUT_MODE;
     632:	ef e4       	ldi	r30, 0x4F	; 79
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	8f 73       	andi	r24, 0x3F	; 63
     63a:	80 83       	st	Z, r24

#ifdef CHANNEL_B

#if TIMER1B_MODE == TIMER1_NON_PWM

		TCCR1A_Reg->COM1BX=TIMER1B_OUT_MODE;
     63c:	ef e4       	ldi	r30, 0x4F	; 79
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8f 7c       	andi	r24, 0xCF	; 207
     644:	80 83       	st	Z, r24
#endif

/*INTERRUPT ENABLE*/
#ifdef TIMER1_COMPARE_MATCH_A_ISR_ENABLE

		TIMSK_Reg->OCIE1A=Enable;
     646:	e9 e5       	ldi	r30, 0x59	; 89
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	80 61       	ori	r24, 0x10	; 16
     64e:	80 83       	st	Z, r24
#ifdef TIMER1_INPUT_CAPTURE_INTERRUPT
		TIMSK_Reg->TICIE1=Enable;
#endif


}
     650:	cf 91       	pop	r28
     652:	df 91       	pop	r29
     654:	08 95       	ret

00000656 <TIMER1_voidSetChannelACompMatch>:


void TIMER1_voidSetChannelACompMatch(uint16 Copy_uint16Data)
{
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	00 d0       	rcall	.+0      	; 0x65c <TIMER1_voidSetChannelACompMatch+0x6>
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Reg=Copy_uint16Data;
     664:	ea e4       	ldi	r30, 0x4A	; 74
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
}
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(uint16 Copy_uint16Data)
{
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	00 d0       	rcall	.+0      	; 0x680 <TIMER1_voidSetChannelBCompMatch+0x6>
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	9a 83       	std	Y+2, r25	; 0x02
     686:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Reg=Copy_uint16Data;
     688:	e8 e4       	ldi	r30, 0x48	; 72
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	80 83       	st	Z, r24
}
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(uint16 Copy_uint16ICR)
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <TIMER1_voidSetICR+0x6>
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Reg=Copy_uint16ICR;
     6ac:	e6 e4       	ldi	r30, 0x46	; 70
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
}
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	cf 91       	pop	r28
     6be:	df 91       	pop	r29
     6c0:	08 95       	ret

000006c2 <TIMER1_voidSetTimerValue>:
void TIMER1_voidSetTimerValue(uint16 Copy_uint16Value)
{
     6c2:	df 93       	push	r29
     6c4:	cf 93       	push	r28
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <TIMER1_voidSetTimerValue+0x6>
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Reg=	Copy_uint16Value;
     6d0:	ec e4       	ldi	r30, 0x4C	; 76
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
}
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	08 95       	ret

000006e6 <TIMER1_uint16GetTimerValue>:
uint16 TIMER1_uint16GetTimerValue(void)
{
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
return TCNT1_Reg;
     6ee:	ec e4       	ldi	r30, 0x4C	; 76
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
}
     6f6:	cf 91       	pop	r28
     6f8:	df 91       	pop	r29
     6fa:	08 95       	ret

000006fc <TIMER1_CTCASetCallBck>:


Timer1_status TIMER1_CTCASetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     6fc:	df 93       	push	r29
     6fe:	cf 93       	push	r28
     700:	00 d0       	rcall	.+0      	; 0x702 <TIMER1_CTCASetCallBck+0x6>
     702:	0f 92       	push	r0
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	9b 83       	std	Y+3, r25	; 0x03
     70a:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
     70c:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Copy_pvCallBackFunc)
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	9b 81       	ldd	r25, Y+3	; 0x03
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	19 f4       	brne	.+6      	; 0x71c <TIMER1_CTCASetCallBck+0x20>
	{
		Local_ErrorState=TIMER1_PONTER_ERR;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	06 c0       	rjmp	.+12     	; 0x728 <TIMER1_CTCASetCallBck+0x2c>
	}
	else
	{
		TIMER1_pvCallBackFunc_CTC_A=Copy_pvCallBackFunc;
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	9b 81       	ldd	r25, Y+3	; 0x03
     720:	90 93 8d 00 	sts	0x008D, r25
     724:	80 93 8c 00 	sts	0x008C, r24
	}
return Local_ErrorState;
     728:	89 81       	ldd	r24, Y+1	; 0x01
}
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	cf 91       	pop	r28
     732:	df 91       	pop	r29
     734:	08 95       	ret

00000736 <TIMER1_CTCBSetCallBck>:
Timer1_status TIMER1_CTCBSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	00 d0       	rcall	.+0      	; 0x73c <TIMER1_CTCBSetCallBck+0x6>
     73c:	0f 92       	push	r0
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	9b 83       	std	Y+3, r25	; 0x03
     744:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_status Local_ErrorState=TIMER1_OK;
     746:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	19 f4       	brne	.+6      	; 0x756 <TIMER1_CTCBSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	06 c0       	rjmp	.+12     	; 0x762 <TIMER1_CTCBSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CTC_B=Copy_pvCallBackFunc;
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	9b 81       	ldd	r25, Y+3	; 0x03
     75a:	90 93 8f 00 	sts	0x008F, r25
     75e:	80 93 8e 00 	sts	0x008E, r24
		}
	return Local_ErrorState;
     762:	89 81       	ldd	r24, Y+1	; 0x01
}
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	08 95       	ret

00000770 <TIMER1_OVSetCallBck>:


Timer1_status TIMER1_OVSetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	00 d0       	rcall	.+0      	; 0x776 <TIMER1_OVSetCallBck+0x6>
     776:	0f 92       	push	r0
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	9b 83       	std	Y+3, r25	; 0x03
     77e:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
     780:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
     782:	8a 81       	ldd	r24, Y+2	; 0x02
     784:	9b 81       	ldd	r25, Y+3	; 0x03
     786:	00 97       	sbiw	r24, 0x00	; 0
     788:	19 f4       	brne	.+6      	; 0x790 <TIMER1_OVSetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	06 c0       	rjmp	.+12     	; 0x79c <TIMER1_OVSetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_OV=Copy_pvCallBackFunc;
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	9b 81       	ldd	r25, Y+3	; 0x03
     794:	90 93 91 00 	sts	0x0091, r25
     798:	80 93 90 00 	sts	0x0090, r24
		}
	return Local_ErrorState;
     79c:	89 81       	ldd	r24, Y+1	; 0x01
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	08 95       	ret

000007aa <TIMER1_CAPTURESetCallBck>:


Timer1_status TIMER1_CAPTURESetCallBck(void(*Copy_pvCallBackFunc)(void))
{
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <TIMER1_CAPTURESetCallBck+0x6>
     7b0:	0f 92       	push	r0
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	9b 83       	std	Y+3, r25	; 0x03
     7b8:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_status Local_ErrorState=TIMER1_OK;
     7ba:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == Copy_pvCallBackFunc)
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	19 f4       	brne	.+6      	; 0x7ca <TIMER1_CAPTURESetCallBck+0x20>
		{
			Local_ErrorState=TIMER1_PONTER_ERR;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <TIMER1_CAPTURESetCallBck+0x2c>
		}
		else
		{
			TIMER1_pvCallBackFunc_CaptEvnt=Copy_pvCallBackFunc;
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	9b 81       	ldd	r25, Y+3	; 0x03
     7ce:	90 93 93 00 	sts	0x0093, r25
     7d2:	80 93 92 00 	sts	0x0092, r24
		}
	return Local_ErrorState;
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <__vector_6>:



void __vector_6 (void)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62

	TIMER1_pvCallBackFunc_CaptEvnt();
     80e:	e0 91 92 00 	lds	r30, 0x0092
     812:	f0 91 93 00 	lds	r31, 0x0093
     816:	09 95       	icall
	TIFR_Reg->ICF1=Enable;
     818:	e8 e5       	ldi	r30, 0x58	; 88
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	80 62       	ori	r24, 0x20	; 32
     820:	80 83       	st	Z, r24
}
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_7>:

void __vector_7 (void)
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	2f 93       	push	r18
     854:	3f 93       	push	r19
     856:	4f 93       	push	r20
     858:	5f 93       	push	r21
     85a:	6f 93       	push	r22
     85c:	7f 93       	push	r23
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	af 93       	push	r26
     864:	bf 93       	push	r27
     866:	ef 93       	push	r30
     868:	ff 93       	push	r31
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_A();
     872:	e0 91 8c 00 	lds	r30, 0x008C
     876:	f0 91 8d 00 	lds	r31, 0x008D
     87a:	09 95       	icall
}
     87c:	cf 91       	pop	r28
     87e:	df 91       	pop	r29
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <__vector_8>:

void __vector_8 (void)
{
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	ef 93       	push	r30
     8c2:	ff 93       	push	r31
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_CTC_B();
     8cc:	e0 91 8e 00 	lds	r30, 0x008E
     8d0:	f0 91 8f 00 	lds	r31, 0x008F
     8d4:	09 95       	icall
}
     8d6:	cf 91       	pop	r28
     8d8:	df 91       	pop	r29
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <__vector_9>:


void __vector_9 (void)
{
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	2f 93       	push	r18
     908:	3f 93       	push	r19
     90a:	4f 93       	push	r20
     90c:	5f 93       	push	r21
     90e:	6f 93       	push	r22
     910:	7f 93       	push	r23
     912:	8f 93       	push	r24
     914:	9f 93       	push	r25
     916:	af 93       	push	r26
     918:	bf 93       	push	r27
     91a:	ef 93       	push	r30
     91c:	ff 93       	push	r31
     91e:	df 93       	push	r29
     920:	cf 93       	push	r28
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	TIMER1_pvCallBackFunc_OV();
     926:	e0 91 90 00 	lds	r30, 0x0090
     92a:	f0 91 91 00 	lds	r31, 0x0091
     92e:	09 95       	icall
}
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0f be       	out	0x3f, r0	; 63
     950:	0f 90       	pop	r0
     952:	1f 90       	pop	r1
     954:	18 95       	reti

00000956 <TIMER0_DutyCycle>:
#include "../inc/TIMER0_private.h"
#include "../inc/TIMER0_register.h"
#include "../inc/TIMER0_config.h"

void TIMER0_DutyCycle(uint8 Copy_uint8Duty)
{
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	00 d0       	rcall	.+0      	; 0x95c <TIMER0_DutyCycle+0x6>
     95c:	0f 92       	push	r0
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_VCalue=0;
     964:	1a 82       	std	Y+2, r1	; 0x02
     966:	19 82       	std	Y+1, r1	; 0x01
	Local_VCalue=Copy_uint8Duty*256;
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	98 2f       	mov	r25, r24
     970:	88 27       	eor	r24, r24
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
	Local_VCalue/=100;
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	24 e6       	ldi	r18, 0x64	; 100
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	b9 01       	movw	r22, r18
     980:	0e 94 32 10 	call	0x2064	; 0x2064 <__udivmodhi4>
     984:	cb 01       	movw	r24, r22
     986:	9a 83       	std	Y+2, r25	; 0x02
     988:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Local_VCalue;
     98a:	ec e5       	ldi	r30, 0x5C	; 92
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	80 83       	st	Z, r24
}
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	cf 91       	pop	r28
     99a:	df 91       	pop	r29
     99c:	08 95       	ret

0000099e <TIMER0_Delay>:


void TIMER0_Delay(uint16 Copy_uint16Delay)
{
     99e:	df 93       	push	r29
     9a0:	cf 93       	push	r28
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <TIMER0_Delay+0x6>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <TIMER0_Delay+0x8>
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	9c 83       	std	Y+4, r25	; 0x04
     9ac:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Counter=0;
     9ae:	1a 82       	std	Y+2, r1	; 0x02
     9b0:	19 82       	std	Y+1, r1	; 0x01
     9b2:	10 c0       	rjmp	.+32     	; 0x9d4 <TIMER0_Delay+0x36>


	while(Counter<Copy_uint16Delay)
	{
	while(TIMER0_TIFR_Reg->OCF0 == 0);
     9b4:	e8 e5       	ldi	r30, 0x58	; 88
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	82 70       	andi	r24, 0x02	; 2
     9bc:	88 23       	and	r24, r24
     9be:	d1 f3       	breq	.-12     	; 0x9b4 <TIMER0_Delay+0x16>
	TIMER0_TIFR_Reg->OCF0 =1;
     9c0:	e8 e5       	ldi	r30, 0x58	; 88
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	82 60       	ori	r24, 0x02	; 2
     9c8:	80 83       	st	Z, r24
	Counter++;
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_Delay(uint16 Copy_uint16Delay)
{
	uint16 Counter=0;


	while(Counter<Copy_uint16Delay)
     9d4:	29 81       	ldd	r18, Y+1	; 0x01
     9d6:	3a 81       	ldd	r19, Y+2	; 0x02
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	48 f3       	brcs	.-46     	; 0x9b4 <TIMER0_Delay+0x16>
	Counter++;


	}

}
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	cf 91       	pop	r28
     9ec:	df 91       	pop	r29
     9ee:	08 95       	ret

000009f0 <TIMER0_voidInit>:
void TIMER0_voidInit(void)
{
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
	/*clock selection*/
	TIMER0_TCCR0_Reg->CS0x= CLCK_SELECTION;
     9f8:	e3 e5       	ldi	r30, 0x53	; 83
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	88 7f       	andi	r24, 0xF8	; 248
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM00=DISABLE;
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
	TIMER0_TCCR0_Reg->COM0=CTC_OUTPUT_MODE;

#elif TIMER_MODE==FAST_PWM_MODE
	TIMER0_TCCR0_Reg->WGM00=ENABLE;
     a04:	e3 e5       	ldi	r30, 0x53	; 83
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	80 64       	ori	r24, 0x40	; 64
     a0c:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->WGM01=ENABLE;
     a0e:	e3 e5       	ldi	r30, 0x53	; 83
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	80 83       	st	Z, r24
	TIMER0_TCCR0_Reg->COM0=FAST_PWM_OUTPUT_MODE;
     a18:	e3 e5       	ldi	r30, 0x53	; 83
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	8f 7c       	andi	r24, 0xCF	; 207
     a20:	80 62       	ori	r24, 0x20	; 32
     a22:	80 83       	st	Z, r24
#ifdef OVERFLOW_ISR_ENABLE
	TIMER0_TIMSK_Reg->TOIE0=ENABLE;
#endif

#ifdef COMPARE_MATCH_ISR_ENABLE
	TIMER0_TIMSK_Reg->OCIE0=ENABLE;
     a24:	e9 e5       	ldi	r30, 0x59	; 89
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	80 83       	st	Z, r24
#endif


}
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	08 95       	ret

00000a34 <TIMER0_voiSetPreLoadValue>:


void TIMER0_voiSetPreLoadValue(uint8 Copy_uint8Value)
{
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	0f 92       	push	r0
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_Reg=Copy_uint8Value;
     a40:	e2 e5       	ldi	r30, 0x52	; 82
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	80 83       	st	Z, r24
}
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <TIMER0_voiSetCompareMatchValue>:


void TIMER0_voiSetCompareMatchValue(uint8 Copy_uint8Value)
{
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	0f 92       	push	r0
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_Reg=Copy_uint8Value;
     a5c:	ec e5       	ldi	r30, 0x5C	; 92
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	80 83       	st	Z, r24
}
     a64:	0f 90       	pop	r0
     a66:	cf 91       	pop	r28
     a68:	df 91       	pop	r29
     a6a:	08 95       	ret

00000a6c <Timer0_Timer0OVFCallBackFunc>:

Status_t Timer0_Timer0OVFCallBackFunc(void (*Copy_pvFunc)(void))
{
     a6c:	df 93       	push	r29
     a6e:	cf 93       	push	r28
     a70:	00 d0       	rcall	.+0      	; 0xa72 <Timer0_Timer0OVFCallBackFunc+0x6>
     a72:	0f 92       	push	r0
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	9b 83       	std	Y+3, r25	; 0x03
     a7a:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
     a7c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	9b 81       	ldd	r25, Y+3	; 0x03
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	19 f4       	brne	.+6      	; 0xa8c <Timer0_Timer0OVFCallBackFunc+0x20>
	{
		Local_ErrorState =TIMER_POINTER_Err;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <Timer0_Timer0OVFCallBackFunc+0x2c>
	}
	else
	{
		Global_PvOverFlow = Copy_pvFunc;
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	9b 81       	ldd	r25, Y+3	; 0x03
     a90:	90 93 97 00 	sts	0x0097, r25
     a94:	80 93 96 00 	sts	0x0096, r24
	}

	return Local_ErrorState;
     a98:	89 81       	ldd	r24, Y+1	; 0x01
}
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	cf 91       	pop	r28
     aa2:	df 91       	pop	r29
     aa4:	08 95       	ret

00000aa6 <Timer0_Timer0CTCCallBackFunc>:

Status_t Timer0_Timer0CTCCallBackFunc(void (*Copy_pvFunc)(void))
{
     aa6:	df 93       	push	r29
     aa8:	cf 93       	push	r28
     aaa:	00 d0       	rcall	.+0      	; 0xaac <Timer0_Timer0CTCCallBackFunc+0x6>
     aac:	0f 92       	push	r0
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	9b 83       	std	Y+3, r25	; 0x03
     ab4:	8a 83       	std	Y+2, r24	; 0x02
	Status_t Local_ErrorState= TIMER_OK;
     ab6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Copy_pvFunc )
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	9b 81       	ldd	r25, Y+3	; 0x03
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	19 f4       	brne	.+6      	; 0xac6 <Timer0_Timer0CTCCallBackFunc+0x20>
		{
			Local_ErrorState =TIMER_POINTER_Err;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	06 c0       	rjmp	.+12     	; 0xad2 <Timer0_Timer0CTCCallBackFunc+0x2c>
		}
		else
		{
			Global_PvCompareMatch=Copy_pvFunc;
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	9b 81       	ldd	r25, Y+3	; 0x03
     aca:	90 93 95 00 	sts	0x0095, r25
     ace:	80 93 94 00 	sts	0x0094, r24
		}

	return Local_ErrorState;
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	08 95       	ret

00000ae0 <__vector_10>:




/*TIMER0 COMPARE MATCH*/
void __vector_10(void){
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62

	Global_PvCompareMatch();
     b0a:	e0 91 94 00 	lds	r30, 0x0094
     b0e:	f0 91 95 00 	lds	r31, 0x0095
     b12:	09 95       	icall
}
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_11>:

/*TIMER0 OVERFLOW*/
void __vector_11(void){
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	2f 93       	push	r18
     b46:	3f 93       	push	r19
     b48:	4f 93       	push	r20
     b4a:	5f 93       	push	r21
     b4c:	6f 93       	push	r22
     b4e:	7f 93       	push	r23
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	af 93       	push	r26
     b56:	bf 93       	push	r27
     b58:	ef 93       	push	r30
     b5a:	ff 93       	push	r31
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62

	Global_PvOverFlow();
     b64:	e0 91 96 00 	lds	r30, 0x0096
     b68:	f0 91 97 00 	lds	r31, 0x0097
     b6c:	09 95       	icall
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	bf 91       	pop	r27
     b78:	af 91       	pop	r26
     b7a:	9f 91       	pop	r25
     b7c:	8f 91       	pop	r24
     b7e:	7f 91       	pop	r23
     b80:	6f 91       	pop	r22
     b82:	5f 91       	pop	r21
     b84:	4f 91       	pop	r20
     b86:	3f 91       	pop	r19
     b88:	2f 91       	pop	r18
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <PORT_voidInit>:
#include"../inc/PORT_config.h"



void PORT_voidInit(void)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62

DDRA=PORTA_DIR;
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	80 83       	st	Z, r24
DDRB=PORTB_DIR;
     ba4:	e7 e3       	ldi	r30, 0x37	; 55
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	80 83       	st	Z, r24
DDRC=PORTC_DIR;
     bac:	e4 e3       	ldi	r30, 0x34	; 52
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	87 e0       	ldi	r24, 0x07	; 7
     bb2:	80 83       	st	Z, r24
DDRD=PORTD_DIR;
     bb4:	e1 e3       	ldi	r30, 0x31	; 49
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1

PORTA=PORTA_INIT_VALUE;
     bba:	eb e3       	ldi	r30, 0x3B	; 59
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	10 82       	st	Z, r1
PORTB=PORTB_INIT_VALUE;
     bc0:	e8 e3       	ldi	r30, 0x38	; 56
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	10 82       	st	Z, r1
PORTC=PORTC_INIT_VALUE;
     bc6:	e5 e3       	ldi	r30, 0x35	; 53
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	10 82       	st	Z, r1
PORTD=PORTD_INIT_VALUE;
     bcc:	e2 e3       	ldi	r30, 0x32	; 50
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	10 82       	st	Z, r1
}
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <GIE_Enable>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/GIE_interface.h"
#include "../inc/GIE_register.h"

void GIE_Enable(void)
{
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_I);
     be0:	af e5       	ldi	r26, 0x5F	; 95
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ef e5       	ldi	r30, 0x5F	; 95
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	8c 93       	st	X, r24

}
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <GIE_Disable>:
void GIE_Disable(void)
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
     bfc:	af e5       	ldi	r26, 0x5F	; 95
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	ef e5       	ldi	r30, 0x5F	; 95
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	8c 93       	st	X, r24
}
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <EXTI_voidInt0Init>:
#include "../inc/EXTI_interface.h"
#include "../inc/EXTI_config.h"
#include "../inc/EXTI_private.h"

void EXTI_voidInt0Init(void)
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62

#if INT0_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
     c18:	a5 e5       	ldi	r26, 0x55	; 85
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e5 e5       	ldi	r30, 0x55	; 85
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
     c26:	a5 e5       	ldi	r26, 0x55	; 85
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e5 e5       	ldi	r30, 0x55	; 85
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8d 7f       	andi	r24, 0xFD	; 253
     c32:	8c 93       	st	X, r24
#else
#error "INT0 Wrong init"
#endif

#if INT0_STATE == INT0_ENABLE
	SET_BIT(GICR,GICR_INT0);
     c34:	ab e5       	ldi	r26, 0x5B	; 91
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	eb e5       	ldi	r30, 0x5B	; 91
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 64       	ori	r24, 0x40	; 64
     c40:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT0);
#else
#error "INT0 Wrong init"
#endif

}
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
#if INT1_SENSE == LOW_LEVEL
	CLEAR_BIT(MCUCR,MCUCR_ISC10);
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
     c50:	a5 e5       	ldi	r26, 0x55	; 85
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e5 e5       	ldi	r30, 0x55	; 85
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	84 60       	ori	r24, 0x04	; 4
     c5c:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
     c5e:	a5 e5       	ldi	r26, 0x55	; 85
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e5 e5       	ldi	r30, 0x55	; 85
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	87 7f       	andi	r24, 0xF7	; 247
     c6a:	8c 93       	st	X, r24
#elif  INT1_STATE == INT1_DISABLE
	CLEAR_BIT(GICR,GICR_INT1);
#else
#warning "INT1 Wrong init"
#endif
}
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62

#if INT2_SENSE == FALLING_EDGE
	CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
     c7a:	a4 e5       	ldi	r26, 0x54	; 84
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e4 e5       	ldi	r30, 0x54	; 84
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8f 7b       	andi	r24, 0xBF	; 191
     c86:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT2);
#else
#warning "INT2 Wrong init"
#endif

}
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <EXTI_uint8IntSetSenseControl>:

uint8 EXTI_uint8IntSetSenseControl(uint8 Copy_uint8IntNumber,uint8 Copy_uint8Sense)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	29 97       	sbiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	8a 83       	std	Y+2, r24	; 0x02
     ca4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_ErrorState=0;
     ca6:	19 82       	std	Y+1, r1	; 0x01
	if(INT0==Copy_uint8IntNumber)
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <EXTI_uint8IntSetSenseControl+0x22>
     cae:	5e c0       	rjmp	.+188    	; 0xd6c <EXTI_uint8IntSetSenseControl+0xde>
	{
		switch(Copy_uint8Sense)
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	39 87       	std	Y+9, r19	; 0x09
     cb8:	28 87       	std	Y+8, r18	; 0x08
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	99 85       	ldd	r25, Y+9	; 0x09
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	21 f1       	breq	.+72     	; 0xd0c <EXTI_uint8IntSetSenseControl+0x7e>
     cc4:	28 85       	ldd	r18, Y+8	; 0x08
     cc6:	39 85       	ldd	r19, Y+9	; 0x09
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <EXTI_uint8IntSetSenseControl+0x4a>
     cce:	88 85       	ldd	r24, Y+8	; 0x08
     cd0:	99 85       	ldd	r25, Y+9	; 0x09
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	61 f0       	breq	.+24     	; 0xcee <EXTI_uint8IntSetSenseControl+0x60>
     cd6:	47 c0       	rjmp	.+142    	; 0xd66 <EXTI_uint8IntSetSenseControl+0xd8>
     cd8:	28 85       	ldd	r18, Y+8	; 0x08
     cda:	39 85       	ldd	r19, Y+9	; 0x09
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	21 f1       	breq	.+72     	; 0xd2a <EXTI_uint8IntSetSenseControl+0x9c>
     ce2:	88 85       	ldd	r24, Y+8	; 0x08
     ce4:	99 85       	ldd	r25, Y+9	; 0x09
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	71 f1       	breq	.+92     	; 0xd48 <EXTI_uint8IntSetSenseControl+0xba>
     cec:	3c c0       	rjmp	.+120    	; 0xd66 <EXTI_uint8IntSetSenseControl+0xd8>
		{
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
     cee:	a5 e5       	ldi	r26, 0x55	; 85
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e5 e5       	ldi	r30, 0x55	; 85
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8e 7f       	andi	r24, 0xFE	; 254
     cfa:	8c 93       	st	X, r24
     cfc:	a5 e5       	ldi	r26, 0x55	; 85
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e5 e5       	ldi	r30, 0x55	; 85
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8d 7f       	andi	r24, 0xFD	; 253
     d08:	8c 93       	st	X, r24
     d0a:	ba c0       	rjmp	.+372    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC00);CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
     d0c:	a5 e5       	ldi	r26, 0x55	; 85
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e5 e5       	ldi	r30, 0x55	; 85
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	81 60       	ori	r24, 0x01	; 1
     d18:	8c 93       	st	X, r24
     d1a:	a5 e5       	ldi	r26, 0x55	; 85
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e5 e5       	ldi	r30, 0x55	; 85
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8d 7f       	andi	r24, 0xFD	; 253
     d26:	8c 93       	st	X, r24
     d28:	ab c0       	rjmp	.+342    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
     d2a:	a5 e5       	ldi	r26, 0x55	; 85
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e5 e5       	ldi	r30, 0x55	; 85
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	8c 93       	st	X, r24
     d38:	a5 e5       	ldi	r26, 0x55	; 85
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e5 e5       	ldi	r30, 0x55	; 85
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	8c 93       	st	X, r24
     d46:	9c c0       	rjmp	.+312    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
		case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
     d48:	a5 e5       	ldi	r26, 0x55	; 85
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e5       	ldi	r30, 0x55	; 85
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	8c 93       	st	X, r24
     d56:	a5 e5       	ldi	r26, 0x55	; 85
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e5       	ldi	r30, 0x55	; 85
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	8c 93       	st	X, r24
     d64:	8d c0       	rjmp	.+282    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
		default : Local_ErrorState=1;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	8a c0       	rjmp	.+276    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
		}
	}
	else if(INT1==Copy_uint8IntNumber)
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	09 f0       	breq	.+2      	; 0xd74 <EXTI_uint8IntSetSenseControl+0xe6>
     d72:	5e c0       	rjmp	.+188    	; 0xe30 <EXTI_uint8IntSetSenseControl+0x1a2>
	{
		switch(Copy_uint8Sense)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	3f 83       	std	Y+7, r19	; 0x07
     d7c:	2e 83       	std	Y+6, r18	; 0x06
     d7e:	8e 81       	ldd	r24, Y+6	; 0x06
     d80:	9f 81       	ldd	r25, Y+7	; 0x07
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	21 f1       	breq	.+72     	; 0xdd0 <EXTI_uint8IntSetSenseControl+0x142>
     d88:	2e 81       	ldd	r18, Y+6	; 0x06
     d8a:	3f 81       	ldd	r19, Y+7	; 0x07
     d8c:	22 30       	cpi	r18, 0x02	; 2
     d8e:	31 05       	cpc	r19, r1
     d90:	2c f4       	brge	.+10     	; 0xd9c <EXTI_uint8IntSetSenseControl+0x10e>
     d92:	8e 81       	ldd	r24, Y+6	; 0x06
     d94:	9f 81       	ldd	r25, Y+7	; 0x07
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	61 f0       	breq	.+24     	; 0xdb2 <EXTI_uint8IntSetSenseControl+0x124>
     d9a:	47 c0       	rjmp	.+142    	; 0xe2a <EXTI_uint8IntSetSenseControl+0x19c>
     d9c:	2e 81       	ldd	r18, Y+6	; 0x06
     d9e:	3f 81       	ldd	r19, Y+7	; 0x07
     da0:	22 30       	cpi	r18, 0x02	; 2
     da2:	31 05       	cpc	r19, r1
     da4:	21 f1       	breq	.+72     	; 0xdee <EXTI_uint8IntSetSenseControl+0x160>
     da6:	8e 81       	ldd	r24, Y+6	; 0x06
     da8:	9f 81       	ldd	r25, Y+7	; 0x07
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	71 f1       	breq	.+92     	; 0xe0c <EXTI_uint8IntSetSenseControl+0x17e>
     db0:	3c c0       	rjmp	.+120    	; 0xe2a <EXTI_uint8IntSetSenseControl+0x19c>
	  {
		case EXTI_LOW_LEVEL :CLEAR_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
     db2:	a5 e5       	ldi	r26, 0x55	; 85
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e5 e5       	ldi	r30, 0x55	; 85
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8b 7f       	andi	r24, 0xFB	; 251
     dbe:	8c 93       	st	X, r24
     dc0:	a5 e5       	ldi	r26, 0x55	; 85
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e5 e5       	ldi	r30, 0x55	; 85
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 7f       	andi	r24, 0xF7	; 247
     dcc:	8c 93       	st	X, r24
     dce:	58 c0       	rjmp	.+176    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_ANY_CHANGE :SET_BIT(MCUCR,MCUCR_ISC10);CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
     dd0:	a5 e5       	ldi	r26, 0x55	; 85
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e5 e5       	ldi	r30, 0x55	; 85
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	84 60       	ori	r24, 0x04	; 4
     ddc:	8c 93       	st	X, r24
     dde:	a5 e5       	ldi	r26, 0x55	; 85
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 e5       	ldi	r30, 0x55	; 85
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	87 7f       	andi	r24, 0xF7	; 247
     dea:	8c 93       	st	X, r24
     dec:	49 c0       	rjmp	.+146    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_FALLING:CLEAR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
     dee:	a5 e5       	ldi	r26, 0x55	; 85
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e5 e5       	ldi	r30, 0x55	; 85
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8b 7f       	andi	r24, 0xFB	; 251
     dfa:	8c 93       	st	X, r24
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	88 60       	ori	r24, 0x08	; 8
     e08:	8c 93       	st	X, r24
     e0a:	3a c0       	rjmp	.+116    	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
     e0c:	a5 e5       	ldi	r26, 0x55	; 85
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e5 e5       	ldi	r30, 0x55	; 85
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	84 60       	ori	r24, 0x04	; 4
     e18:	8c 93       	st	X, r24
     e1a:	a5 e5       	ldi	r26, 0x55	; 85
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e5       	ldi	r30, 0x55	; 85
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	88 60       	ori	r24, 0x08	; 8
     e26:	8c 93       	st	X, r24
     e28:	2b c0       	rjmp	.+86     	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	28 c0       	rjmp	.+80     	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else if(INT2==Copy_uint8IntNumber)
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	19 f5       	brne	.+70     	; 0xe7c <EXTI_uint8IntSetSenseControl+0x1ee>
	{switch(Copy_uint8Sense)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	3d 83       	std	Y+5, r19	; 0x05
     e3e:	2c 83       	std	Y+4, r18	; 0x04
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	91 05       	cpc	r25, r1
     e48:	31 f0       	breq	.+12     	; 0xe56 <EXTI_uint8IntSetSenseControl+0x1c8>
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	23 30       	cpi	r18, 0x03	; 3
     e50:	31 05       	cpc	r19, r1
     e52:	49 f0       	breq	.+18     	; 0xe66 <EXTI_uint8IntSetSenseControl+0x1d8>
     e54:	10 c0       	rjmp	.+32     	; 0xe76 <EXTI_uint8IntSetSenseControl+0x1e8>
	  {
	   case EXTI_FALLING:CLEAR_BIT(MCUCSR,MCUCSR_ISC2);break;
     e56:	a4 e5       	ldi	r26, 0x54	; 84
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e4 e5       	ldi	r30, 0x54	; 84
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7b       	andi	r24, 0xBF	; 191
     e62:	8c 93       	st	X, r24
     e64:	0d c0       	rjmp	.+26     	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	   case EXTI_RISING:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
     e66:	a4 e5       	ldi	r26, 0x54	; 84
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e4 e5       	ldi	r30, 0x54	; 84
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	8c 93       	st	X, r24
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	   default : Local_ErrorState=1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <EXTI_uint8IntSetSenseControl+0x1f2>
	  }
	}
	else
	{
		Local_ErrorState=1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_ErrorState;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	29 96       	adiw	r28, 0x09	; 9
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <EXTI_uint8IntEnable>:

uint8 EXTI_uint8IntEnable(uint8 Copy_uint8IntNumber)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <EXTI_uint8IntEnable+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <EXTI_uint8IntEnable+0x8>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
     ea2:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3c 83       	std	Y+4, r19	; 0x04
     eac:	2b 83       	std	Y+3, r18	; 0x03
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	91 05       	cpc	r25, r1
     eb6:	91 f0       	breq	.+36     	; 0xedc <EXTI_uint8IntEnable+0x48>
     eb8:	2b 81       	ldd	r18, Y+3	; 0x03
     eba:	3c 81       	ldd	r19, Y+4	; 0x04
     ebc:	23 30       	cpi	r18, 0x03	; 3
     ebe:	31 05       	cpc	r19, r1
     ec0:	a9 f0       	breq	.+42     	; 0xeec <EXTI_uint8IntEnable+0x58>
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	c1 f4       	brne	.+48     	; 0xefc <EXTI_uint8IntEnable+0x68>
	case INT0:SET_BIT(GICR,GICR_INT0);break;
     ecc:	ab e5       	ldi	r26, 0x5B	; 91
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	eb e5       	ldi	r30, 0x5B	; 91
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 64       	ori	r24, 0x40	; 64
     ed8:	8c 93       	st	X, r24
     eda:	12 c0       	rjmp	.+36     	; 0xf00 <EXTI_uint8IntEnable+0x6c>
	case INT1:SET_BIT(GICR,GICR_INT1);break;
     edc:	ab e5       	ldi	r26, 0x5B	; 91
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	eb e5       	ldi	r30, 0x5B	; 91
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	8c 93       	st	X, r24
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <EXTI_uint8IntEnable+0x6c>
	case INT2:SET_BIT(GICR,GICR_INT2);break;
     eec:	ab e5       	ldi	r26, 0x5B	; 91
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	eb e5       	ldi	r30, 0x5B	; 91
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 62       	ori	r24, 0x20	; 32
     ef8:	8c 93       	st	X, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <EXTI_uint8IntEnable+0x6c>
    default  : Local_ErrorState=1;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <EXTI_uint8IntDisable>:


uint8 EXTI_uint8IntDisable(uint8 Copy_uint8IntNumber)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <EXTI_uint8IntDisable+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <EXTI_uint8IntDisable+0x8>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_ErrorState = 0;
     f1e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_uint8IntNumber) {
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	3c 83       	std	Y+4, r19	; 0x04
     f28:	2b 83       	std	Y+3, r18	; 0x03
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	91 f0       	breq	.+36     	; 0xf58 <EXTI_uint8IntDisable+0x48>
     f34:	2b 81       	ldd	r18, Y+3	; 0x03
     f36:	3c 81       	ldd	r19, Y+4	; 0x04
     f38:	23 30       	cpi	r18, 0x03	; 3
     f3a:	31 05       	cpc	r19, r1
     f3c:	a9 f0       	breq	.+42     	; 0xf68 <EXTI_uint8IntDisable+0x58>
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	c1 f4       	brne	.+48     	; 0xf78 <EXTI_uint8IntDisable+0x68>
	case INT0:CLEAR_BIT(GICR,GICR_INT0);break;
     f48:	ab e5       	ldi	r26, 0x5B	; 91
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e5       	ldi	r30, 0x5B	; 91
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 7b       	andi	r24, 0xBF	; 191
     f54:	8c 93       	st	X, r24
     f56:	12 c0       	rjmp	.+36     	; 0xf7c <EXTI_uint8IntDisable+0x6c>
	case INT1:CLEAR_BIT(GICR,GICR_INT1);break;
     f58:	ab e5       	ldi	r26, 0x5B	; 91
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	eb e5       	ldi	r30, 0x5B	; 91
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8f 77       	andi	r24, 0x7F	; 127
     f64:	8c 93       	st	X, r24
     f66:	0a c0       	rjmp	.+20     	; 0xf7c <EXTI_uint8IntDisable+0x6c>
	case INT2:CLEAR_BIT(GICR,GICR_INT2);break;
     f68:	ab e5       	ldi	r26, 0x5B	; 91
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e5       	ldi	r30, 0x5B	; 91
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7d       	andi	r24, 0xDF	; 223
     f74:	8c 93       	st	X, r24
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <EXTI_uint8IntDisable+0x6c>
    default  : Local_ErrorState=1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <EXTI_uint8Int0SetCallBack>:

uint8 EXTI_uint8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	00 d0       	rcall	.+0      	; 0xf92 <EXTI_uint8Int0SetCallBack+0x6>
     f92:	0f 92       	push	r0
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9b 83       	std	Y+3, r25	; 0x03
     f9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
     f9c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <EXTI_uint8Int0SetCallBack+0x28>
	{
		Global_EXTI_pvInt0Func=Copy_pvInt0Func;
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	90 93 99 00 	sts	0x0099, r25
     fae:	80 93 98 00 	sts	0x0098, r24
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <EXTI_uint8Int0SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <EXTI_uint8Int1SetCallBack>:



uint8 EXTI_uint8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <EXTI_uint8Int1SetCallBack+0x6>
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
     fd6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL)
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	39 f0       	breq	.+14     	; 0xfee <EXTI_uint8Int1SetCallBack+0x28>
	{
		Global_EXTI_pvInt1Func=Copy_pvInt1Func;
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	90 93 9b 00 	sts	0x009B, r25
     fe8:	80 93 9a 00 	sts	0x009A, r24
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <EXTI_uint8Int1SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <EXTI_uint8Int2SetCallBack>:



uint8 EXTI_uint8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <EXTI_uint8Int2SetCallBack+0x6>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorStatus=NULL;
    1010:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL)
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	9b 81       	ldd	r25, Y+3	; 0x03
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	39 f0       	breq	.+14     	; 0x1028 <EXTI_uint8Int2SetCallBack+0x28>
	{
		Global_EXTI_pvInt2Func=Copy_pvInt2Func;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	90 93 9d 00 	sts	0x009D, r25
    1022:	80 93 9c 00 	sts	0x009C, r24
    1026:	02 c0       	rjmp	.+4      	; 0x102c <EXTI_uint8Int2SetCallBack+0x2c>

	}
	else
	{
		 Local_uint8ErrorStatus=2;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorStatus;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <__vector_1>:


/*ISR of INT0*/

void __vector_1(void)
{
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	4f 93       	push	r20
    104a:	5f 93       	push	r21
    104c:	6f 93       	push	r22
    104e:	7f 93       	push	r23
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	af 93       	push	r26
    1056:	bf 93       	push	r27
    1058:	ef 93       	push	r30
    105a:	ff 93       	push	r31
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt0Func!=NULL)
    1064:	80 91 98 00 	lds	r24, 0x0098
    1068:	90 91 99 00 	lds	r25, 0x0099
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	29 f0       	breq	.+10     	; 0x107a <__vector_1+0x40>
	{
		Global_EXTI_pvInt0Func();
    1070:	e0 91 98 00 	lds	r30, 0x0098
    1074:	f0 91 99 00 	lds	r31, 0x0099
    1078:	09 95       	icall
	else
	{
		//do nothing

	}
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <__vector_2>:

/*ISR of INT1*/

void __vector_2(void)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI_pvInt1Func!=NULL)
    10ca:	80 91 9a 00 	lds	r24, 0x009A
    10ce:	90 91 9b 00 	lds	r25, 0x009B
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	29 f0       	breq	.+10     	; 0x10e0 <__vector_2+0x40>
		{
		Global_EXTI_pvInt1Func();
    10d6:	e0 91 9a 00 	lds	r30, 0x009A
    10da:	f0 91 9b 00 	lds	r31, 0x009B
    10de:	09 95       	icall
		{
			//do nothing

		}

	}
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	ff 91       	pop	r31
    10e6:	ef 91       	pop	r30
    10e8:	bf 91       	pop	r27
    10ea:	af 91       	pop	r26
    10ec:	9f 91       	pop	r25
    10ee:	8f 91       	pop	r24
    10f0:	7f 91       	pop	r23
    10f2:	6f 91       	pop	r22
    10f4:	5f 91       	pop	r21
    10f6:	4f 91       	pop	r20
    10f8:	3f 91       	pop	r19
    10fa:	2f 91       	pop	r18
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <__vector_3>:


/*ISR of INT2*/

void __vector_3(void)
{
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62

	if(Global_EXTI_pvInt2Func!=NULL)
    1130:	80 91 9c 00 	lds	r24, 0x009C
    1134:	90 91 9d 00 	lds	r25, 0x009D
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	29 f0       	breq	.+10     	; 0x1146 <__vector_3+0x40>
		{
		Global_EXTI_pvInt2Func();
    113c:	e0 91 9c 00 	lds	r30, 0x009C
    1140:	f0 91 9d 00 	lds	r31, 0x009D
    1144:	09 95       	icall
		{
			//do nothing

		}

}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <DIO_SetPortVal>:
#include "../../../LIB/BIT_MATH.h"
#include "../inc/DIO_interface.h"
#include  "../inc/DIO_private.h"
#include "../inc/DIO_register.h"

status_t DIO_SetPortVal(Port_t Copy_Port, uint8 Copy_uint8Value) {
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <DIO_SetPortVal+0x6>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <DIO_SetPortVal+0x8>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	8a 83       	std	Y+2, r24	; 0x02
    117c:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    117e:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	18 f0       	brcs	.+6      	; 0x118c <DIO_SetPortVal+0x20>
		Local_uint8ErrorState = DIO_SetErr;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	32 c0       	rjmp	.+100    	; 0x11f0 <DIO_SetPortVal+0x84>
	} else {
		switch (Copy_Port) {
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3d 83       	std	Y+5, r19	; 0x05
    1194:	2c 83       	std	Y+4, r18	; 0x04
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	d1 f0       	breq	.+52     	; 0x11d4 <DIO_SetPortVal+0x68>
    11a0:	2c 81       	ldd	r18, Y+4	; 0x04
    11a2:	3d 81       	ldd	r19, Y+5	; 0x05
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <DIO_SetPortVal+0x48>
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	61 f0       	breq	.+24     	; 0x11ca <DIO_SetPortVal+0x5e>
    11b2:	1e c0       	rjmp	.+60     	; 0x11f0 <DIO_SetPortVal+0x84>
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	81 f0       	breq	.+32     	; 0x11de <DIO_SetPortVal+0x72>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <DIO_SetPortVal+0x7c>
    11c8:	13 c0       	rjmp	.+38     	; 0x11f0 <DIO_SetPortVal+0x84>
		case DIO_PORTA:
			PORTA = Copy_uint8Value;
    11ca:	eb e3       	ldi	r30, 0x3B	; 59
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	80 83       	st	Z, r24
    11d2:	0e c0       	rjmp	.+28     	; 0x11f0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTB:
			PORTB = Copy_uint8Value;
    11d4:	e8 e3       	ldi	r30, 0x38	; 56
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	80 83       	st	Z, r24
    11dc:	09 c0       	rjmp	.+18     	; 0x11f0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTC:
			PORTC = Copy_uint8Value;
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	80 83       	st	Z, r24
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <DIO_SetPortVal+0x84>
			break;
		case DIO_PORTD:
			PORTD = Copy_uint8Value;
    11e8:	e2 e3       	ldi	r30, 0x32	; 50
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	80 83       	st	Z, r24
			break;
		}
	}

	return Local_uint8ErrorState;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_SetPinVal>:

status_t DIO_SetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8 Copy_uint8Value) {
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	28 97       	sbiw	r28, 0x08	; 8
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	8a 83       	std	Y+2, r24	; 0x02
    1218:	6b 83       	std	Y+3, r22	; 0x03
    121a:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    121c:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	84 30       	cpi	r24, 0x04	; 4
    1222:	18 f0       	brcs	.+6      	; 0x122a <DIO_SetPinVal+0x28>
		Local_uint8ErrorState = DIO_SetErr;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	f0 c0       	rjmp	.+480    	; 0x140a <DIO_SetPinVal+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 30       	cpi	r24, 0x08	; 8
    122e:	18 f0       	brcs	.+6      	; 0x1236 <DIO_SetPinVal+0x34>
		Local_uint8ErrorState = DIO_SetErr;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	ea c0       	rjmp	.+468    	; 0x140a <DIO_SetPinVal+0x208>
	} else {
		if (DIO_HIGH == Copy_uint8Value) {
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	09 f0       	breq	.+2      	; 0x123e <DIO_SetPinVal+0x3c>
    123c:	6f c0       	rjmp	.+222    	; 0x131c <DIO_SetPinVal+0x11a>
			switch (Copy_Port) {
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	38 87       	std	Y+8, r19	; 0x08
    1246:	2f 83       	std	Y+7, r18	; 0x07
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	98 85       	ldd	r25, Y+8	; 0x08
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	49 f1       	breq	.+82     	; 0x12a4 <DIO_SetPinVal+0xa2>
    1252:	2f 81       	ldd	r18, Y+7	; 0x07
    1254:	38 85       	ldd	r19, Y+8	; 0x08
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	2c f4       	brge	.+10     	; 0x1266 <DIO_SetPinVal+0x64>
    125c:	8f 81       	ldd	r24, Y+7	; 0x07
    125e:	98 85       	ldd	r25, Y+8	; 0x08
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	61 f0       	breq	.+24     	; 0x127c <DIO_SetPinVal+0x7a>
    1264:	d2 c0       	rjmp	.+420    	; 0x140a <DIO_SetPinVal+0x208>
    1266:	2f 81       	ldd	r18, Y+7	; 0x07
    1268:	38 85       	ldd	r19, Y+8	; 0x08
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	71 f1       	breq	.+92     	; 0x12cc <DIO_SetPinVal+0xca>
    1270:	8f 81       	ldd	r24, Y+7	; 0x07
    1272:	98 85       	ldd	r25, Y+8	; 0x08
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	e9 f1       	breq	.+122    	; 0x12f4 <DIO_SetPinVal+0xf2>
    127a:	c7 c0       	rjmp	.+398    	; 0x140a <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				SET_BIT(PORTA, Copy_Pin);
    127c:	ab e3       	ldi	r26, 0x3B	; 59
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	eb e3       	ldi	r30, 0x3B	; 59
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_SetPinVal+0x98>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_SetPinVal+0x94>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	b3 c0       	rjmp	.+358    	; 0x140a <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB, Copy_Pin);
    12a4:	a8 e3       	ldi	r26, 0x38	; 56
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e8 e3       	ldi	r30, 0x38	; 56
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_SetPinVal+0xc0>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_SetPinVal+0xbc>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	9f c0       	rjmp	.+318    	; 0x140a <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC, Copy_Pin);
    12cc:	a5 e3       	ldi	r26, 0x35	; 53
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_SetPinVal+0xe8>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_SetPinVal+0xe4>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	8b c0       	rjmp	.+278    	; 0x140a <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD, Copy_Pin);
    12f4:	a2 e3       	ldi	r26, 0x32	; 50
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e2 e3       	ldi	r30, 0x32	; 50
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_SetPinVal+0x110>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_SetPinVal+0x10c>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	77 c0       	rjmp	.+238    	; 0x140a <DIO_SetPinVal+0x208>
				break;
			}
		} else if (DIO_LOW == Copy_uint8Value) {
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	88 23       	and	r24, r24
    1320:	09 f0       	breq	.+2      	; 0x1324 <DIO_SetPinVal+0x122>
    1322:	73 c0       	rjmp	.+230    	; 0x140a <DIO_SetPinVal+0x208>
			switch (Copy_Port) {
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3e 83       	std	Y+6, r19	; 0x06
    132c:	2d 83       	std	Y+5, r18	; 0x05
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	59 f1       	breq	.+86     	; 0x138e <DIO_SetPinVal+0x18c>
    1338:	2d 81       	ldd	r18, Y+5	; 0x05
    133a:	3e 81       	ldd	r19, Y+6	; 0x06
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	2c f4       	brge	.+10     	; 0x134c <DIO_SetPinVal+0x14a>
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f0       	breq	.+26     	; 0x1364 <DIO_SetPinVal+0x162>
    134a:	5f c0       	rjmp	.+190    	; 0x140a <DIO_SetPinVal+0x208>
    134c:	2d 81       	ldd	r18, Y+5	; 0x05
    134e:	3e 81       	ldd	r19, Y+6	; 0x06
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	89 f1       	breq	.+98     	; 0x13b8 <DIO_SetPinVal+0x1b6>
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <DIO_SetPinVal+0x160>
    1360:	40 c0       	rjmp	.+128    	; 0x13e2 <DIO_SetPinVal+0x1e0>
    1362:	53 c0       	rjmp	.+166    	; 0x140a <DIO_SetPinVal+0x208>
			case DIO_PORTA:
				CLEAR_BIT(PORTA, Copy_Pin);
    1364:	ab e3       	ldi	r26, 0x3B	; 59
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e3       	ldi	r30, 0x3B	; 59
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_SetPinVal+0x180>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_SetPinVal+0x17c>
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	3e c0       	rjmp	.+124    	; 0x140a <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB, Copy_Pin);
    138e:	a8 e3       	ldi	r26, 0x38	; 56
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e8 e3       	ldi	r30, 0x38	; 56
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_SetPinVal+0x1aa>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_SetPinVal+0x1a6>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	29 c0       	rjmp	.+82     	; 0x140a <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC, Copy_Pin);
    13b8:	a5 e3       	ldi	r26, 0x35	; 53
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e3       	ldi	r30, 0x35	; 53
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_SetPinVal+0x1d4>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_SetPinVal+0x1d0>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <DIO_SetPinVal+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD, Copy_Pin);
    13e2:	a2 e3       	ldi	r26, 0x32	; 50
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_SetPinVal+0x1fe>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_SetPinVal+0x1fa>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Local_uint8ErrorState;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	28 96       	adiw	r28, 0x08	; 8
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <DIO_SetPortDir>:

status_t DIO_SetPortDir(Port_t Copy_Port, uint8 Copy_uint8Direction) {
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_SetPortDir+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_SetPortDir+0x8>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8a 83       	std	Y+2, r24	; 0x02
    142e:	6b 83       	std	Y+3, r22	; 0x03
	status_t Local_uint8ErrorState = DIO_ok;
    1430:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	84 30       	cpi	r24, 0x04	; 4
    1436:	18 f0       	brcs	.+6      	; 0x143e <DIO_SetPortDir+0x20>
		Local_uint8ErrorState = DIO_DirErr;
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	32 c0       	rjmp	.+100    	; 0x14a2 <DIO_SetPortDir+0x84>
	} else {
		switch (Copy_Port) {
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3d 83       	std	Y+5, r19	; 0x05
    1446:	2c 83       	std	Y+4, r18	; 0x04
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	d1 f0       	breq	.+52     	; 0x1486 <DIO_SetPortDir+0x68>
    1452:	2c 81       	ldd	r18, Y+4	; 0x04
    1454:	3d 81       	ldd	r19, Y+5	; 0x05
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <DIO_SetPortDir+0x48>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	61 f0       	breq	.+24     	; 0x147c <DIO_SetPortDir+0x5e>
    1464:	1e c0       	rjmp	.+60     	; 0x14a2 <DIO_SetPortDir+0x84>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	81 f0       	breq	.+32     	; 0x1490 <DIO_SetPortDir+0x72>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	81 f0       	breq	.+32     	; 0x149a <DIO_SetPortDir+0x7c>
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <DIO_SetPortDir+0x84>
		case DIO_PORTA:
			DDRA = Copy_uint8Direction;
    147c:	ea e3       	ldi	r30, 0x3A	; 58
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	80 83       	st	Z, r24
    1484:	0e c0       	rjmp	.+28     	; 0x14a2 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTB:
			DDRB = Copy_uint8Direction;
    1486:	e7 e3       	ldi	r30, 0x37	; 55
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	80 83       	st	Z, r24
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTC:
			DDRC = Copy_uint8Direction;
    1490:	e4 e3       	ldi	r30, 0x34	; 52
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	80 83       	st	Z, r24
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <DIO_SetPortDir+0x84>
			break;
		case DIO_PORTD:
			DDRD = Copy_uint8Direction;
    149a:	e1 e3       	ldi	r30, 0x31	; 49
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_uint8ErrorState;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <DIO_SetPinDir>:

status_t DIO_SetPinDir(Port_t Copy_Port, Pin_t Copy_Pin, Dir_t Copy_Direction) {
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	28 97       	sbiw	r28, 0x08	; 8
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	6b 83       	std	Y+3, r22	; 0x03
    14cc:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    14ce:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	84 30       	cpi	r24, 0x04	; 4
    14d4:	18 f0       	brcs	.+6      	; 0x14dc <DIO_SetPinDir+0x28>
		Local_uint8ErrorState = DIO_DirErr;
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	f0 c0       	rjmp	.+480    	; 0x16bc <DIO_SetPinDir+0x208>
	} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	88 30       	cpi	r24, 0x08	; 8
    14e0:	18 f0       	brcs	.+6      	; 0x14e8 <DIO_SetPinDir+0x34>
		Local_uint8ErrorState = DIO_DirErr;
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	ea c0       	rjmp	.+468    	; 0x16bc <DIO_SetPinDir+0x208>
	} else {
		if (DIO_INPUT == Copy_Direction) {
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	88 23       	and	r24, r24
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <DIO_SetPinDir+0x3c>
    14ee:	74 c0       	rjmp	.+232    	; 0x15d8 <DIO_SetPinDir+0x124>
			switch (Copy_Port) {
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	38 87       	std	Y+8, r19	; 0x08
    14f8:	2f 83       	std	Y+7, r18	; 0x07
    14fa:	8f 81       	ldd	r24, Y+7	; 0x07
    14fc:	98 85       	ldd	r25, Y+8	; 0x08
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	59 f1       	breq	.+86     	; 0x155a <DIO_SetPinDir+0xa6>
    1504:	2f 81       	ldd	r18, Y+7	; 0x07
    1506:	38 85       	ldd	r19, Y+8	; 0x08
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	31 05       	cpc	r19, r1
    150c:	2c f4       	brge	.+10     	; 0x1518 <DIO_SetPinDir+0x64>
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	98 85       	ldd	r25, Y+8	; 0x08
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f0       	breq	.+26     	; 0x1530 <DIO_SetPinDir+0x7c>
    1516:	d2 c0       	rjmp	.+420    	; 0x16bc <DIO_SetPinDir+0x208>
    1518:	2f 81       	ldd	r18, Y+7	; 0x07
    151a:	38 85       	ldd	r19, Y+8	; 0x08
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	89 f1       	breq	.+98     	; 0x1584 <DIO_SetPinDir+0xd0>
    1522:	8f 81       	ldd	r24, Y+7	; 0x07
    1524:	98 85       	ldd	r25, Y+8	; 0x08
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <DIO_SetPinDir+0x7a>
    152c:	40 c0       	rjmp	.+128    	; 0x15ae <DIO_SetPinDir+0xfa>
    152e:	c6 c0       	rjmp	.+396    	; 0x16bc <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				CLEAR_BIT(DDRA, Copy_Pin);
    1530:	aa e3       	ldi	r26, 0x3A	; 58
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ea e3       	ldi	r30, 0x3A	; 58
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_SetPinDir+0x9a>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_SetPinDir+0x96>
    1552:	80 95       	com	r24
    1554:	84 23       	and	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	b1 c0       	rjmp	.+354    	; 0x16bc <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB, Copy_Pin);
    155a:	a7 e3       	ldi	r26, 0x37	; 55
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e7 e3       	ldi	r30, 0x37	; 55
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_SetPinDir+0xc4>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_SetPinDir+0xc0>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	9c c0       	rjmp	.+312    	; 0x16bc <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC, Copy_Pin);
    1584:	a4 e3       	ldi	r26, 0x34	; 52
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e4 e3       	ldi	r30, 0x34	; 52
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_SetPinDir+0xee>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_SetPinDir+0xea>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	87 c0       	rjmp	.+270    	; 0x16bc <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD, Copy_Pin);
    15ae:	a1 e3       	ldi	r26, 0x31	; 49
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e1 e3       	ldi	r30, 0x31	; 49
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_SetPinDir+0x118>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_SetPinDir+0x114>
    15d0:	80 95       	com	r24
    15d2:	84 23       	and	r24, r20
    15d4:	8c 93       	st	X, r24
    15d6:	72 c0       	rjmp	.+228    	; 0x16bc <DIO_SetPinDir+0x208>
				break;
			}
		} else if (DIO_OUTPUT == Copy_Direction) {
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <DIO_SetPinDir+0x12c>
    15de:	6e c0       	rjmp	.+220    	; 0x16bc <DIO_SetPinDir+0x208>
			switch (Copy_Port) {
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3e 83       	std	Y+6, r19	; 0x06
    15e8:	2d 83       	std	Y+5, r18	; 0x05
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	91 05       	cpc	r25, r1
    15f2:	49 f1       	breq	.+82     	; 0x1646 <DIO_SetPinDir+0x192>
    15f4:	2d 81       	ldd	r18, Y+5	; 0x05
    15f6:	3e 81       	ldd	r19, Y+6	; 0x06
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	2c f4       	brge	.+10     	; 0x1608 <DIO_SetPinDir+0x154>
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	61 f0       	breq	.+24     	; 0x161e <DIO_SetPinDir+0x16a>
    1606:	5a c0       	rjmp	.+180    	; 0x16bc <DIO_SetPinDir+0x208>
    1608:	2d 81       	ldd	r18, Y+5	; 0x05
    160a:	3e 81       	ldd	r19, Y+6	; 0x06
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	71 f1       	breq	.+92     	; 0x166e <DIO_SetPinDir+0x1ba>
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	83 30       	cpi	r24, 0x03	; 3
    1618:	91 05       	cpc	r25, r1
    161a:	e9 f1       	breq	.+122    	; 0x1696 <DIO_SetPinDir+0x1e2>
    161c:	4f c0       	rjmp	.+158    	; 0x16bc <DIO_SetPinDir+0x208>
			case DIO_PORTA:
				SET_BIT(DDRA, Copy_Pin);
    161e:	aa e3       	ldi	r26, 0x3A	; 58
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ea e3       	ldi	r30, 0x3A	; 58
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_SetPinDir+0x188>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_SetPinDir+0x184>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	3b c0       	rjmp	.+118    	; 0x16bc <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB, Copy_Pin);
    1646:	a7 e3       	ldi	r26, 0x37	; 55
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e7 e3       	ldi	r30, 0x37	; 55
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_SetPinDir+0x1b0>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_SetPinDir+0x1ac>
    1668:	84 2b       	or	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	27 c0       	rjmp	.+78     	; 0x16bc <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC, Copy_Pin);
    166e:	a4 e3       	ldi	r26, 0x34	; 52
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e4 e3       	ldi	r30, 0x34	; 52
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_SetPinDir+0x1d8>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_SetPinDir+0x1d4>
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	13 c0       	rjmp	.+38     	; 0x16bc <DIO_SetPinDir+0x208>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD, Copy_Pin);
    1696:	a1 e3       	ldi	r26, 0x31	; 49
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e1 e3       	ldi	r30, 0x31	; 49
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_SetPinDir+0x200>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_SetPinDir+0x1fc>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
				break;
			}
		}
	}
	return Local_uint8ErrorState;
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16be:	28 96       	adiw	r28, 0x08	; 8
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <DIO_GetPinVal>:


status_t DIO_GetPinVal(Port_t Copy_Port, Pin_t Copy_Pin, uint8* Copy_pvValue)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	27 97       	sbiw	r28, 0x07	; 7
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	6b 83       	std	Y+3, r22	; 0x03
    16e8:	5d 83       	std	Y+5, r21	; 0x05
    16ea:	4c 83       	std	Y+4, r20	; 0x04
	status_t Local_uint8ErrorState = DIO_ok;
    16ec:	19 82       	std	Y+1, r1	; 0x01

		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	18 f0       	brcs	.+6      	; 0x16fa <DIO_GetPinVal+0x2a>
			Local_uint8ErrorState = DIO_GetErr;
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	76 c0       	rjmp	.+236    	; 0x17e6 <DIO_GetPinVal+0x116>
		} else if ((Copy_Pin > DIO_Pin7) || (Copy_Pin < DIO_Pin0)) {
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	88 30       	cpi	r24, 0x08	; 8
    16fe:	18 f0       	brcs	.+6      	; 0x1706 <DIO_GetPinVal+0x36>
			Local_uint8ErrorState = DIO_GetErr;
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	70 c0       	rjmp	.+224    	; 0x17e6 <DIO_GetPinVal+0x116>
		} else {
			switch (Copy_Port)
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3f 83       	std	Y+7, r19	; 0x07
    170e:	2e 83       	std	Y+6, r18	; 0x06
    1710:	4e 81       	ldd	r20, Y+6	; 0x06
    1712:	5f 81       	ldd	r21, Y+7	; 0x07
    1714:	41 30       	cpi	r20, 0x01	; 1
    1716:	51 05       	cpc	r21, r1
    1718:	59 f1       	breq	.+86     	; 0x1770 <DIO_GetPinVal+0xa0>
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	91 05       	cpc	r25, r1
    1722:	34 f4       	brge	.+12     	; 0x1730 <DIO_GetPinVal+0x60>
    1724:	2e 81       	ldd	r18, Y+6	; 0x06
    1726:	3f 81       	ldd	r19, Y+7	; 0x07
    1728:	21 15       	cp	r18, r1
    172a:	31 05       	cpc	r19, r1
    172c:	69 f0       	breq	.+26     	; 0x1748 <DIO_GetPinVal+0x78>
    172e:	5b c0       	rjmp	.+182    	; 0x17e6 <DIO_GetPinVal+0x116>
    1730:	4e 81       	ldd	r20, Y+6	; 0x06
    1732:	5f 81       	ldd	r21, Y+7	; 0x07
    1734:	42 30       	cpi	r20, 0x02	; 2
    1736:	51 05       	cpc	r21, r1
    1738:	79 f1       	breq	.+94     	; 0x1798 <DIO_GetPinVal+0xc8>
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <DIO_GetPinVal+0x76>
    1744:	3d c0       	rjmp	.+122    	; 0x17c0 <DIO_GetPinVal+0xf0>
    1746:	4f c0       	rjmp	.+158    	; 0x17e6 <DIO_GetPinVal+0x116>
			{case DIO_PORTA : *Copy_pvValue=GET_BIT(PINA,Copy_Pin);break;
    1748:	e9 e3       	ldi	r30, 0x39	; 57
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a9 01       	movw	r20, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_GetPinVal+0x90>
    175c:	55 95       	asr	r21
    175e:	47 95       	ror	r20
    1760:	8a 95       	dec	r24
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_GetPinVal+0x8c>
    1764:	ca 01       	movw	r24, r20
    1766:	81 70       	andi	r24, 0x01	; 1
    1768:	ec 81       	ldd	r30, Y+4	; 0x04
    176a:	fd 81       	ldd	r31, Y+5	; 0x05
    176c:	80 83       	st	Z, r24
    176e:	3b c0       	rjmp	.+118    	; 0x17e6 <DIO_GetPinVal+0x116>
			case DIO_PORTB : *Copy_pvValue=GET_BIT(PINB,Copy_Pin);break;
    1770:	e6 e3       	ldi	r30, 0x36	; 54
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a9 01       	movw	r20, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_GetPinVal+0xb8>
    1784:	55 95       	asr	r21
    1786:	47 95       	ror	r20
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_GetPinVal+0xb4>
    178c:	ca 01       	movw	r24, r20
    178e:	81 70       	andi	r24, 0x01	; 1
    1790:	ec 81       	ldd	r30, Y+4	; 0x04
    1792:	fd 81       	ldd	r31, Y+5	; 0x05
    1794:	80 83       	st	Z, r24
    1796:	27 c0       	rjmp	.+78     	; 0x17e6 <DIO_GetPinVal+0x116>
			case DIO_PORTC : *Copy_pvValue=GET_BIT(PINC,Copy_Pin);break;
    1798:	e3 e3       	ldi	r30, 0x33	; 51
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_GetPinVal+0xe0>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_GetPinVal+0xdc>
    17b4:	ca 01       	movw	r24, r20
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	ec 81       	ldd	r30, Y+4	; 0x04
    17ba:	fd 81       	ldd	r31, Y+5	; 0x05
    17bc:	80 83       	st	Z, r24
    17be:	13 c0       	rjmp	.+38     	; 0x17e6 <DIO_GetPinVal+0x116>
			case DIO_PORTD : *Copy_pvValue=GET_BIT(PIND,Copy_Pin);break;
    17c0:	e0 e3       	ldi	r30, 0x30	; 48
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_GetPinVal+0x108>
    17d4:	55 95       	asr	r21
    17d6:	47 95       	ror	r20
    17d8:	8a 95       	dec	r24
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_GetPinVal+0x104>
    17dc:	ca 01       	movw	r24, r20
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	ec 81       	ldd	r30, Y+4	; 0x04
    17e2:	fd 81       	ldd	r31, Y+5	; 0x05
    17e4:	80 83       	st	Z, r24

			}
		}
return Local_uint8ErrorState;
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e8:	27 96       	adiw	r28, 0x07	; 7
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <DIO_GetPortVal>:


uint8 DIO_GetPortVal(Port_t Copy_Port,uint8* Copy_pvValue)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <DIO_GetPortVal+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <DIO_GetPortVal+0x8>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <DIO_GetPortVal+0xa>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	8a 83       	std	Y+2, r24	; 0x02
    180a:	7c 83       	std	Y+4, r23	; 0x04
    180c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8ErrorState = 0;
    180e:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_Port > DIO_PORTD) || (Copy_Port < DIO_PORTA)) {
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	18 f0       	brcs	.+6      	; 0x181c <DIO_GetPortVal+0x22>
			Local_uint8ErrorState = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	3a c0       	rjmp	.+116    	; 0x1890 <DIO_GetPortVal+0x96>
		} else {
			switch(Copy_Port)
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	3e 83       	std	Y+6, r19	; 0x06
    1824:	2d 83       	std	Y+5, r18	; 0x05
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	91 05       	cpc	r25, r1
    182e:	e1 f0       	breq	.+56     	; 0x1868 <DIO_GetPortVal+0x6e>
    1830:	2d 81       	ldd	r18, Y+5	; 0x05
    1832:	3e 81       	ldd	r19, Y+6	; 0x06
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	31 05       	cpc	r19, r1
    1838:	2c f4       	brge	.+10     	; 0x1844 <DIO_GetPortVal+0x4a>
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	61 f0       	breq	.+24     	; 0x185a <DIO_GetPortVal+0x60>
    1842:	26 c0       	rjmp	.+76     	; 0x1890 <DIO_GetPortVal+0x96>
    1844:	2d 81       	ldd	r18, Y+5	; 0x05
    1846:	3e 81       	ldd	r19, Y+6	; 0x06
    1848:	22 30       	cpi	r18, 0x02	; 2
    184a:	31 05       	cpc	r19, r1
    184c:	a1 f0       	breq	.+40     	; 0x1876 <DIO_GetPortVal+0x7c>
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	83 30       	cpi	r24, 0x03	; 3
    1854:	91 05       	cpc	r25, r1
    1856:	b1 f0       	breq	.+44     	; 0x1884 <DIO_GetPortVal+0x8a>
    1858:	1b c0       	rjmp	.+54     	; 0x1890 <DIO_GetPortVal+0x96>
			{case DIO_PORTA:*Copy_pvValue=PINA;break;
    185a:	e9 e3       	ldi	r30, 0x39	; 57
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	eb 81       	ldd	r30, Y+3	; 0x03
    1862:	fc 81       	ldd	r31, Y+4	; 0x04
    1864:	80 83       	st	Z, r24
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <DIO_GetPortVal+0x96>
			case DIO_PORTB:*Copy_pvValue=PINB;break;
    1868:	e6 e3       	ldi	r30, 0x36	; 54
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	eb 81       	ldd	r30, Y+3	; 0x03
    1870:	fc 81       	ldd	r31, Y+4	; 0x04
    1872:	80 83       	st	Z, r24
    1874:	0d c0       	rjmp	.+26     	; 0x1890 <DIO_GetPortVal+0x96>
			case DIO_PORTC:*Copy_pvValue=PINC;break;
    1876:	e3 e3       	ldi	r30, 0x33	; 51
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	eb 81       	ldd	r30, Y+3	; 0x03
    187e:	fc 81       	ldd	r31, Y+4	; 0x04
    1880:	80 83       	st	Z, r24
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <DIO_GetPortVal+0x96>
			case DIO_PORTD:*Copy_pvValue=PIND;break;
    1884:	e0 e3       	ldi	r30, 0x30	; 48
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	eb 81       	ldd	r30, Y+3	; 0x03
    188c:	fc 81       	ldd	r31, Y+4	; 0x04
    188e:	80 83       	st	Z, r24
			}
		}

return Local_uint8ErrorState;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
}
    1892:	26 96       	adiw	r28, 0x06	; 6
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <ADC_voidInit>:
#include "../inc/ADC_interface.h"
#include "../inc/ADC_register.h"
#include "../inc/ADC_config.h"
#include "../inc/ADC_private.h"

void ADC_voidInit(void) {
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	/*PRE-SCALER SELECTION*/
	ADCSRA_Reg->ADPS = DESIRED_PRE_SCALER;
    18ac:	e6 e2       	ldi	r30, 0x26	; 38
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	88 7f       	andi	r24, 0xF8	; 248
    18b4:	83 60       	ori	r24, 0x03	; 3
    18b6:	80 83       	st	Z, r24

	/*Choosing the voltage reference*/
	ADMUX_Reg->REFS = DESIRED_VOLTAGE_REF;
    18b8:	e7 e2       	ldi	r30, 0x27	; 39
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8f 73       	andi	r24, 0x3F	; 63
    18c0:	80 64       	ori	r24, 0x40	; 64
    18c2:	80 83       	st	Z, r24
	/*choose the Resolution*/
	ADMUX_Reg->ADLAR = RIGHT;
    18c4:	e7 e2       	ldi	r30, 0x27	; 39
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7d       	andi	r24, 0xDF	; 223
    18cc:	80 83       	st	Z, r24

#ifdef AUTO_TREGERED

	ADCSRA_Reg->ADATE=ENABLE;
    18ce:	e6 e2       	ldi	r30, 0x26	; 38
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 62       	ori	r24, 0x20	; 32
    18d6:	80 83       	st	Z, r24

	ADC_SFIOR_Reg->ADTS  =  AUTO_TRIGER_SOURCE;
    18d8:	e0 e5       	ldi	r30, 0x50	; 80
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8f 71       	andi	r24, 0x1F	; 31
    18e0:	80 68       	ori	r24, 0x80	; 128
    18e2:	80 83       	st	Z, r24

#endif
	/*ENABLE THE ADC*/
	ADCSRA_Reg->ADEN = ENABLE;
    18e4:	e6 e2       	ldi	r30, 0x26	; 38
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 68       	ori	r24, 0x80	; 128
    18ec:	80 83       	st	Z, r24

}
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <ADC_uint8StartConversionSynchronus>:
ADC_Status_t ADC_uint8StartConversionSynchronus(Channel_t Copy_uint8channel,uint16* copy_uint16PuReading) {
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	28 97       	sbiw	r28, 0x08	; 8
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	8e 83       	std	Y+6, r24	; 0x06
    190a:	78 87       	std	Y+8, r23	; 0x08
    190c:	6f 83       	std	Y+7, r22	; 0x07
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    190e:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_uint32Counter = 0;
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	1a 82       	std	Y+2, r1	; 0x02
    1914:	1b 82       	std	Y+3, r1	; 0x03
    1916:	1c 82       	std	Y+4, r1	; 0x04
	if (NULL == copy_uint16PuReading) {
    1918:	8f 81       	ldd	r24, Y+7	; 0x07
    191a:	98 85       	ldd	r25, Y+8	; 0x08
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	19 f4       	brne	.+6      	; 0x1926 <ADC_uint8StartConversionSynchronus+0x32>
		Local_ErrorStatus = ADC_POINTER_Err;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	4a c0       	rjmp	.+148    	; 0x19ba <ADC_uint8StartConversionSynchronus+0xc6>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    1926:	8e 81       	ldd	r24, Y+6	; 0x06
    1928:	88 30       	cpi	r24, 0x08	; 8
    192a:	18 f0       	brcs	.+6      	; 0x1932 <ADC_uint8StartConversionSynchronus+0x3e>
		Local_ErrorStatus = ADC_ChannelErr;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	44 c0       	rjmp	.+136    	; 0x19ba <ADC_uint8StartConversionSynchronus+0xc6>
	} else {
		/*Select the Channel*/
		ADMUX_Reg->MUX = Copy_uint8channel;
    1932:	e7 e2       	ldi	r30, 0x27	; 39
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	8e 81       	ldd	r24, Y+6	; 0x06
    1938:	8f 71       	andi	r24, 0x1F	; 31
    193a:	98 2f       	mov	r25, r24
    193c:	9f 71       	andi	r25, 0x1F	; 31
    193e:	80 81       	ld	r24, Z
    1940:	80 7e       	andi	r24, 0xE0	; 224
    1942:	89 2b       	or	r24, r25
    1944:	80 83       	st	Z, r24
    1946:	0b c0       	rjmp	.+22     	; 0x195e <ADC_uint8StartConversionSynchronus+0x6a>
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
			Local_uint32Counter++;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	ab 81       	ldd	r26, Y+3	; 0x03
    194e:	bc 81       	ldd	r27, Y+4	; 0x04
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	a1 1d       	adc	r26, r1
    1954:	b1 1d       	adc	r27, r1
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	ab 83       	std	Y+3, r26	; 0x03
    195c:	bc 83       	std	Y+4, r27	; 0x04
#ifndef AUTO_TREGERED
		/*Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
		/*Polling until the conversion is complete OR TIME OUT*/
		while ((ADCSRA_Reg->ADIF) != 1 && Local_uint32Counter < TIME_OUT) {
    195e:	e6 e2       	ldi	r30, 0x26	; 38
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 71       	andi	r24, 0x10	; 16
    1966:	88 23       	and	r24, r24
    1968:	61 f4       	brne	.+24     	; 0x1982 <ADC_uint8StartConversionSynchronus+0x8e>
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	ab 81       	ldd	r26, Y+3	; 0x03
    1970:	bc 81       	ldd	r27, Y+4	; 0x04
    1972:	84 3f       	cpi	r24, 0xF4	; 244
    1974:	21 e0       	ldi	r18, 0x01	; 1
    1976:	92 07       	cpc	r25, r18
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	a2 07       	cpc	r26, r18
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	b2 07       	cpc	r27, r18
    1980:	18 f3       	brcs	.-58     	; 0x1948 <ADC_uint8StartConversionSynchronus+0x54>
			Local_uint32Counter++;
		}
		if (Local_uint32Counter == TIME_OUT) {
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	ab 81       	ldd	r26, Y+3	; 0x03
    1988:	bc 81       	ldd	r27, Y+4	; 0x04
    198a:	84 3f       	cpi	r24, 0xF4	; 244
    198c:	21 e0       	ldi	r18, 0x01	; 1
    198e:	92 07       	cpc	r25, r18
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	a2 07       	cpc	r26, r18
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	b2 07       	cpc	r27, r18
    1998:	19 f4       	brne	.+6      	; 0x19a0 <ADC_uint8StartConversionSynchronus+0xac>
			Local_ErrorStatus = ADC_TIME_OUTErr;
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <ADC_uint8StartConversionSynchronus+0xc6>
		} else {
			/*Clear the valg*/
			ADCSRA_Reg->ADIF = ENABLE;
    19a0:	e6 e2       	ldi	r30, 0x26	; 38
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	80 61       	ori	r24, 0x10	; 16
    19a8:	80 83       	st	Z, r24

#if     DATA_SIZE == BIT_10_MACRO
			*copy_uint16PuReading=ADC;
    19aa:	e4 e2       	ldi	r30, 0x24	; 36
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	ef 81       	ldd	r30, Y+7	; 0x07
    19b4:	f8 85       	ldd	r31, Y+8	; 0x08
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24

		}

	}

	return Local_ErrorStatus;
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19bc:	28 96       	adiw	r28, 0x08	; 8
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <ADC_uint8StartConversionASynchronus>:

ADC_Status_t ADC_uint8StartConversionASynchronus(Channel_t Copy_uint8channel,void (*copy_PvNotifacation)(void), uint16* copy_uint16PuReading) {
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <ADC_uint8StartConversionASynchronus+0x6>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <ADC_uint8StartConversionASynchronus+0x8>
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <ADC_uint8StartConversionASynchronus+0xa>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	8a 83       	std	Y+2, r24	; 0x02
    19de:	7c 83       	std	Y+4, r23	; 0x04
    19e0:	6b 83       	std	Y+3, r22	; 0x03
    19e2:	5e 83       	std	Y+6, r21	; 0x06
    19e4:	4d 83       	std	Y+5, r20	; 0x05
	ADC_Status_t Local_ErrorStatus = ADC_OK;
    19e6:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == copy_uint16PuReading) {
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	19 f4       	brne	.+6      	; 0x19f6 <ADC_uint8StartConversionASynchronus+0x28>
		Local_ErrorStatus = ADC_POINTER_Err;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	1e c0       	rjmp	.+60     	; 0x1a32 <ADC_uint8StartConversionASynchronus+0x64>
	} else if ((Copy_uint8channel > ADC_CHANNEL7)|| (Copy_uint8channel < ADC_CHANNEL0)) {
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	88 30       	cpi	r24, 0x08	; 8
    19fa:	18 f0       	brcs	.+6      	; 0x1a02 <ADC_uint8StartConversionASynchronus+0x34>
		Local_ErrorStatus = ADC_ChannelErr;
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	18 c0       	rjmp	.+48     	; 0x1a32 <ADC_uint8StartConversionASynchronus+0x64>
	} else if (NULL == copy_PvNotifacation) {
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	19 f4       	brne	.+6      	; 0x1a10 <ADC_uint8StartConversionASynchronus+0x42>
		Local_ErrorStatus = ADC_POINTER_Err;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	11 c0       	rjmp	.+34     	; 0x1a32 <ADC_uint8StartConversionASynchronus+0x64>
	} else {

		Global_PvNotifacation = copy_PvNotifacation;
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	90 93 9f 00 	sts	0x009F, r25
    1a18:	80 93 9e 00 	sts	0x009E, r24

		/*Assign Address of Receive Variable in Global Pointer to be used in ISR*/
		Global_uint16PuReading = copy_uint16PuReading;
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	90 93 a1 00 	sts	0x00A1, r25
    1a24:	80 93 a0 00 	sts	0x00A0, r24


		/* ADC Conversion Complete Interrupt Enable*/
		ADCSRA_Reg->ADIE = ENABLE;
    1a28:	e6 e2       	ldi	r30, 0x26	; 38
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 60       	ori	r24, 0x08	; 8
    1a30:	80 83       	st	Z, r24
#ifndef AUTO_TREGERED
		/*ADC Start Conversion*/
		ADCSRA_Reg->ADSC = ENABLE;
#endif
	}
	return Local_ErrorStatus;
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a34:	26 96       	adiw	r28, 0x06	; 6
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <__vector_16>:



void __vector_16(void) {
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
#if     DATA_SIZE == BIT_10_MACRO
	*Global_uint16PuReading=ADC;
    1a70:	a0 91 a0 00 	lds	r26, 0x00A0
    1a74:	b0 91 a1 00 	lds	r27, 0x00A1
    1a78:	e4 e2       	ldi	r30, 0x24	; 36
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	8d 93       	st	X+, r24
    1a82:	9c 93       	st	X, r25
#elif  DATA_SIZE == BIT_8_MACRO
	*Global_uint16PuReading = ADC >> 2;
#endif

	/*Execute Notification Function*/
	Global_PvNotifacation();
    1a84:	e0 91 9e 00 	lds	r30, 0x009E
    1a88:	f0 91 9f 00 	lds	r31, 0x009F
    1a8c:	09 95       	icall
}
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <delay_ms>:
#include "../../../LIB/STD_TYPES.h"
#include "../../../LIB/BIT_MATH.h"
#include "../inc/CLCD_interface.h"
#include "../../../MCAL/DIO/inc/DIO_INTERFACE.h"

void delay_ms(uint16 milliseconds) {
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	2c 97       	sbiw	r28, 0x0c	; 12
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	9c 87       	std	Y+12, r25	; 0x0c
    1aca:	8b 87       	std	Y+11, r24	; 0x0b
    // Assuming 4 cycles per loop iteration for an 8 MHz clock
    const uint16 cycles_per_ms = 100; // Calculated for 1 ms delay
    1acc:	84 e6       	ldi	r24, 0x64	; 100
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    uint32 total_iterations = milliseconds * cycles_per_ms;
    1ad4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ad6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	ac 01       	movw	r20, r24
    1ade:	24 9f       	mul	r18, r20
    1ae0:	c0 01       	movw	r24, r0
    1ae2:	25 9f       	mul	r18, r21
    1ae4:	90 0d       	add	r25, r0
    1ae6:	34 9f       	mul	r19, r20
    1ae8:	90 0d       	add	r25, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	cc 01       	movw	r24, r24
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	ab 83       	std	Y+3, r26	; 0x03
    1af8:	bc 83       	std	Y+4, r27	; 0x04

    // Loop for the calculated number of iterations
    for (volatile uint32 i = 0; i < total_iterations; i++) {
    1afa:	1f 82       	std	Y+7, r1	; 0x07
    1afc:	18 86       	std	Y+8, r1	; 0x08
    1afe:	19 86       	std	Y+9, r1	; 0x09
    1b00:	1a 86       	std	Y+10, r1	; 0x0a
    1b02:	0b c0       	rjmp	.+22     	; 0x1b1a <delay_ms+0x66>
    1b04:	8f 81       	ldd	r24, Y+7	; 0x07
    1b06:	98 85       	ldd	r25, Y+8	; 0x08
    1b08:	a9 85       	ldd	r26, Y+9	; 0x09
    1b0a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	b1 1d       	adc	r27, r1
    1b12:	8f 83       	std	Y+7, r24	; 0x07
    1b14:	98 87       	std	Y+8, r25	; 0x08
    1b16:	a9 87       	std	Y+9, r26	; 0x09
    1b18:	ba 87       	std	Y+10, r27	; 0x0a
    1b1a:	2f 81       	ldd	r18, Y+7	; 0x07
    1b1c:	38 85       	ldd	r19, Y+8	; 0x08
    1b1e:	49 85       	ldd	r20, Y+9	; 0x09
    1b20:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	ab 81       	ldd	r26, Y+3	; 0x03
    1b28:	bc 81       	ldd	r27, Y+4	; 0x04
    1b2a:	28 17       	cp	r18, r24
    1b2c:	39 07       	cpc	r19, r25
    1b2e:	4a 07       	cpc	r20, r26
    1b30:	5b 07       	cpc	r21, r27
    1b32:	40 f3       	brcs	.-48     	; 0x1b04 <delay_ms+0x50>
        // Empty loop to create the delay
    }
}
    1b34:	2c 96       	adiw	r28, 0x0c	; 12
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(uint8 copy_uint8Command)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	89 83       	std	Y+1, r24	; 0x01
	/*Setting RS pin to low*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
/*Setting RW pin low for write*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>

/*Set command data pins*/
DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Command);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	69 81       	ldd	r22, Y+1	; 0x01
    1b6a:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_SetPortVal>

/*Send Enable pulse*/
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
delay_ms(2);
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <delay_ms>
DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	62 e0       	ldi	r22, 0x02	; 2
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
}
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
	/*Wait more that 30 ms*/
	delay_ms(40);
    1b9a:	88 e2       	ldi	r24, 0x28	; 40
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <delay_ms>

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
    1ba2:	88 e3       	ldi	r24, 0x38	; 56
    1ba4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
    1ba8:	8c e0       	ldi	r24, 0x0C	; 12
    1baa:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(0b1);
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidSendCommand>



}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <CLCD_voidSendData>:


void CLCD_voidSendData(uint8 copy_uint8Data)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	0f 92       	push	r0
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	89 83       	std	Y+1, r24	; 0x01

	/*Setting RS pin to HIGH*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
	/*Setting RW pin low for write*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>

	/*Set data pins*/
	DIO_SetPortVal(CLCD_DATA_PORT,copy_uint8Data);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	69 81       	ldd	r22, Y+1	; 0x01
    1bde:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_SetPortVal>

	/*Send Enable pulse*/
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	62 e0       	ldi	r22, 0x02	; 2
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
	delay_ms(2);
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <delay_ms>
	DIO_SetPinVal(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	62 e0       	ldi	r22, 0x02	; 2
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>


}
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <CLCD_voidSendString>:

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <CLCD_voidSendString+0x6>
    1c0c:	0f 92       	push	r0
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9b 83       	std	Y+3, r25	; 0x03
    1c14:	8a 83       	std	Y+2, r24	; 0x02
uint8 Local_uint8Counter=0;
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	0e c0       	rjmp	.+28     	; 0x1c36 <CLCD_voidSendString+0x30>
while(Copy_uint8String[Local_uint8Counter]!='\0')
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	fc 01       	movw	r30, r24
    1c26:	e2 0f       	add	r30, r18
    1c28:	f3 1f       	adc	r31, r19
    1c2a:	80 81       	ld	r24, Z
    1c2c:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <CLCD_voidSendData>
    Local_uint8Counter++;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const uint8* Copy_uint8String)
{
uint8 Local_uint8Counter=0;
while(Copy_uint8String[Local_uint8Counter]!='\0')
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	fc 01       	movw	r30, r24
    1c42:	e2 0f       	add	r30, r18
    1c44:	f3 1f       	adc	r31, r19
    1c46:	80 81       	ld	r24, Z
    1c48:	88 23       	and	r24, r24
    1c4a:	39 f7       	brne	.-50     	; 0x1c1a <CLCD_voidSendString+0x14>
{
    CLCD_voidSendData(Copy_uint8String[Local_uint8Counter]);
    Local_uint8Counter++;
}

}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <CLCD_voidGoToXY+0x6>
    1c5e:	0f 92       	push	r0
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	8a 83       	std	Y+2, r24	; 0x02
    1c66:	6b 83       	std	Y+3, r22	; 0x03
  uint8 Local_uint8Address;

  if(Copy_uint8Xposition==0)
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	88 23       	and	r24, r24
    1c6c:	19 f4       	brne	.+6      	; 0x1c74 <CLCD_voidGoToXY+0x1c>
  {
	  Local_uint8Address=Copy_uint8Yposition;
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <CLCD_voidGoToXY+0x28>
  }
  else if(Copy_uint8Xposition==1)
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	19 f4       	brne	.+6      	; 0x1c80 <CLCD_voidGoToXY+0x28>

  {
	  Local_uint8Address=Copy_uint8Yposition+0x40;
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	80 5c       	subi	r24, 0xC0	; 192
    1c7e:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_voidSendCommand(Local_uint8Address|(1<<7));
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	80 68       	ori	r24, 0x80	; 128
    1c84:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidSendCommand>
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(sint32 copy_uint32Number)
{
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	60 97       	sbiw	r28, 0x10	; 16
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	6d 87       	std	Y+13, r22	; 0x0d
    1cae:	7e 87       	std	Y+14, r23	; 0x0e
    1cb0:	8f 87       	std	Y+15, r24	; 0x0f
    1cb2:	98 8b       	std	Y+16, r25	; 0x10
	if(copy_uint32Number<0)
    1cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb8:	af 85       	ldd	r26, Y+15	; 0x0f
    1cba:	b8 89       	ldd	r27, Y+16	; 0x10
    1cbc:	bb 23       	and	r27, r27
    1cbe:	94 f4       	brge	.+36     	; 0x1ce4 <CLCD_voidWriteNumber+0x50>
	{
		CLCD_voidSendData('-');
    1cc0:	8d e2       	ldi	r24, 0x2D	; 45
    1cc2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <CLCD_voidSendData>
		copy_uint32Number= -copy_uint32Number;
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	af 85       	ldd	r26, Y+15	; 0x0f
    1ccc:	b8 89       	ldd	r27, Y+16	; 0x10
    1cce:	b0 95       	com	r27
    1cd0:	a0 95       	com	r26
    1cd2:	90 95       	com	r25
    1cd4:	81 95       	neg	r24
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	af 4f       	sbci	r26, 0xFF	; 255
    1cda:	bf 4f       	sbci	r27, 0xFF	; 255
    1cdc:	8d 87       	std	Y+13, r24	; 0x0d
    1cde:	9e 87       	std	Y+14, r25	; 0x0e
    1ce0:	af 87       	std	Y+15, r26	; 0x0f
    1ce2:	b8 8b       	std	Y+16, r27	; 0x10
	}
	if(copy_uint32Number==0)
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	af 85       	ldd	r26, Y+15	; 0x0f
    1cea:	b8 89       	ldd	r27, Y+16	; 0x10
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	a1 05       	cpc	r26, r1
    1cf0:	b1 05       	cpc	r27, r1
    1cf2:	21 f4       	brne	.+8      	; 0x1cfc <CLCD_voidWriteNumber+0x68>
	{
		CLCD_voidSendData('0');
    1cf4:	80 e3       	ldi	r24, 0x30	; 48
    1cf6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <CLCD_voidSendData>
    1cfa:	50 c0       	rjmp	.+160    	; 0x1d9c <CLCD_voidWriteNumber+0x108>
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
    1cfc:	1a 82       	std	Y+2, r1	; 0x02
    1cfe:	2e c0       	rjmp	.+92     	; 0x1d5c <CLCD_voidWriteNumber+0xc8>
while(copy_uint32Number>0)
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	08 2f       	mov	r16, r24
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0a:	af 85       	ldd	r26, Y+15	; 0x0f
    1d0c:	b8 89       	ldd	r27, Y+16	; 0x10
    1d0e:	2a e0       	ldi	r18, 0x0A	; 10
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 46 10 	call	0x208c	; 0x208c <__divmodsi4>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	28 2f       	mov	r18, r24
    1d24:	20 5d       	subi	r18, 0xD0	; 208
    1d26:	ce 01       	movw	r24, r28
    1d28:	03 96       	adiw	r24, 0x03	; 3
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e0 0f       	add	r30, r16
    1d2e:	f1 1f       	adc	r31, r17
    1d30:	20 83       	st	Z, r18
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	8a 83       	std	Y+2, r24	; 0x02
	copy_uint32Number/=10;
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	af 85       	ldd	r26, Y+15	; 0x0f
    1d3e:	b8 89       	ldd	r27, Y+16	; 0x10
    1d40:	2a e0       	ldi	r18, 0x0A	; 10
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 46 10 	call	0x208c	; 0x208c <__divmodsi4>
    1d50:	da 01       	movw	r26, r20
    1d52:	c9 01       	movw	r24, r18
    1d54:	8d 87       	std	Y+13, r24	; 0x0d
    1d56:	9e 87       	std	Y+14, r25	; 0x0e
    1d58:	af 87       	std	Y+15, r26	; 0x0f
    1d5a:	b8 8b       	std	Y+16, r27	; 0x10
		CLCD_voidSendData('0');
		return;
	}
uint8 NUM[10];
uint8 Local_uint8Counter=0;
while(copy_uint32Number>0)
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	af 85       	ldd	r26, Y+15	; 0x0f
    1d62:	b8 89       	ldd	r27, Y+16	; 0x10
    1d64:	18 16       	cp	r1, r24
    1d66:	19 06       	cpc	r1, r25
    1d68:	1a 06       	cpc	r1, r26
    1d6a:	1b 06       	cpc	r1, r27
    1d6c:	4c f2       	brlt	.-110    	; 0x1d00 <CLCD_voidWriteNumber+0x6c>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	11 c0       	rjmp	.+34     	; 0x1d96 <CLCD_voidWriteNumber+0x102>
{
	CLCD_voidSendData(NUM[i-1]);
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9c 01       	movw	r18, r24
    1d7c:	21 50       	subi	r18, 0x01	; 1
    1d7e:	30 40       	sbci	r19, 0x00	; 0
    1d80:	ce 01       	movw	r24, r28
    1d82:	03 96       	adiw	r24, 0x03	; 3
    1d84:	fc 01       	movw	r30, r24
    1d86:	e2 0f       	add	r30, r18
    1d88:	f3 1f       	adc	r31, r19
    1d8a:	80 81       	ld	r24, Z
    1d8c:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <CLCD_voidSendData>
{
	NUM[Local_uint8Counter++]=(copy_uint32Number%10)+'0';
	copy_uint32Number/=10;
}
/*reverse*/
for(uint8 i=Local_uint8Counter;i>0;i--)
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	81 50       	subi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	88 23       	and	r24, r24
    1d9a:	61 f7       	brne	.-40     	; 0x1d74 <CLCD_voidWriteNumber+0xe0>
{
	CLCD_voidSendData(NUM[i-1]);
}
}
    1d9c:	60 96       	adiw	r28, 0x10	; 16
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	08 95       	ret

00001db2 <CLCD_voidWriteSpecialChar>:
void CLCD_voidWriteSpecialChar(uint8* copy_puint8Pattern,uint8 copy_uint8PatternNumber,uint8 copy_uint8Xposition,uint8 copy_uint8Yposition)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	27 97       	sbiw	r28, 0x07	; 7
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	6d 83       	std	Y+5, r22	; 0x05
    1dcc:	4e 83       	std	Y+6, r20	; 0x06
    1dce:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_uint8CGRAM_Address=0;
    1dd0:	1a 82       	std	Y+2, r1	; 0x02
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	8a 83       	std	Y+2, r24	; 0x02
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	80 64       	ori	r24, 0x40	; 64
    1dea:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidSendCommand>

for(uint8 i=0;i<8;i++)
    1dee:	19 82       	std	Y+1, r1	; 0x01
    1df0:	0e c0       	rjmp	.+28     	; 0x1e0e <CLCD_voidWriteSpecialChar+0x5c>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	e2 0f       	add	r30, r18
    1e00:	f3 1f       	adc	r31, r19
    1e02:	80 81       	ld	r24, Z
    1e04:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <CLCD_voidSendData>
	uint8 Local_uint8CGRAM_Address=0;
	/*Set the CGRAM address*/
Local_uint8CGRAM_Address=copy_uint8PatternNumber*8;
CLCD_voidSendCommand(Local_uint8CGRAM_Address|(1<<6));

for(uint8 i=0;i<8;i++)
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	8f 5f       	subi	r24, 0xFF	; 255
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	88 30       	cpi	r24, 0x08	; 8
    1e12:	78 f3       	brcs	.-34     	; 0x1df2 <CLCD_voidWriteSpecialChar+0x40>
{
	CLCD_voidSendData(copy_puint8Pattern[i]);
}
/*go back to DDRAM to display the Arr*/
 CLCD_voidGoToXY(copy_uint8Xposition,copy_uint8Yposition);
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <CLCD_voidGoToXY>

CLCD_voidSendData(copy_uint8PatternNumber);
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <CLCD_voidSendData>

}
    1e22:	27 96       	adiw	r28, 0x07	; 7
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <HandleGreenState>:
#define GREEN_DURATION  5
#define YELLOW_DURATION 5
#define RED_DURATION    5

static void HandleGreenState(void)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_HIGH);
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	62 e0       	ldi	r22, 0x02	; 2
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
}
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <HandleRedState>:
static void HandleRedState(void)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	62 e0       	ldi	r22, 0x02	; 2
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_LOW);
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_HIGH);
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <HandleyellowState>:
static void HandleyellowState(void)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_GREEN, DIO_LOW);
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	62 e0       	ldi	r22, 0x02	; 2
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
	DIO_SetPinVal(Traffic_PORT, Traffic_LED_RED, DIO_LOW);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
    DIO_SetPinVal(Traffic_PORT, Traffic_LED_YELLOW, DIO_HIGH);
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPinVal>
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <TimerISR>:
StackEntry Local_Variable;     // Current state function
int last_handled_time = -1;    // Tracks the last time the state was handled

/* ISR Function */
void TimerISR(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    timer_counter++; // Increment timer counter every second
    1eb6:	80 91 a2 00 	lds	r24, 0x00A2
    1eba:	90 91 a3 00 	lds	r25, 0x00A3
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	90 93 a3 00 	sts	0x00A3, r25
    1ec4:	80 93 a2 00 	sts	0x00A2, r24
}
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <TrafficLightInit>:

/* Traffic Light Initialization */
void TrafficLightInit(void)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    /* System initialization */
    PORT_voidInit();
    1ed6:	0e 94 ca 05 	call	0xb94	; 0xb94 <PORT_voidInit>
    CLCD_voidInit();
    1eda:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <CLCD_voidInit>
    GIE_Enable();
    1ede:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <GIE_Enable>
    TIMER1_voidInit();
    1ee2:	0e 94 04 03 	call	0x608	; 0x608 <TIMER1_voidInit>
    TIMER1_voidSetChannelACompMatch(31250); // Configure Timer1 for 1-second intervals
    1ee6:	82 e1       	ldi	r24, 0x12	; 18
    1ee8:	9a e7       	ldi	r25, 0x7A	; 122
    1eea:	0e 94 2b 03 	call	0x656	; 0x656 <TIMER1_voidSetChannelACompMatch>
    TIMER1_CTCASetCallBck(&TimerISR);
    1eee:	87 e5       	ldi	r24, 0x57	; 87
    1ef0:	9f e0       	ldi	r25, 0x0F	; 15
    1ef2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TIMER1_CTCASetCallBck>

    /* Stack initialization */
    Stack_Creation(&TrafficStack);
    1ef6:	86 ea       	ldi	r24, 0xA6	; 166
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 6e 00 	call	0xdc	; 0xdc <Stack_Creation>
    Stack_Push(&TrafficStack, HandleGreenState); // Start with the green state
    1efe:	86 ea       	ldi	r24, 0xA6	; 166
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	2a e1       	ldi	r18, 0x1A	; 26
    1f04:	3f e0       	ldi	r19, 0x0F	; 15
    1f06:	b9 01       	movw	r22, r18
    1f08:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <Traffic_Handler>:

/* Traffic Light State Handler */
void Traffic_Handler(void)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    if (timer_counter == GREEN_DURATION && last_handled_time != GREEN_DURATION)
    1f1a:	80 91 a2 00 	lds	r24, 0x00A2
    1f1e:	90 91 a3 00 	lds	r25, 0x00A3
    1f22:	85 30       	cpi	r24, 0x05	; 5
    1f24:	91 05       	cpc	r25, r1
    1f26:	a9 f4       	brne	.+42     	; 0x1f52 <Traffic_Handler+0x40>
    1f28:	80 91 86 00 	lds	r24, 0x0086
    1f2c:	90 91 87 00 	lds	r25, 0x0087
    1f30:	85 30       	cpi	r24, 0x05	; 5
    1f32:	91 05       	cpc	r25, r1
    1f34:	71 f0       	breq	.+28     	; 0x1f52 <Traffic_Handler+0x40>
    {
        Stack_Push(&TrafficStack, HandleyellowState);
    1f36:	86 ea       	ldi	r24, 0xA6	; 166
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	21 e4       	ldi	r18, 0x41	; 65
    1f3c:	3f e0       	ldi	r19, 0x0F	; 15
    1f3e:	b9 01       	movw	r22, r18
    1f40:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
        last_handled_time = GREEN_DURATION; // Mark the transition as handled
    1f44:	85 e0       	ldi	r24, 0x05	; 5
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	90 93 87 00 	sts	0x0087, r25
    1f4c:	80 93 86 00 	sts	0x0086, r24
    1f50:	45 c0       	rjmp	.+138    	; 0x1fdc <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION)
    1f52:	80 91 a2 00 	lds	r24, 0x00A2
    1f56:	90 91 a3 00 	lds	r25, 0x00A3
    1f5a:	8a 30       	cpi	r24, 0x0A	; 10
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	a9 f4       	brne	.+42     	; 0x1f8a <Traffic_Handler+0x78>
    1f60:	80 91 86 00 	lds	r24, 0x0086
    1f64:	90 91 87 00 	lds	r25, 0x0087
    1f68:	8a 30       	cpi	r24, 0x0A	; 10
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	71 f0       	breq	.+28     	; 0x1f8a <Traffic_Handler+0x78>
    {
        Stack_Push(&TrafficStack, HandleRedState);
    1f6e:	86 ea       	ldi	r24, 0xA6	; 166
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	2b e2       	ldi	r18, 0x2B	; 43
    1f74:	3f e0       	ldi	r19, 0x0F	; 15
    1f76:	b9 01       	movw	r22, r18
    1f78:	0e 94 8e 00 	call	0x11c	; 0x11c <Stack_Push>
        last_handled_time = GREEN_DURATION + YELLOW_DURATION; // Mark the transition as handled
    1f7c:	8a e0       	ldi	r24, 0x0A	; 10
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	90 93 87 00 	sts	0x0087, r25
    1f84:	80 93 86 00 	sts	0x0086, r24
    1f88:	29 c0       	rjmp	.+82     	; 0x1fdc <Traffic_Handler+0xca>
    }
    else if (timer_counter == GREEN_DURATION + YELLOW_DURATION + RED_DURATION && last_handled_time != GREEN_DURATION + YELLOW_DURATION + RED_DURATION)
    1f8a:	80 91 a2 00 	lds	r24, 0x00A2
    1f8e:	90 91 a3 00 	lds	r25, 0x00A3
    1f92:	8f 30       	cpi	r24, 0x0F	; 15
    1f94:	91 05       	cpc	r25, r1
    1f96:	11 f5       	brne	.+68     	; 0x1fdc <Traffic_Handler+0xca>
    1f98:	80 91 86 00 	lds	r24, 0x0086
    1f9c:	90 91 87 00 	lds	r25, 0x0087
    1fa0:	8f 30       	cpi	r24, 0x0F	; 15
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	d9 f0       	breq	.+54     	; 0x1fdc <Traffic_Handler+0xca>
    {
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove red state
    1fa6:	86 ea       	ldi	r24, 0xA6	; 166
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	24 ea       	ldi	r18, 0xA4	; 164
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	b9 01       	movw	r22, r18
    1fb0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Stack_Pop>
        Stack_Pop(&TrafficStack, &Local_Variable); // Remove yellow state
    1fb4:	86 ea       	ldi	r24, 0xA6	; 166
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	24 ea       	ldi	r18, 0xA4	; 164
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Stack_Pop>
        timer_counter = 0; // Reset timer
    1fc2:	10 92 a3 00 	sts	0x00A3, r1
    1fc6:	10 92 a2 00 	sts	0x00A2, r1
        last_handled_time = -1; // Reset last handled time
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	9f ef       	ldi	r25, 0xFF	; 255
    1fce:	90 93 87 00 	sts	0x0087, r25
    1fd2:	80 93 86 00 	sts	0x0086, r24
        CLCD_voidSendCommand(1); // Clear display
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidSendCommand>
    }
}
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <TrafficLightMainFunction>:

/* Main Traffic Light Control Function */
void TrafficLightMainFunction(void)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    Local_Variable = TrafficStack.top->entry; // Get the current state function
    1fea:	e0 91 a6 00 	lds	r30, 0x00A6
    1fee:	f0 91 a7 00 	lds	r31, 0x00A7
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	90 93 a5 00 	sts	0x00A5, r25
    1ffa:	80 93 a4 00 	sts	0x00A4, r24
    Local_Variable(); // Execute the state function
    1ffe:	e0 91 a4 00 	lds	r30, 0x00A4
    2002:	f0 91 a5 00 	lds	r31, 0x00A5
    2006:	09 95       	icall

    Traffic_Handler(); // Handle state transitions
    2008:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Traffic_Handler>

    /* Display timer and stack size */
    CLCD_voidGoToXY(0, 0);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(timer_counter);
    2014:	80 91 a2 00 	lds	r24, 0x00A2
    2018:	90 91 a3 00 	lds	r25, 0x00A3
    201c:	aa 27       	eor	r26, r26
    201e:	97 fd       	sbrc	r25, 7
    2020:	a0 95       	com	r26
    2022:	ba 2f       	mov	r27, r26
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <CLCD_voidWriteNumber>
    CLCD_voidGoToXY(1, 0);
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <CLCD_voidGoToXY>
    CLCD_voidWriteNumber(TrafficStack.Size);
    2034:	80 91 a8 00 	lds	r24, 0x00A8
    2038:	90 91 a9 00 	lds	r25, 0x00A9
    203c:	a0 91 aa 00 	lds	r26, 0x00AA
    2040:	b0 91 ab 00 	lds	r27, 0x00AB
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <CLCD_voidWriteNumber>
}
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <main>:
#include "TrafficLights/inc/TrafficLightsControl_interface.h"


int main()
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	TrafficLightInit();
    205a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <TrafficLightInit>


	while(1)
	{
		TrafficLightMainFunction();
    205e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <TrafficLightMainFunction>
    2062:	fd cf       	rjmp	.-6      	; 0x205e <main+0xc>

00002064 <__udivmodhi4>:
    2064:	aa 1b       	sub	r26, r26
    2066:	bb 1b       	sub	r27, r27
    2068:	51 e1       	ldi	r21, 0x11	; 17
    206a:	07 c0       	rjmp	.+14     	; 0x207a <__udivmodhi4_ep>

0000206c <__udivmodhi4_loop>:
    206c:	aa 1f       	adc	r26, r26
    206e:	bb 1f       	adc	r27, r27
    2070:	a6 17       	cp	r26, r22
    2072:	b7 07       	cpc	r27, r23
    2074:	10 f0       	brcs	.+4      	; 0x207a <__udivmodhi4_ep>
    2076:	a6 1b       	sub	r26, r22
    2078:	b7 0b       	sbc	r27, r23

0000207a <__udivmodhi4_ep>:
    207a:	88 1f       	adc	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	5a 95       	dec	r21
    2080:	a9 f7       	brne	.-22     	; 0x206c <__udivmodhi4_loop>
    2082:	80 95       	com	r24
    2084:	90 95       	com	r25
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	08 95       	ret

0000208c <__divmodsi4>:
    208c:	97 fb       	bst	r25, 7
    208e:	09 2e       	mov	r0, r25
    2090:	05 26       	eor	r0, r21
    2092:	0e d0       	rcall	.+28     	; 0x20b0 <__divmodsi4_neg1>
    2094:	57 fd       	sbrc	r21, 7
    2096:	04 d0       	rcall	.+8      	; 0x20a0 <__divmodsi4_neg2>
    2098:	14 d0       	rcall	.+40     	; 0x20c2 <__udivmodsi4>
    209a:	0a d0       	rcall	.+20     	; 0x20b0 <__divmodsi4_neg1>
    209c:	00 1c       	adc	r0, r0
    209e:	38 f4       	brcc	.+14     	; 0x20ae <__divmodsi4_exit>

000020a0 <__divmodsi4_neg2>:
    20a0:	50 95       	com	r21
    20a2:	40 95       	com	r20
    20a4:	30 95       	com	r19
    20a6:	21 95       	neg	r18
    20a8:	3f 4f       	sbci	r19, 0xFF	; 255
    20aa:	4f 4f       	sbci	r20, 0xFF	; 255
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255

000020ae <__divmodsi4_exit>:
    20ae:	08 95       	ret

000020b0 <__divmodsi4_neg1>:
    20b0:	f6 f7       	brtc	.-4      	; 0x20ae <__divmodsi4_exit>
    20b2:	90 95       	com	r25
    20b4:	80 95       	com	r24
    20b6:	70 95       	com	r23
    20b8:	61 95       	neg	r22
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	8f 4f       	sbci	r24, 0xFF	; 255
    20be:	9f 4f       	sbci	r25, 0xFF	; 255
    20c0:	08 95       	ret

000020c2 <__udivmodsi4>:
    20c2:	a1 e2       	ldi	r26, 0x21	; 33
    20c4:	1a 2e       	mov	r1, r26
    20c6:	aa 1b       	sub	r26, r26
    20c8:	bb 1b       	sub	r27, r27
    20ca:	fd 01       	movw	r30, r26
    20cc:	0d c0       	rjmp	.+26     	; 0x20e8 <__udivmodsi4_ep>

000020ce <__udivmodsi4_loop>:
    20ce:	aa 1f       	adc	r26, r26
    20d0:	bb 1f       	adc	r27, r27
    20d2:	ee 1f       	adc	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	a2 17       	cp	r26, r18
    20d8:	b3 07       	cpc	r27, r19
    20da:	e4 07       	cpc	r30, r20
    20dc:	f5 07       	cpc	r31, r21
    20de:	20 f0       	brcs	.+8      	; 0x20e8 <__udivmodsi4_ep>
    20e0:	a2 1b       	sub	r26, r18
    20e2:	b3 0b       	sbc	r27, r19
    20e4:	e4 0b       	sbc	r30, r20
    20e6:	f5 0b       	sbc	r31, r21

000020e8 <__udivmodsi4_ep>:
    20e8:	66 1f       	adc	r22, r22
    20ea:	77 1f       	adc	r23, r23
    20ec:	88 1f       	adc	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	1a 94       	dec	r1
    20f2:	69 f7       	brne	.-38     	; 0x20ce <__udivmodsi4_loop>
    20f4:	60 95       	com	r22
    20f6:	70 95       	com	r23
    20f8:	80 95       	com	r24
    20fa:	90 95       	com	r25
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
    2100:	bd 01       	movw	r22, r26
    2102:	cf 01       	movw	r24, r30
    2104:	08 95       	ret

00002106 <malloc>:
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	bc 01       	movw	r22, r24
    210c:	82 30       	cpi	r24, 0x02	; 2
    210e:	91 05       	cpc	r25, r1
    2110:	10 f4       	brcc	.+4      	; 0x2116 <malloc+0x10>
    2112:	62 e0       	ldi	r22, 0x02	; 2
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	a0 91 ae 00 	lds	r26, 0x00AE
    211a:	b0 91 af 00 	lds	r27, 0x00AF
    211e:	ed 01       	movw	r28, r26
    2120:	e0 e0       	ldi	r30, 0x00	; 0
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	21 c0       	rjmp	.+66     	; 0x216c <malloc+0x66>
    212a:	88 81       	ld	r24, Y
    212c:	99 81       	ldd	r25, Y+1	; 0x01
    212e:	86 17       	cp	r24, r22
    2130:	97 07       	cpc	r25, r23
    2132:	69 f4       	brne	.+26     	; 0x214e <malloc+0x48>
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	30 97       	sbiw	r30, 0x00	; 0
    213a:	19 f0       	breq	.+6      	; 0x2142 <malloc+0x3c>
    213c:	93 83       	std	Z+3, r25	; 0x03
    213e:	82 83       	std	Z+2, r24	; 0x02
    2140:	04 c0       	rjmp	.+8      	; 0x214a <malloc+0x44>
    2142:	90 93 af 00 	sts	0x00AF, r25
    2146:	80 93 ae 00 	sts	0x00AE, r24
    214a:	fe 01       	movw	r30, r28
    214c:	34 c0       	rjmp	.+104    	; 0x21b6 <malloc+0xb0>
    214e:	68 17       	cp	r22, r24
    2150:	79 07       	cpc	r23, r25
    2152:	38 f4       	brcc	.+14     	; 0x2162 <malloc+0x5c>
    2154:	41 15       	cp	r20, r1
    2156:	51 05       	cpc	r21, r1
    2158:	19 f0       	breq	.+6      	; 0x2160 <malloc+0x5a>
    215a:	84 17       	cp	r24, r20
    215c:	95 07       	cpc	r25, r21
    215e:	08 f4       	brcc	.+2      	; 0x2162 <malloc+0x5c>
    2160:	ac 01       	movw	r20, r24
    2162:	fe 01       	movw	r30, r28
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	9c 01       	movw	r18, r24
    216a:	e9 01       	movw	r28, r18
    216c:	20 97       	sbiw	r28, 0x00	; 0
    216e:	e9 f6       	brne	.-70     	; 0x212a <malloc+0x24>
    2170:	41 15       	cp	r20, r1
    2172:	51 05       	cpc	r21, r1
    2174:	a9 f1       	breq	.+106    	; 0x21e0 <malloc+0xda>
    2176:	ca 01       	movw	r24, r20
    2178:	86 1b       	sub	r24, r22
    217a:	97 0b       	sbc	r25, r23
    217c:	04 97       	sbiw	r24, 0x04	; 4
    217e:	08 f4       	brcc	.+2      	; 0x2182 <malloc+0x7c>
    2180:	ba 01       	movw	r22, r20
    2182:	e0 e0       	ldi	r30, 0x00	; 0
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	2a c0       	rjmp	.+84     	; 0x21dc <malloc+0xd6>
    2188:	8d 91       	ld	r24, X+
    218a:	9c 91       	ld	r25, X
    218c:	11 97       	sbiw	r26, 0x01	; 1
    218e:	84 17       	cp	r24, r20
    2190:	95 07       	cpc	r25, r21
    2192:	f9 f4       	brne	.+62     	; 0x21d2 <malloc+0xcc>
    2194:	64 17       	cp	r22, r20
    2196:	75 07       	cpc	r23, r21
    2198:	81 f4       	brne	.+32     	; 0x21ba <malloc+0xb4>
    219a:	12 96       	adiw	r26, 0x02	; 2
    219c:	8d 91       	ld	r24, X+
    219e:	9c 91       	ld	r25, X
    21a0:	13 97       	sbiw	r26, 0x03	; 3
    21a2:	30 97       	sbiw	r30, 0x00	; 0
    21a4:	19 f0       	breq	.+6      	; 0x21ac <malloc+0xa6>
    21a6:	93 83       	std	Z+3, r25	; 0x03
    21a8:	82 83       	std	Z+2, r24	; 0x02
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <malloc+0xae>
    21ac:	90 93 af 00 	sts	0x00AF, r25
    21b0:	80 93 ae 00 	sts	0x00AE, r24
    21b4:	fd 01       	movw	r30, r26
    21b6:	32 96       	adiw	r30, 0x02	; 2
    21b8:	4f c0       	rjmp	.+158    	; 0x2258 <malloc+0x152>
    21ba:	ca 01       	movw	r24, r20
    21bc:	86 1b       	sub	r24, r22
    21be:	97 0b       	sbc	r25, r23
    21c0:	fd 01       	movw	r30, r26
    21c2:	e8 0f       	add	r30, r24
    21c4:	f9 1f       	adc	r31, r25
    21c6:	61 93       	st	Z+, r22
    21c8:	71 93       	st	Z+, r23
    21ca:	02 97       	sbiw	r24, 0x02	; 2
    21cc:	8d 93       	st	X+, r24
    21ce:	9c 93       	st	X, r25
    21d0:	43 c0       	rjmp	.+134    	; 0x2258 <malloc+0x152>
    21d2:	fd 01       	movw	r30, r26
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	9c 01       	movw	r18, r24
    21da:	d9 01       	movw	r26, r18
    21dc:	10 97       	sbiw	r26, 0x00	; 0
    21de:	a1 f6       	brne	.-88     	; 0x2188 <malloc+0x82>
    21e0:	80 91 ac 00 	lds	r24, 0x00AC
    21e4:	90 91 ad 00 	lds	r25, 0x00AD
    21e8:	89 2b       	or	r24, r25
    21ea:	41 f4       	brne	.+16     	; 0x21fc <malloc+0xf6>
    21ec:	80 91 82 00 	lds	r24, 0x0082
    21f0:	90 91 83 00 	lds	r25, 0x0083
    21f4:	90 93 ad 00 	sts	0x00AD, r25
    21f8:	80 93 ac 00 	sts	0x00AC, r24
    21fc:	40 91 84 00 	lds	r20, 0x0084
    2200:	50 91 85 00 	lds	r21, 0x0085
    2204:	41 15       	cp	r20, r1
    2206:	51 05       	cpc	r21, r1
    2208:	41 f4       	brne	.+16     	; 0x221a <malloc+0x114>
    220a:	4d b7       	in	r20, 0x3d	; 61
    220c:	5e b7       	in	r21, 0x3e	; 62
    220e:	80 91 80 00 	lds	r24, 0x0080
    2212:	90 91 81 00 	lds	r25, 0x0081
    2216:	48 1b       	sub	r20, r24
    2218:	59 0b       	sbc	r21, r25
    221a:	20 91 ac 00 	lds	r18, 0x00AC
    221e:	30 91 ad 00 	lds	r19, 0x00AD
    2222:	24 17       	cp	r18, r20
    2224:	35 07       	cpc	r19, r21
    2226:	b0 f4       	brcc	.+44     	; 0x2254 <malloc+0x14e>
    2228:	ca 01       	movw	r24, r20
    222a:	82 1b       	sub	r24, r18
    222c:	93 0b       	sbc	r25, r19
    222e:	86 17       	cp	r24, r22
    2230:	97 07       	cpc	r25, r23
    2232:	80 f0       	brcs	.+32     	; 0x2254 <malloc+0x14e>
    2234:	ab 01       	movw	r20, r22
    2236:	4e 5f       	subi	r20, 0xFE	; 254
    2238:	5f 4f       	sbci	r21, 0xFF	; 255
    223a:	84 17       	cp	r24, r20
    223c:	95 07       	cpc	r25, r21
    223e:	50 f0       	brcs	.+20     	; 0x2254 <malloc+0x14e>
    2240:	42 0f       	add	r20, r18
    2242:	53 1f       	adc	r21, r19
    2244:	50 93 ad 00 	sts	0x00AD, r21
    2248:	40 93 ac 00 	sts	0x00AC, r20
    224c:	f9 01       	movw	r30, r18
    224e:	61 93       	st	Z+, r22
    2250:	71 93       	st	Z+, r23
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <malloc+0x152>
    2254:	e0 e0       	ldi	r30, 0x00	; 0
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	cf 01       	movw	r24, r30
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <free>:
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	09 f4       	brne	.+2      	; 0x226a <free+0xa>
    2268:	50 c0       	rjmp	.+160    	; 0x230a <free+0xaa>
    226a:	ec 01       	movw	r28, r24
    226c:	22 97       	sbiw	r28, 0x02	; 2
    226e:	1b 82       	std	Y+3, r1	; 0x03
    2270:	1a 82       	std	Y+2, r1	; 0x02
    2272:	a0 91 ae 00 	lds	r26, 0x00AE
    2276:	b0 91 af 00 	lds	r27, 0x00AF
    227a:	10 97       	sbiw	r26, 0x00	; 0
    227c:	09 f1       	breq	.+66     	; 0x22c0 <free+0x60>
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	ac 17       	cp	r26, r28
    2284:	bd 07       	cpc	r27, r29
    2286:	08 f1       	brcs	.+66     	; 0x22ca <free+0x6a>
    2288:	bb 83       	std	Y+3, r27	; 0x03
    228a:	aa 83       	std	Y+2, r26	; 0x02
    228c:	fe 01       	movw	r30, r28
    228e:	21 91       	ld	r18, Z+
    2290:	31 91       	ld	r19, Z+
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	ae 17       	cp	r26, r30
    2298:	bf 07       	cpc	r27, r31
    229a:	79 f4       	brne	.+30     	; 0x22ba <free+0x5a>
    229c:	8d 91       	ld	r24, X+
    229e:	9c 91       	ld	r25, X
    22a0:	11 97       	sbiw	r26, 0x01	; 1
    22a2:	28 0f       	add	r18, r24
    22a4:	39 1f       	adc	r19, r25
    22a6:	2e 5f       	subi	r18, 0xFE	; 254
    22a8:	3f 4f       	sbci	r19, 0xFF	; 255
    22aa:	39 83       	std	Y+1, r19	; 0x01
    22ac:	28 83       	st	Y, r18
    22ae:	12 96       	adiw	r26, 0x02	; 2
    22b0:	8d 91       	ld	r24, X+
    22b2:	9c 91       	ld	r25, X
    22b4:	13 97       	sbiw	r26, 0x03	; 3
    22b6:	9b 83       	std	Y+3, r25	; 0x03
    22b8:	8a 83       	std	Y+2, r24	; 0x02
    22ba:	41 15       	cp	r20, r1
    22bc:	51 05       	cpc	r21, r1
    22be:	71 f4       	brne	.+28     	; 0x22dc <free+0x7c>
    22c0:	d0 93 af 00 	sts	0x00AF, r29
    22c4:	c0 93 ae 00 	sts	0x00AE, r28
    22c8:	20 c0       	rjmp	.+64     	; 0x230a <free+0xaa>
    22ca:	12 96       	adiw	r26, 0x02	; 2
    22cc:	8d 91       	ld	r24, X+
    22ce:	9c 91       	ld	r25, X
    22d0:	13 97       	sbiw	r26, 0x03	; 3
    22d2:	ad 01       	movw	r20, r26
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	11 f0       	breq	.+4      	; 0x22dc <free+0x7c>
    22d8:	dc 01       	movw	r26, r24
    22da:	d3 cf       	rjmp	.-90     	; 0x2282 <free+0x22>
    22dc:	fa 01       	movw	r30, r20
    22de:	d3 83       	std	Z+3, r29	; 0x03
    22e0:	c2 83       	std	Z+2, r28	; 0x02
    22e2:	21 91       	ld	r18, Z+
    22e4:	31 91       	ld	r19, Z+
    22e6:	e2 0f       	add	r30, r18
    22e8:	f3 1f       	adc	r31, r19
    22ea:	ce 17       	cp	r28, r30
    22ec:	df 07       	cpc	r29, r31
    22ee:	69 f4       	brne	.+26     	; 0x230a <free+0xaa>
    22f0:	88 81       	ld	r24, Y
    22f2:	99 81       	ldd	r25, Y+1	; 0x01
    22f4:	28 0f       	add	r18, r24
    22f6:	39 1f       	adc	r19, r25
    22f8:	2e 5f       	subi	r18, 0xFE	; 254
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
    22fc:	fa 01       	movw	r30, r20
    22fe:	31 83       	std	Z+1, r19	; 0x01
    2300:	20 83       	st	Z, r18
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	93 83       	std	Z+3, r25	; 0x03
    2308:	82 83       	std	Z+2, r24	; 0x02
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	08 95       	ret

00002310 <printf>:
    2310:	a0 e0       	ldi	r26, 0x00	; 0
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	ee e8       	ldi	r30, 0x8E	; 142
    2316:	f1 e1       	ldi	r31, 0x11	; 17
    2318:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__prologue_saves__+0x20>
    231c:	fe 01       	movw	r30, r28
    231e:	35 96       	adiw	r30, 0x05	; 5
    2320:	61 91       	ld	r22, Z+
    2322:	71 91       	ld	r23, Z+
    2324:	80 91 b2 00 	lds	r24, 0x00B2
    2328:	90 91 b3 00 	lds	r25, 0x00B3
    232c:	af 01       	movw	r20, r30
    232e:	0e 94 9d 11 	call	0x233a	; 0x233a <vfprintf>
    2332:	20 96       	adiw	r28, 0x00	; 0
    2334:	e2 e0       	ldi	r30, 0x02	; 2
    2336:	0c 94 46 14 	jmp	0x288c	; 0x288c <__epilogue_restores__+0x20>

0000233a <vfprintf>:
    233a:	ab e0       	ldi	r26, 0x0B	; 11
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 ea       	ldi	r30, 0xA3	; 163
    2340:	f1 e1       	ldi	r31, 0x11	; 17
    2342:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__>
    2346:	3c 01       	movw	r6, r24
    2348:	2b 01       	movw	r4, r22
    234a:	5a 01       	movw	r10, r20
    234c:	fc 01       	movw	r30, r24
    234e:	17 82       	std	Z+7, r1	; 0x07
    2350:	16 82       	std	Z+6, r1	; 0x06
    2352:	83 81       	ldd	r24, Z+3	; 0x03
    2354:	81 fd       	sbrc	r24, 1
    2356:	03 c0       	rjmp	.+6      	; 0x235e <vfprintf+0x24>
    2358:	6f ef       	ldi	r22, 0xFF	; 255
    235a:	7f ef       	ldi	r23, 0xFF	; 255
    235c:	c6 c1       	rjmp	.+908    	; 0x26ea <vfprintf+0x3b0>
    235e:	9a e0       	ldi	r25, 0x0A	; 10
    2360:	89 2e       	mov	r8, r25
    2362:	1e 01       	movw	r2, r28
    2364:	08 94       	sec
    2366:	21 1c       	adc	r2, r1
    2368:	31 1c       	adc	r3, r1
    236a:	f3 01       	movw	r30, r6
    236c:	23 81       	ldd	r18, Z+3	; 0x03
    236e:	f2 01       	movw	r30, r4
    2370:	23 fd       	sbrc	r18, 3
    2372:	85 91       	lpm	r24, Z+
    2374:	23 ff       	sbrs	r18, 3
    2376:	81 91       	ld	r24, Z+
    2378:	2f 01       	movw	r4, r30
    237a:	88 23       	and	r24, r24
    237c:	09 f4       	brne	.+2      	; 0x2380 <vfprintf+0x46>
    237e:	b2 c1       	rjmp	.+868    	; 0x26e4 <vfprintf+0x3aa>
    2380:	85 32       	cpi	r24, 0x25	; 37
    2382:	39 f4       	brne	.+14     	; 0x2392 <vfprintf+0x58>
    2384:	23 fd       	sbrc	r18, 3
    2386:	85 91       	lpm	r24, Z+
    2388:	23 ff       	sbrs	r18, 3
    238a:	81 91       	ld	r24, Z+
    238c:	2f 01       	movw	r4, r30
    238e:	85 32       	cpi	r24, 0x25	; 37
    2390:	29 f4       	brne	.+10     	; 0x239c <vfprintf+0x62>
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	b3 01       	movw	r22, r6
    2396:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    239a:	e7 cf       	rjmp	.-50     	; 0x236a <vfprintf+0x30>
    239c:	98 2f       	mov	r25, r24
    239e:	ff 24       	eor	r15, r15
    23a0:	ee 24       	eor	r14, r14
    23a2:	99 24       	eor	r9, r9
    23a4:	ff e1       	ldi	r31, 0x1F	; 31
    23a6:	ff 15       	cp	r31, r15
    23a8:	d0 f0       	brcs	.+52     	; 0x23de <vfprintf+0xa4>
    23aa:	9b 32       	cpi	r25, 0x2B	; 43
    23ac:	69 f0       	breq	.+26     	; 0x23c8 <vfprintf+0x8e>
    23ae:	9c 32       	cpi	r25, 0x2C	; 44
    23b0:	28 f4       	brcc	.+10     	; 0x23bc <vfprintf+0x82>
    23b2:	90 32       	cpi	r25, 0x20	; 32
    23b4:	59 f0       	breq	.+22     	; 0x23cc <vfprintf+0x92>
    23b6:	93 32       	cpi	r25, 0x23	; 35
    23b8:	91 f4       	brne	.+36     	; 0x23de <vfprintf+0xa4>
    23ba:	0e c0       	rjmp	.+28     	; 0x23d8 <vfprintf+0x9e>
    23bc:	9d 32       	cpi	r25, 0x2D	; 45
    23be:	49 f0       	breq	.+18     	; 0x23d2 <vfprintf+0x98>
    23c0:	90 33       	cpi	r25, 0x30	; 48
    23c2:	69 f4       	brne	.+26     	; 0x23de <vfprintf+0xa4>
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	24 c0       	rjmp	.+72     	; 0x2410 <vfprintf+0xd6>
    23c8:	52 e0       	ldi	r21, 0x02	; 2
    23ca:	f5 2a       	or	r15, r21
    23cc:	84 e0       	ldi	r24, 0x04	; 4
    23ce:	f8 2a       	or	r15, r24
    23d0:	28 c0       	rjmp	.+80     	; 0x2422 <vfprintf+0xe8>
    23d2:	98 e0       	ldi	r25, 0x08	; 8
    23d4:	f9 2a       	or	r15, r25
    23d6:	25 c0       	rjmp	.+74     	; 0x2422 <vfprintf+0xe8>
    23d8:	e0 e1       	ldi	r30, 0x10	; 16
    23da:	fe 2a       	or	r15, r30
    23dc:	22 c0       	rjmp	.+68     	; 0x2422 <vfprintf+0xe8>
    23de:	f7 fc       	sbrc	r15, 7
    23e0:	29 c0       	rjmp	.+82     	; 0x2434 <vfprintf+0xfa>
    23e2:	89 2f       	mov	r24, r25
    23e4:	80 53       	subi	r24, 0x30	; 48
    23e6:	8a 30       	cpi	r24, 0x0A	; 10
    23e8:	70 f4       	brcc	.+28     	; 0x2406 <vfprintf+0xcc>
    23ea:	f6 fe       	sbrs	r15, 6
    23ec:	05 c0       	rjmp	.+10     	; 0x23f8 <vfprintf+0xbe>
    23ee:	98 9c       	mul	r9, r8
    23f0:	90 2c       	mov	r9, r0
    23f2:	11 24       	eor	r1, r1
    23f4:	98 0e       	add	r9, r24
    23f6:	15 c0       	rjmp	.+42     	; 0x2422 <vfprintf+0xe8>
    23f8:	e8 9c       	mul	r14, r8
    23fa:	e0 2c       	mov	r14, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	e8 0e       	add	r14, r24
    2400:	f0 e2       	ldi	r31, 0x20	; 32
    2402:	ff 2a       	or	r15, r31
    2404:	0e c0       	rjmp	.+28     	; 0x2422 <vfprintf+0xe8>
    2406:	9e 32       	cpi	r25, 0x2E	; 46
    2408:	29 f4       	brne	.+10     	; 0x2414 <vfprintf+0xda>
    240a:	f6 fc       	sbrc	r15, 6
    240c:	6b c1       	rjmp	.+726    	; 0x26e4 <vfprintf+0x3aa>
    240e:	40 e4       	ldi	r20, 0x40	; 64
    2410:	f4 2a       	or	r15, r20
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <vfprintf+0xe8>
    2414:	9c 36       	cpi	r25, 0x6C	; 108
    2416:	19 f4       	brne	.+6      	; 0x241e <vfprintf+0xe4>
    2418:	50 e8       	ldi	r21, 0x80	; 128
    241a:	f5 2a       	or	r15, r21
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <vfprintf+0xe8>
    241e:	98 36       	cpi	r25, 0x68	; 104
    2420:	49 f4       	brne	.+18     	; 0x2434 <vfprintf+0xfa>
    2422:	f2 01       	movw	r30, r4
    2424:	23 fd       	sbrc	r18, 3
    2426:	95 91       	lpm	r25, Z+
    2428:	23 ff       	sbrs	r18, 3
    242a:	91 91       	ld	r25, Z+
    242c:	2f 01       	movw	r4, r30
    242e:	99 23       	and	r25, r25
    2430:	09 f0       	breq	.+2      	; 0x2434 <vfprintf+0xfa>
    2432:	b8 cf       	rjmp	.-144    	; 0x23a4 <vfprintf+0x6a>
    2434:	89 2f       	mov	r24, r25
    2436:	85 54       	subi	r24, 0x45	; 69
    2438:	83 30       	cpi	r24, 0x03	; 3
    243a:	18 f0       	brcs	.+6      	; 0x2442 <vfprintf+0x108>
    243c:	80 52       	subi	r24, 0x20	; 32
    243e:	83 30       	cpi	r24, 0x03	; 3
    2440:	38 f4       	brcc	.+14     	; 0x2450 <vfprintf+0x116>
    2442:	44 e0       	ldi	r20, 0x04	; 4
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	a4 0e       	add	r10, r20
    2448:	b5 1e       	adc	r11, r21
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	59 83       	std	Y+1, r21	; 0x01
    244e:	0f c0       	rjmp	.+30     	; 0x246e <vfprintf+0x134>
    2450:	93 36       	cpi	r25, 0x63	; 99
    2452:	31 f0       	breq	.+12     	; 0x2460 <vfprintf+0x126>
    2454:	93 37       	cpi	r25, 0x73	; 115
    2456:	79 f0       	breq	.+30     	; 0x2476 <vfprintf+0x13c>
    2458:	93 35       	cpi	r25, 0x53	; 83
    245a:	09 f0       	breq	.+2      	; 0x245e <vfprintf+0x124>
    245c:	56 c0       	rjmp	.+172    	; 0x250a <vfprintf+0x1d0>
    245e:	20 c0       	rjmp	.+64     	; 0x24a0 <vfprintf+0x166>
    2460:	f5 01       	movw	r30, r10
    2462:	80 81       	ld	r24, Z
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	42 e0       	ldi	r20, 0x02	; 2
    2468:	50 e0       	ldi	r21, 0x00	; 0
    246a:	a4 0e       	add	r10, r20
    246c:	b5 1e       	adc	r11, r21
    246e:	61 01       	movw	r12, r2
    2470:	01 e0       	ldi	r16, 0x01	; 1
    2472:	10 e0       	ldi	r17, 0x00	; 0
    2474:	12 c0       	rjmp	.+36     	; 0x249a <vfprintf+0x160>
    2476:	f5 01       	movw	r30, r10
    2478:	c0 80       	ld	r12, Z
    247a:	d1 80       	ldd	r13, Z+1	; 0x01
    247c:	f6 fc       	sbrc	r15, 6
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <vfprintf+0x14c>
    2480:	6f ef       	ldi	r22, 0xFF	; 255
    2482:	7f ef       	ldi	r23, 0xFF	; 255
    2484:	02 c0       	rjmp	.+4      	; 0x248a <vfprintf+0x150>
    2486:	69 2d       	mov	r22, r9
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	42 e0       	ldi	r20, 0x02	; 2
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	a4 0e       	add	r10, r20
    2490:	b5 1e       	adc	r11, r21
    2492:	c6 01       	movw	r24, r12
    2494:	0e 94 85 13 	call	0x270a	; 0x270a <strnlen>
    2498:	8c 01       	movw	r16, r24
    249a:	5f e7       	ldi	r21, 0x7F	; 127
    249c:	f5 22       	and	r15, r21
    249e:	14 c0       	rjmp	.+40     	; 0x24c8 <vfprintf+0x18e>
    24a0:	f5 01       	movw	r30, r10
    24a2:	c0 80       	ld	r12, Z
    24a4:	d1 80       	ldd	r13, Z+1	; 0x01
    24a6:	f6 fc       	sbrc	r15, 6
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <vfprintf+0x176>
    24aa:	6f ef       	ldi	r22, 0xFF	; 255
    24ac:	7f ef       	ldi	r23, 0xFF	; 255
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <vfprintf+0x17a>
    24b0:	69 2d       	mov	r22, r9
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	42 e0       	ldi	r20, 0x02	; 2
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	a4 0e       	add	r10, r20
    24ba:	b5 1e       	adc	r11, r21
    24bc:	c6 01       	movw	r24, r12
    24be:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <strnlen_P>
    24c2:	8c 01       	movw	r16, r24
    24c4:	50 e8       	ldi	r21, 0x80	; 128
    24c6:	f5 2a       	or	r15, r21
    24c8:	f3 fe       	sbrs	r15, 3
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <vfprintf+0x1a0>
    24cc:	1a c0       	rjmp	.+52     	; 0x2502 <vfprintf+0x1c8>
    24ce:	80 e2       	ldi	r24, 0x20	; 32
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	b3 01       	movw	r22, r6
    24d4:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    24d8:	ea 94       	dec	r14
    24da:	8e 2d       	mov	r24, r14
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	08 17       	cp	r16, r24
    24e0:	19 07       	cpc	r17, r25
    24e2:	a8 f3       	brcs	.-22     	; 0x24ce <vfprintf+0x194>
    24e4:	0e c0       	rjmp	.+28     	; 0x2502 <vfprintf+0x1c8>
    24e6:	f6 01       	movw	r30, r12
    24e8:	f7 fc       	sbrc	r15, 7
    24ea:	85 91       	lpm	r24, Z+
    24ec:	f7 fe       	sbrs	r15, 7
    24ee:	81 91       	ld	r24, Z+
    24f0:	6f 01       	movw	r12, r30
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	b3 01       	movw	r22, r6
    24f6:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    24fa:	e1 10       	cpse	r14, r1
    24fc:	ea 94       	dec	r14
    24fe:	01 50       	subi	r16, 0x01	; 1
    2500:	10 40       	sbci	r17, 0x00	; 0
    2502:	01 15       	cp	r16, r1
    2504:	11 05       	cpc	r17, r1
    2506:	79 f7       	brne	.-34     	; 0x24e6 <vfprintf+0x1ac>
    2508:	ea c0       	rjmp	.+468    	; 0x26de <vfprintf+0x3a4>
    250a:	94 36       	cpi	r25, 0x64	; 100
    250c:	11 f0       	breq	.+4      	; 0x2512 <vfprintf+0x1d8>
    250e:	99 36       	cpi	r25, 0x69	; 105
    2510:	69 f5       	brne	.+90     	; 0x256c <vfprintf+0x232>
    2512:	f7 fe       	sbrs	r15, 7
    2514:	08 c0       	rjmp	.+16     	; 0x2526 <vfprintf+0x1ec>
    2516:	f5 01       	movw	r30, r10
    2518:	20 81       	ld	r18, Z
    251a:	31 81       	ldd	r19, Z+1	; 0x01
    251c:	42 81       	ldd	r20, Z+2	; 0x02
    251e:	53 81       	ldd	r21, Z+3	; 0x03
    2520:	84 e0       	ldi	r24, 0x04	; 4
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0a c0       	rjmp	.+20     	; 0x253a <vfprintf+0x200>
    2526:	f5 01       	movw	r30, r10
    2528:	80 81       	ld	r24, Z
    252a:	91 81       	ldd	r25, Z+1	; 0x01
    252c:	9c 01       	movw	r18, r24
    252e:	44 27       	eor	r20, r20
    2530:	37 fd       	sbrc	r19, 7
    2532:	40 95       	com	r20
    2534:	54 2f       	mov	r21, r20
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a8 0e       	add	r10, r24
    253c:	b9 1e       	adc	r11, r25
    253e:	9f e6       	ldi	r25, 0x6F	; 111
    2540:	f9 22       	and	r15, r25
    2542:	57 ff       	sbrs	r21, 7
    2544:	09 c0       	rjmp	.+18     	; 0x2558 <vfprintf+0x21e>
    2546:	50 95       	com	r21
    2548:	40 95       	com	r20
    254a:	30 95       	com	r19
    254c:	21 95       	neg	r18
    254e:	3f 4f       	sbci	r19, 0xFF	; 255
    2550:	4f 4f       	sbci	r20, 0xFF	; 255
    2552:	5f 4f       	sbci	r21, 0xFF	; 255
    2554:	e0 e8       	ldi	r30, 0x80	; 128
    2556:	fe 2a       	or	r15, r30
    2558:	ca 01       	movw	r24, r20
    255a:	b9 01       	movw	r22, r18
    255c:	a1 01       	movw	r20, r2
    255e:	2a e0       	ldi	r18, 0x0A	; 10
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	0e 94 bc 13 	call	0x2778	; 0x2778 <__ultoa_invert>
    2566:	d8 2e       	mov	r13, r24
    2568:	d2 18       	sub	r13, r2
    256a:	40 c0       	rjmp	.+128    	; 0x25ec <vfprintf+0x2b2>
    256c:	95 37       	cpi	r25, 0x75	; 117
    256e:	29 f4       	brne	.+10     	; 0x257a <vfprintf+0x240>
    2570:	1f 2d       	mov	r17, r15
    2572:	1f 7e       	andi	r17, 0xEF	; 239
    2574:	2a e0       	ldi	r18, 0x0A	; 10
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	1d c0       	rjmp	.+58     	; 0x25b4 <vfprintf+0x27a>
    257a:	1f 2d       	mov	r17, r15
    257c:	19 7f       	andi	r17, 0xF9	; 249
    257e:	9f 36       	cpi	r25, 0x6F	; 111
    2580:	61 f0       	breq	.+24     	; 0x259a <vfprintf+0x260>
    2582:	90 37       	cpi	r25, 0x70	; 112
    2584:	20 f4       	brcc	.+8      	; 0x258e <vfprintf+0x254>
    2586:	98 35       	cpi	r25, 0x58	; 88
    2588:	09 f0       	breq	.+2      	; 0x258c <vfprintf+0x252>
    258a:	ac c0       	rjmp	.+344    	; 0x26e4 <vfprintf+0x3aa>
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <vfprintf+0x272>
    258e:	90 37       	cpi	r25, 0x70	; 112
    2590:	39 f0       	breq	.+14     	; 0x25a0 <vfprintf+0x266>
    2592:	98 37       	cpi	r25, 0x78	; 120
    2594:	09 f0       	breq	.+2      	; 0x2598 <vfprintf+0x25e>
    2596:	a6 c0       	rjmp	.+332    	; 0x26e4 <vfprintf+0x3aa>
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <vfprintf+0x268>
    259a:	28 e0       	ldi	r18, 0x08	; 8
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <vfprintf+0x27a>
    25a0:	10 61       	ori	r17, 0x10	; 16
    25a2:	14 fd       	sbrc	r17, 4
    25a4:	14 60       	ori	r17, 0x04	; 4
    25a6:	20 e1       	ldi	r18, 0x10	; 16
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	04 c0       	rjmp	.+8      	; 0x25b4 <vfprintf+0x27a>
    25ac:	14 fd       	sbrc	r17, 4
    25ae:	16 60       	ori	r17, 0x06	; 6
    25b0:	20 e1       	ldi	r18, 0x10	; 16
    25b2:	32 e0       	ldi	r19, 0x02	; 2
    25b4:	17 ff       	sbrs	r17, 7
    25b6:	08 c0       	rjmp	.+16     	; 0x25c8 <vfprintf+0x28e>
    25b8:	f5 01       	movw	r30, r10
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	44 e0       	ldi	r20, 0x04	; 4
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	08 c0       	rjmp	.+16     	; 0x25d8 <vfprintf+0x29e>
    25c8:	f5 01       	movw	r30, r10
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	bc 01       	movw	r22, r24
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	42 e0       	ldi	r20, 0x02	; 2
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	a4 0e       	add	r10, r20
    25da:	b5 1e       	adc	r11, r21
    25dc:	a1 01       	movw	r20, r2
    25de:	0e 94 bc 13 	call	0x2778	; 0x2778 <__ultoa_invert>
    25e2:	d8 2e       	mov	r13, r24
    25e4:	d2 18       	sub	r13, r2
    25e6:	8f e7       	ldi	r24, 0x7F	; 127
    25e8:	f8 2e       	mov	r15, r24
    25ea:	f1 22       	and	r15, r17
    25ec:	f6 fe       	sbrs	r15, 6
    25ee:	0b c0       	rjmp	.+22     	; 0x2606 <vfprintf+0x2cc>
    25f0:	5e ef       	ldi	r21, 0xFE	; 254
    25f2:	f5 22       	and	r15, r21
    25f4:	d9 14       	cp	r13, r9
    25f6:	38 f4       	brcc	.+14     	; 0x2606 <vfprintf+0x2cc>
    25f8:	f4 fe       	sbrs	r15, 4
    25fa:	07 c0       	rjmp	.+14     	; 0x260a <vfprintf+0x2d0>
    25fc:	f2 fc       	sbrc	r15, 2
    25fe:	05 c0       	rjmp	.+10     	; 0x260a <vfprintf+0x2d0>
    2600:	8f ee       	ldi	r24, 0xEF	; 239
    2602:	f8 22       	and	r15, r24
    2604:	02 c0       	rjmp	.+4      	; 0x260a <vfprintf+0x2d0>
    2606:	1d 2d       	mov	r17, r13
    2608:	01 c0       	rjmp	.+2      	; 0x260c <vfprintf+0x2d2>
    260a:	19 2d       	mov	r17, r9
    260c:	f4 fe       	sbrs	r15, 4
    260e:	0d c0       	rjmp	.+26     	; 0x262a <vfprintf+0x2f0>
    2610:	fe 01       	movw	r30, r28
    2612:	ed 0d       	add	r30, r13
    2614:	f1 1d       	adc	r31, r1
    2616:	80 81       	ld	r24, Z
    2618:	80 33       	cpi	r24, 0x30	; 48
    261a:	19 f4       	brne	.+6      	; 0x2622 <vfprintf+0x2e8>
    261c:	99 ee       	ldi	r25, 0xE9	; 233
    261e:	f9 22       	and	r15, r25
    2620:	08 c0       	rjmp	.+16     	; 0x2632 <vfprintf+0x2f8>
    2622:	1f 5f       	subi	r17, 0xFF	; 255
    2624:	f2 fe       	sbrs	r15, 2
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <vfprintf+0x2f8>
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <vfprintf+0x2f6>
    262a:	8f 2d       	mov	r24, r15
    262c:	86 78       	andi	r24, 0x86	; 134
    262e:	09 f0       	breq	.+2      	; 0x2632 <vfprintf+0x2f8>
    2630:	1f 5f       	subi	r17, 0xFF	; 255
    2632:	0f 2d       	mov	r16, r15
    2634:	f3 fc       	sbrc	r15, 3
    2636:	14 c0       	rjmp	.+40     	; 0x2660 <vfprintf+0x326>
    2638:	f0 fe       	sbrs	r15, 0
    263a:	0f c0       	rjmp	.+30     	; 0x265a <vfprintf+0x320>
    263c:	1e 15       	cp	r17, r14
    263e:	10 f0       	brcs	.+4      	; 0x2644 <vfprintf+0x30a>
    2640:	9d 2c       	mov	r9, r13
    2642:	0b c0       	rjmp	.+22     	; 0x265a <vfprintf+0x320>
    2644:	9d 2c       	mov	r9, r13
    2646:	9e 0c       	add	r9, r14
    2648:	91 1a       	sub	r9, r17
    264a:	1e 2d       	mov	r17, r14
    264c:	06 c0       	rjmp	.+12     	; 0x265a <vfprintf+0x320>
    264e:	80 e2       	ldi	r24, 0x20	; 32
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	b3 01       	movw	r22, r6
    2654:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    2658:	1f 5f       	subi	r17, 0xFF	; 255
    265a:	1e 15       	cp	r17, r14
    265c:	c0 f3       	brcs	.-16     	; 0x264e <vfprintf+0x314>
    265e:	04 c0       	rjmp	.+8      	; 0x2668 <vfprintf+0x32e>
    2660:	1e 15       	cp	r17, r14
    2662:	10 f4       	brcc	.+4      	; 0x2668 <vfprintf+0x32e>
    2664:	e1 1a       	sub	r14, r17
    2666:	01 c0       	rjmp	.+2      	; 0x266a <vfprintf+0x330>
    2668:	ee 24       	eor	r14, r14
    266a:	04 ff       	sbrs	r16, 4
    266c:	0f c0       	rjmp	.+30     	; 0x268c <vfprintf+0x352>
    266e:	80 e3       	ldi	r24, 0x30	; 48
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	b3 01       	movw	r22, r6
    2674:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    2678:	02 ff       	sbrs	r16, 2
    267a:	1d c0       	rjmp	.+58     	; 0x26b6 <vfprintf+0x37c>
    267c:	01 fd       	sbrc	r16, 1
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <vfprintf+0x34c>
    2680:	88 e7       	ldi	r24, 0x78	; 120
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e c0       	rjmp	.+28     	; 0x26a2 <vfprintf+0x368>
    2686:	88 e5       	ldi	r24, 0x58	; 88
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0b c0       	rjmp	.+22     	; 0x26a2 <vfprintf+0x368>
    268c:	80 2f       	mov	r24, r16
    268e:	86 78       	andi	r24, 0x86	; 134
    2690:	91 f0       	breq	.+36     	; 0x26b6 <vfprintf+0x37c>
    2692:	01 ff       	sbrs	r16, 1
    2694:	02 c0       	rjmp	.+4      	; 0x269a <vfprintf+0x360>
    2696:	8b e2       	ldi	r24, 0x2B	; 43
    2698:	01 c0       	rjmp	.+2      	; 0x269c <vfprintf+0x362>
    269a:	80 e2       	ldi	r24, 0x20	; 32
    269c:	f7 fc       	sbrc	r15, 7
    269e:	8d e2       	ldi	r24, 0x2D	; 45
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	b3 01       	movw	r22, r6
    26a4:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    26a8:	06 c0       	rjmp	.+12     	; 0x26b6 <vfprintf+0x37c>
    26aa:	80 e3       	ldi	r24, 0x30	; 48
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	b3 01       	movw	r22, r6
    26b0:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    26b4:	9a 94       	dec	r9
    26b6:	d9 14       	cp	r13, r9
    26b8:	c0 f3       	brcs	.-16     	; 0x26aa <vfprintf+0x370>
    26ba:	da 94       	dec	r13
    26bc:	f1 01       	movw	r30, r2
    26be:	ed 0d       	add	r30, r13
    26c0:	f1 1d       	adc	r31, r1
    26c2:	80 81       	ld	r24, Z
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	b3 01       	movw	r22, r6
    26c8:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    26cc:	dd 20       	and	r13, r13
    26ce:	a9 f7       	brne	.-22     	; 0x26ba <vfprintf+0x380>
    26d0:	06 c0       	rjmp	.+12     	; 0x26de <vfprintf+0x3a4>
    26d2:	80 e2       	ldi	r24, 0x20	; 32
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	b3 01       	movw	r22, r6
    26d8:	0e 94 90 13 	call	0x2720	; 0x2720 <fputc>
    26dc:	ea 94       	dec	r14
    26de:	ee 20       	and	r14, r14
    26e0:	c1 f7       	brne	.-16     	; 0x26d2 <vfprintf+0x398>
    26e2:	43 ce       	rjmp	.-890    	; 0x236a <vfprintf+0x30>
    26e4:	f3 01       	movw	r30, r6
    26e6:	66 81       	ldd	r22, Z+6	; 0x06
    26e8:	77 81       	ldd	r23, Z+7	; 0x07
    26ea:	cb 01       	movw	r24, r22
    26ec:	2b 96       	adiw	r28, 0x0b	; 11
    26ee:	e2 e1       	ldi	r30, 0x12	; 18
    26f0:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__>

000026f4 <strnlen_P>:
    26f4:	fc 01       	movw	r30, r24
    26f6:	05 90       	lpm	r0, Z+
    26f8:	61 50       	subi	r22, 0x01	; 1
    26fa:	70 40       	sbci	r23, 0x00	; 0
    26fc:	01 10       	cpse	r0, r1
    26fe:	d8 f7       	brcc	.-10     	; 0x26f6 <strnlen_P+0x2>
    2700:	80 95       	com	r24
    2702:	90 95       	com	r25
    2704:	8e 0f       	add	r24, r30
    2706:	9f 1f       	adc	r25, r31
    2708:	08 95       	ret

0000270a <strnlen>:
    270a:	fc 01       	movw	r30, r24
    270c:	61 50       	subi	r22, 0x01	; 1
    270e:	70 40       	sbci	r23, 0x00	; 0
    2710:	01 90       	ld	r0, Z+
    2712:	01 10       	cpse	r0, r1
    2714:	d8 f7       	brcc	.-10     	; 0x270c <strnlen+0x2>
    2716:	80 95       	com	r24
    2718:	90 95       	com	r25
    271a:	8e 0f       	add	r24, r30
    271c:	9f 1f       	adc	r25, r31
    271e:	08 95       	ret

00002720 <fputc>:
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	8c 01       	movw	r16, r24
    272a:	eb 01       	movw	r28, r22
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	81 ff       	sbrs	r24, 1
    2730:	1b c0       	rjmp	.+54     	; 0x2768 <fputc+0x48>
    2732:	82 ff       	sbrs	r24, 2
    2734:	0d c0       	rjmp	.+26     	; 0x2750 <fputc+0x30>
    2736:	2e 81       	ldd	r18, Y+6	; 0x06
    2738:	3f 81       	ldd	r19, Y+7	; 0x07
    273a:	8c 81       	ldd	r24, Y+4	; 0x04
    273c:	9d 81       	ldd	r25, Y+5	; 0x05
    273e:	28 17       	cp	r18, r24
    2740:	39 07       	cpc	r19, r25
    2742:	64 f4       	brge	.+24     	; 0x275c <fputc+0x3c>
    2744:	e8 81       	ld	r30, Y
    2746:	f9 81       	ldd	r31, Y+1	; 0x01
    2748:	01 93       	st	Z+, r16
    274a:	f9 83       	std	Y+1, r31	; 0x01
    274c:	e8 83       	st	Y, r30
    274e:	06 c0       	rjmp	.+12     	; 0x275c <fputc+0x3c>
    2750:	e8 85       	ldd	r30, Y+8	; 0x08
    2752:	f9 85       	ldd	r31, Y+9	; 0x09
    2754:	80 2f       	mov	r24, r16
    2756:	09 95       	icall
    2758:	89 2b       	or	r24, r25
    275a:	31 f4       	brne	.+12     	; 0x2768 <fputc+0x48>
    275c:	8e 81       	ldd	r24, Y+6	; 0x06
    275e:	9f 81       	ldd	r25, Y+7	; 0x07
    2760:	01 96       	adiw	r24, 0x01	; 1
    2762:	9f 83       	std	Y+7, r25	; 0x07
    2764:	8e 83       	std	Y+6, r24	; 0x06
    2766:	02 c0       	rjmp	.+4      	; 0x276c <fputc+0x4c>
    2768:	0f ef       	ldi	r16, 0xFF	; 255
    276a:	1f ef       	ldi	r17, 0xFF	; 255
    276c:	c8 01       	movw	r24, r16
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	08 95       	ret

00002778 <__ultoa_invert>:
    2778:	fa 01       	movw	r30, r20
    277a:	aa 27       	eor	r26, r26
    277c:	28 30       	cpi	r18, 0x08	; 8
    277e:	51 f1       	breq	.+84     	; 0x27d4 <__ultoa_invert+0x5c>
    2780:	20 31       	cpi	r18, 0x10	; 16
    2782:	81 f1       	breq	.+96     	; 0x27e4 <__ultoa_invert+0x6c>
    2784:	e8 94       	clt
    2786:	6f 93       	push	r22
    2788:	6e 7f       	andi	r22, 0xFE	; 254
    278a:	6e 5f       	subi	r22, 0xFE	; 254
    278c:	7f 4f       	sbci	r23, 0xFF	; 255
    278e:	8f 4f       	sbci	r24, 0xFF	; 255
    2790:	9f 4f       	sbci	r25, 0xFF	; 255
    2792:	af 4f       	sbci	r26, 0xFF	; 255
    2794:	b1 e0       	ldi	r27, 0x01	; 1
    2796:	3e d0       	rcall	.+124    	; 0x2814 <__ultoa_invert+0x9c>
    2798:	b4 e0       	ldi	r27, 0x04	; 4
    279a:	3c d0       	rcall	.+120    	; 0x2814 <__ultoa_invert+0x9c>
    279c:	67 0f       	add	r22, r23
    279e:	78 1f       	adc	r23, r24
    27a0:	89 1f       	adc	r24, r25
    27a2:	9a 1f       	adc	r25, r26
    27a4:	a1 1d       	adc	r26, r1
    27a6:	68 0f       	add	r22, r24
    27a8:	79 1f       	adc	r23, r25
    27aa:	8a 1f       	adc	r24, r26
    27ac:	91 1d       	adc	r25, r1
    27ae:	a1 1d       	adc	r26, r1
    27b0:	6a 0f       	add	r22, r26
    27b2:	71 1d       	adc	r23, r1
    27b4:	81 1d       	adc	r24, r1
    27b6:	91 1d       	adc	r25, r1
    27b8:	a1 1d       	adc	r26, r1
    27ba:	20 d0       	rcall	.+64     	; 0x27fc <__ultoa_invert+0x84>
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <__ultoa_invert+0x48>
    27be:	68 94       	set
    27c0:	3f 91       	pop	r19
    27c2:	2a e0       	ldi	r18, 0x0A	; 10
    27c4:	26 9f       	mul	r18, r22
    27c6:	11 24       	eor	r1, r1
    27c8:	30 19       	sub	r19, r0
    27ca:	30 5d       	subi	r19, 0xD0	; 208
    27cc:	31 93       	st	Z+, r19
    27ce:	de f6       	brtc	.-74     	; 0x2786 <__ultoa_invert+0xe>
    27d0:	cf 01       	movw	r24, r30
    27d2:	08 95       	ret
    27d4:	46 2f       	mov	r20, r22
    27d6:	47 70       	andi	r20, 0x07	; 7
    27d8:	40 5d       	subi	r20, 0xD0	; 208
    27da:	41 93       	st	Z+, r20
    27dc:	b3 e0       	ldi	r27, 0x03	; 3
    27de:	0f d0       	rcall	.+30     	; 0x27fe <__ultoa_invert+0x86>
    27e0:	c9 f7       	brne	.-14     	; 0x27d4 <__ultoa_invert+0x5c>
    27e2:	f6 cf       	rjmp	.-20     	; 0x27d0 <__ultoa_invert+0x58>
    27e4:	46 2f       	mov	r20, r22
    27e6:	4f 70       	andi	r20, 0x0F	; 15
    27e8:	40 5d       	subi	r20, 0xD0	; 208
    27ea:	4a 33       	cpi	r20, 0x3A	; 58
    27ec:	18 f0       	brcs	.+6      	; 0x27f4 <__ultoa_invert+0x7c>
    27ee:	49 5d       	subi	r20, 0xD9	; 217
    27f0:	31 fd       	sbrc	r19, 1
    27f2:	40 52       	subi	r20, 0x20	; 32
    27f4:	41 93       	st	Z+, r20
    27f6:	02 d0       	rcall	.+4      	; 0x27fc <__ultoa_invert+0x84>
    27f8:	a9 f7       	brne	.-22     	; 0x27e4 <__ultoa_invert+0x6c>
    27fa:	ea cf       	rjmp	.-44     	; 0x27d0 <__ultoa_invert+0x58>
    27fc:	b4 e0       	ldi	r27, 0x04	; 4
    27fe:	a6 95       	lsr	r26
    2800:	97 95       	ror	r25
    2802:	87 95       	ror	r24
    2804:	77 95       	ror	r23
    2806:	67 95       	ror	r22
    2808:	ba 95       	dec	r27
    280a:	c9 f7       	brne	.-14     	; 0x27fe <__ultoa_invert+0x86>
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	61 05       	cpc	r22, r1
    2810:	71 05       	cpc	r23, r1
    2812:	08 95       	ret
    2814:	9b 01       	movw	r18, r22
    2816:	ac 01       	movw	r20, r24
    2818:	0a 2e       	mov	r0, r26
    281a:	06 94       	lsr	r0
    281c:	57 95       	ror	r21
    281e:	47 95       	ror	r20
    2820:	37 95       	ror	r19
    2822:	27 95       	ror	r18
    2824:	ba 95       	dec	r27
    2826:	c9 f7       	brne	.-14     	; 0x281a <__ultoa_invert+0xa2>
    2828:	62 0f       	add	r22, r18
    282a:	73 1f       	adc	r23, r19
    282c:	84 1f       	adc	r24, r20
    282e:	95 1f       	adc	r25, r21
    2830:	a0 1d       	adc	r26, r0
    2832:	08 95       	ret

00002834 <__prologue_saves__>:
    2834:	2f 92       	push	r2
    2836:	3f 92       	push	r3
    2838:	4f 92       	push	r4
    283a:	5f 92       	push	r5
    283c:	6f 92       	push	r6
    283e:	7f 92       	push	r7
    2840:	8f 92       	push	r8
    2842:	9f 92       	push	r9
    2844:	af 92       	push	r10
    2846:	bf 92       	push	r11
    2848:	cf 92       	push	r12
    284a:	df 92       	push	r13
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	ca 1b       	sub	r28, r26
    285e:	db 0b       	sbc	r29, r27
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	09 94       	ijmp

0000286c <__epilogue_restores__>:
    286c:	2a 88       	ldd	r2, Y+18	; 0x12
    286e:	39 88       	ldd	r3, Y+17	; 0x11
    2870:	48 88       	ldd	r4, Y+16	; 0x10
    2872:	5f 84       	ldd	r5, Y+15	; 0x0f
    2874:	6e 84       	ldd	r6, Y+14	; 0x0e
    2876:	7d 84       	ldd	r7, Y+13	; 0x0d
    2878:	8c 84       	ldd	r8, Y+12	; 0x0c
    287a:	9b 84       	ldd	r9, Y+11	; 0x0b
    287c:	aa 84       	ldd	r10, Y+10	; 0x0a
    287e:	b9 84       	ldd	r11, Y+9	; 0x09
    2880:	c8 84       	ldd	r12, Y+8	; 0x08
    2882:	df 80       	ldd	r13, Y+7	; 0x07
    2884:	ee 80       	ldd	r14, Y+6	; 0x06
    2886:	fd 80       	ldd	r15, Y+5	; 0x05
    2888:	0c 81       	ldd	r16, Y+4	; 0x04
    288a:	1b 81       	ldd	r17, Y+3	; 0x03
    288c:	aa 81       	ldd	r26, Y+2	; 0x02
    288e:	b9 81       	ldd	r27, Y+1	; 0x01
    2890:	ce 0f       	add	r28, r30
    2892:	d1 1d       	adc	r29, r1
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	ed 01       	movw	r28, r26
    28a0:	08 95       	ret

000028a2 <_exit>:
    28a2:	f8 94       	cli

000028a4 <__stop_program>:
    28a4:	ff cf       	rjmp	.-2      	; 0x28a4 <__stop_program>
